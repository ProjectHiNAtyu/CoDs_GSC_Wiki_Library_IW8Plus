// S4 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "#x376847958d67972ef" ) == "mp_background" )
        return;

    level.circlevfxsizes = [ "vfx/s4/gamemode/vfx_circle_rad_500.vfx", "vfx/s4/gamemode/vfx_circle_medium.vfx", "vfx/s4/gamemode/vfx_circle_far.vfx", "vfx/s4/gamemode/vfx_circle_rad_max.vfx" ];

    foreach ( var_2, var_1 in level.circlevfxsizes )
        scripts\engine\utility::_id_0FDC( "circle_" + var_2, level.circlevfxsizes[level.circlevfxsizes.size - var_2 - 1] );

    scripts\engine\utility::_id_0FDC( "final_circle", "vfx/s4/gamemode/vfx_circle_rad_500.vfx" );
    _id_07DC::init();
    _id_07DC::_id_D854();
    var_3[0] = scripts\mp\utility\game::getgametype();
    _id_07D6::main( var_3 );

    if ( _func_0127() )
    {
        level._id_81E5 = ::_id_81E5;
        [[ level._id_81E5 ]]();
        level thread scripts\mp\utility\game::_id_C2EB();
    }
    else
    {
        scripts\mp\utility\game::_id_C2AA( scripts\mp\utility\game::getgametype(), 0, 0, 9 );
        scripts\mp\utility\game::_id_C2C1( scripts\mp\utility\game::getgametype(), 600 );
        scripts\mp\utility\game::_id_C2AD( scripts\mp\utility\game::getgametype(), 75 );
        scripts\mp\utility\game::_id_C2A9( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::_id_C2D0( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::_id_C27E( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::_id_C25D( scripts\mp\utility\game::getgametype(), 0 );
    }

    _id_FC7D();
    level.teambased = 1;
    level._id_ABAD = ::_id_ABAD;
    level._id_6D4A = ::_id_6D4A;
    level._id_AB3F = ::_id_AB3F;
    level._id_9FE8 = ::_id_ABA4;
    game["dialog"]["gametype"] = "gametype_circle";

    if ( getdvarint( "#x3af383f37c3a10748" ) )
        game["dialog"]["gametype"] = "hc_" + game["dialog"]["gametype"];
    else if ( getdvarint( "#x36c8f5946a1247e70" ) )
        game["dialog"]["gametype"] = "thirdp_" + game["dialog"]["gametype"];
}

run_circle_damage()
{
    var_0 = 5000;
    var_1 = gettime();

    while ( var_0 > 0 )
    {
        var_0 = var_0 - 2;
        waitframe();
        waitframe();
        waitframe();

        if ( gettime() - var_1 > 500 )
        {
            var_1 = gettime();

            foreach ( var_3 in level.players )
            {
                if ( distance2d( var_3.origin, level._id_9AAC ) > var_0 )
                    var_3 dodamage( 15, level._id_9AAC, var_3, var_3, "MOD_MELEE" );
            }
        }
    }
}

run_circle()
{
    for ( var_0 = level.circlevfxsizes.size - 1; var_0 >= 0; var_0-- )
    {
        var_1 = scripts\engine\utility::getfx( "circle_" + var_0 );
        var_2 = spawnfx( var_1, level._id_9AAC );
        triggerfx( var_2 );
        wait 10;

        if ( var_0 > 0 )
            var_2 delete();

        wait 1;
    }
}

_id_81E5()
{
    scripts\mp\utility\game::_id_D4E0();
    setdynamicdvar( "#x3e393be54bf28aba2", 0 );
    scripts\mp\utility\game::_id_C2AA( "circle", 0, 0, 9 );
    setdynamicdvar( "#x31410849040f59209", 1 );
    scripts\mp\utility\game::_id_C2A9( "circle", 1 );
    setdynamicdvar( "#x32c76287d0c22f16f", 1 );
    scripts\mp\utility\game::_id_C2D0( "circle", 1 );
    setdynamicdvar( "#x3e0ac4a3902563386", 0 );
    scripts\mp\utility\game::_id_C25D( "circle", 0 );
    setdynamicdvar( "#x32c15d1c20c91e93e", 0 );
}

_id_ABAD()
{
    setclientnamemode( "auto_change" );

    if ( !isdefined( game["switchedsides"] ) )
        game["switchedsides"] = 0;

    if ( game["switchedsides"] )
    {
        var_0 = game["attackers"];
        var_1 = game["defenders"];
        game["attackers"] = var_1;
        game["defenders"] = var_0;
    }

    foreach ( var_3 in level._id_EF89 )
    {
        scripts\mp\utility\game::_id_D61C( var_3, &"OBJECTIVES/CIRCLE" );

        if ( level.splitscreen )
            scripts\mp\utility\game::_id_D61A( var_3, &"OBJECTIVES/CIRCLE" );
        else
            scripts\mp\utility\game::_id_D61A( var_3, &"OBJECTIVES/CIRCLE" );

        scripts\mp\utility\game::_id_D615( var_3, &"OBJECTIVES/CIRCLE_HINT" );
    }

    if ( isdefined( level._id_8295 ) )
        [[ level._id_8295 ]]();
    else
        _id_8294();

    level thread run_circle_damage();
    level thread run_circle();
}

_id_FC7D()
{
    scripts\mp\gametypes\common::_id_FC39();
}

_id_8294()
{
    level._id_E327 = ( 0, 0, 0 );
    level._id_E324 = ( 0, 0, 0 );

    if ( isdefined( scripts\cp_mp\utility\game_utility::_id_6B18() ) )
        _id_0817::_id_D461( "BigTDM", "Crit_Frontline" );
    else
        _id_0817::_id_D461( "Default", "Crit_Frontline" );

    _id_0817::_id_113A( "mp_tdm_spawn_allies_start" );
    _id_0817::_id_113A( "mp_tdm_spawn_axis_start" );
    _id_0817::_id_1136( game["attackers"], "mp_tdm_spawn_allies_start" );
    _id_0817::_id_1136( game["defenders"], "mp_tdm_spawn_axis_start" );
    var_0 = _id_0817::_id_6D4E( "mp_tdm_spawn_allies_start" );
    var_1 = _id_0817::_id_6D4E( "mp_tdm_spawn_axis_start" );
    _id_0817::_id_C2B9( "start_attackers", var_0 );
    _id_0817::_id_C2B9( "start_defenders", var_1 );
    _id_0817::_id_1136( "allies", "mp_tdm_spawn" );
    _id_0817::_id_1136( "axis", "mp_tdm_spawn" );
    _id_0817::_id_1136( "allies", "mp_tdm_spawn_secondary", 1, 1 );
    _id_0817::_id_1136( "axis", "mp_tdm_spawn_secondary", 1, 1 );
    var_2 = _id_0817::_id_6D4E( "mp_tdm_spawn" );
    var_3 = _id_0817::_id_6D4E( "mp_tdm_spawn_secondary" );
    _id_0817::_id_C2B9( "normal", var_2 );
    _id_0817::_id_C2B9( "fallback", var_3 );

    if ( istrue( level._id_F0E4 ) )
    {
        var_4 = getdvarfloat( "#x3ab5edb4c02a50335", randomfloatrange( -4096, 4096 ) );
        var_5 = getdvarfloat( "#x3ab5eda4c02a50102", randomfloatrange( -4096, 4096 ) );
        var_6 = getdvarfloat( "#x3ab5ed94c02a4fecf", randomfloatrange( 0, 512 ) );
        level._id_9AAC = ( var_4, var_5, var_6 );
    }
    else
    {
        level._id_9AAC = _id_0817::_id_5AE1( level._id_E327, level._id_E324 );
        setmapcenter( level._id_9AAC );
    }

    _id_0817::_id_0EE5();
}

_id_6D4A()
{
    var_0 = self.pers["team"];
    var_1 = undefined;

    if ( istrue( level._id_F0E4 ) )
    {
        var_2 = level._id_EF39._id_1783 * randomfloatrange( level._id_EF38 * -1.0, level._id_EF38 );
        var_3 = undefined;

        if ( var_0 == "axis" )
            var_3 = level._id_EF39._id_1773 * level._id_EF36 * -1.0;
        else
            var_3 = level._id_EF39._id_1773 * level._id_EF36;

        var_1 = spawnstruct();
        var_1.origin = level._id_9AAC + var_2 + var_3 + ( 0, 0, level._id_EF37 );
        var_1.angles = ( 0, 0, 0 );
        var_1.index = 1;
    }
    else if ( _id_0817::_id_DC06() )
    {
        if ( var_0 == game["attackers"] )
            var_1 = _id_0817::_id_6D4A( self, var_0, "start_attackers", undefined );
        else
            var_1 = _id_0817::_id_6D4A( self, var_0, "start_defenders", undefined );
    }
    else
        var_1 = _id_0817::_id_6D4A( self, var_0, "normal", "fallback" );

    return var_1;
}

_id_ABA4()
{
    self setclientomnvar( "ui_match_status_hint_text", 0 );

    if ( getdvarint( "#x3e138924b10a94dfa" ) != 0 )
        thread scripts\mp\teams::_id_ACDA();

    if ( !istrue( level._id_F0E4 ) )
        return;

    self setplayerangles( vectortoangles( level._id_9AAC - self.origin ) );
}

_id_AB3F( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    scripts\mp\gametypes\common::_id_AA89( var_0, var_1, var_2, var_3, var_4, var_5 );
}

_id_ABC0()
{
    var_0 = scripts\mp\gamescore::_id_6AA0();

    if ( game["status"] == "overtime" )
        var_0 = "forfeit";
    else if ( "tie" )
        var_0 = "overtime";

    thread scripts\mp\gamelogic::_id_52F7( var_0, game["end_reason"]["time_limit_reached"] );
}
