// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

ammo_crate_init()
{
    var_0 = spawnstruct();
    var_0.id = "_encstr_A3990BDBEF05B561FA5A488BD8";
    var_0.weaponinfo = "_encstr_826813691C902EB9B0A5507FFF574ABB61A2B1EBA3";
    var_0.modelbase = "_encstr_8F4D21A043BED8132ADF100CF5517F23F0B318C09352F0F901867119CB9AB3CB41B798";
    var_0.hintstring = &"_encstr_A99D1E687AE9287D86A4A08C2A52273AF228A6A6E9F51A92A0A88AD7A882B451";
    var_0.streakname = "_encstr_A3990BDBEF05B561FA5A488BD8";
    var_0.splashname = "_encstr_87C7111F2F75829F201BB2BA7093FC895EBFB3";
    var_0.shadername = "_encstr_A2A021367BD61C583737AFF6989AC17BA537A3D7232B0EC6DE5EAF33394B59CD8C8D2F";
    var_0.headicon = "_encstr_AD6E13B11CF51B27C2E895AF4BC6DB37F585D6B5BD";
    var_0.headiconoffset = 20;
    var_0.lifespan = 90.0;
    var_0.usexp = 50;
    var_0.onusesfx = "_encstr_A3C80F4AF0E9DFB1709519F44369C36705";
    var_0.deployedsfx = "_encstr_A3C80F4AF0E9DFB1709519F44369C36705";
    var_0.deathvfx = loadfx( "_encstr_8AE34A9E38815E1B98195FC015EF93565E7F8D8BFB63A896F527406898ADB0F6DFEBC6B28F386497AB482F0EC313303FFD0D750F0859C9317D5BB8FB402917FE565B2B9D8A27F51BB604E96B" );
    var_0.onusecallback = ::supportbox_onusedeployable;
    var_0.canusecallback = ::supportbox_canusedeployable;
    var_0.deployfunc = ::give_ammo_to_player_through_crate;
    var_0._id_120AA = "_encstr_922F1539B14DE8600392D3BB5A1B2EA0A904B1932EF480";
    var_0.usetime = 1000;
    var_0.maxhealth = 100;
    var_0.maxuses = 4;
    var_0.canreusebox = 0;
    var_0.allowmeleedamage = 1;
    var_0.damagefeedback = "_encstr_B40101";
    var_0.grenadeusefunc = ::supportbox_grenadelaunchfunc;
    var_0.ondeploycallback = scripts\cp\cp_deployablebox::supportbox_ondeploy;
    var_0.deployanimduration = scripts\cp\cp_deployablebox::supportbox_getdeployanimduration();
    level.boxsettings["_encstr_A3990BDBEF05B561FA5A488BD8"] = var_0;
    level.deployable_box["_encstr_A3990BDBEF05B561FA5A488BD8"] = [];
}

weaponswitchendedsupportbox( var_0, var_1 )
{
    if ( istrue( var_1 ) )
        thread supportbox_watchplayerweapon( var_0 );
}

tryusesupportbox( var_0, var_1 )
{
    return 1;
}

supportbox_canusedeployable( var_0 )
{
    return 1;
}

supportbox_grenadelaunchfunc( var_0 )
{
    var_1 = self gettagorigin( "_encstr_97D713BBD1BFE0A996C869808715CA98BF331BF759" );
    var_2 = 400;
    var_3 = anglestoforward( self.angles );
    var_4 = anglestoup( self.angles );
    var_4 = var_4 * 0.6;
    var_5 = vectornormalize( var_3 + var_4 );
    var_6 = var_5 * var_2;
    var_7 = magicbullet( "_encstr_84791870E738DEF3FA7DA8A692121141BF67C8200FF533D7F365", var_1, var_1 + var_6, self );
    self notify( "_encstr_9B620D8F0DC07577C551F16A3826BF", var_7 );
}

supportbox_onusedeployable( var_0 )
{
    self endon( "_encstr_8D820B49520F0EC02DDE6367EC" );

    if ( cangive_ammo() )
    {
        give_ammo_to_player_through_crate();
        return 1;
    }
    else
    {
        scripts\cp\utility::hint_prompt( "_encstr_8FEA096588A00FC855F37F", 1, 3 );
        return 0;
    }

    return 1;
}

supportbox_watchplayerweapon( var_0 )
{
    self endon( "_encstr_8D820B49520F0EC02DDE6367EC" );
    self endon( "_encstr_AB0214A177405080ABC78D89CF915D50F88D489A9FBC" );
    self notifyonplayercommand( "_encstr_A61D0E08A6E098C131CF33A5B2BB3A9A", "_encstr_8C5C0E95C2C63A5AED9BDCC6B7A30199" );
    self notifyonplayercommand( "_encstr_A61D0E08A6E098C131CF33A5B2BB3A9A", "_encstr_835C0EF00E5F3B9B32C2427B929587A2" );
    self notifyonplayercommand( "_encstr_A61D0E08A6E098C131CF33A5B2BB3A9A", "_encstr_8B5C0ECA58B1A32DDE73E6B1DBE804A6" );
    self notifyonplayercommand( "_encstr_A61D0E08A6E098C131CF33A5B2BB3A9A", "_encstr_865C0EBE0BCF1BA710C08384685B4A33" );
    var_1 = scripts\engine\utility::_id_143AE( "_encstr_9B620D8F0DC07577C551F16A3826BF", "_encstr_A61D0E08A6E098C131CF33A5B2BB3A9A", "_encstr_93C2166B057BBBAF08311F07A8639B82AFA63366768922EC" );

    if ( !isdefined( var_1 ) )
        return;

    if ( var_1 == "_encstr_A61D0E08A6E098C131CF33A5B2BB3A9A" )
        self switchtoweapon( self.lastdroppableweaponobj );

    for (;;)
    {
        var_2 = self getcurrentweapon();

        if ( var_2 != var_0.objweapon )
        {
            self notify( "_encstr_95E2216DD2631BE61DE4B20BB6F5995ADC9637A12B32AFDD4BE834AFEEB2C21CBD37AF" + var_0.weaponname );
            break;
        }

        waitframe();
    }
}

supportbox_handledamage()
{
    var_0 = level.boxsettings[self.boxtype];
}

supportbox_handledeathdamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = level.boxsettings[self.boxtype];
    var_1 notify( "_encstr_85BB142A408F7BABB0EB352C9099EF43C38022B2A029" );
}

supportbox_modifydamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflags;
    var_6 = var_4;
    var_7 = level.boxsettings[self.boxtype];
    return var_6;
}

supportbox_waittill_removeorweaponchange( var_0, var_1 )
{
    self endon( "_encstr_AD75063D571AE108" );
    self endon( "_encstr_8D820B49520F0EC02DDE6367EC" );
    level endon( "_encstr_9B1D0BC7932875276230426AA1" );
    var_2 = spawnstruct();
    thread supportbox_waittill_notify( var_0, var_2 );
    thread supportbox_waittill_notify( var_1, var_2 );
    var_2 waittill( "_encstr_BE3009989F7CABE51AAFDD", var_3, var_4 );
    var_2 notify( "_encstr_B81804322D2B" );
    var_5 = spawnstruct();
    var_5.msg = var_3;
    var_5.param = var_4;
    return var_5;
}

supportbox_waittill_notify( var_0, var_1 )
{
    self endon( "_encstr_AD75063D571AE108" );
    self endon( "_encstr_8D820B49520F0EC02DDE6367EC" );
    var_1 endon( "_encstr_B81804322D2B" );
    self waittill( var_0, var_2 );
    var_1 notify( "_encstr_BE3009989F7CABE51AAFDD", var_0, var_2 );
}

cangive_ammo()
{
    var_0 = scripts\cp\utility::getvalidtakeweapon();
    var_1 = istrue( var_0.hasalternate );
    var_2 = istrue( var_0.isalternate );

    if ( var_1 || var_2 )
    {
        if ( _id_11B44( var_0 ) )
        {
            var_3 = pressure_unstable( var_0 );

            if ( isdefined( var_3 ) )
            {
                if ( _id_11B44( var_3 ) )
                    return 0;

                return 1;
            }

            return 0;
        }
    }
    else if ( _id_11B44( var_0 ) )
        return 0;

    return 1;
}

pressure_unstable( var_0 )
{
    var_1 = var_0.basename;
    var_2 = self getweaponslistprimaries();
    var_3 = undefined;

    foreach ( var_5 in var_2 )
    {
        if ( var_5.basename == var_1 && var_5 != var_0 )
        {
            var_3 = var_5;
            break;
        }
    }

    if ( isdefined( var_3 ) )
        return var_3;
}

_id_11B44( var_0 )
{
    if ( weapontype( var_0 ) == "_encstr_96390B3F9BB7FCA569EBAB6AD5" )
        return 1;

    var_1 = self getweaponammoclip( var_0 );
    var_2 = weaponclipsize( var_0 );
    var_3 = weaponmaxammo( var_0 );

    if ( istrue( var_0.isalternate ) )
    {
        if ( isdefined( var_0.underbarrel ) && var_0.underbarrel == "_encstr_BE9708CBAB13138857AD" )
            var_3 = 0;
    }

    var_4 = self getweaponammostock( var_0 );

    if ( var_4 < var_3 || var_1 < var_2 )
        return 0;

    return 1;
}

give_ammo_to_player_through_crate()
{
    var_0 = self getweaponslistprimaries();

    foreach ( var_2 in var_0 )
    {
        if ( !scripts\cp\utility::is_valid_player() )
            continue;

        if ( weapontype( var_2 ) == "_encstr_A5450BC280BF4B604068C33187" )
            continue;

        if ( weapontype( var_2 ) == "_encstr_96390B3F9BB7FCA569EBAB6AD5" )
            continue;

        if ( isdefined( var_2.classname ) && var_2.classname == "_encstr_8C8D08671D451291C849" )
            continue;

        if ( scripts\cp\cp_weapon::is_incompatible_weapon( var_2 ) )
            continue;

        if ( _id_14546( var_2 ) )
            continue;

        if ( var_2.inventorytype == "_encstr_B4DC085639F9C2779108" )
        {
            if ( isdefined( var_2.underbarrel ) && var_2.underbarrel == "_encstr_BE9708CBAB13138857AD" )
            {
                self setweaponammoclip( var_2, weaponclipsize( var_2 ) );
                self setweaponammostock( var_2, 0 );
            }

            continue;
        }

        self givemaxammo( var_2 );
        self setweaponammoclip( var_2, 999, "_encstr_A5AD056A019C63" );
        self setweaponammoclip( var_2, 999, "_encstr_8253060E2B5FE330" );
    }

    self playlocalsound( "_encstr_B4DD11D3BDD3134731489F8FC14B396ABFCD9A" );
}

_id_14546( var_0 )
{
    var_1 = var_0.basename;

    switch ( var_1 )
    {
        case "_encstr_9B1315648431B1256020FFFFC0B8EBBB4D1D6F1F7833FB":
        case "_encstr_93BD10DAA3532F4D30DF0C12A1E857E711BB":
            return 1;
        default:
            break;
    }

    return 0;
}

adjust_clip_ammo_from_stock( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !istrue( var_4 ) )
    {
        var_5 = weaponmaxammo( var_1 );
        var_6 = var_0 getweaponammostock( var_1 );
        var_7 = var_5 - var_6;
        var_8 = scripts\engine\utility::ter_op( var_7 >= var_3, var_6 + var_3, var_5 );
        var_0 setweaponammostock( var_1, var_8 );
    }

    var_9 = var_0 getweaponammoclip( var_1, var_2 );
    var_10 = var_3 - var_9;
    var_11 = min( var_9 + var_10, var_3 );
    var_0 setweaponammoclip( var_1, int( var_11 ), var_2 );
}

test_ammo_crate( var_0 )
{
    var_0 thread watch_dpad();
    var_0 notify( "_encstr_A13E0A73CAEEAFC1F6BBB2C9", "_encstr_95C81377364865C02D0BFF21F53B17C30A083BDA67" );
    scripts\cp\utility::set_crafted_inventory_item( "_encstr_95C81377364865C02D0BFF21F53B17C30A083BDA67", ::give_crafted_ammo_crate, var_0 );
}

give_crafted_ammo_crate( var_0, var_1 )
{
    var_1 thread watch_dpad();
    var_1 notify( "_encstr_A13E0A73CAEEAFC1F6BBB2C9", "_encstr_95C81377364865C02D0BFF21F53B17C30A083BDA67" );
    scripts\cp\utility::set_crafted_inventory_item( "_encstr_95C81377364865C02D0BFF21F53B17C30A083BDA67", ::give_crafted_ammo_crate, var_1 );
}

watch_dpad()
{
    self endon( "_encstr_8D820B49520F0EC02DDE6367EC" );
    self endon( "_encstr_AD75063D571AE108" );
    self endon( "_encstr_8A1F0E932BD6EDB3B2AF9B5937479C97" );
    self notify( "_encstr_AF3213D3968133BB1FB8939AA0C7B3E7DBF6504D2E" );
    self endon( "_encstr_AF3213D3968133BB1FB8939AA0C7B3E7DBF6504D2E" );
    self notifyonplayercommand( "_encstr_82430F72B539A4808DF3A10F85263922E8", "_encstr_835C0EF00E5F3B9B32C2427B929587A2" );

    for (;;)
    {
        self waittill( "_encstr_82430F72B539A4808DF3A10F85263922E8" );

        if ( istrue( self.iscarrying ) )
            continue;

        if ( istrue( self.linked_to_coaster ) )
            continue;

        if ( isdefined( self.allow_carry ) && self.allow_carry == 0 )
            continue;

        if ( scripts\cp\utility::is_valid_player() )
            break;
    }
}
