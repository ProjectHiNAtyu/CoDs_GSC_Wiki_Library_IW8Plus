// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

preventpainforashorttime()
{
    self endon( "_encstr_A7C81018BC79F1B7A16055B9589BD7020380" );
    self endon( "_encstr_AD75063D571AE108" );
    self.flashbangimmunity = 1;
    self.longdeathstarting = 1;
    self.a.doinglongdeath = 1;
    self notify( "_encstr_93530B91C713410FAFEAC86852" );
    self.health = 10000;
    self.threatbias = self.threatbias - 2000;
    anim.nextcrawlingpaintime = gettime() + 3000;
    anim.nextcrawlingpaintimefromlegdamage = gettime() + 3000;
    wait 0.75;

    if ( self.health > 1 )
        self.health = 1;

    wait 0.05;
    self.longdeathstarting = undefined;
    self.a.mayonlydie = 1;
    wait 1.0;

    if ( isdefined( level.player ) && distancesquared( self.origin, level.player.origin ) < 1048576 )
    {
        anim.numdeathsuntilcrawlingpain = randomintrange( 10, 30 );
        anim.nextcrawlingpaintime = gettime() + randomintrange( 15000, 60000 );
    }
    else
    {
        anim.numdeathsuntilcrawlingpain = randomintrange( 5, 12 );
        anim.nextcrawlingpaintime = gettime() + randomintrange( 5000, 25000 );
    }

    anim.nextcrawlingpaintimefromlegdamage = gettime() + randomintrange( 7000, 13000 );
}

dyingcrawlbackaim( var_0 )
{
    self endon( "_encstr_AD75063D571AE108" );
    self notify( "_encstr_836A198F28742F850A7322F7B8AE4D9227F06F464993D018679BB2" );
    self endon( "_encstr_836A198F28742F850A7322F7B8AE4D9227F06F464993D018679BB2" );

    if ( isagent( self ) )
        return;

    var_1 = scripts\asm\asm::asm_getxanim( var_0, scripts\asm\asm::asm_lookupanimfromalias( var_0, "_encstr_91E506B02DDA7D43" ) );
    var_2 = scripts\asm\asm::asm_getxanim( var_0, scripts\asm\asm::asm_lookupanimfromalias( var_0, "_encstr_B8E5069E731339E6" ) );
    var_3 = scripts\asm\asm::asm_getxanim( var_0, scripts\asm\asm::asm_lookupanimfromalias( var_0, "_encstr_9B290BA29801C7B3391FBEB725" ) );
    var_4 = scripts\asm\asm::asm_getxanim( var_0, scripts\asm\asm::asm_lookupanimfromalias( var_0, "_encstr_BEDE0BE2D8418773F9DF7E77E5" ) );
    wait 0.05;
    self aisetanimlimited( var_1, 1, 0 );
    self aisetanimlimited( var_2, 1, 0 );
    var_5 = 0;

    for (;;)
    {
        var_6 = _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::getyawtoenemy();
        var_7 = angleclamp180( var_6 - var_5 );

        if ( abs( var_7 ) > 3 )
            var_7 = scripts\engine\utility::sign( var_7 ) * 3;

        var_6 = angleclamp180( var_5 + var_7 );

        if ( var_6 < 0 )
        {
            if ( var_6 < -45.0 )
                var_6 = -45.0;

            var_8 = var_6 / -45.0;
            self setanim( var_3, var_8, 0.05 );
            self setanim( var_4, 0, 0.05 );
        }
        else
        {
            if ( var_6 > 45.0 )
                var_6 = 45.0;

            var_8 = var_6 / 45.0;
            self setanim( var_4, var_8, 0.05 );
            self setanim( var_3, 0, 0.05 );
        }

        var_5 = var_6;
        wait 0.05;
    }
}

setupaiming( var_0 )
{
    var_1 = scripts\asm\asm::asm_lookupanimfromalias( var_0, "_encstr_92280BD7A97F511237570B4862" );
    self aiclearanim( var_1, 0.2 );

    if ( isdefined( self.a.bdyingbackidleandshootsetup ) )
        return;

    thread dyingcrawlbackaim( var_0 );
    self.a.bdyingbackidleandshootsetup = 1;
}

isaimedsomewhatatenemy()
{
    var_0 = self.enemy getshootatpos();
    var_1 = self getmuzzleangle();
    var_2 = vectortoangles( var_0 - self getmuzzlepos() );
    var_3 = scripts\engine\utility::absangleclamp180( var_1[1] - var_2[1] );

    if ( var_3 > anim.painyawdifffartolerance )
    {
        if ( distancesquared( self geteye(), var_0 ) > anim.painyawdiffclosedistsq || var_3 > anim.painyawdiffclosetolerance )
            return 0;
    }

    return scripts\engine\utility::absangleclamp180( var_1[0] - var_2[0] ) <= anim.painpitchdifftolerance;
}

dodyingcrawlbloodsmear()
{
    self endon( "_encstr_AD75063D571AE108" );
    var_0 = "_encstr_83890D94A8AF0B79D830139788913A";
    var_1 = "_encstr_A2B40B8E2C3B7DDB274B9D4B37";
    var_2 = 6;
    var_3 = level._effect["_encstr_BD191BDB5DB0637373CDA229695D7F1B509F522C8F186FF726189AF2B3"];

    if ( isdefined( self.a.crawl_fx_rate ) )
        var_2 = self.a.crawl_fx_rate;

    if ( isdefined( self.a.crawl_fx ) )
        var_3 = level._effect[self.a.crawl_fx];

    while ( var_2 )
    {
        var_4 = self gettagorigin( var_0 );
        var_5 = self gettagangles( var_1 );
        var_6 = anglestoright( var_5 );
        var_7 = anglestoforward( ( 270, 0, 0 ) );
        playfx( var_3, var_4, var_7, var_6 );
        wait( var_2 );
    }
}

iscrawldeltaallowed( var_0 )
{
    if ( isdefined( self.a.force_num_crawls ) )
        return 1;

    return isanimdeltaallowed( var_0 );
}

isenemyingeneraldirection( var_0 )
{
    if ( isdefined( self.forcelongdeath ) && self.forcelongdeath == 4 )
        return 1;

    if ( !isdefined( self.enemy ) )
        return 0;

    var_1 = vectornormalize( self.enemy getshootatpos() - self geteye() );
    return vectordot( var_1, var_0 ) > 0.707;
}

longdeathkillme( var_0, var_1, var_2 )
{
    killme();
}

killme()
{
    var_0 = anglestoforward( self.angles );
    var_1 = self.origin + 12 * var_0;

    if ( isdefined( self.last_dmg_player ) )
        self kill( var_1, self.last_dmg_player );
    else
        self kill( var_1 );
}

startdyingcrawlbackaimsoon( var_0 )
{
    self endon( var_0 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    wait 0.1;

    if ( isdefined( self.a.bdyingbackidleandshootsetup ) )
        return;

    thread dyingcrawlbackaim( var_0 );
    self.a.bdyingbackidleandshootsetup = 1;
}

handlebackcrawlnotetracks( var_0, var_1, var_2 )
{
    var_3 = 0;

    if ( !isdefined( self.bdoingbloodsmear ) && issubstr( var_1, "_encstr_B692097DD7AF789C2F6210" ) )
        thread dodyingcrawlbloodsmear();
    else if ( var_1 == "_encstr_9ACB0BA52026FDD7A3504B6941" )
    {
        if ( !_encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::canseeenemy() )
            return 1;

        if ( !isaimedsomewhatatenemy() )
            return 1;

        _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::shootenemywrapper();
        return 1;
    }
    else if ( var_1 == "_encstr_8AD50EA2E4B37BA8F998E3A8BE5F3D41" )
    {
        thread startdyingcrawlbackaimsoon( var_0 );
        return 0;
    }
    else if ( var_1 == "_encstr_88780599B4E495" )
    {
        _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::shootenemywrapper();
        return 1;
    }
    else if ( var_1 == "_encstr_B6B30A278FC7F078673A0B11" )
        return 1;

    return 0;
}

choosecrawlingpaintransitionanim( var_0, var_1, var_2 )
{
    if ( !isdefined( self.a.crawlingpaintransanim ) )
    {
        var_3 = self.currentpose;

        if ( !scripts\asm\asm::asm_hasalias( var_1, var_3 ) )
        {
            self.a.crawlingpaintransanim = undefined;
            return self.a.crawlingpaintransanim;
        }

        self.a.crawlingpaintransanim = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 );
    }

    return self.a.crawlingpaintransanim;
}

choosestumblingpainanim( var_0, var_1, var_2 )
{
    if ( !isdefined( self.a.stumblingpainalias ) )
    {
        var_3 = "_encstr_96190439577A";
        var_4 = "_encstr_8B4C024C";

        if ( !self.leghit )
        {
            var_3 = "_encstr_AB18048F0348";

            if ( 45 < self.damageyaw && self.damageyaw < 135 )
                var_4 = "_encstr_A54C0259";
            else if ( -135 < self.damageyaw && self.damageyaw < -45 )
                var_4 = "_encstr_844C029C";
            else if ( -45 < self.damageyaw && self.damageyaw < 45 )
            {

            }
        }

        self.a.stumblingpainalias = var_3 + "_encstr_BA4C02DF" + var_4;
    }

    var_5 = scripts\asm\asm::asm_getallanimindicesforalias( var_1, self.a.stumblingpainalias );

    if ( isarray( var_5 ) )
    {
        if ( !isdefined( self.a.stumblingpainanimindex ) )
            self.a.stumblingpainanimindex = randomint( var_5.size );

        var_5 = var_5[self.a.stumblingpainanimindex];
    }

    return var_5;
}

playdyingcrawl( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );

    if ( isdefined( self.a.force_num_crawls ) )
        var_3 = self.a.force_num_crawls;
    else
        var_3 = randomintrange( 1, 5 );

    var_4 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_5 = scripts\asm\asm::asm_getxanim( var_1, var_4 );
    self aisetanim( var_1, var_4 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_5 );

    for ( var_6 = 0; var_6 < var_3; var_6++ )
    {
        if ( !iscrawldeltaallowed( var_5 ) )
            break;

        if ( isdefined( self.custom_crawl_sound ) )
            self playsound( self.custom_crawl_sound );

        for (;;)
        {
            var_7 = scripts\asm\asm::asm_donotetracks( var_0, var_1, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );

            if ( var_7 == "_encstr_B6B30A278FC7F078673A0B11" )
                break;
        }
    }

    scripts\asm\asm::asm_fireevent( var_0, "_encstr_B6CF1146BC2DE63B7DC69CC2BB1B7D46B77395" );
}

playdyingcrawlback( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );

    if ( isdefined( self.enemy ) )
        scripts\common\utility::lookatentity( self.enemy );

    if ( isdefined( self.a.force_num_crawls ) )
        var_3 = self.a.force_num_crawls;
    else
        var_3 = randomintrange( 1, 5 );

    setupaiming( var_1 );
    var_4 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_5 = scripts\asm\asm::asm_getxanim( var_1, var_4 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_5 );
    self aisetanim( var_1, var_4 );

    for ( var_6 = 0; var_6 < var_3; var_6++ )
    {
        if ( !iscrawldeltaallowed( var_5 ) )
            break;

        for (;;)
        {
            var_7 = scripts\asm\asm::asm_donotetrackswithinterceptor( var_0, var_1, ::handlebackcrawlnotetracks );

            if ( var_7 == "_encstr_961804BD954A" )
                break;
        }
    }

    self.desiredtimeofdeath = gettime() + randomintrange( 4000, 20000 );
    scripts\asm\asm::asm_fireevent( var_0, "_encstr_936016F98393E24FD8F59783A391DB0BC978FC4720C05605" );
}

playcrawlflipover( var_0, var_1, var_2 )
{
    scripts\common\utility::lookatentity();
    scripts\asm\asm::asm_playanimstatewithnotetrackinterceptor( var_0, var_1, ::handlebackcrawlnotetracks );
}

playcrawlingpaintransition( var_0, var_1, var_2 )
{
    setearlyfinishtime();

    if ( istrue( self.forcelongdeathskipintroanim ) )
    {
        if ( !scripts\asm\asm::asm_eventfired( var_0, "_encstr_961804BD954A" ) )
            scripts\asm\asm::asm_fireevent( var_0, "_encstr_961804BD954A" );

        return;
    }

    thread preventpainforashorttime();
    scripts\common\utility::lookatentity();
    scripts\asm\asm::asm_playanimstatewithnotetrackinterceptor( var_0, var_1, ::handlebackcrawlnotetracks );
}

setearlyfinishtime()
{
    if ( !isdefined( self.asm.longdeathanims ) )
        self.asm.longdeathanims = spawnstruct();

    self.asm.longdeathanims.earlyfinishtime = gettime() + 2000;
}

playdyingbackshoot( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    setupaiming( var_1 );

    for (;;)
    {
        var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
        var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );
        scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_4 );
        self aisetanim( var_1, var_3 );
        var_5 = scripts\asm\asm::asm_donotetrackswithinterceptor( var_0, var_1, ::handlebackcrawlnotetracks );

        if ( var_5 == "_encstr_961804BD954A" )
        {
            if ( !scripts\asm\asm::asm_eventfired( var_0, "_encstr_961804BD954A" ) )
                scripts\asm\asm::asm_fireevent( var_0, "_encstr_961804BD954A" );
        }
    }
}

choosedyingbackidle( var_0, var_1, var_2 )
{
    if ( istrue( self.longdeathnoncombat ) )
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_AB410AEE5FF05E3739D98AE3" );

    return scripts\asm\asm::asm_chooseanim( var_0, var_1, var_2 );
}

playdyingbackidle( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );

    if ( !istrue( self.longdeathnoncombat ) )
    {
        self.a.nextlongdeathshoottime = gettime() + randomintrange( 500, 1000 );
        setupaiming( var_1 );
    }

    var_3 = undefined;

    for (;;)
    {
        var_4 = scripts\asm\asm::asm_getanim( var_0, var_1 );
        var_5 = scripts\asm\asm::asm_getxanim( var_1, var_4 );

        if ( !isdefined( var_3 ) || var_4 != var_3 )
        {
            self aisetanim( var_1, var_4 );
            var_3 = var_4;
        }

        scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_5 );
        var_3 = var_4;
        scripts\asm\asm::asm_donotetrackssingleloop( var_0, var_1, var_5, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );
    }
}

playstumblingpaintransition( var_0, var_1, var_2 )
{
    thread preventpainforashorttime();
    setearlyfinishtime();
    scripts\common\utility::lookatentity();
    scripts\asm\asm::asm_playanimstate( var_0, var_1 );
}

playstumblingwander( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = "_encstr_AFDC1E37A3576B98D8A5E69DFA0EB04BB9EB1BF663C6580E6ECAAF32B22CA31A";
    var_5 = scripts\asm\asm::asm_getanim( var_0, var_4 );
    var_6 = scripts\asm\asm::asm_getxanim( var_4, var_5 );
    var_7 = scripts\asm\asm::asm_getxanim( var_1, var_3 );

    if ( !animhasnotetrack( var_7, "_encstr_B6B30A278FC7F078673A0B11" ) )
    {
        scripts\asm\asm::asm_fireevent( var_0, "_encstr_A9081168DB50855F9C01D27AE976277F085DF5" );
        return;
    }

    var_8 = getmovedelta( var_6 );
    var_9 = randomintrange( 1, 3 );
    self aisetanim( var_1, var_3 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_7 );

    while ( var_9 > 0 )
    {
        var_10 = self localtoworldcoords( var_8 );

        if ( !self maymovetopoint( var_10 ) )
            break;

        for (;;)
        {
            var_11 = scripts\asm\asm::asm_donotetracks( var_0, var_1, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );

            if ( var_11 == "_encstr_B6B30A278FC7F078673A0B11" )
                break;
        }

        var_9--;
    }

    scripts\asm\asm::asm_fireevent( var_0, "_encstr_A9081168DB50855F9C01D27AE976277F085DF5" );
}

hasbeenhitwithemp( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.isempd ) && self.isempd )
        return 1;

    return 0;
}

shouldflipover( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.isempd ) && self.isempd )
        return 0;

    if ( isenemyingeneraldirection( anglestoforward( self.angles ) * -1 ) && self.bulletsinclip > 0 )
        return 1;

    return 0;
}

shouldendlongdeath( var_0, var_1, var_2, var_3 )
{
    if ( shouldfinishlongdeath() )
        return 1;

    if ( istrue( self.longdeathnoncombat ) )
        return 0;

    if ( !isenemyingeneraldirection( anglestoforward( self.angles ) ) || self.bulletsinclip <= 0 )
        return 1;

    if ( isdefined( self.isempd ) && self.isempd )
        return 1;

    if ( isdefined( self.desiredtimeofdeath ) )
        return gettime() > self.desiredtimeofdeath;

    return 0;
}

shouldattemptcrawlingpain( var_0, var_1, var_2, var_3 )
{
    scripts\asm\asm::asm_getanim( var_0, var_2 );

    if ( !isdefined( self.a.crawlingpaintransanim ) )
        return 0;

    var_4 = scripts\asm\asm::asm_getxanim( var_2, self.a.crawlingpaintransanim );

    if ( !iscrawldeltaallowed( var_4 ) )
    {
        self.a.crawlingpaintransanim = undefined;
        return 0;
    }

    return 1;
}

isonornearstairs()
{
    if ( self.stairsstate != "_encstr_8BBA05185F8B99" )
        return 1;

    return 0;
}

shoulddoanylongdeath( var_0, var_1, var_2, var_3 )
{
    setdvarifuninitialized( "_encstr_91A8132646BB2759FF4398504307909F446F972D1C", 0 );

    if ( self.a.disablelongdeath || self.diequietly || self.damageshield || isdefined( self.deathanim ) )
        return 0;

    if ( isonornearstairs() )
        return 0;

    if ( isdefined( self.a.onback ) )
        return 0;

    if ( isdefined( self.deathfunction ) )
        return 0;

    if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::isusingsidearm() && !istrue( self.longdeathwithsidearm ) )
        return 0;

    if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_8A1804DAAB75", "_encstr_A1BD0B9C96D9D0A3F51A169B19", "_encstr_BDB30AC6CA66A3FAA158CD23" ) )
        return 0;

    self.leghit = scripts\engine\utility::damagelocationisany( "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A", "_encstr_95E80A8D59CCD1F533DBED3A", "_encstr_8ECF0B734B47E3AB67AD07909B" );
    var_4 = getdvarint( "_encstr_91A8132646BB2759FF4398504307909F446F972D1C", 0 );

    if ( var_4 != 0 )
        self.forcelongdeath = var_4;

    if ( isdefined( self.forcelongdeath ) && self.forcelongdeath >= 1 )
        return 1;

    if ( !self isatvalidlongdeathspot() )
        return 0;

    if ( self.leghit && self.health < self.maxhealth * 0.4 )
    {
        if ( gettime() < anim.nextcrawlingpaintimefromlegdamage )
            return 0;
    }
    else
    {
        if ( anim.numdeathsuntilcrawlingpain > 0 )
            return 0;

        if ( gettime() < anim.nextcrawlingpaintime )
            return 0;
    }

    foreach ( var_6 in level.players )
    {
        if ( distancesquared( self.origin, var_6.origin ) < 30625 )
            return 0;
    }

    return 1;
}

shouldattemptstumblingpain( var_0 )
{
    if ( self.currentpose != "_encstr_A5AD069B231F0BAF" )
        return 0;

    var_1 = 20;

    if ( isdefined( self.forcelongdeath ) )
    {
        switch ( self.forcelongdeath )
        {
            case 2:
                var_1 = 100;
                break;
            case 4:
            case 3:
                return 0;
        }
    }

    if ( randomint( 100 ) > var_1 )
        return 0;

    var_2 = 0;

    if ( !var_0 )
    {
        var_2 = scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A", "_encstr_9B7A0CF35815C3971660B7CF306B" );

        if ( !var_2 )
            return 0;
    }

    var_3 = 0;
    var_4 = "_encstr_96190439577A";
    var_5 = "_encstr_8B4C024C";

    if ( var_0 )
        var_3 = 200;
    else
    {
        var_4 = "_encstr_AB18048F0348";
        var_3 = 128;

        if ( 45 < self.damageyaw && self.damageyaw < 135 )
            var_5 = "_encstr_A54C0259";
        else if ( -135 < self.damageyaw && self.damageyaw < -45 )
            var_5 = "_encstr_844C029C";
        else if ( -45 < self.damageyaw && self.damageyaw < 45 )
            return 0;
    }

    switch ( var_5 )
    {
        case "_encstr_8B4C024C":
            var_6 = anglestoforward( self.angles );
            var_7 = self.origin - var_6 * var_3;
            break;
        case "_encstr_A54C0259":
            var_8 = anglestoright( self.angles );
            var_7 = self.origin - var_8 * var_3;
            break;
        case "_encstr_844C029C":
            var_8 = anglestoright( self.angles );
            var_7 = self.origin + var_8 * var_3;
            break;
        default:
            return 0;
    }

    if ( !isdefined( self.forcelongdeath ) || self.forcelongdeath != 2 )
    {
        if ( !self maymovetopoint( var_7 ) )
            return 0;
    }

    return 1;
}

shoulddostumblinglongdeath( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.forcelongdeath ) && self.forcelongdeath == 2 )
        return 1;

    if ( usingnewlongdeaths() )
        return 0;

    if ( shouldattemptstumblingpain( self.leghit ) )
        return 1;

    return 0;
}

shoulddocrawlingbacklongdeath( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.forcelongdeath ) && self.forcelongdeath == 4 )
        return 1;

    if ( usingnewlongdeaths() )
        return 0;

    if ( !isenemyingeneraldirection( anglestoforward( self.angles ) ) || self.bulletsinclip <= 0 )
        return 0;

    if ( shouldattemptcrawlingpain( var_0, var_1, var_2, var_3 ) )
        return 1;

    return 0;
}

shoulddocrawlingonbellylongdeath( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.forcelongdeath ) && ( self.forcelongdeath == 2 || self.forcelongdeath == 3 ) )
        return 1;

    if ( self.currentpose == "_encstr_922406F1A6FD5E05" )
        return 0;

    if ( usingnewlongdeaths() )
        return 0;

    if ( self.a.movement == "_encstr_B419059BD17BE0" )
    {
        if ( randomint( 100 ) > 20 )
            return 0;
        else if ( abs( self.damageyaw ) > 90 )
            return 0;
    }
    else if ( abs( self getmotionangle() ) > 90 )
        return 0;

    return shouldattemptcrawlingpain( var_0, var_1, var_2, var_3 );
}

shoulddodyingbackcrawl( var_0, var_1, var_2, var_3 )
{
    return !istrue( self.skipdyingbackcrawl );
}

shoulddodyingcrawl( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.forcelongdeath ) && self.forcelongdeath == 4 )
        return 1;

    if ( self.currentpose == "_encstr_922406F1A6FD5E05" )
        return 1;

    if ( self.a.movement == "_encstr_B419059BD17BE0" )
    {
        if ( randomint( 100 ) <= 20 )
            return 1;
        else if ( abs( self.damageyaw ) > 90 )
            return 1;
    }
    else if ( abs( self getmotionangle() ) > 90 )
        return 1;

    if ( self.currentpose != "_encstr_922406F1A6FD5E05" )
    {
        var_4 = scripts\asm\asm::asm_getanim( var_0, var_2 );
        var_5 = scripts\asm\asm::asm_getxanim( var_2, var_4 );

        if ( !iscrawldeltaallowed( var_5 ) )
            return 0;
    }

    return 1;
}

longdeathshouldshoot( var_0, var_1, var_2, var_3 )
{
    if ( istrue( self.longdeathnoncombat ) )
        return 0;

    if ( isdefined( self.a.nextlongdeathshoottime ) )
    {
        if ( gettime() < self.a.nextlongdeathshoottime )
            return 0;
    }

    if ( !isdefined( self.enemy ) )
        return 0;

    if ( !_encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::canseeenemy() )
        return 0;

    if ( !isaimedsomewhatatenemy() )
        return 0;

    return 1;
}

doesstumblingpainstatehavealias( var_0, var_1, var_2, var_3 )
{
    if ( !scripts\asm\asm::asm_hasalias( var_2, self.a.stumblingpainalias ) )
        return 0;

    var_4 = scripts\asm\asm::asm_getallanimindicesforalias( var_2, self.a.stumblingpainalias );

    if ( !isdefined( var_4 ) || !isarray( var_4 ) )
        return 0;

    if ( var_4.size <= self.a.stumblingpainanimindex )
        return 0;

    return 1;
}

getforcedlongdeathalias()
{
    if ( isdefined( self.forcelongdeath ) )
    {
        switch ( self.forcelongdeath )
        {
            case 5:
                return "_encstr_8DE30D6CF69D2B937DB1277BAE8DD0";
            case 6:
                initlongdeathgrenadepull();
                return "_encstr_8DE30D6CF69D2B937DB1277BAE8DD0";
            case 7:
                return "_encstr_96BC0CA9321B0D2861C34163F697";
            case 8:
                initlongdeathgrenadepull();
                return "_encstr_96BC0CA9321B0D2861C34163F697";
            case 9:
                return "_encstr_B80812568FA0206889F5F522A877E78367638B1C";
            case 10:
                initlongdeathgrenadepull();
                return "_encstr_B80812568FA0206889F5F522A877E78367638B1C";
            case 11:
                return "_encstr_BAAA1119AD0E5046713B5B5573590E60B14561";
            case 12:
                initlongdeathgrenadepull();
                return "_encstr_BAAA1119AD0E5046713B5B5573590E60B14561";
            case 13:
                return "_encstr_8D54137A7DAC62436F9BEB1FE3D9D8FABE1D4F1868";
            case 14:
                initlongdeathgrenadepull();
                return "_encstr_8D54137A7DAC62436F9BEB1FE3D9D8FABE1D4F1868";
            case 15:
                return "_encstr_9B7212BFEF147A5AD9534CD70858AFD3ED0B033B";
            case 16:
                initlongdeathgrenadepull();
                return "_encstr_9B7212BFEF147A5AD9534CD70858AFD3ED0B033B";
            case 17:
                return "_encstr_A5DA0E561E1CF6DC2B327D33C9DBCD8E";
            case 18:
                return "_encstr_9A6B0D87F86B470881DAF0F5D91790";
            case 19:
                return "_encstr_827D0DB20F07DE37CA467D36599947";
            case 20:
                return "_encstr_93050E3760ABC79B7B85695A7B176284";
            case 21:
                return "_encstr_81FC1A133BDB68788DF71E919A7FB096B23F9785F7F3A151A28E8168";
            case 22:
                return "_encstr_81FC1A133BDB68788DF71E919A7FB096B23F9785F7F3A151A28E8168";
            case 23:
                return "_encstr_A9BF1B520A3FB7D238D17F4BD5401BDF6B864AABB1147301F8CB745CBB";
            case 24:
                self.asm.longdeathanims.mercytransitionenabled = 1;
                self.asm.longdeathanims.bellycrawl = 1;
                return "_encstr_A9BF1B520A3FB7D238D17F4BD5401BDF6B864AABB1147301F8CB745CBB";
            case 25:
                return "_encstr_882C1A2B1E1CBDE65991AF6C9CDBAE6C1A7D8D9316DDC6EBC6AC663A";
            case 26:
                return "_encstr_882C1A2B1E1CBDE65991AF6C9CDBAE6C1A7D8D9316DDC6EBC6AC663A";
            case 27:
                return "_encstr_BAC91BB8E058CA0B28E0415BAE9D7DD361C7488AA9E7D9A71B89811B53";
            case 28:
                return "_encstr_BAC91BB8E058CA0B28E0415BAE9D7DD361C7488AA9E7D9A71B89811B53";
            case 29:
                return "_encstr_AB32197B53B3B720A5DF26BBC38980CDF997CDFB979AC090F976A8";
            case 30:
                return "_encstr_AB32197B53B3B720A5DF26BBC38980CDF997CDFB979AC090F976A8";
            case 31:
                return "_encstr_8F1B1ACD9BAB1F4253B079B3D8B3FDCBA68E4241B470974E0BC852EB";
            case 32:
                self.asm.longdeathanims.mercytransitionenabled = 1;
                self.asm.longdeathanims.bellycrawl = 1;
                return "_encstr_8F1B1ACD9BAB1F4253B079B3D8B3FDCBA68E4241B470974E0BC852EB";
            case 33:
                return "_encstr_A68519D28ABF3752B851FFDB59B05D437081DB1AF3193F4D404DEC";
            case 34:
                return "_encstr_A68519D28ABF3752B851FFDB59B05D437081DB1AF3193F4D404DEC";
            case 35:
                return "_encstr_B1E41A593CC1B737AC8CD7E6A316DC19AF1B9C58EE8DFA272DD98647";
            case 36:
                return "_encstr_B1E41A593CC1B737AC8CD7E6A316DC19AF1B9C58EE8DFA272DD98647";
            case 37:
                self.asm.longdeathanims.shootenabled = 1;
                return "_encstr_AD5D1AB21E83DBE6AC23EBDCE8589B19FAD89C2CDD1BD7DC43BDDB1D";
            case 38:
                self.asm.longdeathanims.shootenabled = 1;
                return "_encstr_84BE1BF05BC23F8B7F94584E7AAFB3EF2CB148F0625B41460FB058B054";
            default:
                return "_encstr_A5DA0E561E1CF6DC2B327D33C9DBCD8E";
        }
    }
}

shoulddoforcedmercy()
{
    switch ( self.forcelongdeath )
    {
        case 36:
        case 34:
        case 32:
        case 30:
        case 28:
        case 26:
        case 24:
        case 22:
            return 1;
        default:
            return 0;
    }
}

isforcingspecificlongdeath()
{
    return isdefined( self.forcelongdeath ) && self.forcelongdeath > 1;
}

shoulddomercy( var_0, var_1, var_2, var_3 )
{
    if ( !istrue( self.asm.longdeathanims.mercyenabled ) )
        return 0;

    if ( isforcingspecificlongdeath() )
        return shoulddoforcedmercy();

    var_4 = anglestoforward( self.angles );

    foreach ( var_6 in level.players )
    {
        var_7 = distancesquared( self.origin, var_6.origin );

        if ( distancesquared( self.origin, var_6.origin ) > 90000 )
            continue;

        var_8 = vectornormalize( var_6.origin - self.origin );

        if ( istrue( self.asm.longdeathanims.bellycrawl ) )
        {
            if ( vectordot( var_8, var_4 ) > -0.707 )
                continue;
        }
        else if ( vectordot( var_8, var_4 ) < 0.707 )
            continue;

        var_9 = anglestoforward( var_6.angles );

        if ( vectordot( var_9, var_8 ) < -0.707 )
            return 1;
    }

    return 0;
}

shoulddoshootinglongdeath( var_0, var_1, var_2, var_3 )
{
    if ( istrue( self.asm.longdeathanims.shootforced ) )
        return 1;

    if ( !istrue( self.asm.longdeathanims.shootenabled ) )
        return 0;

    if ( istrue( self.longdeathnoncombat ) )
        return 0;

    return 1;
}

shoulddomercytransition( var_0, var_1, var_2, var_3 )
{
    return istrue( self.asm.longdeathanims.mercytransitionenabled );
}

shoulddofinaldeath( var_0, var_1, var_2, var_3 )
{
    return gettime() > self.asm.longdeathanims.loopendtime;
}

longdeathfinal( var_0, var_1, var_2 )
{
    self.asm.longdeathanims.alias = self.asm.longdeathanims.alias + "_encstr_963807A8DA03FDA788";
    self.asm.longdeathanims.bledout = 1;
    killme();
}

playlongdeathintro( var_0, var_1, var_2 )
{
    thread preventpainforashorttime();
    scripts\asm\soldier\death::stop_sounds();

    if ( istrue( self.forcelongdeathskipintroanim ) )
    {
        if ( !scripts\asm\asm::asm_eventfired( var_0, "_encstr_961804BD954A" ) )
            scripts\asm\asm::asm_fireevent( var_0, "_encstr_961804BD954A" );

        return;
    }

    setearlyfinishtime();
    playlongdeathanim( var_0, var_1 );
}

playlongdeathmercy( var_0, var_1, var_2 )
{
    playlongdeathanim( var_0, var_1 );
}

chooseanimlongdeath( var_0, var_1, var_2 )
{
    var_3 = self.asm.longdeathanims.alias;

    if ( !scripts\asm\asm::asm_hasalias( var_1, var_3 ) )
        return undefined;

    var_4 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 );
    return var_4;
}

longdeathmercyfinal( var_0, var_1, var_2 )
{
    killme();
}

playlongdeathidle( var_0, var_1, var_2 )
{
    if ( istrue( self.asm.longdeathanims.grenadepullenabled ) )
        self.asm.longdeathanims.grenadepulltime = gettime() + self.asm.longdeathanims.grenadepulltimer;

    if ( isdefined( self.asm.longdeathanims.idletimeout ) )
        self.asm.longdeathanims.loopendtime = gettime() + self.asm.longdeathanims.idletimeout;

    var_3 = [[ self.asm.longdeathanims.loopfunc ]]( var_0, var_1, var_2 );

    if ( !var_3 )
    {
        self.asm.longdeathanims.loopendtime = gettime();

        if ( !scripts\asm\asm::asm_eventfired( var_0, "_encstr_961804BD954A" ) )
            scripts\asm\asm::asm_fireevent( var_0, "_encstr_961804BD954A" );
    }
}

playshootinglongdeathidle( var_0, var_1, var_2 )
{
    if ( !isdefined( self.desiredtimeofdeath ) )
        self.desiredtimeofdeath = gettime() + randomintrange( 4000, 20000 );

    self.a.nextlongdeathshoottime = gettime() + randomintrange( 500, 1000 );
    self.a._id_13B98 = gettime();
    setupaiming( var_1 );
    var_3 = [[ self.asm.longdeathanims.loopfunc ]]( var_0, var_1, var_2 );

    if ( !var_3 )
    {
        self.asm.longdeathanims.loopendtime = gettime();

        if ( !scripts\asm\asm::asm_eventfired( var_0, "_encstr_961804BD954A" ) )
            scripts\asm\asm::asm_fireevent( var_0, "_encstr_961804BD954A" );
    }
}

longdeathidlesingleloop( var_0, var_1, var_2 )
{
    return playlongdeathanim( var_0, var_1 );
}

shoulddocrawllongdeath( var_0, var_1, var_2, var_3 )
{
    if ( !usingnewlongdeaths() )
        return 0;

    if ( isforcingspecificlongdeath() )
        return self.forcelongdeath >= 21;

    if ( self.currentpose == "_encstr_922406F1A6FD5E05" )
        return 0;
    else if ( self.currentpose == "_encstr_B13D076BED70539F23" )
        return 1;

    var_4 = randomfloat( 1.0 );
    return var_4 < 0.6;
}

shoulddocoverlongdeath( var_0, var_1, var_2, var_3 )
{
    if ( !usingnewlongdeaths() )
        return 0;

    if ( isforcingspecificlongdeath() )
        return self.forcelongdeath >= 5 && self.forcelongdeath <= 16;

    var_4 = scripts\asm\asm_bb::bb_getcovernode();

    if ( !isdefined( var_4 ) )
        return 0;

    if ( !isdefined( self._blackboard.covernode.type ) )
        return 0;

    if ( isdefined( self._blackboard.coverstate ) && self._blackboard.coverstate == "_encstr_8E2508591EE07BE6B246" )
        return 0;

    var_5 = scripts\asm\shared\utility::getnodeforwardyaw( var_4 );
    var_6 = self.angles[1];
    var_7 = 5;

    if ( abs( var_5 - var_6 ) > var_7 )
        return 0;

    return self._blackboard.covernode.type != "_encstr_AF7A0CE15F5EDDE38968D2FF2050";
}

shoulddoexposedlongdeath( var_0, var_1, var_2, var_3 )
{
    if ( !usingnewlongdeaths() )
        return 0;

    if ( self.currentpose == "_encstr_922406F1A6FD5E05" )
        return 0;

    if ( isforcingspecificlongdeath() )
        return self.forcelongdeath >= 17 && self.forcelongdeath <= 20;

    return 1;
}

choosecrawllongdeathanims( var_0, var_1, var_2 )
{
    self.asm.longdeathanims = spawnstruct();
    self.asm.longdeathanims.mercyenabled = 1;
    self.asm.longdeathanims.alias = getcrawllongdeathalias();
    self.asm.longdeathanims.idletimeout = 4000;
    self.asm.longdeathanims.loopfunc = ::longdeathidlesingleloop;
}

getcrawllongdeathalias()
{
    if ( isforcingspecificlongdeath() )
        return getforcedlongdeathalias();

    var_0 = "_encstr_8E2508591EE07BE6B246";

    if ( self.currentpose == "_encstr_B13D076BED70539F23" )
        var_0 = var_0 + "_encstr_AAE80859923A77033FD0";
    else
        var_0 = var_0 + "_encstr_A28107EF081BF97A69";

    var_0 = var_0 + "_encstr_BDB007F5C6270BBBB1";
    var_1 = getdamagedirection();

    switch ( var_1 )
    {
        case 1:
            var_0 = var_0 + "_encstr_84850667C1A57264";
            break;
        case 0:
            var_0 = var_0 + "_encstr_B61007BECA31606B23";
            break;
        case 3:
            var_0 = var_0 + "_encstr_B2D806B9738B9797";
            break;
        default:
            var_0 = getfrontcrawldeath( var_0 );
    }

    return var_0;
}

getfrontcrawldeath( var_0 )
{
    var_1 = randomfloat( 1.0 );

    if ( var_1 < 0.4 )
    {
        self.asm.longdeathanims.shootenabled = 1;
        self.asm.longdeathanims.mercyenabled = 0;
        var_0 = var_0 + "_encstr_825E07FE23B3B8701B";
    }
    else
    {
        self.asm.longdeathanims.mercytransitionenabled = 1;
        self.asm.longdeathanims.bellycrawl = 1;
        var_0 = var_0 + "_encstr_8C1C079FF049842A03";
    }

    return var_0;
}

choosecoverlongdeathanims( var_0, var_1, var_2 )
{
    self.asm.longdeathanims = spawnstruct();
    self.asm.longdeathanims.alias = getcoverlongdeathalias();
    self.asm.longdeathanims.idletimeout = 4000;
    self.asm.longdeathanims.ignoreanimdeltacheck = 1;
    self.asm.longdeathanims.loopfunc = ::longdeathidlesingleloop;

    if ( !isforcingspecificlongdeath() )
    {
        if ( self.grenadeammo <= 0 )
            return;

        if ( nullweapon( self.grenadeweapon ) )
            return;

        if ( self.grenadeweapon.basename != "_encstr_8A78055C8D488C" )
            return;

        if ( randomfloat( 1.0 ) < 0.5 )
            initlongdeathgrenadepull();
    }
}

initlongdeathgrenadepull()
{
    self.asm.longdeathanims.grenadepullenabled = 1;
    self.asm.longdeathanims.grenadepulltimer = randomfloatrange( 1.2, 2.5 ) * 1000;
}

getcoverlongdeathalias()
{
    if ( isforcingspecificlongdeath() )
        return getforcedlongdeathalias();

    var_0 = "_encstr_B68E06D8F6B3CA27";

    if ( self._blackboard.covernode.type == "_encstr_86A30C90489C3F32B21DA9AF0178" )
        var_0 = var_0 + "_encstr_B61007BECA31606B23";
    else if ( self._blackboard.covernode.type == "_encstr_A7760B6710A315533959DF17AD" )
        var_0 = var_0 + "_encstr_84850667C1A57264";

    if ( self.currentpose == "_encstr_B13D076BED70539F23" )
        var_0 = var_0 + "_encstr_AAE80859923A77033FD0";
    else
        var_0 = var_0 + "_encstr_A28107EF081BF97A69";

    return var_0;
}

chooseexposedlongdeathanims( var_0, var_1, var_2 )
{
    self.asm.longdeathanims = spawnstruct();
    self.asm.longdeathanims.alias = getexposedlongdeathalias();
    self.asm.longdeathanims.idletimeout = 4000;
    self.asm.longdeathanims.loopfunc = ::longdeathidlesingleloop;

    if ( self.asm.longdeathanims.alias == "_encstr_A5DA0E561E1CF6DC2B327D33C9DBCD8E" )
        self.asm.longdeathanims.longdeathdirectionalfunc = ::getdamagedirectionsuffix;
}

getdamagedirection()
{
    var_0 = abs( self.damageyaw );

    if ( var_0 > 135 )
        return 2;
    else if ( var_0 < 45 )
        return 3;
    else if ( self.damageyaw < 0 )
        return 0;

    return 1;
}

getdamagedirectionsuffix()
{
    if ( !istrue( self.asm.longdeathanims.bledout ) )
    {
        var_0 = getdamagedirection();

        switch ( var_0 )
        {
            case 1:
                return "_encstr_A50703AFB1";
            case 0:
                return "_encstr_9207034F36";
            case 3:
                return "_encstr_BA07035941";
            default:
                return "_encstr_B40703E96D";
        }
    }

    return "_encstr_B40101";
}

getexposedlongdeathalias()
{
    if ( isforcingspecificlongdeath() )
        return getforcedlongdeathalias();

    var_0 = getdamagedirection();

    switch ( var_0 )
    {
        case 1:
            return "_encstr_827D0DB20F07DE37CA467D36599947";
        case 0:
            return "_encstr_93050E3760ABC79B7B85695A7B176284";
        case 3:
            return "_encstr_9A6B0D87F86B470881DAF0F5D91790";
        default:
            return "_encstr_A5DA0E561E1CF6DC2B327D33C9DBCD8E";
    }
}

shouldshootduringlongdeath( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.a.nextlongdeathshoottime ) )
    {
        if ( gettime() < self.a.nextlongdeathshoottime )
            return 0;
    }

    if ( !isdefined( self.enemy ) )
        return 0;

    if ( !_encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::canseeenemy() )
        return 0;

    if ( !isaimedsomewhatatenemy() )
        return 0;

    return 1;
}

shoulddolongdeathgrenade( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.forcelongdeath ) && self.forcelongdeath == 5 )
        return 1;

    if ( !istrue( self.asm.longdeathanims.grenadepullenabled ) )
        return 0;

    if ( !scripts\asm\asm::asm_hasalias( var_2, self.asm.longdeathanims.alias ) )
        return 0;

    return gettime() > self.asm.longdeathanims.grenadepulltime;
}

shoulddolongdeathgrenadefinal( var_0, var_1, var_2, var_3 )
{
    return gettime() > self.asm.longdeathanims.grenadedroptimer;
}

playlongdeathgrenade( var_0, var_1, var_2 )
{
    self.asm.longdeathanims.grenadedroptimer = gettime() + randomfloatrange( 1.5, 1.9 ) * 1000;
    playlongdeathanim( var_0, var_1 );
}

playlongdeathgrenadepull( var_0, var_1, var_2 )
{
    self.asm.longdeathanims.onfinaldeathcallback = ::onfinaldeathdropgrenade;
    playlongdeathanim( var_0, var_1 );
}

playlongdeathanim( var_0, var_1 )
{
    var_2 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_3 = scripts\asm\asm::asm_getxanim( var_1, var_2 );

    if ( isdefined( self.forcelongdeath ) || isanimdeltaallowed( var_3 ) )
    {
        scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_3 );
        self aisetanim( var_1, var_2 );
        scripts\asm\asm::asm_donotetracks( var_0, var_1, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );
    }
    else
        return 0;

    return 1;
}

longdeathfinalgrenade( var_0, var_1, var_2 )
{
    killme();
}

chooselongdeathdeathanim( var_0, var_1, var_2 )
{
    if ( isdefined( self.asm.longdeathanims.longdeathdirectionalfunc ) )
        self.asm.longdeathanims.alias = self.asm.longdeathanims.alias + [[ self.asm.longdeathanims.longdeathdirectionalfunc ]]();

    return chooseanimlongdeath( var_0, var_1, var_2 );
}

usingnewlongdeaths()
{
    setdvarifuninitialized( "_encstr_B860170AB9408FDA737F0327473052E70881895791206C8256", "_encstr_A34C02BB" );
    return getdvar( "_encstr_B860170AB9408FDA737F0327473052E70881895791206C8256" ) != "_encstr_934C0218";
}

isanimdeltaallowed( var_0 )
{
    if ( istrue( self.asm.longdeathanims.ignoreanimdeltacheck ) )
        return 1;

    var_1 = 30.0;
    var_2 = getmovedelta( var_0, 0, 1 );
    var_3 = length( var_2 );
    var_4 = vectornormalize( var_2 );
    var_2 = var_4 * ( var_3 + var_1 );
    var_5 = self localtoworldcoords( var_2 );

    if ( !checkstairsoffsetpoint( var_5 ) )
        return 0;

    return self maymovetopoint( var_5 );
}

checkstairsoffsetpoint( var_0 )
{
    return self isatvalidlongdeathspot( var_0 );
}

canplaychosenlongdeath( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\asm\asm::asm_getanim( var_0, var_2, var_3 );

    if ( !isdefined( var_4 ) )
        return 0;

    var_5 = scripts\asm\asm::asm_getxanim( var_2, var_4 );

    if ( !istrue( self.forcelongdeath ) && !isanimdeltaallowed( var_5 ) )
    {
        self.asm.longdeathanims = undefined;
        return 0;
    }

    return 1;
}

playlongdeathfinaldeath( var_0, var_1, var_2 )
{
    if ( isdefined( self.asm.longdeathanims.onfinaldeathcallback ) )
        [[ self.asm.longdeathanims.onfinaldeathcallback ]]();

    scripts\asm\soldier\death::playdeathanim( var_0, var_1, var_2 );
}

onfinaldeathdropgrenade()
{
    if ( !isdefined( self.asm.longdeathanims.grenadetag ) )
        return;

    var_0 = ( 0, 0, 30 ) - anglestoright( self.angles ) * 70;

    if ( self.asm.longdeathanims.grenadetag == "_encstr_97D713BBD1BFE0A996C869808715CA98BF331BF759" )
        var_0 = var_0 * -1;

    var_1 = self gettagorigin( self.asm.longdeathanims.grenadetag );
    var_2 = var_1 + ( 0, 0, 20 );
    var_3 = var_1 - ( 0, 0, 20 );
    var_4 = scripts\engine\trace::ray_trace( var_2, var_3, self, undefined, 1 );

    if ( var_4["_encstr_A53009A25003666B9818C6"] < 0.5 )
        var_1 = var_4["_encstr_BD260953AA97E3F014279D"];

    var_5 = "_encstr_8B1608EC43B8D647A113";

    if ( var_4["_encstr_8BCA0C2BFD504F333E6D7513637B"] != "_encstr_8BBA05185F8B99" )
        var_5 = var_4["_encstr_8BCA0C2BFD504F333E6D7513637B"];

    playworldsound( "_encstr_B6F815D2306B051F193DD7E2C0C3DB8E83C1AA4A0B15B8", var_1 );
    self detach( getweaponmodel( "_encstr_8A78055C8D488C" ), self.asm.longdeathanims.grenadetag );
    self magicgrenademanual( var_1, var_0, randomfloatrange( 2.0, 3.0 ) );
}

shouldfinishlongdeath( var_0, var_1, var_2, var_3 )
{
    if ( istrue( self.burningtodeath ) )
        return 1;

    if ( isdefined( self.asm.longdeathanims.earlyfinishtime ) && gettime() > self.asm.longdeathanims.earlyfinishtime )
    {
        foreach ( var_5 in level.players )
        {
            if ( distancesquared( self.origin, var_5.origin ) < 5625 )
                return 1;
        }
    }

    if ( isdefined( self.desiredtimeofdeath ) && gettime() > self.desiredtimeofdeath )
        return 1;

    return 0;
}

_id_132FC( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.a._id_13B98 ) )
    {
        var_4 = 3000;

        if ( gettime() > self.a._id_13B98 + var_4 )
            return 1;
    }

    return shouldfinishlongdeath( var_0, var_1, var_2, var_3 );
}

longdeathgrenadepullnotetrackhandler( var_0 )
{
    if ( var_0 == "_encstr_A5B70D7956F390C3527D691935230B" )
        self.asm.longdeathanims.grenadetag = "_encstr_97D713BBD1BFE0A996C869808715CA98BF331BF759";
    else if ( var_0 == "_encstr_A9D00EB327ACB9C2C859AF9396CE0D47" )
        self.asm.longdeathanims.grenadetag = "_encstr_B2AE148D118849F9F696852B6A0702D239A5810FEBC5";

    self attach( getweaponmodel( "_encstr_8A78055C8D488C" ), self.asm.longdeathanims.grenadetag );
}
