// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

playgrenadereturnthrowanim( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );
    self animmode( "_encstr_A1370EF3FA638AFB695A587B03B42E57" );

    if ( isdefined( self.grenade ) && distancesquared( self.grenade.origin, self.origin ) > 36 )
        self orientmode( "_encstr_A34A0B518A172592D6E64FA115", vectortoyaw( self.grenade.origin - self.origin ) );

    self aisetanim( var_1, var_3 );
    var_5 = animhasnotetrack( var_4, "_encstr_A5B70D7956F390C3527D691935230B" );
    var_6 = animhasnotetrack( var_4, "_encstr_A9D00EB327ACB9C2C859AF9396CE0D47" );
    var_7 = var_5 || var_6;

    if ( var_7 )
    {
        _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::placeweaponon( self.weapon, "_encstr_A5AD056A019C63" );
        thread scripts\asm\asm::asm_donotetracks( var_0, var_1 );

        if ( var_5 )
            self waittillmatch( var_1, "_encstr_A5B70D7956F390C3527D691935230B" );
        else
            self waittillmatch( var_1, "_encstr_A9D00EB327ACB9C2C859AF9396CE0D47" );

        self pickupgrenade();
        _encstr_88C92737B1934B831DDC5E0BE6A5ADCB980B1D1DC6CAB1A12CD1A3AC937DBB9CC2071C59278B3BB9C6::evaluateattackevent( "_encstr_8A78055C8D488C" );
        var_8 = self getgrenadetossvel();

        if ( isdefined( var_8 ) )
        {
            var_9 = vectortoyaw( var_8 );
            self orientmode( "_encstr_A34A0B518A172592D6E64FA115", var_9 );
        }

        self waittillmatch( var_1, "_encstr_97E30EEC9359DC0B19ACBE47D027BDDD" );
    }
    else
    {
        thread scripts\asm\asm::asm_donotetracks( var_0, var_1 );
        self waittillmatch( var_1, "_encstr_97E30EEC9359DC0B19ACBE47D027BDDD" );
        self pickupgrenade();
        _encstr_88C92737B1934B831DDC5E0BE6A5ADCB980B1D1DC6CAB1A12CD1A3AC937DBB9CC2071C59278B3BB9C6::evaluateattackevent( "_encstr_8A78055C8D488C" );
    }

    if ( isdefined( self.grenade ) )
        self throwgrenade();

    wait 1;
    self notify( "_encstr_85140F22139204D9DDF8E3DF36CDE82275" );
}

terminategrenadereturnthrowanim( var_0, var_1, var_2 )
{
    scripts\asm\asm::asm_fireephemeralevent( "_encstr_B6A2113BE4569BC291CABE9CB2DC83EDE6B92B", "_encstr_A3CF16F310B33563955F4B445EAF0BA8F9D80703B0498C5A" );
    _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::placeweaponon( self.weapon, "_encstr_8253060E2B5FE330" );

    if ( isdefined( self.oldgrenadeweapon ) )
    {
        self.grenadeweapon = self.oldgrenadeweapon;
        self.oldgrenadeweapon = undefined;
    }
}

islowthrowsafe()
{
    var_0 = ( self.origin[0], self.origin[1], self.origin[2] + 20 );
    var_1 = var_0 + anglestoforward( self.angles ) * 50;
    return sighttracepassed( var_0, var_1, 0, undefined );
}

choosegrenadereturnthrowanim( var_0, var_1, var_2 )
{
    var_3 = undefined;
    var_4 = 1000;

    if ( isdefined( self.enemy ) )
        var_4 = distance( self.origin, self.enemy.origin );

    var_5 = [];

    if ( var_4 < 600 && islowthrowsafe() )
    {
        if ( var_4 < 300 )
            return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_B2940C8B90D307CBA106C350D5DB" );
        else
            return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8C3D0BA0829AD7E36F74A81057" );
    }

    return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_BE1F0E5C039EB81709317D791945BBD3" );
}

playgrenadeavoidanim( var_0, var_1, var_2 )
{
    self.asm.bshouldattemptdive = randomint( 100 ) > 50;
}

shouldgrenadedive( var_0, var_1, var_2, var_3 )
{
    if ( !self.asm.bshouldattemptdive )
        return 0;

    if ( self.currentpose != "_encstr_A5AD069B231F0BAF" )
        return 0;

    if ( !isdefined( self.grenade ) )
        return 0;

    var_4 = 0;
    var_4 = angleclamp180( vectortoangles( self.grenade.origin - self.origin )[1] - self.angles[1] );

    if ( abs( var_4 ) < 90 && var_3 == "_encstr_8D5B09262CD8B5EEB02719" )
        return 0;

    var_5 = scripts\asm\asm::asm_getanim( var_0, var_2 );
    var_6 = scripts\asm\asm::asm_getxanim( var_2, var_5 );
    var_7 = getmovedelta( var_6, 0, 0.5 );
    var_8 = self localtoworldcoords( var_7 );

    if ( !self maymovetopoint( var_8 ) )
        return 0;

    return 1;
}

grenadeavoid_terminate( var_0, var_1, var_2 )
{
    self.asm.bshouldattemptdive = undefined;
}
