// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

juggernaut( var_0 )
{
    self endon( "_encstr_A6F10F617BFFE8E0674AEBFB4E4EA84D63" );
    self endon( "_encstr_AD75063D571AE108" );

    if ( isdefined( self.subclass ) && self.subclass == "_encstr_8BFC0BC2CBD4F737E0A5E1FD79" || isdefined( self.agent_type ) && self.agent_type == "_encstr_8BFC0BC2CBD4F737E0A5E1FD79" )
    {
        childthread juggernaut_pain();

        if ( isdefined( level.vehicle_mp_create ) )
            self childthread [[ level.vehicle_mp_create ]]();
        else
            childthread juggernaut_damage();

        var_1 = 0;

        if ( !var_1 && scripts\common\utility::iscp() )
            childthread init_juggernaut_damage_states();
    }
}

initanimspeedthresholds_juggernaut( var_0 )
{
    if ( hasanimspeedthresholdstring( var_0 ) )
        return;

    anim.juggernautspeedthreholdsinitialized = 1;
    animspeedthresholdsexist( var_0, "_encstr_99F605EE16B1DA", 40 );
    animspeedthresholdsexist( var_0, "_encstr_B4190453BD3B", 113 );
    animspeedthresholdsexist( var_0, "_encstr_B4190493D573", 170 );
}

juggernaut_isspecialweapon()
{
    return self.damagemod == "_encstr_911B0C7DA090E9A7F799FD50DD48" || self.damagemod == "_encstr_B45C0E2DFF41B17F437FB870E733FBFF" || self.damagemod == "_encstr_950B13A99E887DA39251270A1151EBA6A0C4A0D421" || self.damagemod == "_encstr_8E39168B5F1FF12F4B08BC45D08B6BA1E7F73F293436C91B" || ( self.damageweapon.classname == "_encstr_850707F7E5833355B8" || self.damageweapon.classname == "_encstr_8D940738966ED1DB8D" && self.damageweapon.basename != "_encstr_88FE0D0157202970845121C58E802F" && self.damagemod != "_encstr_8DED0A21C79B660BC7588981" );
}

juggernaut_watch_pain()
{
    for (;;)
    {
        self waittill( "_encstr_B60D055B0E3128" );
        self.juggernautpaintime = gettime();
    }
}

juggernaut_pain()
{
    childthread juggernaut_watch_pain();

    for (;;)
    {
        self waittill( "_encstr_B2BE0788BAF573592F", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

        if ( self.health > 0 && var_0 >= self.minpaindamage )
        {
            if ( soundexists( "_encstr_969D15765673CA932D36EB0EB09673F5953759B62FF526" ) )
                self playsound( "_encstr_969D15765673CA932D36EB0EB09673F5953759B62FF526" );

            self asmevalpaintransition( self.asmname );
            var_10 = self.minpaindamage;
            self.minpaindamage = var_10 * 3;
            wait 5;
            self.minpaindamage = var_10;
        }
    }
}

juggernaut_damage()
{
    for (;;)
    {
        self waittill( "_encstr_B2BE0788BAF573592F", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

        if ( juggernaut_isspecialweapon() )
            continue;

        if ( self.damageweapon.basename == "_encstr_88FE0D0157202970845121C58E802F" )
        {
            if ( var_7 == "_encstr_AADA07DBF19A4A81D7" || var_7 == "_encstr_BDAB07BA596A43E9EB" || var_7 == "_encstr_9ABB0968F1402B19E2AFA9" )
                var_10 = 70;
            else
                var_10 = 40;
        }
        else
            var_10 = 40;

        if ( var_0 < var_10 )
            var_10 = abs( var_0 - 5 );

        self.health = self.health + int( var_10 );

        if ( istrue( self.damage_parts_enabled ) )
            apply_juggernaut_part_damage( self.damagelocation, var_0 );
    }
}

init_juggernaut_damage_states()
{
    scripts\engine\utility::flag_wait( "_encstr_ABEC127358A564FBBB9F4A4CA5637F6A23D08A2B" );

    if ( !scripts\engine\utility::is_equal( self.model, "_encstr_8F2721B0B7570B37E8ABC06730EF637982B33719C54D30D9A354D8DB6FA357E0A86870" ) )
        return;

    self.damage_parts_enabled = 1;
    self setscriptablepartstate( "_encstr_A29B05E9400E5D", "_encstr_B4100940FB3BABDBE4BABA" );
    create_juggernaut_damagedata( "_encstr_A75F09A1FD03131FFE8BD8", 100, [ "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4", "_encstr_8B970F1B56991DD758E4D6EB63ED77B239", "_encstr_BDB30AC6CA66A3FAA158CD23" ] );
    create_juggernaut_damagedata( "_encstr_A9F40A4EA5EC0D8EFAC2E4B5", 100, [ "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB", "_encstr_970110C3DBB4827401D972BD36B0A7CB1D45", "_encstr_A1BD0B9C96D9D0A3F51A169B19" ] );
}

create_juggernaut_damagedata( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_3.health = var_1;
    var_3.is_part_swapped = 0;

    if ( !isdefined( self.damagedata ) )
        self.damagedata = [];

    self.damagedata[var_0] = var_3;

    if ( !isdefined( self.damagedatalookup ) )
        self.damagedatalookup = [];

    foreach ( var_5 in var_2 )
        self.damagedatalookup[var_5] = var_0;
}

apply_juggernaut_part_damage( var_0, var_1 )
{
    if ( !isdefined( self.damagedatalookup[var_0] ) )
        return;

    var_2 = self.damagedatalookup[var_0];
    var_3 = self.damagedata[var_2];
    var_3.health = var_3.health - var_1;

    if ( var_3.health <= 0 && !istrue( var_3.is_part_swapped ) )
    {
        self setscriptablepartstate( var_2, "_encstr_B21804C8DAD9", 1 );
        var_3.is_part_swapped = 1;
    }
}

enable_casual_killer()
{
    if ( isdefined( self.combatmode ) )
        self.ck_combatmode = self.combatmode;

    self.combatmode = "_encstr_821109FAE81117DA568730";
    self allowedstances( "_encstr_A5AD069B231F0BAF" );
    self.cautiousnavigation = 1;
    self.dontmeleeme = 1;
    self.dontmelee = 1;
    self.ck_grenadeammo = self.grenadeammo;
    self.grenadeammo = 0;
    self.ck_aggressivemode = istrue( self.aggressivemode );
    self.aggressivemode = 1;
    self.ignoresuppression = 1;
    scripts\engine\utility::set_movement_speed( 50 );
    self.turnrate = 0.1;
    self.allowstrafe = 0;
    self.disablepistol = 1;
    self.dontsyncmelee = 1;
    self.disablebulletwhizbyreaction = 1;
    self.neversprintforvariation = 1;
    self.disablerunngun = 1;
    self.casualkiller = 1;
    self.ignoreburstdelay = 1;
    self.dontgiveuponsuppression = 1;
    self.forcesuppressai = 1;
    self.pathenemyfightdist = 0;

    if ( isdefined( self.a ) )
        self.a.disablelongdeath = 1;

    var_0 = weaponclass( self.weapon );
    initanimspeedthresholds_juggernaut( "_encstr_8BFC0BC2CBD4F737E0A5E1FD79" );
    scripts\asm\shared\utility::setbasearchetype( "_encstr_8BFC0BC2CBD4F737E0A5E1FD79" );
    var_1 = "_encstr_ACF60EB7F743CD70EC51E0B885C49886";

    if ( var_0 == "_encstr_BE0703A54C" )
        var_1 = "_encstr_83391260FF0BDBB3AAB1EAE35582F3637FA368C8";

    scripts\asm\shared\utility::setoverridearchetype( "_encstr_ACF60EB7F743CD70EC51E0B885C49886", var_1, 1 );
    thread casual_killer_targeting();

    if ( var_0 == "_encstr_BE0703A54C" || var_0 == "_encstr_965306392D3336B2" || var_0 == "_encstr_BE1904DCDA9D" )
        thread casual_killer_sweep();

    if ( var_0 == "_encstr_965306392D3336B2" || var_0 == "_encstr_BE1904DCDA9D" )
        self.shootstyleoverride = "_encstr_997805335763B1";

    thread casual_killer_enemy_reaction();
}

disable_casual_killer()
{
    if ( !istrue( self.leavecasualkiller ) )
        thread disable_casual_killer_internal();
}

disable_casual_killer_internal()
{
    if ( !isdefined( level.casualkillernewenemyreaction ) || gettime() > level.casualkillernewenemyreaction )
    {
        self.newenemyreactiontime = gettime() + 3000;
        self.newenemyreaction = 1;
        self.forcenewenemyreaction = 1;
    }

    self.leavecasualkiller = 1;
    self clearentitytarget();
    self.favoriteenemy = undefined;
    self.gunposeoverride = undefined;

    if ( isdefined( self.pathgoalpos ) )
        self setbtgoalpos( 2, self getposonpath( 64 ) );

    scripts\engine\utility::_id_143A5( "_encstr_A28F1263CA58D995A10BB9D585D8A5B4C6B1CA39", "_encstr_AD75063D571AE108" );

    if ( !isalive( self ) || !isdefined( self ) )
        return;

    self.cautiousnavigation = 0;
    self.dontmeleeme = 0;
    self.grenadeammo = self.ck_grenadeammo;

    if ( istrue( self.ck_aggressivemode ) )
        self.aggressivemode = 1;

    scripts\common\utility::lookatentity( undefined );
    scripts\common\utility::lookatpos( undefined );
    self.ignoresuppression = 0;
    self.dontmelee = 0;
    self.turnrate = 0.3;
    scripts\common\utility::clear_movement_speed();
    self.disablepistol = 0;
    self.allowstrafe = 1;
    self.dontsyncmelee = undefined;
    self.disablebulletwhizbyreaction = undefined;
    self.neversprintforvariation = undefined;
    self.disablerunngun = 0;
    self.casualkiller = undefined;
    self.casualkillershootpos = undefined;
    self.pathenemyfightdist = 192;
    self.dontevershoot = 0;
    self.shootstyleoverride = undefined;
    self.ignoreburstdelay = undefined;
    self.dontgiveuponsuppression = undefined;
    self.forcesuppressai = 0;
    self.gunposeoverride = undefined;
    self.aimyawspeed = 0;
    self clearbtgoal( 2 );

    if ( isdefined( self.ck_target ) )
        self.ck_target delete();

    if ( isdefined( self.a ) )
        self.a.disablelongdeath = 0;

    self allowedstances( "_encstr_A5AD069B231F0BAF", "_encstr_B13D076BED70539F23", "_encstr_922406F1A6FD5E05" );

    if ( isdefined( self.ck_combatmode ) )
    {
        self.combatmode = self.ck_combatmode;
        self.ck_combatmode = undefined;
    }
    else
        self.combatmode = "_encstr_B68E06D8F6B3CA27";
}

casual_killer_damage_func( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( scripts\engine\utility::is_equal( var_1, level.player ) )
        self notify( "_encstr_8BA916631A3143A0D27B8D7AD6B31B50690FC40D68DF1B8A" );
}

casual_killer_enemy_reaction()
{
    self endon( "_encstr_A28F1263CA58D995A10BB9D585D8A5B4C6B1CA39" );
    self endon( "_encstr_AD75063D571AE108" );

    if ( !isdefined( self.damage_functions ) )
        self.damage_functions = [];

    self.damage_functions[self.damage_functions.size] = ::casual_killer_damage_func;
    self waittill( "_encstr_8BA916631A3143A0D27B8D7AD6B31B50690FC40D68DF1B8A" );
    self.favoriteenemy = undefined;
    self clearentitytarget();
    self setthreatbiasgroup( "_encstr_8E8405EA382B2A" );
}

casual_killer_targeting()
{
    self endon( "_encstr_A28F1263CA58D995A10BB9D585D8A5B4C6B1CA39" );
    self endon( "_encstr_AD75063D571AE108" );
    wait 1;
    self.ck_target = spawn( "_encstr_AD050EE61B93A50E8ED7DB39D29D96B9", self.origin );
    thread scripts\engine\utility::delete_on_death( self.ck_target );
    var_0 = undefined;
    var_1 = 0;
    var_2 = undefined;
    var_3 = undefined;

    for (;;)
    {
        waitframe();

        if ( !isdefined( self ) || !isalive( self ) || istrue( self.leavecasualkiller ) )
            return;

        self.gunposeoverride = "_encstr_B2650840FBDB7F1188A1";
        var_4 = anglestoforward( self.angles );
        var_5 = scripts\asm\shared\utility::getshootfrompos();

        if ( var_1 )
        {
            if ( !isalive( var_0 ) )
            {
                var_2 = gettime();
                self setentitytarget( self.ck_target );
                self forcethreatupdate();
                var_1 = 0;
                var_3 = undefined;
            }
            else
                self.ck_target.origin = var_0.origin;
        }

        var_6 = int( gettime() / 50 );

        if ( self getentitynumber() % 4 != var_6 % 4 )
        {
            if ( isdefined( var_2 ) && var_2 + 3000 > gettime() )
            {
                var_7 = self.ck_target.origin - self.origin;

                if ( length( var_7 ) > 100 )
                {
                    var_7 = vectornormalize( var_7 );
                    var_8 = abs( angleclamp180( acos( clamp( vectordot( var_4, var_7 ), -1.0, 1.0 ) ) ) );

                    if ( var_8 > 30 && gettime() < var_2 + 1500 )
                        continue;

                    if ( var_8 < 90 )
                        continue;
                }
            }

            var_2 = undefined;

            if ( !isdefined( var_3 ) || gettime() > var_3 + 3000 )
            {
                self clearentitytarget();
                self forcethreatupdate();

                if ( isalive( self.enemy ) )
                {
                    if ( var_1 && self.enemy == var_0 )
                    {
                        var_9 = self.enemy;
                        var_10 = self.enemy.origin - self.origin;
                        var_10 = vectornormalize( var_10 );
                        var_11 = clamp( vectordot( var_4, var_10 ), -1.0, 1.0 );
                        var_12 = abs( angleclamp180( acos( var_11 ) ) );

                        if ( var_12 > 70 )
                        {
                            var_13 = self getsecondarytargets();

                            if ( isdefined( var_13 ) )
                            {
                                foreach ( var_15 in var_13 )
                                {
                                    var_7 = var_15.origin - self.origin;
                                    var_7 = vectornormalize( var_7 );
                                    var_8 = abs( angleclamp180( acos( clamp( vectordot( var_4, var_7 ), -1.0, 1.0 ) ) ) );

                                    if ( var_8 < var_12 )
                                    {
                                        var_12 = var_8;
                                        var_9 = var_15;
                                    }
                                }

                                if ( var_9 != self.enemy )
                                {
                                    if ( issentient( var_9 ) )
                                    {
                                        self.favoriteenemy = var_9;
                                        self forcethreatupdate();
                                        self.favoriteenemy = undefined;
                                        var_3 = gettime();
                                    }
                                }
                            }
                        }
                    }

                    var_1 = isalive( self.enemy );

                    if ( var_1 )
                        var_0 = self.enemy;
                    else
                        var_0 = undefined;

                    continue;
                }
                else
                {
                    self setentitytarget( self.ck_target );
                    self forcethreatupdate();

                    if ( isdefined( var_2 ) && var_2 + 7000 > gettime() )
                    {
                        if ( vectordot( var_4, self.ck_target.origin - var_5 ) > 0 )
                            continue;
                    }

                    self.ck_target.origin = self.origin + ( 0, 0, 40 ) + var_4 * 400;
                }
            }
        }
    }
}

casual_killer_sweep()
{
    self endon( "_encstr_A28F1263CA58D995A10BB9D585D8A5B4C6B1CA39" );
    self endon( "_encstr_AD75063D571AE108" );
    var_0 = 100;
    var_1 = 1000;
    var_2 = 20;
    var_3 = -1;
    var_4 = [ 40, 50, 60 ];
    var_5 = [ 20, 25, 30 ];
    var_6 = 0;
    var_7 = 0;
    var_8 = scripts\engine\utility::random( var_4 );
    var_9 = scripts\engine\utility::random( var_5 );
    var_10 = 0;
    var_11 = undefined;
    var_12 = undefined;

    foreach ( var_14 in var_5 )
    {
        if ( var_14 > var_6 )
            var_6 = var_14;
    }

    while ( isalive( self ) && isdefined( self ) )
    {
        waitframe();
        self.leftaimlimit = 90;
        self.rightaimlimit = -90;
        self.aimyawspeed = 180;
        var_16 = anglestoforward( self.angles );
        var_17 = scripts\asm\shared\utility::getshootfrompos();

        if ( isdefined( self.enemy ) )
        {
            if ( !isdefined( self.pathgoalpos ) || self.lookaheaddist > self aigetdesiredspeed() )
                var_11 = self.enemy getshootatpos();
        }

        var_18 = scripts\asm\asm::asm_currentstatehasflag( self.asm.trackasm, "_encstr_8719040B4BB5" ) || scripts\asm\asm::asm_currentstatehasflag( self.asm.trackasm, "_encstr_B43B0D73DE3AAC1DC9851B6D50D2B5" );

        if ( var_18 )
            var_18 = isdefined( var_11 );

        var_19 = scripts\asm\asm::asm_getcurrentstate( self.asmname );

        if ( var_19 == "_encstr_926A107F630F1523B799E9574EFD4B466189" || var_19 == "_encstr_A1D00F59F007BD6EB28CFA392B8DB7B046" )
            var_18 = 0;

        if ( var_18 )
        {
            var_20 = self getposonpath( self aigetdesiredspeed() );
            var_21 = var_11 - var_20;
            var_21 = ( var_21[0], var_21[1], 0 );
            var_22 = vectornormalize( var_21 );
            var_23 = self.leftaimlimit;

            if ( !istrue( var_12 ) )
                var_23 = max( 0, self.leftaimlimit - 20 );

            var_24 = abs( angleclamp180( acos( clamp( vectordot( var_22, var_16 ), -1.0, 1.0 ) ) ) );

            if ( var_24 >= var_23 )
            {
                var_11 = undefined;
                var_10 = 0;
                var_18 = 0;
            }
        }

        if ( !istrue( var_18 ) )
        {
            scripts\common\utility::lookatentity( undefined );
            scripts\common\utility::lookatpos( var_17 + var_16 * 200 );
            self.casualkillershootpos = var_17 + var_16 * 200;
            var_2 = 20 * var_3;
            var_3 = var_3 * -1;
            var_10 = 0;
            self.dontevershoot = 1;
            var_12 = 0;
            continue;
        }

        var_12 = 1;
        self.dontevershoot = 0;

        if ( isdefined( var_11 ) )
            scripts\common\utility::lookatpos( var_11 );
        else
        {
            scripts\common\utility::lookatentity( undefined );
            scripts\common\utility::lookatpos( undefined );
        }

        var_21 = var_11 - var_17;
        var_25 = length( var_21 );
        var_22 = vectornormalize( var_21 );
        var_24 = abs( angleclamp180( acos( clamp( vectordot( var_16, var_22 ), -1.0, 1.0 ) ) ) );
        var_26 = axistoangles( var_22, anglestoright( self.angles ), anglestoup( self.angles ) );
        var_27 = var_26[1];

        if ( istrue( self.leavecasualkiller ) )
        {
            if ( var_2 > 0 )
            {
                var_2 = var_2 - min( var_2, var_8 * level.framedurationseconds );
                var_3 = -1;
            }
            else if ( var_2 < 0 )
            {
                var_2 = var_2 + min( var_2 * -1, var_8 * level.framedurationseconds );
                var_3 = 1;
            }
        }
        else if ( var_24 + var_6 < abs( self.leftaimlimit ) && var_24 + var_6 < abs( self.rightaimlimit ) && var_25 > var_0 && ( var_25 < var_1 || isdefined( self.enemy ) && self.enemy == level.player ) )
        {
            if ( gettime() > var_7 )
            {
                var_28 = level.framedurationseconds * var_8 * var_3;
                var_2 = var_2 + var_28;

                if ( scripts\engine\utility::sign( var_2 ) == scripts\engine\utility::sign( var_3 ) && abs( var_2 ) > var_9 )
                {
                    var_3 = var_3 * -1;
                    var_8 = scripts\engine\utility::random( var_4 );
                    var_9 = scripts\engine\utility::random( var_5 );
                    var_7 = gettime() + 350;
                }
            }

            var_27 = var_27 + var_2;
        }

        var_29 = axistoangles( var_22, anglestoright( self.angles ), anglestoup( self.angles ) );
        var_29 = ( var_29[0], var_27, var_29[2] );
        var_22 = anglestoforward( var_29 );
        self.casualkillershootpos = var_22 * var_25 + var_17;

        if ( istrue( self.leavecasualkiller ) && var_2 == 0 )
            return;
    }
}
