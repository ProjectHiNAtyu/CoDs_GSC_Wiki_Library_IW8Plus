// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

shouldcoverexpose()
{
    return scripts\asm\asm_bb::bb_getrequestedcoverstate() == "_encstr_8E2508591EE07BE6B246" && isdefined( self.enemy ) && isdefined( self.node );
}

shouldcoverexposedreload( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.bt.cover ) && isdefined( self.balwayscoverexposed ) )
        return scripts\asm\asm_bb::bb_reloadrequested();

    return 0;
}

playcoveraniminternal( var_0, var_1, var_2, var_3 )
{
    if ( var_3 == "_encstr_96EF0C0B63A5D93715EDE4F6C859" )
    {
        if ( isdefined( var_1 ) )
        {
            if ( scripts\engine\utility::actor_is3d() )
            {
                var_4 = getangledelta3d( var_2 );
                var_5 = scripts\asm\shared\utility::getnodeforwardangles( var_1, 0 );
                var_6 = combineangles( var_5, -1 * var_4 );
                self orientmode( "_encstr_91440EF5D7AA1B467F70DAB9531A9ED1", var_6 );
            }
            else
            {
                var_4 = getangledelta3d( var_2 );
                var_5 = ( 0, scripts\asm\shared\utility::getnodeforwardyaw( var_1 ), 0 );
                var_6 = var_5 - var_4;
                self orientmode( "_encstr_A34A0B518A172592D6E64FA115", var_6[1] );
            }
        }
    }
    else if ( var_3 == "_encstr_BA480CF369C85E27A57878522105" )
    {
        var_7 = getmovedelta( var_2 );

        if ( distancesquared( var_1.origin, self.origin ) < 16 )
            self safeteleport( var_1.origin );
        else
            thread lerpto( var_1, 4, var_0 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    }
}

choosetransitiontoexposedanim( var_0, var_1, var_2 )
{
    var_3 = scripts\engine\utility::ter_op( scripts\asm\soldier\script_funcs::shouldreacttonewenemy( var_0, var_1, var_2 ), "_encstr_ADE81095875137A4593AFD5FCABEB30503A1", "_encstr_B40101" );
    var_4 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 + "_encstr_A74C0222" );
    var_5 = scripts\asm\asm::asm_getxanim( var_1, var_4 );
    var_6 = getangledelta( var_5, 0.0, 1.0 );
    var_7 = angleclamp180( 180 - var_6 );

    if ( isdefined( self.pathgoalpos ) && self.facemotion )
    {
        var_8 = vectortoangles( self.lookaheaddir );
        var_9 = var_8[1] - self.angles[1];
        var_10 = angleclamp180( var_9 + var_7 );
    }
    else if ( isdefined( self.pathgoalpos ) && !self.facemotion && isdefined( self.enemy ) && !_encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::canseeenemy() )
    {
        var_9 = 0;
        var_10 = var_7;
    }
    else if ( isdefined( self.smartfacingpos ) )
    {
        var_9 = angleclamp180( vectortoyaw( self.smartfacingpos - self.origin ) - self.angles[1] );
        var_10 = angleclamp180( var_9 + var_7 );
    }
    else
    {
        var_11 = self.enemy;
        var_9 = scripts\engine\utility::getpredictedaimyawtoshootentorpos( 0.25, var_11, undefined );
        var_10 = angleclamp180( var_9 + var_7 );
    }

    var_12 = isdefined( var_2 ) && var_2 == "_encstr_A7760B6710A315533959DF17AD";
    var_13 = isdefined( var_2 ) && var_2 == "_encstr_86A30C90489C3F32B21DA9AF0178";
    var_14 = spawnstruct();

    if ( var_12 && var_10 < 0 && var_10 > -90 )
        var_14.turnanim = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 + "_encstr_864C02F9" );
    else if ( var_13 && var_10 > 0 && var_10 < 90 )
        var_14.turnanim = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 + "_encstr_864C02F9" );
    else if ( abs( var_10 ) > 135 )
        var_14.turnanim = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 + "_encstr_A74C0222" );
    else if ( var_10 < 0 )
        var_14.turnanim = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 + "_encstr_8F4C026A" );
    else
        var_14.turnanim = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 + "_encstr_AC4C024A" );

    var_14.predictedaimyaw = var_9;
    return var_14;
}

playtransitiontoexposedanim( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = 1.0;
    self isguest();

    if ( ( scripts\asm\asm_bb::bb_meleechargerequested() || scripts\asm\asm_bb::bb_meleerequested() ) && isdefined( self.melee.target ) && isplayer( self.melee.target ) )
        var_4 = 2.0;
    else if ( isdefined( level.incorrectcodeentered ) )
        var_4 = level.incorrectcodeentered;

    var_5 = scripts\asm\asm::asm_getxanim( var_1, var_3.turnanim );
    self aisetanim( var_1, var_3.turnanim, var_4 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_5 );
    thread playtransitiontoexposedanimanglefixup( var_5, var_1 );
    var_6 = scripts\asm\asm::asm_donotetracks( var_0, var_1, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );
}

playtransitiontoexposedanimanglefixup( var_0, var_1 )
{
    self endon( "_encstr_AD75063D571AE108" );
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );

    if ( !isdefined( self.enemy ) )
        return;

    var_2 = self.enemy;
    var_2 endon( "_encstr_AADC14E3520A5B881935437E4138429108A5F8C020C5" );
    var_2 endon( "_encstr_8A490E5973475A8EE546CA63B23ACA46" );
    var_3 = getanimlength( var_0 );

    if ( animhasnotetrack( var_0, "_encstr_82AB0A82D3502A13E08BE78F" ) )
    {
        var_4 = getnotetracktimes( var_0, "_encstr_82AB0A82D3502A13E08BE78F" );
        var_3 = var_3 * var_4[0];
    }
    else if ( animhasnotetrack( var_0, "_encstr_B4BA07CC5ADCB4CDD0" ) )
    {
        var_4 = getnotetracktimes( var_0, "_encstr_B4BA07CC5ADCB4CDD0" );
        var_3 = var_3 * var_4[0];
    }

    var_5 = int( var_3 * 20 );
    var_6 = var_5;

    while ( var_6 > 0 )
    {
        var_7 = 1 / var_6;
        var_8 = scripts\engine\utility::getyawtospot( var_2.origin );
        self.stepoutyaw = angleclamp180( self.angles[1] + var_8 );
        var_9 = self aigetanimtime( var_0 );
        var_10 = getangledelta( var_0, var_9, 1.0 );
        var_11 = angleclamp180( var_8 - var_10 );
        self orientmode( "_encstr_A34A0B518A172592D6E64FA115", angleclamp( self.angles[1] + var_11 * var_7 ) );
        var_6--;
        wait 0.05;
    }
}

cleanuptransitiontocoverhide( var_0 )
{
    self waittill( var_0 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );

    if ( isdefined( self ) )
        self finishcoverarrival();
}

playtransitiontocoverhide( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1, var_2 );

    if ( isstruct( var_3 ) )
    {
        var_4 = var_3.stopanim;
        var_5 = var_3.node;
        var_6 = scripts\asm\asm::asm_getxanim( var_1, var_4 );
        thread cleanuptransitiontocoverhide( var_1 );
        var_7 = var_3.finalangles;
        var_8 = var_3.startpos;
        var_9 = angleclamp180( var_7 - var_3.angledelta );
        self.keepclaimednodeifvalid = 1;
        self animmode( "_encstr_A1370EF3FA638AFB695A587B03B42E57", 0 );
        self orientmode( "_encstr_A34A0B518A172592D6E64FA115", self.angles[1] );
        scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_6 );
        self aisetanim( var_1, var_3.stopanim, self.animplaybackrate );
        var_10 = int( 1000 * getanimlength( var_6 ) - 200 );
        self startcoverarrival();
        self motionwarpwithanim( var_8, ( 0, var_9, 0 ), var_5.origin, ( 0, var_7, 0 ), var_10 );
        scripts\asm\asm::asm_donotetracks( var_0, var_1 );
        self.a.movement = "_encstr_B419059BD17BE0";
    }
    else
    {
        var_11 = var_3;
        var_6 = scripts\asm\asm::asm_getxanim( var_1, var_11 );
        self.keepclaimednodeifvalid = 1;
        childthread scripts\asm\shared\utility::setuseanimgoalweight( var_1, 0.2 );
        self orientmode( "_encstr_91730D640BC68899BFF532BB38850B" );
        self aisetanim( var_1, var_11 );
        scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_6 );
        scripts\asm\asm::asm_donotetracks( var_0, var_1, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );
    }
}

chooseanim_tocoverhide( var_0, var_1, var_2 )
{
    var_3 = getstopdatafortransition( var_0, var_1, ::chooseanim_tocoverhide_helper );
    return var_3;
}

cleanup_transitiontocoverhide( var_0, var_1, var_2 )
{
    self motionwarpcancel();
}

calcanimstartpos( var_0, var_1, var_2, var_3 )
{
    var_4 = var_1 - var_3;
    var_5 = ( 0, var_4, 0 );
    var_6 = rotatevector( var_2, var_5 );
    return var_0 - var_6;
}

getclosesttocoverhideindex( var_0 )
{
    var_1 = angleclamp180( self.angles[1] - var_0 );

    if ( var_1 >= -45 && var_1 < 45 )
        return 8;
    else if ( var_1 >= 45 && var_1 < 135 )
        return 4;
    else if ( var_1 >= 135 || var_1 < -135 )
        return 2;
    else if ( var_1 >= -135 && var_1 < -45 )
        return 6;
}

chooseanim_tocoverhide_helper( var_0, var_1, var_2, var_3 )
{
    var_4 = isdefined( self.currentpose ) && self.currentpose == "_encstr_B13D076BED70539F23";
    var_5 = undefined;

    if ( isdefined( var_3 ) )
    {
        var_6 = getclosesttocoverhideindex( var_3[1] );

        if ( var_4 )
        {
            var_7 = var_6 + "_encstr_AAE80859923A77033FD0";
            var_5 = scripts\asm\asm::asm_lookupanimfromaliasifexists( var_1, var_7 );
        }

        if ( !isdefined( var_5 ) )
        {
            var_7 = "_encstr_B40101" + var_6;
            var_5 = scripts\asm\asm::asm_lookupanimfromaliasifexists( var_1, var_7 );
        }
    }

    if ( !isdefined( var_5 ) )
    {
        var_7 = "_encstr_AF4E0E8E9316CDE6BED17BF586963256";

        if ( var_4 && scripts\asm\asm::asm_hasalias( var_1, "_encstr_86AC15D127B0736EAFE8BDBE432D32ACAF8D9CEDBA6CD0" ) )
            var_7 = "_encstr_86AC15D127B0736EAFE8BDBE432D32ACAF8D9CEDBA6CD0";

        var_5 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_7 );
    }

    return var_5;
}

getstopdatafortransition( var_0, var_1, var_2 )
{
    var_3 = scripts\asm\asm_bb::bb_getcovernode();

    if ( !isdefined( var_3 ) )
    {
        if ( isdefined( self.node ) && distancesquared( self.origin, self.node.origin ) < 4096 )
            var_3 = self.node;
    }

    var_4 = undefined;

    if ( !isdefined( var_3 ) )
        return self [[ var_2 ]]( var_0, var_1 );

    var_4 = var_3.origin;
    var_5 = scripts\asm\shared\utility::nodeshouldfaceangles( var_3 );
    var_6 = undefined;
    var_7 = undefined;

    if ( var_5 )
    {
        var_8 = undefined;

        if ( scripts\engine\utility::isnodecoverleft( var_3 ) && scripts\asm\shared\utility::isarrivaltype( var_0, var_1, undefined, "_encstr_8267124310DE69AADAED119B9B5206A220A572E0" ) || scripts\engine\utility::isnodecoverright( var_3 ) && scripts\asm\shared\utility::isarrivaltype( var_0, var_1, undefined, "_encstr_A777136710A315533956DC57A349AEFB8BA8377F40" ) )
            var_8 = "_encstr_B13D076BED70539F23";

        var_6 = scripts\asm\shared\utility::getnodeforwardyaw( var_3, var_8 );
        var_7 = var_3.angles;
    }

    var_9 = self [[ var_2 ]]( var_0, var_1, undefined, var_7 );
    var_10 = spawnstruct();
    var_11 = scripts\asm\asm::asm_getxanim( var_1, var_9 );
    var_10.stopanim = var_9;
    var_10.node = var_3;
    var_10.movedelta = getmovedelta( var_11, 0.0, 1.0 );
    var_10.angledelta = getangledelta( var_11, 0.0, 1.0 );
    var_10.startpos = calcanimstartpos( var_4, var_6, var_10.movedelta, var_10.angledelta );
    var_10.angles = var_7;
    var_10.finalangles = var_6;
    return var_10;
}

ishighnode( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( var_0 scripts\engine\utility::isvalidpeekoutdir( "_encstr_8CB405F6CE569C" ) )
        return 0;

    return 1;
}

choosecoverstandlookorpeekanim( var_0, var_1, var_2 )
{
    var_3 = var_2;

    if ( ishighnode( self.node ) )
        var_3 = var_3 + "_encstr_ACA906975B800F68";

    var_4 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 );
    return var_4;
}

playcoveranim( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    self.keepclaimednodeifvalid = 1;
    childthread scripts\asm\shared\utility::setuseanimgoalweight( var_1, 0.2 );
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );
    self orientmode( "_encstr_91730D640BC68899BFF532BB38850B" );
    var_5 = scripts\asm\asm_bb::bb_getcovernode();

    if ( isdefined( var_2 ) )
    {
        if ( isarray( var_2 ) )
        {
            foreach ( var_7 in var_2 )
                playcoveraniminternal( var_1, var_5, var_4, var_7 );
        }
        else
            playcoveraniminternal( var_1, var_5, var_4, var_2 );
    }

    if ( scripts\asm\asm::asm_currentstatehasflag( var_0, "_encstr_B43B0D73DE3AAC1DC9851B6D50D2B5" ) )
    {
        var_9 = getangledelta( var_4, 0.0, 1.0 );
        self.stepoutyaw = self.angles[1] + var_9;
    }

    var_10 = 1.0;

    if ( isdefined( level.incorrectcodeentered ) )
        var_10 = level.incorrectcodeentered;

    self aisetanim( var_1, var_3, var_10 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_4 );

    if ( !isagent( self ) )
    {
        var_11 = scripts\asm\asm::asm_lookupanimfromaliasifexists( var_1, "_encstr_8E9A0C8B379836674770F11A992D" );
        var_5 = scripts\asm\asm_bb::bb_getcovernode();

        if ( isdefined( var_11 ) && isdefined( var_5 ) && ( var_5.type == "_encstr_9A520FAD2525079A4E3292270DBF5B7A9C" || var_5.type == "_encstr_8AD80E1ABD376CCAB0C6086A3A2CB9C8" ) )
        {
            var_12 = scripts\asm\asm::asm_getxanim( var_1, var_11 );
            var_13 = getanimlength( var_4 );
            thread _id_13797( var_1, var_12, var_13 * 0.3 );
        }
    }

    scripts\asm\asm::asm_donotetracks( var_0, var_1, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );
    self orientmode( "_encstr_91730D640BC68899BFF532BB38850B" );
}

_id_13797( var_0, var_1, var_2 )
{
    self endon( var_0 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_2 = max( var_2, 0.05 );
    wait( var_2 );
    self setanim( var_1, 1.0, 0.4, 1.0, 1 );
    thread conceal_add_cleanup( var_0 );
}

playexposedcoveranim( var_0, var_1, var_2 )
{
    playcoveranimloop( var_0, var_1, var_2 );
}

transitionedfromrun( var_0 )
{
    var_1 = self asmgetstatetransitioningfrom( var_0 );

    if ( isdefined( var_1 ) )
    {
        if ( var_1 == "_encstr_91590F6EE80BDC23FA39ABE67D63DEB738" )
            return 1;
        else if ( scripts\engine\utility::actor_is3d() && var_1 == "_encstr_B444166F233FF519C10A73F0EFDB6D8081539D6F229F6858" )
            return 1;
    }

    return 0;
}

playcoveranimloop3d( var_0, var_1, var_2 )
{
    if ( !isdefined( self.asm.lastcovernode ) )
    {
        var_3 = [ scripts\asm\asm_bb::bb_getcovernode(), self.node ];

        for ( var_4 = 0; !isdefined( self.asm.lastcovernode ) && var_4 < var_3.size; var_4++ )
        {
            if ( isdefined( var_3[var_4] ) && distancesquared( self.origin, var_3[var_4].origin ) < 256 )
                self.asm.lastcovernode = var_3[var_4];
        }
    }

    playcoveranimloop( var_0, var_1, 0.2, var_2 );
}

playcoveranimloop( var_0, var_1, var_2 )
{
    self.keepclaimednodeifvalid = 1;

    if ( isdefined( var_2 ) )
    {
        if ( var_2 == "_encstr_BA480CF369C85E27A57878522105" )
        {
            var_3 = scripts\asm\asm_bb::bb_getcovernode();

            if ( isdefined( var_3 ) )
            {
                if ( distancesquared( var_3.origin, self.origin ) < 16 )
                    self safeteleport( var_3.origin );
                else
                    thread lerpto( var_3, 4, var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
            }

            self.keepclaimednodeifvalid = 0;

            if ( transitionedfromrun( var_0 ) )
                childthread scripts\asm\shared\utility::setuseanimgoalweight( var_1, 0.2 );
        }
    }

    if ( !isagent( self ) )
    {
        var_4 = archetypegetalias( self.asm.archetype, var_1, "_encstr_8E9A0C8B379836674770F11A992D", 0 );
        var_3 = scripts\asm\asm_bb::bb_getcovernode();

        if ( isdefined( var_4 ) && isdefined( var_3 ) && ( var_3.type == "_encstr_9A520FAD2525079A4E3292270DBF5B7A9C" || var_3.type == "_encstr_8AD80E1ABD376CCAB0C6086A3A2CB9C8" ) )
        {
            self setanim( var_4.anims, 1.0, 0.2, 1.0, 1 );
            thread conceal_add_cleanup( var_1 );
        }
    }

    scripts\asm\asm::asm_loopanimstate( var_0, var_1, 1 );
}

conceal_add_cleanup( var_0 )
{
    self endon( "_encstr_AD75063D571AE108" );
    self endon( "_encstr_8A490E5973475A8EE546CA63B23ACA46" );
    self notify( "_encstr_A63614C6B7DCD82B2C63F5C2238CD7C636CA16E65D0E" );
    self endon( "_encstr_A63614C6B7DCD82B2C63F5C2238CD7C636CA16E65D0E" );
    self waittill( var_0 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_1 = archetypegetalias( self.asm.archetype, "_encstr_999306BA95FACD6B", "_encstr_8E9A0C8B379836674770F11A992D", 0 );
    self clearanim( var_1.anims, 0.4 );
}

lerpto( var_0, var_1, var_2 )
{
    self endon( var_2 );

    for (;;)
    {
        var_3 = var_0.origin - self.origin;
        var_4 = length( var_3 );

        if ( var_4 < var_1 )
        {
            self safeteleport( var_0.origin );
            break;
        }

        var_3 = var_3 / var_4;
        var_5 = self.origin + var_3 * var_1;
        self safeteleport( var_5 );
        wait 0.05;
    }
}

clearcoveranim( var_0, var_1, var_2 )
{
    self.keepclaimednodeifvalid = 0;
    self.stepoutyaw = undefined;
}

terminatecoverreload( var_0, var_1, var_2 )
{
    scripts\asm\asm::asm_fireephemeralevent( "_encstr_AF4D07932B1BDE5846", "_encstr_961804BD954A" );
    clearcoveranim( var_0, var_1, var_2 );
    scripts\asm\soldier\script_funcs::reload_cleanup( var_0, var_1, var_2 );
}

playcoveranim_droprpg( var_0, var_1, var_2 )
{
    self.keepclaimednodeifvalid = 1;
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );
    self orientmode( "_encstr_91730D640BC68899BFF532BB38850B" );
    self aisetanim( var_1, var_3 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_4 );
    scripts\asm\asm::asm_donotetracks( var_0, var_1, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );
}

playshuffleloop( var_0, var_1, var_2 )
{
    var_3 = [];
    var_3["_encstr_8D0515D89CBDAB8D1AAFCD1AEA6633D859F5C9963BD0A3"] = -90;
    var_3["_encstr_813C149F2A8DF8FEEBB153387BBB2468A7AF391BA6B3"] = 90;
    var_3["_encstr_8CE614CDD1C2CD19FA3734BA3333C6ACD7C92D3B431D"] = -90;
    var_3["_encstr_AA42132B93AF9B3FD1D75035856045FFD808C2C23B"] = 90;
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_4 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_5 = scripts\asm\asm::asm_getxanim( var_1, var_4 );
    self aisetanim( var_1, var_4 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_5 );

    if ( isdefined( self._blackboard.shufflenode ) )
        var_6 = self._blackboard.shufflenode.angles[1];
    else if ( isdefined( self.node ) )
        var_6 = self.node.angles[1];
    else
        var_6 = self.angles[1];

    if ( self.unittype != "_encstr_9B07038DB1" && isdefined( var_3[var_1] ) )
        var_6 = var_6 + var_3[var_1];

    self orientmode( "_encstr_A34A0B518A172592D6E64FA115", var_6 );
    scripts\asm\asm::asm_donotetracks( var_0, var_1 );
}

shouldplayshuffleenter( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\asm\asm::asm_getrandomanim( var_0, var_2 );
    var_5 = scripts\asm\asm::asm_getxanim( var_2, var_4 );
    var_6 = getmovedelta( var_5 );
    var_7 = lengthsquared( var_6 );
    var_8 = distancesquared( self.origin, self._blackboard.shufflenode.origin );
    return var_7 <= var_8 + 1;
}

abortshufflecleanup( var_0, var_1, var_2 )
{
    self._blackboard.shufflenode = undefined;
}

shouldbeginshuffleexit( var_0, var_1, var_2, var_3 )
{
    var_4 = self.prevcovernode;

    if ( !isdefined( var_4 ) )
        var_4 = self.covernode;

    var_5 = self._blackboard.shufflenode.type;

    if ( isdefined( var_5 ) && ( var_5 == "_encstr_87AB0D4BD7B857DB077503DA9B8EEB" || var_5 == "_encstr_854714E37F10FF63BFDD9B32636643E641DB764CE7F0" || var_5 == "_encstr_9A520FAD2525079A4E3292270DBF5B7A9C" ) )
    {
        var_6 = getdvar( "_encstr_B1A7199B1B4EF5B0A5D7D8DEB32B397D8D39F65D361AAF47E50E2B" );

        if ( isdefined( self.node.covercrouchtype ) )
            var_5 = self.node.covercrouchtype;
        else if ( var_6 != "_encstr_B40101" )
            var_5 = var_6;
    }

    if ( isdefined( var_3 ) && var_5 != var_3 )
        return 0;

    var_7 = scripts\asm\asm::asm_getrandomanim( var_0, var_2 );
    var_8 = scripts\asm\asm::asm_getxanim( var_1, var_7 );
    var_9 = self._blackboard.shufflenode.origin - self.origin;
    var_10 = vectornormalize( var_9 );
    var_11 = getmovedelta( var_8, 0, 1 );
    var_12 = length( var_11 );
    var_13 = self._blackboard.shufflenode.origin - var_10 * var_12;
    var_9 = var_13 - self.origin;
    var_14 = self._blackboard.shufflenode.origin - var_4.origin;
    var_14 = ( var_14[0], var_14[1], 0 );

    if ( vectordot( var_14, var_9 ) <= 0 )
        return 1;

    if ( length2dsquared( self.velocity ) > 1 && vectordot( var_10, self.velocity ) <= 0 )
        return 1;

    return 0;
}

playshuffleanim_arrival( var_0, var_1, var_2 )
{
    self.a.arrivalasmstatename = var_1;
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );
    self aisetanim( var_1, var_3 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_4 );
    var_5 = getmovedelta( var_4 );
    var_6 = getangledelta3d( var_4 );

    if ( isdefined( self._blackboard.shufflenode ) )
        var_7 = self._blackboard.shufflenode;
    else
        var_7 = self.node;

    if ( isdefined( var_7 ) )
    {
        var_8 = var_7.origin;
        var_9 = ( 0, scripts\asm\shared\utility::getnodeforwardyaw( var_7 ), 0 );
        var_10 = combineangles( var_9, invertangles( var_6 ) );
        var_11 = var_7.origin - rotatevector( var_5, var_10 );
    }
    else
    {
        var_8 = self.origin + var_5;
        var_9 = combineangles( self.angles, var_6 );
        var_11 = self.origin;
        var_10 = self.angles;
    }

    var_12 = int( 1000 * getanimlength( var_4 ) - 200 );
    self startcoverarrival();
    self motionwarpwithanim( var_11, var_10, var_8, var_9, var_12 );
    scripts\asm\asm::asm_donotetracks( var_0, var_1 );
}

playshuffleanim_terminate( var_0, var_1, var_2 )
{
    self._blackboard.shufflenode = undefined;
    self._blackboard.shufflefromnode = undefined;
    self finishcoverarrival();
}

incomingremovedcallback( var_0 )
{
    _encstr_953E1CDC6CC94B07E89BCB169BD2B65EDC7B3A953A4E168DB56E17CE378D::notetrack_prefix_handler( var_0 );
    return undefined;
}

coverreload( var_0, var_1, var_2 )
{
    playcoveranim( var_0, var_1, var_2 );
}

cover3dpickexposedir( var_0, var_1, var_2, var_3 )
{
    self.bt.cover.cover3dexposedirpicked = undefined;
    var_4 = ( self.enemy.origin + _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::getenemyeyepos() ) / 2;
    var_5 = anim.asm[var_0].states[var_2];
    var_6 = scripts\engine\utility::array_randomize( var_5.transitions );
    var_7 = undefined;

    foreach ( var_9 in var_6 )
    {
        var_7 = var_9.shouldtransitionparams;

        if ( var_7 == "_encstr_87070365F7" )
            break;

        var_10 = _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::getcover3dnodeoffset( self.node, var_7 );
        var_11 = self.node.origin + var_10;

        if ( sighttracepassed( var_11, var_4, 0, undefined ) )
            break;
    }

    self.bt.cover.cover3dexposedirpicked = var_0 + "_encstr_BA4C02DF" + var_2 + "_encstr_BA4C02DF" + var_7;
    return 1;
}

cover3dcanexposedir( var_0, var_1, var_2, var_3 )
{
    var_4 = var_0 + "_encstr_BA4C02DF" + var_1 + "_encstr_BA4C02DF" + var_3;
    return var_4 == self.bt.cover.cover3dexposedirpicked;
}

iscovernodetype( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_3 ) || !isdefined( self.node ) || !isdefined( self.node.type ) )
        return 0;

    return self.node.type == var_3;
}

iscovermultiswitchrequested( var_0, var_1, var_2, var_3 )
{
    if ( scripts\asm\asm_bb::bb_iscovermultiswitchrequested() )
        return 1;

    return 0;
}

checkcovermultichangerequest( var_0, var_1, var_2, var_3 )
{
    if ( !scripts\asm\asm_bb::bb_iscovermultiswitchrequested() )
        return 0;

    var_4 = scripts\asm\asm_bb::bb_getcovernode();
    [var_6, var_7] = scripts\asm\asm_bb::bb_getrequestedcovermultiswitchnodetype();

    if ( var_7 != var_3 )
        return 0;

    self.asm.covermultiswitchdata = spawnstruct();
    self.asm.covermultiswitchdata.requestednode = var_6;
    self.asm.covermultiswitchdata.requestednodetype = var_7;
    return 1;
}

finishcovermultichangerequest( var_0, var_1, var_2 )
{
    var_3 = self.asm.covermultiswitchdata.requestednode;
    var_4 = self.asm.covermultiswitchdata.requestednodetype;
    self.asm.covermultiswitchdata.requestednode setcovermultinodetype( var_4 );
    self.asm.covermultiswitchdata = undefined;
    clearcoveranim( var_0, var_1, var_2 );
}
