// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

isdamagelocation_rarm( var_0, var_1, var_2, var_3 )
{
    if ( !self.damageshield )
        return scripts\engine\utility::damagelocationisany( "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB", "_encstr_970110C3DBB4827401D972BD36B0A7CB1D45", "_encstr_A1BD0B9C96D9D0A3F51A169B19" );

    return 0;
}

isdamagelocation_rleg( var_0, var_1, var_2, var_3 )
{
    if ( !self.damageshield )
        return scripts\engine\utility::damagelocationisany( "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920", "_encstr_8ECF0B734B47E3AB67AD07909B", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A" );

    return 0;
}

isdamagelocation_lleg( var_0, var_1, var_2, var_3 )
{
    if ( !self.damageshield )
        return scripts\engine\utility::damagelocationisany( "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_95E80A8D59CCD1F533DBED3A", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022" );

    return 0;
}

isdamagelocation_larm( var_0, var_1, var_2, var_3 )
{
    if ( !self.damageshield )
        return scripts\engine\utility::damagelocationisany( "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4", "_encstr_8B970F1B56991DD758E4D6EB63ED77B239", "_encstr_BDB30AC6CA66A3FAA158CD23" );

    return 0;
}

isdamagelocation_torso( var_0, var_1, var_2, var_3 )
{
    if ( !self.damageshield )
        return scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A", "_encstr_9B7A0CF35815C3971660B7CF306B" );

    return 0;
}

isdamagelocation_head( var_0, var_1, var_2, var_3 )
{
    if ( !self.damageshield )
        return scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_9ABA05E87F4B70", "_encstr_A6CC076A05751852B3" );

    return 0;
}

isdamagelocation_larmcrouch( var_0, var_1, var_2, var_3 )
{
    return scripts\engine\utility::damagelocationisany( "_encstr_BDB30AC6CA66A3FAA158CD23", "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4", "_encstr_8B970F1B56991DD758E4D6EB63ED77B239", "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_95E80A8D59CCD1F533DBED3A", "_encstr_9B7A0CF35815C3971660B7CF306B" );
}

isdamagelocation_back( var_0, var_1, var_2, var_3 )
{
    if ( !self.damageshield )
    {
        if ( scripts\asm\shared\utility::gethumandamagedirstring() == 1 && !scripts\engine\utility::damagelocationisany( "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_95E80A8D59CCD1F533DBED3A", "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A", "_encstr_8ECF0B734B47E3AB67AD07909B" ) )
            return 1;
    }

    return 0;
}

isdamagelocation_torsocovercrouch( var_0, var_1, var_2, var_3 )
{
    return scripts\engine\utility::damagelocationisany( "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB", "_encstr_970110C3DBB4827401D972BD36B0A7CB1D45", "_encstr_A1BD0B9C96D9D0A3F51A169B19", "_encstr_BDB30AC6CA66A3FAA158CD23", "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4", "_encstr_8B970F1B56991DD758E4D6EB63ED77B239", "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_95E80A8D59CCD1F533DBED3A", "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A", "_encstr_8ECF0B734B47E3AB67AD07909B", "_encstr_952B0C65857BBFB80F9FC0B8A75A", "_encstr_9B7A0CF35815C3971660B7CF306B" );
}

handlesecondarypainflag()
{
    self endon( "_encstr_AD75063D571AE108" );
    self notify( "_encstr_A6301398BA334F9B6F63B0387CA763CB9153683862" );
    self endon( "_encstr_A6301398BA334F9B6F63B0387CA763CB9153683862" );
    self.asm.secondarypainactive = 1;
    wait 0.5;
    self.asm.secondarypainactive = 0;
}

waitforsecondarypain( var_0, var_1 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );

    for (;;)
    {
        self waittill( "_encstr_B2BE0788BAF573592F" );

        if ( !isalive( self ) )
            break;

        var_2 = chooseadditivepainanim_stand( var_0, var_1 );
        var_3 = scripts\asm\asm::asm_getxanim( var_1, var_2 );
        self aisetanimknobrestart( var_3, 1.0, 0.01, 1 );
        thread handlesecondarypainflag();
        wait 0.35;
    }
}

chooseadditivepainanim_stand( var_0, var_1 )
{
    var_2 = [];

    if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A", "_encstr_9B7A0CF35815C3971660B7CF306B" ) )
        var_2[var_2.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_B89A0AB023C8EBE8DE9CB97B" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_9ABA05E87F4B70" ) )
        var_2[var_2.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A95909582391EB1A2B1691" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB", "_encstr_970110C3DBB4827401D972BD36B0A7CB1D45" ) )
        var_2[var_2.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_85F40E2F87DA27DBF917C0D80F09138B" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4", "_encstr_8B970F1B56991DD758E4D6EB63ED77B239" ) )
        var_2[var_2.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_97C70D99AFDC41899253396767CB41" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_95E80A8D59CCD1F533DBED3A" ) )
        var_2[var_2.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_84C70DF2C029096B79FCBC9F81013F" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A", "_encstr_8ECF0B734B47E3AB67AD07909B" ) )
        var_2[var_2.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_ACF40E83F58C6782325FDBC388EB5832" );

    if ( var_2.size < 2 )
        var_2[var_2.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A72C0CB09146EB3256CCB0AB1BD1" );

    return var_2[randomint( var_2.size )];
}

choosepainanimshock( var_0, var_1, var_2 )
{
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A33F0CDE7C92A73007E33038FB6F" + self.currentpose );
}

playsonicshockfx()
{
    if ( scripts\common\utility::isdamageweapon( getcompleteweaponname( "_encstr_AAE30A689B7FB1F6A2E3B3AF" ) ) && scripts\common\utility::isweaponepic( self.damageweapon ) )
    {
        playfxontag( level.g_effect["_encstr_8B040E9BC0D1A8FBF99BE11650504ACF"], self, "_encstr_BD500A3C087F4AD519410B6F" );
        playfxontag( level.g_effect["_encstr_8B040E9BC0D1A8FBF99BE11650504ACF"], self, "_encstr_A9B30EA6BECD347BAE3623569CBEC95A" );
    }
}

playshockpainloop( var_0, var_1, var_2 )
{
    self endon( "_encstr_AD75063D571AE108" );
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = scripts\engine\utility::ter_op( isdefined( self.empstuntime ), self.empstuntime, 3.5 );
    playsonicshockfx();
    self animmode( "_encstr_A1370EF3FA638AFB695A587B03B42E57", 0 );
    wait( randomfloat( 0.3 ) );

    if ( self.asmname == "_encstr_9B07038DB1" || self.asmname == "_encstr_B2D20A6A9BF0BFBDF8A71DF2" )
    {
        thread shockpainloop_internal( self.asmname, var_1, 1, 0, 1 );
        self playsound( "_encstr_B4A217789AB8855E17D6AF923C9F48AAB81220F0A1DF36FF6F" );
    }
    else
        thread shockpainloop_internal( self.asmname, var_1, 1, 0 );

    wait( var_4 );
    self notify( "_encstr_935C0D8358969B8DDB7B38EBAC9B91" );
    scripts\asm\asm::asm_fireevent( var_0, "_encstr_B47A0F3AB357AB4F1547202BCFE0408780" );
    self.emplooptime = undefined;
    finishpain( var_0, var_1, var_2 );
}

shockpainloop_c6_cleanup( var_0, var_1, var_2 )
{
    self stopsounds();
}

shockpainloop_internal( var_0, var_1, var_2, var_3, var_4 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    self endon( "_encstr_935C0D8358969B8DDB7B38EBAC9B91" );

    if ( isdefined( var_3 ) && var_3 )
    {
        var_5 = scripts\asm\asm::asm_lookupanimfromaliasifexists( "_encstr_999306BA95FACD6B", "_encstr_ACA20538F84D39" );

        if ( isdefined( var_5 ) )
            self setmoveanimknob( var_5 );
    }

    var_6 = scripts\asm\asm::asm_getbodyknob();
    var_7 = scripts\asm\asm::asm_getanim( var_0, var_1 );

    for (;;)
    {
        if ( isdefined( var_4 ) )
            var_7 = scripts\asm\asm::asm_getanim( var_0, var_1 );

        var_8 = scripts\asm\asm::asm_getxanim( var_1, var_7 );
        self aisetanim( var_1, var_7, var_2 );
        scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_8 );
        var_6 = var_7;
        scripts\asm\asm::asm_donotetrackssingleloop( var_0, var_1, var_8, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );
    }
}

chooseshockpainrecovery( var_0, var_1, var_2 )
{
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_BE9B0EC783D296706FAF1088142B20C0" + self.currentpose );
}

playpainanim( var_0, var_1, var_2 )
{
    playpainaniminternal( var_0, var_1, var_2, 0 );
}

playpainanimwithadditives( var_0, var_1, var_2 )
{
    playpainaniminternal( var_0, var_1, var_2, 1 );
}

playpainanimlmg( var_0, var_1, var_2 )
{
    self._blackboard.inlmgstate = 1;
    playpainaniminternal( var_0, var_1, var_2, 0 );
}

pain_can_use_handler( var_0, var_1 )
{
    if ( var_0 == "_encstr_930A0D99192C73C0E77290BE1AFB05" )
        return 1;
}

shouldpainruntostrafereverse( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self.pathgoalpos ) )
        return 0;

    if ( self pathdisttogoal() < 36 )
        return 0;

    var_4 = length( self.velocity );

    if ( var_4 < 20 )
        return 0;

    var_5 = self.velocity / var_4;

    if ( self.lookaheaddist > 12 )
        var_6 = self.lookaheaddir;
    else
        var_6 = vectornormalize( self getposonpath( 36 ) - self.origin );

    return vectordot( var_6, var_5 ) < 0.5;
}

ispainweaponsizelarge( var_0, var_1, var_2, var_3 )
{
    var_4 = "_encstr_965306392D3336B2";
    var_5 = self.damageweapon;

    if ( isdefined( var_5 ) && var_5.basename != "_encstr_92DF0ED45BDA2E53D81F08FF1B5F9FC2" )
        var_4 = var_5.classname;

    if ( var_4 == "_encstr_A1100738A33A638123" )
    {
        if ( isdefined( self.lastattacker ) && distancesquared( self.lastattacker.origin, self.origin ) <= 62500 )
            return 1;
    }
    else if ( var_4 == "_encstr_850707F7E5833355B8" || var_4 == "_encstr_BE0703A54C" )
        return 1;

    return 0;
}

getpainweaponsize()
{
    var_0 = "_encstr_A71A0491BA77";
    var_1 = "_encstr_965306392D3336B2";
    var_2 = self.damageweapon;

    if ( isdefined( var_2 ) && var_2.basename != "_encstr_92DF0ED45BDA2E53D81F08FF1B5F9FC2" )
        var_1 = var_2.classname;

    if ( var_1 == "_encstr_8D940738966ED1DB8D" || var_1 == "_encstr_BE1904DCDA9D" )
        var_0 = "_encstr_A71A0491BA77";
    else if ( var_1 == "_encstr_A1100738A33A638123" )
    {
        var_0 = "_encstr_A71A0491BA77";

        if ( isdefined( self.lastattacker ) && distancesquared( self.lastattacker.origin, self.origin ) <= 62500 )
            var_0 = "_encstr_A51A04DF02E4";
    }
    else if ( var_1 == "_encstr_850707F7E5833355B8" || var_1 == "_encstr_BE0703A54C" )
        var_0 = "_encstr_A51A04DF02E4";
    else if ( var_1 == "_encstr_8C8D08671D451291C849" && isdefined( self.damagemod ) && self.damagemod == "_encstr_A1ED0BA9FF84562B60BA073E83" )
        var_0 = "_encstr_A51A04DF02E4";

    if ( isdefined( level.fnasmsoldiergetpainweaponsize ) )
        var_0 = self [[ level.fnasmsoldiergetpainweaponsize ]]( var_0 );

    return var_0;
}

getpainweaponsize_exposed()
{
    var_0 = "_encstr_A71A0491BA77";
    var_1 = "_encstr_965306392D3336B2";
    var_2 = self.damageweapon;

    if ( isdefined( var_2 ) && var_2.basename != "_encstr_92DF0ED45BDA2E53D81F08FF1B5F9FC2" )
        var_1 = var_2.classname;

    if ( var_1 == "_encstr_8D940738966ED1DB8D" || var_1 == "_encstr_BE1904DCDA9D" )
        var_0 = "_encstr_A71A0491BA77";
    else if ( var_1 == "_encstr_A1100738A33A638123" )
    {
        var_0 = "_encstr_A71A0491BA77";

        if ( isdefined( self.lastattacker ) && distancesquared( self.lastattacker.origin, self.origin ) <= 62500 )
            var_0 = "_encstr_A51A04DF02E4";
    }
    else if ( var_1 == "_encstr_850707F7E5833355B8" || var_1 == "_encstr_BE0703A54C" )
        var_0 = "_encstr_A51A04DF02E4";

    if ( isdefined( level.fnasmsoldiergetpainweaponsize ) )
        var_0 = self [[ level.fnasmsoldiergetpainweaponsize ]]( var_0 );

    return var_0;
}

getpaindirectiontoactor()
{
    if ( isdefined( self.damageyaw ) && self.damageyaw >= -45 && self.damageyaw <= 45 )
    {
        var_0 = "_encstr_B40703E96D";
        return var_0;
    }
    else if ( isdefined( self.damageyaw ) && self.damageyaw < -45 && self.damageyaw > -135 )
    {
        var_0 = "_encstr_A50703AFB1";
        return var_0;
    }
    else if ( isdefined( self.damageyaw ) && self.damageyaw > 45 && self.damageyaw < 135 )
    {
        var_0 = "_encstr_9207034F36";
        return var_0;
    }
    else
    {
        var_0 = "_encstr_BA07035941";
        return var_0;
    }
}

choosedirectionalpainanim_exposedstand( var_0, var_1, var_2 )
{
    var_3 = getpainweaponsize();
    var_4 = getpaindirectiontoactor();
    var_5 = "_encstr_877D06BB570AB0D0";
    var_6 = "_encstr_8B9B085B961998DB19F2";
    var_7 = [];

    if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_9ABA05E87F4B70" ) )
    {
        var_5 = "_encstr_81CC0586952C91";
        var_6 = "_encstr_81CC0586952C91";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_81CC0586952C91" + var_3 + var_4 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A", "_encstr_9B7A0CF35815C3971660B7CF306B" ) )
    {
        var_5 = "_encstr_877D06BB570AB0D0";
        var_6 = "_encstr_8B9B085B961998DB19F2";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_877D06BB570AB0D0" + var_3 + var_4 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB", "_encstr_970110C3DBB4827401D972BD36B0A7CB1D45", "_encstr_A1BD0B9C96D9D0A3F51A169B19" ) )
    {
        var_5 = "_encstr_A61F054B88CBE5";
        var_6 = "_encstr_8B9B085B961998DB19F2";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A61F054B88CBE5" + var_3 + var_4 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4", "_encstr_8B970F1B56991DD758E4D6EB63ED77B239", "_encstr_BDB30AC6CA66A3FAA158CD23" ) )
    {
        var_5 = "_encstr_86AD05B116396B";
        var_6 = "_encstr_8B9B085B961998DB19F2";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_86AD05B116396B" + var_3 + var_4 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_95E80A8D59CCD1F533DBED3A" ) )
    {
        var_5 = "_encstr_B2AD05EDF1C38F";
        var_6 = "_encstr_AFD50A3C308FCD6BD2187B33";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_B2AD05EDF1C38F" + var_3 + var_4 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A", "_encstr_8ECF0B734B47E3AB67AD07909B" ) )
    {
        var_5 = "_encstr_A11F0525739274";
        var_6 = "_encstr_AFD50A3C308FCD6BD2187B33";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A11F0525739274" + var_3 + var_4 );
    }
    else
    {
        var_5 = "_encstr_877D06BB570AB0D0";
        var_6 = "_encstr_8B9B085B961998DB19F2";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_877D06BB570AB0D0" + var_3 + var_4 );
    }

    var_8 = var_5 + var_3 + var_4;
    var_9 = "_encstr_8C0703271D";

    if ( var_4 == "_encstr_B40703E96D" )
        var_9 = "_encstr_8B0703EBE0";
    else if ( var_4 == "_encstr_A50703AFB1" )
        var_9 = "_encstr_A50703AFD8";
    else if ( var_4 == "_encstr_9207034F36" )
        var_9 = "_encstr_AF0703DE3B";

    self.asm.aliaspain = var_8;
    self.asm.painloc = var_6;
    self.asm.painsize = var_3;
    return var_7[randomint( var_7.size )];
}

choosedirectionalfullpainanim_exposedstand( var_0, var_1, var_2 )
{
    var_3 = getpaindirectiontoactor();
    var_4 = "_encstr_877D06BB570AB0D0";
    var_5 = "_encstr_8B9B085B961998DB19F2";
    var_6 = [];

    if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_9ABA05E87F4B70" ) )
    {
        var_4 = "_encstr_81CC0586952C91";
        var_5 = "_encstr_81CC0586952C91";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_81CC0586952C91" + var_3 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A" ) )
    {
        var_4 = "_encstr_952B0C65857BBFB80F9FC0B8A75A";
        var_5 = "_encstr_8B9B085B961998DB19F2";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_952B0C65857BBFB80F9FC0B8A75A" + var_3 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_9B7A0CF35815C3971660B7CF306B" ) )
    {
        var_4 = "_encstr_9B7A0CF35815C3971660B7CF306B";
        var_5 = "_encstr_8B9B085B961998DB19F2";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9B7A0CF35815C3971660B7CF306B" + var_3 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB" ) )
    {
        var_4 = "_encstr_91B20B7AC9708D296D310B575D";
        var_5 = "_encstr_8B9B085B961998DB19F2";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_91B20B7AC9708D296D310B575D" + var_3 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_970110C3DBB4827401D972BD36B0A7CB1D45", "_encstr_A1BD0B9C96D9D0A3F51A169B19" ) )
    {
        var_4 = "_encstr_83210B030BFE129FD85873FFD3";
        var_5 = "_encstr_8B9B085B961998DB19F2";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_83210B030BFE129FD85873FFD3" + var_3 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4" ) )
    {
        var_4 = "_encstr_9B810B63C24ED6BEAB0EE0ACC9";
        var_5 = "_encstr_8B9B085B961998DB19F2";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9B810B63C24ED6BEAB0EE0ACC9" + var_3 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8B970F1B56991DD758E4D6EB63ED77B239", "_encstr_BDB30AC6CA66A3FAA158CD23" ) )
    {
        var_4 = "_encstr_A1B60B326FE302493878609B22";
        var_5 = "_encstr_8B9B085B961998DB19F2";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A1B60B326FE302493878609B22" + var_3 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83" ) )
    {
        var_4 = "_encstr_9B710B1B3656ECF5BA07C12BC9";
        var_5 = "_encstr_AFD50A3C308FCD6BD2187B33";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9B710B1B3656ECF5BA07C12BC9" + var_3 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_95E80A8D59CCD1F533DBED3A" ) )
    {
        var_4 = "_encstr_8BDF0BC33B89A1CF99E06F717A";
        var_5 = "_encstr_AFD50A3C308FCD6BD2187B33";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8BDF0BC33B89A1CF99E06F717A" + var_3 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920" ) )
    {
        var_4 = "_encstr_99B10B9890AADF6FF83AA39373";
        var_5 = "_encstr_AFD50A3C308FCD6BD2187B33";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_99B10B9890AADF6FF83AA39373" + var_3 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A", "_encstr_8ECF0B734B47E3AB67AD07909B" ) )
    {
        var_4 = "_encstr_B2BA0B386AF77F5E0BAF7C7DAA";
        var_5 = "_encstr_AFD50A3C308FCD6BD2187B33";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_B2BA0B386AF77F5E0BAF7C7DAA" + var_3 );
    }
    else
    {
        var_4 = "_encstr_9B7A0CF35815C3971660B7CF306B";
        var_5 = "_encstr_8B9B085B961998DB19F2";
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9B7A0CF35815C3971660B7CF306B" + var_3 );
    }

    var_7 = var_4 + var_3;
    var_8 = "_encstr_8C0703271D";

    if ( var_3 == "_encstr_B40703E96D" )
        var_8 = "_encstr_8B0703EBE0";
    else if ( var_3 == "_encstr_A50703AFB1" )
        var_8 = "_encstr_A50703AFD8";
    else if ( var_3 == "_encstr_9207034F36" )
        var_8 = "_encstr_AF0703DE3B";

    self.asm.aliaspain = var_7;
    self.asm.painloc = var_5;
    return var_6[randomint( var_6.size )];
}

choosedirectionalpainanim_transition( var_0, var_1, var_2 )
{
    if ( isdefined( self.asm.aliaspain ) )
    {
        var_3 = self.asm.aliaspain;
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 );
    }

    return scripts\asm\asm::asm_getrandomanim( var_1 );
}

choosedirectionalpainanim_coverstand( var_0, var_1, var_2 )
{
    var_3 = getpainweaponsize();
    var_4 = getpaindirectiontoactor();
    var_5 = "_encstr_877D06BB570AB0D0";
    var_6 = "_encstr_8B9B085B961998DB19F2";
    var_7 = [];

    if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_9ABA05E87F4B70" ) )
    {
        var_5 = "_encstr_81CC0586952C91";
        var_6 = "_encstr_81CC0586952C91";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_81CC0586952C91" + var_3 + var_4 );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_95E80A8D59CCD1F533DBED3A", "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A", "_encstr_8ECF0B734B47E3AB67AD07909B" ) )
    {
        var_5 = "_encstr_ABAD054DE5976B";
        var_6 = "_encstr_AFD50A3C308FCD6BD2187B33";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_ABAD054DE5976B" + var_3 + var_4 );
    }
    else
    {
        var_5 = "_encstr_877D06BB570AB0D0";
        var_6 = "_encstr_8B9B085B961998DB19F2";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_877D06BB570AB0D0" + var_3 + var_4 );
    }

    var_8 = var_5 + var_3 + var_4;
    var_9 = "_encstr_8C0703271D";

    if ( var_4 == "_encstr_B40703E96D" )
        var_9 = "_encstr_8B0703EBE0";
    else if ( var_4 == "_encstr_A50703AFB1" )
        var_9 = "_encstr_A50703AFD8";
    else if ( var_4 == "_encstr_9207034F36" )
        var_9 = "_encstr_AF0703DE3B";

    self.asm.aliaspain = var_8;
    self.asm.painloc = var_6;
    self.asm.painsize = var_3;
    return var_7[randomint( var_7.size )];
}

choosedirectionalpainanim_covercrouch( var_0, var_1, var_2 )
{
    var_3 = getpainweaponsize();
    var_4 = getpaindirectiontoactor();
    var_5 = "_encstr_877D06BB570AB0D0";
    var_6 = "_encstr_8B9B085B961998DB19F2";
    var_7 = [];

    if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_9ABA05E87F4B70" ) )
    {
        var_5 = "_encstr_81CC0586952C91";
        var_6 = "_encstr_81CC0586952C91";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_81CC0586952C91" + var_3 + var_4 );
    }
    else
    {
        var_5 = "_encstr_877D06BB570AB0D0";
        var_6 = "_encstr_8B9B085B961998DB19F2";
        var_7[var_7.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_877D06BB570AB0D0" + var_3 + var_4 );
    }

    var_8 = var_5 + var_3 + var_4;
    var_9 = "_encstr_8C0703271D";

    if ( var_4 == "_encstr_B40703E96D" )
        var_9 = "_encstr_8B0703EBE0";
    else if ( var_4 == "_encstr_A50703AFB1" )
        var_9 = "_encstr_A50703AFD8";
    else if ( var_4 == "_encstr_9207034F36" )
        var_9 = "_encstr_AF0703DE3B";

    self.asm.aliaspain = var_8;
    self.asm.painloc = var_6;
    self.asm.painsize = var_3;
    return var_7[randomint( var_7.size )];
}

choosepainanim_covercrouchlean( var_0, var_1, var_2 )
{
    var_3 = getpainweaponsize();
    var_4 = "_encstr_B60D055B0E3128";
    var_5 = [];
    var_5[var_5.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_4 + var_3 );
    var_6 = var_4 + var_3;
    self.asm.aliaspain = var_6;
    return var_5[randomint( var_5.size )];
}

playpainaniminternal( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );

    if ( isdefined( self.a.paintime ) )
        self.a.lastpaintime = self.a.paintime;
    else
        self.a.lastpaintime = 0;

    self.a.paintime = gettime();

    if ( self.stairsstate != "_encstr_8BBA05185F8B99" )
        self.a.painonstairs = 1;
    else
        self.a.painonstairs = undefined;

    self animmode( "_encstr_8AD6086722F1FB98F58B" );

    if ( !istrue( var_6 ) )
        self orientmode( "_encstr_A34A0B518A172592D6E64FA115", self.angles[1] );

    if ( !isdefined( self.no_pain_sound ) )
        _encstr_B282169B8DE496C13ACDE52C9BB4B6F29958D8595C3B6E1B::saygenericdialogue( "_encstr_B60D055B0E3128" );

    if ( scripts\asm\soldier\death::shouldhelmetpoponpain( scripts\common\utility::wasdamagedbyexplosive() ) )
        scripts\asm\soldier\death::helmetpop();

    var_7 = var_1;

    if ( isdefined( var_5 ) )
        var_7 = var_5;

    var_8 = scripts\asm\asm::asm_getanim( var_0, var_1, var_2 );
    self aisetanim( var_7, var_8 );

    if ( var_3 == 1 )
    {
        self.asm.secondarypainactive = 0;
        thread waitforsecondarypain( var_0, var_1 );
    }

    var_9 = scripts\asm\asm::asm_getxanim( var_7, var_8 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_9 );
    self.requestdifferentcover = 1;

    if ( animhasnotetrack( var_9, "_encstr_B6B30A278FC7F078673A0B11" ) )
        scripts\asm\asm::asm_donotetracks( var_0, var_1, undefined, undefined, var_7 );

    scripts\asm\asm::asm_donotetracks( var_0, var_1, undefined, undefined, var_7 );

    if ( istrue( var_4 ) )
        finishpain( var_0, var_1, var_2 );
    else
        finishpain( var_0, var_1 );
}

paincanend( var_0, var_1 )
{
    switch ( var_1 )
    {
        case "_encstr_930A0D99192C73C0E77290BE1AFB05":
            return 1;
    }
}

coverexppainselectreturna( var_0, var_1, var_2 )
{
    if ( isdefined( self._blackboard.coverexposetype ) && self._blackboard.coverexposetype == "_encstr_994C0238" )
        return 1;
    else
        return 0;
}

finishpain( var_0, var_1, var_2 )
{
    self notify( "_encstr_85140F22139204D9DDF8E3DF36CDE82275" );

    if ( isdefined( self.asm.secondarypainactive ) )
        self.asm.secondarypainactive = undefined;

    var_3 = undefined;

    if ( isdefined( var_2 ) )
    {
        if ( isarray( var_2 ) )
            var_3 = var_2[0];
        else
            var_3 = var_2;
    }

    if ( !isdefined( var_3 ) )
        return;

    thread scripts\asm\asm::asm_setstate( var_3, undefined );
}

playcoverpainanimwithadditives( var_0, var_1, var_2 )
{
    self.keepclaimednodeifvalid = 1;
    playpainaniminternal( var_0, var_1, var_2, 1 );
}

playcoverpainanim( var_0, var_1, var_2 )
{
    self.keepclaimednodeifvalid = 1;
    playpainanim( var_0, var_1, var_2 );
}

shouldusedamageshieldanim()
{
    if ( self.damageshield && !isdefined( self.disabledamageshieldpain ) )
    {
        if ( self.currentpose == "_encstr_922406F1A6FD5E05" )
            return 0;

        if ( isdefined( self.lastattacker ) && isdefined( self.lastattacker.team ) && self.lastattacker.team == self.team )
            return 0;

        if ( self.damageshieldcounter > 0 )
            return 0;

        return 1;
    }

    return 0;
}

shoulddamageshielddowntoground( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.damageshield ) && self.damageshield && !isdefined( self.disabledamageshieldpain ) )
    {
        if ( isdefined( self.lastattacker ) && isdefined( self.lastattacker.unittype ) && self.lastattacker.unittype == "_encstr_AF07035938" )
        {
            var_4 = self.damageweapon;

            if ( isdefined( var_4 ) && var_4.isbeam )
                return 1;
        }
    }

    return 0;
}

playpainanim_damageshieldtoground( var_0, var_1, var_2 )
{
    self.asm.binfullbodypain = 1;
    playpainaniminternal( var_0, var_1, var_2, 0, 1 );
}

playpainanim_damageshieldtoground_cleanup( var_0, var_1, var_2 )
{
    self.asm.binfullbodypain = undefined;
}

chooseanim_damageshieldtoground( var_0, var_1, var_2 )
{
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_B60D055B0E3128" );
}

choosepainanim_standtorsotoexposed( var_0, var_1, var_2 )
{
    if ( self.lasttorsoanim == "_encstr_952B0C65857BBFB80F9FC0B8A75A" )
        var_3 = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_952B0C65857BBFB80F9FC0B8A75A" );
    else if ( self.lasttorsoanim == "_encstr_9B7A0CF35815C3971660B7CF306B" )
        var_3 = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9B7A0CF35815C3971660B7CF306B" );
    else
        var_3 = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );

    self.lasttorsoanim = undefined;
    return var_3;
}

choosepainanim_standtorso( var_0, var_1, var_2 )
{
    if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A" ) )
    {
        self.lasttorsoanim = "_encstr_952B0C65857BBFB80F9FC0B8A75A";
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_952B0C65857BBFB80F9FC0B8A75A" );
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_9B7A0CF35815C3971660B7CF306B" ) )
    {
        self.lasttorsoanim = "_encstr_9B7A0CF35815C3971660B7CF306B";
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9B7A0CF35815C3971660B7CF306B" );
    }
    else
    {
        self.lasttorsoanim = "_encstr_8B1608EC43B8D647A113";
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );
    }
}

choosepainanim_stand( var_0, var_1, var_2 )
{
    if ( shouldusedamageshieldanim() )
    {
        if ( self.currentpose == "_encstr_B13D076BED70539F23" )
            return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_960C15253008A0176709D74BA24719D1E1B6E59FD018B1" );
        else if ( self.currentpose == "_encstr_A5AD069B231F0BAF" )
            return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9B4E1454F3586EA78DAE7BD270D5C367717FDCD915F8" );
    }

    if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::isusingsidearm() )
        return choosepainanim_pistol( var_0, var_1, var_2 );

    var_3 = [];

    if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_952B0C65857BBFB80F9FC0B8A75A" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_9B7A0CF35815C3971660B7CF306B" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9B7A0CF35815C3971660B7CF306B" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_9ABA05E87F4B70" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_81CC0586952C91" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB", "_encstr_970110C3DBB4827401D972BD36B0A7CB1D45" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A9F40A4EA5EC0D8EFAC2E4B5" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4", "_encstr_8B970F1B56991DD758E4D6EB63ED77B239" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A75F09A1FD03131FFE8BD8" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_95E80A8D59CCD1F533DBED3A" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A95F091BB2CC8EBEC62BD9" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A", "_encstr_8ECF0B734B47E3AB67AD07909B" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_91F40A7AB3E9A3E34790BA92" );

    if ( var_3.size < 2 )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );

    return var_3[randomint( var_3.size )];
}

choosepainanim_damageshield( var_0, var_1, var_2 )
{
    if ( shouldusedamageshieldanim() )
    {
        if ( self.currentpose == "_encstr_B13D076BED70539F23" )
            return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_960C15253008A0176709D74BA24719D1E1B6E59FD018B1" );
        else if ( self.currentpose == "_encstr_A5AD069B231F0BAF" )
            return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9B4E1454F3586EA78DAE7BD270D5C367717FDCD915F8" );
    }

    var_3 = [];

    if ( var_3.size < 2 )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );

    return var_3[randomint( var_3.size )];
}

choosedynamicpainanim_expcrouchlegs( var_0, var_1, var_2 )
{
    var_3 = [];
    var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );
    return var_3[randomint( var_3.size )];
}

choosepainanim_crouch( var_0, var_1, var_2 )
{
    var_3 = [];
    var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );

    if ( scripts\engine\utility::damagelocationisany( "_encstr_BDB30AC6CA66A3FAA158CD23", "_encstr_8B970F1B56991DD758E4D6EB63ED77B239", "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A75F09A1FD03131FFE8BD8" );

    if ( scripts\engine\utility::damagelocationisany( "_encstr_A1BD0B9C96D9D0A3F51A169B19", "_encstr_970110C3DBB4827401D972BD36B0A7CB1D45", "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A9F40A4EA5EC0D8EFAC2E4B5" );

    return var_3[randomint( var_3.size )];
}

choosepainanim_pistol( var_0, var_1, var_2 )
{
    var_3 = [];

    if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_813713034BB394B071BFB9301DEBC0616BFBF22A62" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_9B7A0CF35815C3971660B7CF306B" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8E15130B92CFC580EDAF013FAA12B8181B6A63D14B" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_9ABA05E87F4B70" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_B65C0C83D2B93AB78DBE9BACD8DA" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_964A0CF130EE9B3FF00E4C3563E1" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_99E30BF0D703E3B7A28961FD9F" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8A4616E0F3905C6AC97F58B83723F759A3E999B73BFBB1E6" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8B970F1B56991DD758E4D6EB63ED77B239" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_834F16FFF26B7C37BCFFC232D550D1D61B4916FA98D8A363" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8F39176BFCC789AD20F7C604EFE05B17670B8F7690D3A8BD1B" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_970110C3DBB4827401D972BD36B0A7CB1D45" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9A3617C1C3FBDB857DD1433BFF9BE82F3193CA46F0B850E1B3" );

    if ( var_3.size < 2 )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_86A00FCFACC319ED849FF8F853A11B71DB" );

    return var_3[randomint( var_3.size )];
}

choosepainanim_run( var_0, var_1, var_2 )
{
    var_3 = 30;
    var_4 = 150;
    var_5 = 300;
    var_6 = [];
    var_7 = 0;
    var_8 = 0;
    var_9 = 0;
    var_10 = navtrace( self.origin, self localtoworldcoords( ( var_5, 0, 0 ) ), self, 1 );

    if ( var_10["_encstr_A53009A25003666B9818C6"] > 0.9 )
        var_8 = 1;

    if ( var_10["_encstr_A53009A25003666B9818C6"] > 0.9 * ( var_4 / var_5 ) )
        var_7 = 1;

    if ( isdefined( self.a.disablelongpain ) )
    {
        var_8 = 0;
        var_7 = 0;
    }

    var_11 = length( self.velocity );
    var_12 = scripts\asm\shared\utility::getbasearchetype();
    var_13 = getnextlowestspeedthresholdstring( var_12, var_11 );

    if ( var_8 )
    {
        var_14 = "_encstr_B4AD059D68F0E7" + var_13;
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_14 );
    }
    else if ( var_7 )
    {
        var_14 = "_encstr_AB5E07609A5B7368E5" + var_13;
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_14 );
    }
    else if ( var_10["_encstr_A53009A25003666B9818C6"] > 0.9 * ( var_3 / var_5 ) )
    {
        var_14 = "_encstr_8C4806EBD0682BFB" + var_13;
        var_6[var_6.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_14 );
    }

    if ( var_6.size == 0 )
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_B88211F02D5F023F5D325F91B8696E3242D3F3" );

    return var_6[randomint( var_6.size )];
}

choosepainanim_tocoverhide_helper( var_0, var_1, var_2, var_3 )
{
    return scripts\asm\asm::asm_chooseanim( var_0, var_1, var_2 );
}

choosepainanim_tocoverhide( var_0, var_1, var_2 )
{
    return scripts\asm\soldier\cover::getstopdatafortransition( var_0, var_1, ::choosepainanim_tocoverhide_helper );
}

choosepainanim_covercorner_helper( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_2 ) && isdefined( var_2[1] ) )
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, var_2[1] );

    if ( self.currentpose == "_encstr_B13D076BED70539F23" )
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_B13D076BED70539F23" );
    else
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A5AD069B231F0BAF" );
}

choosepainanim_covercorner_tocoverhide( var_0, var_1, var_2 )
{
    return scripts\asm\soldier\cover::getstopdatafortransition( var_0, var_1, ::choosepainanim_covercorner_helper );
}

choosepainanim_covercorner( var_0, var_1, var_2 )
{
    return choosepainanim_covercorner_helper( var_0, var_1, var_2, undefined );
}

choosedynamicpainanim_back( var_0, var_1, var_2 )
{
    var_3 = "_encstr_B69B0589C236B6";
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 );
}

choosepainanim_covercrouch( var_0, var_1, var_2 )
{
    var_3 = "_encstr_B13D076BED70539F23";

    if ( isdefined( var_2 ) )
        var_3 = var_3 + "_encstr_BA4C02DF" + var_2;

    return scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 );
}

choosedynamicpainanim_covercrouch( var_0, var_1, var_2 )
{
    var_3 = [];

    if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A", "_encstr_9B7A0CF35815C3971660B7CF306B" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_877D06BB570AB0D0" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_9ABA05E87F4B70" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_81CC0586952C91" );

    if ( var_3.size < 2 )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );

    return var_3[randomint( var_3.size )];
}

choosepainanim_coverstand( var_0, var_1, var_2 )
{
    var_3 = "_encstr_A5AD069B231F0BAF";

    if ( isdefined( var_2 ) && isdefined( var_2 ) )
        var_3 = var_3 + "_encstr_BA4C02DF" + var_2;

    return scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 );
}

choosedynamicpainanim_coverstand( var_0, var_1, var_2 )
{
    var_3 = [];

    if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_952B0C65857BBFB80F9FC0B8A75A" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_9B7A0CF35815C3971660B7CF306B" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9B7A0CF35815C3971660B7CF306B" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_9ABA05E87F4B70" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_81CC0586952C91" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB", "_encstr_970110C3DBB4827401D972BD36B0A7CB1D45" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A9F40A4EA5EC0D8EFAC2E4B5" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4", "_encstr_8B970F1B56991DD758E4D6EB63ED77B239" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A75F09A1FD03131FFE8BD8" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_95E80A8D59CCD1F533DBED3A" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A95F091BB2CC8EBEC62BD9" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A", "_encstr_8ECF0B734B47E3AB67AD07909B" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_91F40A7AB3E9A3E34790BA92" );

    if ( var_3.size < 2 )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );

    return var_3[randomint( var_3.size )];
}

choosepainanimdeafened( var_0, var_1, var_2 )
{
    var_3 = 3;
    var_4 = "_encstr_A2750623B258CC7D" + ( randomint( var_3 ) + 1 );
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, var_4 );
}

cleanuppainanim( var_0, var_1, var_2 )
{
    if ( isdefined( self.script ) && self.script == "_encstr_B60D055B0E3128" )
        self notify( "_encstr_85140F22139204D9DDF8E3DF36CDE82275" );

    if ( isdefined( self.damageshieldpain ) )
    {
        self.damageshieldcounter = undefined;
        self.damageshieldpain = undefined;
        self.allowpain = 1;

        if ( !isdefined( self.predamageshieldignoreme ) )
            self.ignoreme = 0;

        self.predamageshieldignoreme = undefined;
    }

    if ( isdefined( self.blockingpain ) )
    {
        self.blockingpain = undefined;
        self.allowpain = 1;
    }

    clearpainturnrate( var_0, var_1, var_2 );

    if ( istrue( self.leavecasualkiller ) )
        scripts\asm\soldier\script_funcs::terminate_casualkiller( var_0, var_1, var_2 );

    if ( !istrue( self.ignoreall ) )
    {
        if ( isdefined( self.enemy ) && lengthsquared( self.velocity ) < 1 && isdefined( self.weapon ) && !istrue( self.enemy.ignoreme ) && self cansee( self.enemy ) )
            self.remainexposedendtime = gettime() + 2000;
    }
}

transition_flashfinished( var_0, var_1, var_2, var_3 )
{
    if ( !scripts\engine\utility::isflashed() )
        return 1;

    if ( gettime() > self.flashendtime )
        return 1;

    return scripts\asm\asm::asm_eventfired( var_0, "_encstr_961804BD954A" ) || scripts\asm\asm::asm_eventfired( var_0, "_encstr_B4BA07CC5ADCB4CDD0" );
}

iscovercrouch( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self._blackboard.covernode ) )
        return 0;

    if ( isdefined( self._blackboard.covernode.type ) && self._blackboard.covernode.type == "_encstr_87AB0D4BD7B857DB077503DA9B8EEB" )
        return 1;
    else
        return 0;
}

iscoverstand( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self._blackboard.covernode ) )
        return 0;

    if ( isdefined( self._blackboard.covernode.type ) && self._blackboard.covernode.type == "_encstr_AFFF0C6E8FE899DDE6174B068510" )
        return 1;
    else
        return 0;
}

iscoverright_crouch( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self._blackboard.covernode ) )
        return 0;

    if ( isdefined( self._blackboard.covernode.type ) && self._blackboard.covernode.type == "_encstr_86A30C90489C3F32B21DA9AF0178" && ( isdefined( self.currentpose ) && self.currentpose == "_encstr_B13D076BED70539F23" ) )
        return 1;
    else
        return 0;
}

iscoverright_stand( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self._blackboard.covernode ) )
        return 0;

    if ( isdefined( self._blackboard.covernode.type ) && self._blackboard.covernode.type == "_encstr_86A30C90489C3F32B21DA9AF0178" && ( isdefined( self.currentpose ) && self.currentpose == "_encstr_A5AD069B231F0BAF" ) )
        return 1;
    else
        return 0;
}

iscoverleft_crouch( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self._blackboard.covernode ) )
        return 0;

    if ( isdefined( self._blackboard.covernode.type ) && self._blackboard.covernode.type == "_encstr_A7760B6710A315533959DF17AD" && ( isdefined( self.currentpose ) && self.currentpose == "_encstr_B13D076BED70539F23" ) )
        return 1;
    else
        return 0;
}

iscoverleft_stand( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self._blackboard.covernode ) )
        return 0;

    if ( isdefined( self._blackboard.covernode.type ) && self._blackboard.covernode.type == "_encstr_A7760B6710A315533959DF17AD" && ( isdefined( self.currentpose ) && self.currentpose == "_encstr_A5AD069B231F0BAF" ) )
        return 1;
    else
        return 0;
}

isexposed_crouch( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self._blackboard.covernode ) )
        return 0;

    if ( isdefined( self._blackboard.covernode.type ) && self._blackboard.covernode.type == "_encstr_8E2508511EE07BE6B246" && ( isdefined( self.currentpose ) && self.currentpose == "_encstr_B13D076BED70539F23" ) )
        return 1;
    else
        return 0;
}

isexposed_prone( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self._blackboard.covernode ) )
        return 0;

    if ( isdefined( self._blackboard.covernode.type ) && self._blackboard.covernode.type == "_encstr_8E2508511EE07BE6B246" && ( isdefined( self.currentpose ) && self.currentpose == "_encstr_922406F1A6FD5E05" ) )
        return 1;
    else
        return 0;
}

playanim_flashed( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    playanim_flashed_internal( var_0, var_1 );
    thread playanim_monitorflashrestart( var_0, var_1 );
    scripts\asm\asm::asm_donotetracks( var_0, var_1 );
}

playanim_flashed_internal( var_0, var_1 )
{
    var_2 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_3 = 1;

    if ( isdefined( self.flashendtime ) )
    {
        var_4 = self.flashendtime - gettime();
        var_5 = scripts\asm\asm::asm_getxanim( var_1, var_2 );
        var_6 = getanimlength( var_5 ) * 1000;

        if ( var_4 > 0 )
            var_3 = var_6 / var_4;

        var_3 = var_3 + randomfloatrange( -0.2, 0.2 );
        var_3 = clamp( var_3, 0.2, 1.65 );
    }

    self aisetanim( var_1, var_2, var_3 );
}

playanim_monitorflashrestart( var_0, var_1 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_2 = self.flashendtime;

    while ( isdefined( self.flashendtime ) )
    {
        if ( var_2 != self.flashendtime )
        {
            var_2 = self.flashendtime;
            playanim_flashed_internal( var_0, var_1 );
        }

        waitframe();
    }
}

chooseanim_flashed( var_0, var_1, var_2 )
{
    var_3 = "_encstr_8C190457C869";

    if ( isdefined( self.flashendtime ) )
    {
        var_4 = self.flashendtime - gettime();

        if ( var_4 <= 3750 )
            var_3 = "_encstr_8C4806EBD0682BFB";
        else if ( var_4 >= 5250 )
            var_3 = "_encstr_8C190457C869";
    }

    var_5 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 );
    return scripts\asm\shared\utility::preventrecentanimindex( var_1, var_3, var_5 );
}

cleanupflashanim( var_0, var_1, var_2 )
{
    cleanuppainanim( var_0, var_1, var_2 );
    scripts\common\utility::flashbangstop();
}

playanim_burning( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1, var_2 );
    var_4 = randomfloatrange( 0.8, 1.2 );
    self orientmode( "_encstr_A34A0B518A172592D6E64FA115", self.angles[1] );
    self aisetanim( var_1, var_3, var_4 );
    scripts\asm\asm::asm_donotetracks( var_0, var_1, ::burn_notetrack_handler );
}

burn_notetrack_handler( var_0 )
{
    if ( isdefined( self.semtexstuckto ) )
        return;

    switch ( var_0 )
    {
        case "_encstr_817C1972F8B5D5378B0C406F1F31B79D47709BDA28414123C1E724":
            playfxontag( level.g_effect["_encstr_8E7C16CE991EBEC4BAC9377D6E6B8DEB43562C32FA8DEDDD"], self, "_encstr_9ABB0968F1402B19E2AFA9" );
            break;
        case "_encstr_82541A89ABC9B9FA9D99C3AF832C9673FA9BA31639E87D2C276BEB1B":
            playfxontag( level.g_effect["_encstr_A6D9117BD1235FBE80D5561FAF3845174168E3"], self, "_encstr_8D8B0B309FA99B7EFA735F68F1" );
            break;
        case "_encstr_A1541A98EA9C9BD7B3331EEB0E0BD29BFA378E0BE447BEB027DA7D39":
            playfxontag( level.g_effect["_encstr_A6D9117BD1235FBE80D5561FAF3845174168E3"], self, "_encstr_A9B30EA6BECD347BAE3623569CBEC95A" );
            break;
        case "_encstr_82F31AD26FDDAA07E3A76A5FC8717C5059D8738730B32939D7F76F63":
            playfxontag( level.g_effect["_encstr_83E7116D1B032898E50A504EF5DDE0601A5717"], self, "_encstr_AC500A7A366A5BBFC04F9465" );
            break;
        case "_encstr_91F31A6ABD4BBB2915C06B1158139C034626E4E156D3372DEB3001FB":
            playfxontag( level.g_effect["_encstr_83E7116D1B032898E50A504EF5DDE0601A5717"], self, "_encstr_BD500A3C087F4AD519410B6F" );
            break;
    }
}

chooseanim_burning( var_0, var_1, var_2 )
{
    var_3 = var_1;

    if ( self.currentpose == "_encstr_922406F1A6FD5E05" )
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A90F13E02CB437D726BAC973A5B9CEF5C14E7BDCAC" );

    var_4 = scripts\engine\utility::ter_op( randomint( 2 ) == 1, "_encstr_B81904B04E6B", "_encstr_96190439577A" );
    var_3 = var_3 + "_encstr_BA4C02DF" + self.burningdirection + "_encstr_BA4C02DF" + var_4;
    var_5 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 );
    return scripts\asm\shared\utility::preventrecentanimindex( var_1, var_3, var_5 );
}

shouldpainfaceplayer( var_0, var_1, var_2, var_3 )
{
    var_4 = getpaindirectiontoactor();

    if ( var_4 == "_encstr_BA07035941" )
        return 0;

    self forcethreatupdate();

    if ( isdefined( self.enemy ) && isdefined( self.lastattacker ) && self.enemy == self.lastattacker )
    {
        var_5 = vectornormalize( self.origin - self.enemy.origin );

        if ( vectordot( var_5, self.damagedir ) > 0.866 )
            return 1;
    }

    return 0;
}

shouldpaincoverfaceplayer( var_0, var_1, var_2, var_3 )
{
    if ( shouldpainfaceplayer( var_0, var_1, var_2, var_3 ) )
    {
        var_4 = 1;

        if ( isdefined( self.covernode ) && scripts\aitypes\cover::shouldbeinlmgcover() )
            var_4 = scripts\aitypes\cover::iscovervalidforlmg( self.covernode );
        else
            var_4 = scripts\asm\shared\utility::iscovervalid();

        return !var_4;
    }

    return 0;
}

shouldpainrunfaceplayer( var_0, var_1, var_2, var_3 )
{
    var_4 = getpaindirectiontoactor();

    if ( var_4 == "_encstr_BA07035941" )
        return 0;

    if ( lengthsquared( self.velocity ) > 3600 )
        return 0;

    self forcethreatupdate();

    if ( isdefined( self.enemy ) && isplayer( self.enemy ) )
        return 1;

    return 0;
}

choosepainanim_faceplayer( var_0, var_1, var_2 )
{
    var_3 = getpaindirectiontoactor();
    self.asm.aliaspain = "_encstr_88FE091C676AEB8809C021" + var_3;
    self.asm.painloc = "_encstr_8B9B085B961998DB19F2";
    self.asm.painsize = "_encstr_A71A0491BA77";
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, self.asm.aliaspain );
}

painanimfaceenemy( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );
    var_5 = getanimlength( var_4 );
    var_6 = var_5 * 0.8;
    var_7 = var_5;
    var_8 = getnotetracktimes( var_4, "_encstr_8B4F0B66C23656BEB2E656DABC" )[0];

    if ( isdefined( var_8 ) )
        var_6 = var_8 * var_5;
    else
    {
        if ( scripts\asm\asm::asm_currentstatehasflag( var_0, "_encstr_B43B0D73DE3AAC1DC9851B6D50D2B5" ) )
        {
            var_9 = getnotetracktimes( var_4, "_encstr_82AB0A82D3502A13E08BE78F" )[0];

            if ( isdefined( var_9 ) )
            {
                var_6 = min( var_6, max( 0, var_9 - 0.3 ) * var_5 );
                var_7 = var_9 * var_5;
            }
        }

        var_6 = min( var_6, max( 0, var_5 - 0.5 ) );
    }

    wait( var_6 );

    if ( isalive( var_2 ) )
    {
        self.painoldturnrate = self.turnrate;
        self.turnrate = 0.1;
        self orientmode( "_encstr_B43B0B33C2B1AC0895B92BAD5E" );
    }
}

playpainanim_faceplayer( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );

    if ( isalive( self.enemy ) && isdefined( self.lastattacker ) && self.enemy == self.lastattacker )
        thread painanimfaceenemy( var_0, var_1, self.enemy );

    playpainaniminternal( var_0, var_1, var_2, 0, 1, undefined, 1 );
}

playpainanim_exposedstand( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );

    if ( isalive( self.enemy ) && isdefined( self.lastattacker ) && self.enemy == self.lastattacker )
        thread painanimfaceenemy( var_0, var_1, self.enemy );

    playpainaniminternal( var_0, var_1, var_2, 0, 1 );
}

playpainanim_exposedcrouch( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    self.painattacker = self.lastattacker;
    playpainaniminternal( var_0, var_1, var_2, 0, 1 );
}

playpainanim_exposedcrouchtransition( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );

    if ( isalive( self.enemy ) && isdefined( self.painattacker ) && self.enemy == self.painattacker )
        thread painanimfaceenemy( var_0, var_1, self.enemy );

    self.painattacker = undefined;
    scripts\asm\shared\utility::playanim( var_0, var_1, var_2 );
}

clearpainturnrate( var_0, var_1, var_2 )
{
    if ( isdefined( self.painoldturnrate ) )
    {
        self.turnrate = self.painoldturnrate;
        self.painoldturnrate = undefined;
    }
}
