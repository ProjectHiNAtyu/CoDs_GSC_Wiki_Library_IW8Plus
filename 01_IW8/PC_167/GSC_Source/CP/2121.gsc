// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

soldier_init( var_0, var_1, var_2 )
{
    self.asm.footsteps = spawnstruct();
    self.asm.footsteps.foot = "_encstr_975C08DAFD6501713F9D";
    self.asm.footsteps.time = 0;
    self.asm.customdata = spawnstruct();
    self.asm.frantic = 0;
    self.arrivalspeed = 1.0;
    self.defaultturnthreshold = 59;
    scripts\common\utility::clear_movement_speed();
    self.asm.gestures = spawnstruct();

    if ( isdefined( self.fnasm_initfingerposes ) )
        self thread [[ self.fnasm_initfingerposes ]]();

    self.fnhelmetpop = scripts\asm\soldier\death::helmetpop;
    initnodeyaw( self.asm.archetype );
    initaimlimits( var_0 );

    if ( self.asm.archetype == "_encstr_8BFC0BC2CBD4F737E0A5E1FD79" || self.asm.archetype == "_encstr_ABCD0E9A57D976564E370BEA3A7D8D38" || self.asm.archetype == "_encstr_84CD0E908387D855CB4B3BEBDBE12990" )
        scripts\asm\juggernaut\juggernaut::initanimspeedthresholds_juggernaut( self.asm.archetype );
    else if ( self.asm.archetype == "_encstr_87E80E37DE63915AB2E4BED8EEF59893" || self.asm.archetype == "_encstr_91181243A212272C1120DF82BBE9A253367D3B27" )
    {
        if ( !hasanimspeedthresholdstring( self.asm.archetype ) )
            animspeedthresholdsexist( self.asm.archetype, "_encstr_8F7905C4AEC319", 120 );
    }
    else
    {
        initgrenadeoffsets();
        initanimspeedthresholds_soldier( self.asm.archetype );
    }

    if ( scripts\asm\shared\utility::getbasearchetype() == "_encstr_82F80BEB201803D4431089B2D0" )
    {
        self.disablepistol = 1;
        self.disablelmgmount = 1;
        self.a.disablelongdeath = 1;
    }

    isnavmeshloaded();
    initgestures();

    if ( self isscriptable() )
        thread initscriptable();

    scripts\asm\shared\utility::set_aim_and_turn_limits();
    var_3 = weaponclass( self.weapon );

    if ( var_3 == "_encstr_BE0703A54C" )
        self.combatmode = "_encstr_A1AB0A263FCE9280B058C5F7";

    _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::updateweaponarchetype( var_3 );
}

initscriptable()
{
    self endon( "_encstr_AD75063D571AE108" );
    scripts\engine\utility::flag_wait( "_encstr_ABEC127358A564FBBB9F4A4CA5637F6A23D08A2B" );
    self setscriptablepartstate( "_encstr_91D412889743FAA31A374E7409E9D3052411270B", "_encstr_930B07BB1B6B3854FF", 0 );
}

initnodeyaw( var_0 )
{
    if ( !isdefined( anim.nodeyaws ) )
        anim.nodeyaws = [];

    if ( isdefined( anim.nodeyaws[var_0] ) )
        return;

    initnodeyaw_soldier( var_0 );
}

initnodeyaw_soldier( var_0 )
{
    var_1 = [];
    var_1["_encstr_A7760B6710A315533959DF17AD"] = 90;
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 90;
    var_1["_encstr_86A30C90489C3F32B21DA9AF0178"] = -90;
    var_1["_encstr_A777136710A315533956DC57A349AEFB8BA8377F40"] = -90;
    var_1["_encstr_87AB0D4BD7B857DB077503DA9B8EEB"] = -90;
    var_1["_encstr_AFFF0C6E8FE899DDE6174B068510"] = -90;
    var_1["_encstr_A9700F9D2D8ED0C60647F9DB9B6A27DA14"] = -90;
    anim.nodeyaws[var_0] = var_1;
    var_1 = [];
    var_1["_encstr_A7760B6710A315533959DF17AD"] = 180;
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 0;
    var_1["_encstr_86A30C90489C3F32B21DA9AF0178"] = 180;
    var_1["_encstr_87AB0D4BD7B857DB077503DA9B8EEB"] = 180;
    var_1["_encstr_AFFF0C6E8FE899DDE6174B068510"] = 180;
    var_1["_encstr_A9700F9D2D8ED0C60647F9DB9B6A27DA14"] = 180;
    anim.franticnodeyaws[var_0] = var_1;
    var_2 = [];
    var_2["_encstr_959609825AD64011B7EEE6"] = 45;
    anim.nodeexposedpitches[var_0] = var_2;
    var_1 = [];
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 0;
    var_1["_encstr_86A30C90489C3F32B21DA9AF0178"] = 0;
    var_1["_encstr_A777136710A315533956DC57A349AEFB8BA8377F40"] = 0;
    var_1["_encstr_A7760B6710A315533959DF17AD"] = 0;
    anim.nodeleanyaws[var_0] = var_1;
    var_2 = [];
    var_2["_encstr_87AB0D4BD7B857DB077503DA9B8EEB"] = 45;
    anim.nodeleanpitches[var_0] = var_2;
    var_2 = [];
    var_2["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 45;
    var_2["_encstr_A777136710A315533956DC57A349AEFB8BA8377F40"] = 45;
    anim.nodeoverleanpitches[var_0] = var_2;
    var_1 = [];
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 0;
    var_1["_encstr_86A30C90489C3F32B21DA9AF0178"] = 180;
    var_1["_encstr_A777136710A315533956DC57A349AEFB8BA8377F40"] = 180;
    anim.franticnodeleanyaws[var_0] = var_1;
    var_1 = [];
    var_1["_encstr_87AB0D4BD7B857DB077503DA9B8EEB"] = 0;
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 0;
    anim.franticnodeexposedyaws[var_0] = var_1;
}

initnodeyaw_dev( var_0 )
{
    var_1 = [];
    var_1["_encstr_A7760B6710A315533959DF17AD"] = 90;
    var_1["_encstr_86A30C90489C3F32B21DA9AF0178"] = -90;
    var_1["_encstr_87AB0D4BD7B857DB077503DA9B8EEB"] = -90;
    var_1["_encstr_AFFF0C6E8FE899DDE6174B068510"] = -90;
    var_1["_encstr_A9700F9D2D8ED0C60647F9DB9B6A27DA14"] = -90;
    anim.nodeyaws[var_0] = var_1;
    var_1 = [];
    var_1["_encstr_A7760B6710A315533959DF17AD"] = 180;
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 0;
    var_1["_encstr_86A30C90489C3F32B21DA9AF0178"] = 180;
    var_1["_encstr_87AB0D4BD7B857DB077503DA9B8EEB"] = 180;
    var_1["_encstr_AFFF0C6E8FE899DDE6174B068510"] = 180;
    var_1["_encstr_A9700F9D2D8ED0C60647F9DB9B6A27DA14"] = 180;
    anim.franticnodeyaws[var_0] = var_1;
    var_2 = [];
    anim.nodeexposedpitches[var_0] = var_2;
    var_1 = [];
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 0;
    var_1["_encstr_86A30C90489C3F32B21DA9AF0178"] = 0;
    var_1["_encstr_A777136710A315533956DC57A349AEFB8BA8377F40"] = 90;
    var_1["_encstr_A7760B6710A315533959DF17AD"] = -90;
    anim.nodeleanyaws[var_0] = var_1;
    var_2 = [];
    var_2["_encstr_87AB0D4BD7B857DB077503DA9B8EEB"] = 45;
    anim.nodeleanpitches[var_0] = var_2;
    var_1 = [];
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 0;
    var_1["_encstr_86A30C90489C3F32B21DA9AF0178"] = 180;
    var_1["_encstr_A777136710A315533956DC57A349AEFB8BA8377F40"] = 180;
    anim.franticnodeleanyaws[var_0] = var_1;
    var_1 = [];
    var_1["_encstr_87AB0D4BD7B857DB077503DA9B8EEB"] = 0;
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 0;
    anim.franticnodeexposedyaws[var_0] = var_1;
}

initnodeyaw_rebel( var_0 )
{
    var_1 = [];
    var_1["_encstr_A7760B6710A315533959DF17AD"] = 180;
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 0;
    var_1["_encstr_86A30C90489C3F32B21DA9AF0178"] = 180;
    var_1["_encstr_87AB0D4BD7B857DB077503DA9B8EEB"] = 180;
    var_1["_encstr_AFFF0C6E8FE899DDE6174B068510"] = 180;
    var_1["_encstr_A9700F9D2D8ED0C60647F9DB9B6A27DA14"] = 180;
    anim.nodeyaws[var_0] = var_1;
    var_2 = [];
    var_2["_encstr_959609825AD64011B7EEE6"] = 45;
    anim.nodeexposedpitches[var_0] = var_2;
    var_2 = [];
    var_2["_encstr_87AB0D4BD7B857DB077503DA9B8EEB"] = 45;
    anim.nodeleanpitches[var_0] = var_2;
    var_1 = [];
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 0;
    var_1["_encstr_86A30C90489C3F32B21DA9AF0178"] = 180;
    var_1["_encstr_A777136710A315533956DC57A349AEFB8BA8377F40"] = 180;
    anim.nodeleanyaws[var_0] = var_1;
    var_1 = [];
    var_1["_encstr_87AB0D4BD7B857DB077503DA9B8EEB"] = 0;
    var_1["_encstr_8267124310DE69AADAED119B9B5206A220A572E0"] = 0;
    anim.nodeexposedyaws[var_0] = var_1;
}

initaimlimits( var_0 )
{
    if ( !isdefined( level.combataimlimits ) )
    {
        level.combataimlimits = [];
        level.franticaimlimits = [];
        level.aimlimitstatemappings = [];
    }

    if ( !isdefined( level.combataimlimits[var_0] ) )
    {
        var_1 = [];
        var_2 = [];
        var_3 = [];
        var_1["_encstr_A1A60DA8039A57E307FC3013D40B69"] = var_3;
        var_3 = [];
        var_2["_encstr_A1A60DA8039A57E307FC3013D40B69"] = var_3;
        var_3 = [];
        var_3["_encstr_9767056D0FBFA8"] = 15;
        var_1["_encstr_9B6D12D8B767AC27AF36C97BD5B1D0F536562CE6"] = var_3;
        var_3 = [];
        var_3["_encstr_9767056D0FBFA8"] = 15;
        var_2["_encstr_9B6D12D8B767AC27AF36C97BD5B1D0F536562CE6"] = var_3;
        var_3 = [];
        var_2["_encstr_873111EA30E4777A11378A6FE3080457876882"] = var_3;
        var_3 = [];
        var_3["_encstr_8253060E2B5FE330"] = -15;
        var_1["_encstr_92B810C6BDB3CAE4EB8D59CC8EF5D8562CDC"] = var_3;
        var_3 = [];
        var_3["_encstr_8253060E2B5FE330"] = -15;
        var_2["_encstr_92B810C6BDB3CAE4EB8D59CC8EF5D8562CDC"] = var_3;
        var_3 = [];
        var_3["_encstr_8253060E2B5FE330"] = -15;
        var_1["_encstr_921817D7DFE8892D417CB55F517159A878FB564CD063553FCB"] = var_3;
        var_3 = [];
        var_3["_encstr_8253060E2B5FE330"] = -15;
        var_2["_encstr_921817D7DFE8892D417CB55F517159A878FB564CD063553FCB"] = var_3;
        var_3 = [];
        var_3["_encstr_A5AD056A019C63"] = 15;
        var_1["_encstr_8FE911B268BC1F12697DC9CF611811636DC11A"] = var_3;
        var_3 = [];
        var_3["_encstr_9767056D0FBFA8"] = 37;
        var_3["_encstr_A5AD056A019C63"] = 24;
        var_2["_encstr_8FE911B268BC1F12697DC9CF611811636DC11A"] = var_3;
        var_3 = [];
        var_3["_encstr_A5AD056A019C63"] = 25;
        var_1["_encstr_B890188DED9DCA9CF5E496B38647BE36E4EDEAD843D7B1B285DC"] = var_3;
        var_3 = [];
        var_3["_encstr_A5AD056A019C63"] = 15;
        var_2["_encstr_B890188DED9DCA9CF5E496B38647BE36E4EDEAD843D7B1B285DC"] = var_3;
        level.combataimlimits[var_0] = var_1;
        level.franticaimlimits[var_0] = var_2;
    }

    if ( !isdefined( level.aimlimitstatemappings[var_0] ) )
    {
        var_4 = [];
        var_4["_encstr_96C8148FC7343DF516A2E4AA951F51EAF960DF9B0574"] = "_encstr_96C8148FC7343DF516A2E4AA951F51EAF960DF9B0574";
        var_4["_encstr_919D1C8DEDCE95C9BECD47C2B946D70D2D91567DA3DEFAACC383B7375646"] = "_encstr_96C8148FC7343DF516A2E4AA951F51EAF960DF9B0574";
        var_4["_encstr_8210192AE8581B0B7F02A3D9B860767225D282B7186B834FCE9572"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_87C9214717FC92B241DBB3FE50B0D7FADBA9C73FD9A8F99E4840AD4929A820C2AE334B"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_B14F1C6737DCB29221BBD39E7090F7DB383FE783B1881B7D20068CA728A0"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_96DE0E44125221B95B8F35B1811B0C13"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_9A011238929D51665BEDA808D3070839840A5020"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_AC1314CF7BD8A5BFFE633229685D631BE9C7582F8FC0"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_81C015EE0B8DB1FAC9BA37EBE4B4ECA11D7DB91AF6DB1D"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_879E1B13E1A8A43186530BD763ADCBE16868815D991064095E01071F61"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_81F11CBF6B2DE4D79A9318E7DB61A336A32206E888071BA39E50D84FFAF0"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_87921BB17BEC95C9BE1B4EEDEA36A1BE342D46ACAFD1F67DCDE82CB919"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_8B531936DE6756E4AF3627DEBA6C0DD7D02D32B27D1DDBD72C4B5B"] = "_encstr_873111EA30E4777A11378A6FE3080457876882";
        var_4["_encstr_A3A81B0B988812DDC1DEFBC0738EEAD750871927D911AF2E3D83172023"] = "_encstr_873111EA30E4777A11378A6FE3080457876882";
        var_4["_encstr_BDFD1A8EE55BF37B6FA7B060C76BF04F628CF50571D35F8634D718B0"] = "_encstr_873111EA30E4777A11378A6FE3080457876882";
        var_4["_encstr_8CFD1AD36FB3EF7310A9EB227356532948CB4C5DF7F8B5FFA101D23A"] = "_encstr_9B6D12D8B767AC27AF36C97BD5B1D0F536562CE6";
        var_4["_encstr_873111EA30E4777A11378A6FE3080457876882"] = "_encstr_873111EA30E4777A11378A6FE3080457876882";
        var_4["_encstr_9B6D12D8B767AC27AF36C97BD5B1D0F536562CE6"] = "_encstr_9B6D12D8B767AC27AF36C97BD5B1D0F536562CE6";
        var_4["_encstr_858E1A97DD93BBEBE9E0337F83AADAA153F329F8AA25A53F6567C4BB"] = "_encstr_873111EA30E4777A11378A6FE3080457876882";
        var_4["_encstr_AF671B8368134F4A6FD0E34A186F84EF294B1837FE99B3D91DA8BA3238"] = "_encstr_873111EA30E4777A11378A6FE3080457876882";
        var_4["_encstr_9753136CB79D2B39BE8DC9ED57B1A17D37E8583746"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_93CB1D4FB80BADEB6F66423D553F824F935047DF9863EFA3638D01B435F96A"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_83D8161FB74BF8F6B7E390592A7338A06070BFB72537E1B7"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_B85816365DE34B3327BB2058FB24AEE9BA07BD50F32A7799"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_9BD8166C7BD956E4F5932D76D0D1FAB2870EDECDCA8CEBC4"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_8E581650BAD39B1B2712D3DC10536649FCF2E829A32DB751"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_8212136CEDCEB2C9AF9C2DB3A147D72CD7A3BD7DC4"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_845713AED703BD3078BAB15F938D0FC02E45E069D3"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_87A61D9760D3450397166CE773B9A90B3BF8472FF02EBD6BE1A0F21F6DC782"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_BDA61D0F77AB7D408742C801EC74F1A6038FAB97C3813558C01DB359177750"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_91C41DE8026B33B37F7ABBA448FBDE87D2AAC0600A4961E84B95A825572F41"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_8FC41DAB1778971B7893729AF8C577CEB0EF3533B1899C3F9D6929B3E088CB"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_83561AC6BDB3564EEB27A59D1AE8FA8D9CB7EA1B1AF558EB47DBD7C4"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_A6571AC6DBCE2BE4FA4ED29DD08EAF1B4EF6ABC60DAF26FA8EB7FAB0"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_8FE911B268BC1F12697DC9CF611811636DC11A"] = "_encstr_8FE911B268BC1F12697DC9CF611811636DC11A";
        var_4["_encstr_8F8B19A7B713CA52F7C523C71A4B3FF0C2DA3A7F3477FE4BE53013"] = "_encstr_8FE911B268BC1F12697DC9CF611811636DC11A";
        var_4["_encstr_A99A20D607B3C195A15BC8B0128317D90BBF655E686F28EB573281305A1139519F56"] = "_encstr_B890188DED9DCA9CF5E496B38647BE36E4EDEAD843D7B1B285DC";
        var_4["_encstr_B890188DED9DCA9CF5E496B38647BE36E4EDEAD843D7B1B285DC"] = "_encstr_B890188DED9DCA9CF5E496B38647BE36E4EDEAD843D7B1B285DC";
        var_4["_encstr_A1B81CC257638220A1DB909FA445C7DB2DE0CF531372D28D9AB1A7D3838D"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_BAAB1519AD0E5046713B5B55735905C3A0058351177F38"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_B1AB153F1044D2C371606F65384FB881C32F8B65B089F8"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_845515AED703BD3078A4BD1FE318389849CDF8DBCF27DF"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_8A551569F2DB4D68219C232DAC1980033BCA66F39A2776"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_A2F512AFD70BDDE0276529418BFFA018836F5F35"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_B2CC128FA0BB59EA50441B5CFB29BAE1BBE881C0"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_8EF418069FA86D83A8B1B59F484F78B16B383F8B30916A8101BD"] = "_encstr_92B810C6BDB3CAE4EB8D59CC8EF5D8562CDC";
        var_4["_encstr_92B810C6BDB3CAE4EB8D59CC8EF5D8562CDC"] = "_encstr_92B810C6BDB3CAE4EB8D59CC8EF5D8562CDC";
        var_4["_encstr_A9C31F1BDED9AC9CF5D856991DD76CE4DED58D437DA19691B2AF8EDEF51BCAB0B9"] = "_encstr_921817D7DFE8892D417CB55F517159A878FB564CD063553FCB";
        var_4["_encstr_921817D7DFE8892D417CB55F517159A878FB564CD063553FCB"] = "_encstr_921817D7DFE8892D417CB55F517159A878FB564CD063553FCB";
        var_4["_encstr_96951BB1BDD92BC9D78D59993AD7D1DEEB5987E0B7B9ACC8AF2D9136AC"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_B4240937378631F3F7090B"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_8AE90F8DB8C4EBDCD116B991BEB1B7F61C"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_ACA416F93B657E9E2BEF4601089F6986F3EDD1B188C0F57B"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_B444166F233FF519C10A73F0EFDB6D8081539D6F229F6858"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_A1D00F59F007BD6EB28CFA392B8DB7B046"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_ABEC151280A1E5F7991D7757A521C32D3540BB2A085F9C"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_B26A13E76BD3FF1B27249FCFA1016B55A6E0331AF3"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_A1A60DA8039A57E307FC3013D40B69"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_AAEE0E309B02FF4BBF5498073AEF90A3"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        var_4["_encstr_86B42069D8B8B076824B5F0F23EA30307F74F081061E20AE3BBF3D3B8F120510170D"] = "_encstr_A1A60DA8039A57E307FC3013D40B69";
        level.aimlimitstatemappings[var_0] = var_4;
    }
}

initanimspeedthresholds_soldier( var_0 )
{
    if ( hasanimspeedthresholdstring( var_0 ) )
        return;

    if ( var_0 == "_encstr_919B052D873A78" || var_0 == "_encstr_97B20626DECDDC46" )
        animspeedthresholdsexist( var_0, "_encstr_88BF08EBB84B751CA8C1", 30 );
    else
        animspeedthresholdsexist( var_0, "_encstr_88BF08EBB84B751CA8C1", 23 );

    animspeedthresholdsexist( var_0, "_encstr_99F605EE16B1DA", 56 );
    animspeedthresholdsexist( var_0, "_encstr_8F7905C4AEC319", 120 );
    animspeedthresholdsexist( var_0, "_encstr_B4190453BD3B", 170 );
    animspeedthresholdsexist( var_0, "_encstr_B4190493D573", 220 );
    animspeedthresholdsexist( var_0, "_encstr_92100762872552A643", 250 );
}

initgestures()
{
    if ( isdefined( anim.gestures ) )
        return;

    var_0 = [];
    var_0[var_0.size] = "_encstr_B8F70DF9A78A288077F619531B3138";
    var_0[var_0.size] = "_encstr_AA0D0F506FB9CD2131E50399FCDB53CB01";
    var_0[var_0.size] = "_encstr_AC190463F552";
    var_0[var_0.size] = "_encstr_BE07036548";
    var_0[var_0.size] = "_encstr_B6CC0586B78D46";
    var_0[var_0.size] = "_encstr_8EEF0529A1A5E0";
    var_0[var_0.size] = "_encstr_BE4806B90D93AB9D";
    var_0[var_0.size] = "_encstr_97F50888E2AB71501FA6";
    var_0[var_0.size] = "_encstr_BEB707180BB7CF98C3";
    var_0[var_0.size] = "_encstr_8F9F0812403F395729EC";
    var_0[var_0.size] = "_encstr_924507E545C640A0AB";
    anim.gestures = var_0;
}

initgrenadeoffsets()
{
    if ( !isdefined( anim.grenadethrowanims ) )
        anim.grenadethrowanims = [];

    if ( !isdefined( anim.grenadethrowoffsets ) )
        anim.grenadethrowoffsets = [];

    var_0 = self.asm.archetype == "_encstr_82F80BEB201803D4431089B2D0";
    var_1 = !var_0;

    if ( isdefined( anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"] ) && isdefined( anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"] ) )
        return;

    anim.islightweightsoldier = var_0;
    anim.isfullsoldier = var_1;
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"] = [];
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB"]["_encstr_B2940C8B90D307CBA106C350D5DB"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB", "_encstr_B2940C8B90D307CBA106C350D5DB" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB"]["_encstr_B2940C8B90D307CBA106C350D5DB"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB"]["_encstr_B2940C8B90D307CBA106C350D5DB"][0] = ( 82.8191, 11.6735, 28.1425 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB"]["_encstr_8C3D0BA0829AD7E36F74A81057"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB", "_encstr_8C3D0BA0829AD7E36F74A81057" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB"]["_encstr_8C3D0BA0829AD7E36F74A81057"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB"]["_encstr_8C3D0BA0829AD7E36F74A81057"][0] = ( 82.8191, 11.6735, 28.1425 );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB"]["_encstr_8C3D0BA0829AD7E36F74A81057"][1] = ( 108.037, 19.9333, 58.7747 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB"]["_encstr_BE1F0E5C039EB81709317D791945BBD3"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB", "_encstr_BE1F0E5C039EB81709317D791945BBD3" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB"]["_encstr_BE1F0E5C039EB81709317D791945BBD3"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_884A15B39CCADC858C95D7E42B47D5E4B9AF4786E4BDBB"]["_encstr_BE1F0E5C039EB81709317D791945BBD3"][0] = ( 108.037, 19.9333, 58.7747 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_971F14BB7F93331B87D703C6D511CEBF4BCD3037306D"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_971F14BB7F93331B87D703C6D511CEBF4BCD3037306D", "_encstr_86371087831A78583C078EC168F0F02EF223" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_971F14BB7F93331B87D703C6D511CEBF4BCD3037306D"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_971F14BB7F93331B87D703C6D511CEBF4BCD3037306D"]["_encstr_86371087831A78583C078EC168F0F02EF223"][0] = ( 12.4289, 10.4494, 63.257 );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_971F14BB7F93331B87D703C6D511CEBF4BCD3037306D"]["_encstr_86371087831A78583C078EC168F0F02EF223"][1] = ( 19.6744, -0.861649, 55.6794 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_971F14BB7F93331B87D703C6D511CEBF4BCD3037306D"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_971F14BB7F93331B87D703C6D511CEBF4BCD3037306D", "_encstr_8B100DEC9C2B73B02356F56E85CCAC" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_971F14BB7F93331B87D703C6D511CEBF4BCD3037306D"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_971F14BB7F93331B87D703C6D511CEBF4BCD3037306D"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"][0] = ( 12.4289, 10.4494, 63.257 );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_971F14BB7F93331B87D703C6D511CEBF4BCD3037306D"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"][1] = ( 19.6744, -0.861649, 55.6794 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_8C6615A9321B0D2861D34D7FED56C0D8F77BE1F03A8BB5"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_8C6615A9321B0D2861D34D7FED56C0D8F77BE1F03A8BB5", "_encstr_86371087831A78583C078EC168F0F02EF223" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_8C6615A9321B0D2861D34D7FED56C0D8F77BE1F03A8BB5"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_8C6615A9321B0D2861D34D7FED56C0D8F77BE1F03A8BB5"]["_encstr_86371087831A78583C078EC168F0F02EF223"][0] = ( 14.4711, 19.9796, 60.7207 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_8C6615A9321B0D2861D34D7FED56C0D8F77BE1F03A8BB5"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_8C6615A9321B0D2861D34D7FED56C0D8F77BE1F03A8BB5", "_encstr_8B100DEC9C2B73B02356F56E85CCAC" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_8C6615A9321B0D2861D34D7FED56C0D8F77BE1F03A8BB5"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_8C6615A9321B0D2861D34D7FED56C0D8F77BE1F03A8BB5"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"][0] = ( 16.2644, 3.3802, 58.673 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_B2C9143150DB957859CB59DFC214DEA473F2374FF4DF"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_B2C9143150DB957859CB59DFC214DEA473F2374FF4DF", "_encstr_86371087831A78583C078EC168F0F02EF223" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B2C9143150DB957859CB59DFC214DEA473F2374FF4DF"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B2C9143150DB957859CB59DFC214DEA473F2374FF4DF"]["_encstr_86371087831A78583C078EC168F0F02EF223"][0] = ( 52.7985, -16.1898, 71.2437 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_B2C9143150DB957859CB59DFC214DEA473F2374FF4DF"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_B2C9143150DB957859CB59DFC214DEA473F2374FF4DF", "_encstr_8B100DEC9C2B73B02356F56E85CCAC" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B2C9143150DB957859CB59DFC214DEA473F2374FF4DF"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B2C9143150DB957859CB59DFC214DEA473F2374FF4DF"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"][0] = ( 23.61, 1.79103, 73.2797 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_B4921B51CAE385A0F95AF3D7781B015E2B226BD922EFCCF80F2EEBD99D"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_B4921B51CAE385A0F95AF3D7781B015E2B226BD922EFCCF80F2EEBD99D", "_encstr_86371087831A78583C078EC168F0F02EF223" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B4921B51CAE385A0F95AF3D7781B015E2B226BD922EFCCF80F2EEBD99D"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B4921B51CAE385A0F95AF3D7781B015E2B226BD922EFCCF80F2EEBD99D"]["_encstr_86371087831A78583C078EC168F0F02EF223"][0] = ( 52.6922, -11.2103, 74.5468 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_B4921B51CAE385A0F95AF3D7781B015E2B226BD922EFCCF80F2EEBD99D"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_B4921B51CAE385A0F95AF3D7781B015E2B226BD922EFCCF80F2EEBD99D", "_encstr_8B100DEC9C2B73B02356F56E85CCAC" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B4921B51CAE385A0F95AF3D7781B015E2B226BD922EFCCF80F2EEBD99D"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B4921B51CAE385A0F95AF3D7781B015E2B226BD922EFCCF80F2EEBD99D"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"][0] = ( 29.3343, -4.89863, 47.8837 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_B81921B1EDB356C9F59CA5EC1A3AAF8D4EF6D5C6D0D79DE4AC9B2C4656F5D186C97BEE"]["_encstr_97E30EEC9359DC0B19ACBE47D027BDDD"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_B81921B1EDB356C9F59CA5EC1A3AAF8D4EF6D5C6D0D79DE4AC9B2C4656F5D186C97BEE", "_encstr_97E30EEC9359DC0B19ACBE47D027BDDD" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B81921B1EDB356C9F59CA5EC1A3AAF8D4EF6D5C6D0D79DE4AC9B2C4656F5D186C97BEE"]["_encstr_97E30EEC9359DC0B19ACBE47D027BDDD"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B81921B1EDB356C9F59CA5EC1A3AAF8D4EF6D5C6D0D79DE4AC9B2C4656F5D186C97BEE"]["_encstr_97E30EEC9359DC0B19ACBE47D027BDDD"][0] = ( 15.5324, 4.86811, 50.6292 );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B81921B1EDB356C9F59CA5EC1A3AAF8D4EF6D5C6D0D79DE4AC9B2C4656F5D186C97BEE"]["_encstr_97E30EEC9359DC0B19ACBE47D027BDDD"][1] = ( 1.17014, -1.57043, 60.0271 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_A74D1373CFA04FD3B0A87A52B3E8CFC240A5E9FC63"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_A74D1373CFA04FD3B0A87A52B3E8CFC240A5E9FC63", "_encstr_86371087831A78583C078EC168F0F02EF223" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_A74D1373CFA04FD3B0A87A52B3E8CFC240A5E9FC63"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_A74D1373CFA04FD3B0A87A52B3E8CFC240A5E9FC63"]["_encstr_86371087831A78583C078EC168F0F02EF223"][0] = ( 52.9483, -8.80599, 69.6026 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_A74D1373CFA04FD3B0A87A52B3E8CFC240A5E9FC63"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_A74D1373CFA04FD3B0A87A52B3E8CFC240A5E9FC63", "_encstr_8B100DEC9C2B73B02356F56E85CCAC" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_A74D1373CFA04FD3B0A87A52B3E8CFC240A5E9FC63"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_A74D1373CFA04FD3B0A87A52B3E8CFC240A5E9FC63"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"][0] = ( 29.9023, 0.265982, 33.1921 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_B6531ACE7813A220AFA0A5F7FC10828AB7039669C932CB3778AFD4F5"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_B6531ACE7813A220AFA0A5F7FC10828AB7039669C932CB3778AFD4F5", "_encstr_86371087831A78583C078EC168F0F02EF223" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B6531ACE7813A220AFA0A5F7FC10828AB7039669C932CB3778AFD4F5"]["_encstr_86371087831A78583C078EC168F0F02EF223"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B6531ACE7813A220AFA0A5F7FC10828AB7039669C932CB3778AFD4F5"]["_encstr_86371087831A78583C078EC168F0F02EF223"][0] = ( 70.3568, 6.78523, 61.5581 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_B6531ACE7813A220AFA0A5F7FC10828AB7039669C932CB3778AFD4F5"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_B6531ACE7813A220AFA0A5F7FC10828AB7039669C932CB3778AFD4F5", "_encstr_8B100DEC9C2B73B02356F56E85CCAC" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B6531ACE7813A220AFA0A5F7FC10828AB7039669C932CB3778AFD4F5"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_B6531ACE7813A220AFA0A5F7FC10828AB7039669C932CB3778AFD4F5"]["_encstr_8B100DEC9C2B73B02356F56E85CCAC"][0] = ( 24.2908, -7.09458, 21.4564 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_85E620019AB3D5F089349B8534E13026AF5399E8215F96B01D11918B7713B0EE07EB"]["_encstr_97E30EEC9359DC0B19ACBE47D027BDDD"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_85E620019AB3D5F089349B8534E13026AF5399E8215F96B01D11918B7713B0EE07EB", "_encstr_97E30EEC9359DC0B19ACBE47D027BDDD" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_85E620019AB3D5F089349B8534E13026AF5399E8215F96B01D11918B7713B0EE07EB"]["_encstr_97E30EEC9359DC0B19ACBE47D027BDDD"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_85E620019AB3D5F089349B8534E13026AF5399E8215F96B01D11918B7713B0EE07EB"]["_encstr_97E30EEC9359DC0B19ACBE47D027BDDD"][0] = ( 0.306949, -4.18872, 12.3224 );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_85E620019AB3D5F089349B8534E13026AF5399E8215F96B01D11918B7713B0EE07EB"]["_encstr_97E30EEC9359DC0B19ACBE47D027BDDD"][1] = ( -7.34781, 1.87832, 25.0602 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_BA5B1656F083DECDB2237DA31A39BDDDEB763959730B912B"]["_encstr_B25910591E1CDB6E9532EBB39C59E6168C56"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_BA5B1656F083DECDB2237DA31A39BDDDEB763959730B912B", "_encstr_B25910591E1CDB6E9532EBB39C59E6168C56" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_BA5B1656F083DECDB2237DA31A39BDDDEB763959730B912B"]["_encstr_B25910591E1CDB6E9532EBB39C59E6168C56"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_BA5B1656F083DECDB2237DA31A39BDDDEB763959730B912B"]["_encstr_B25910591E1CDB6E9532EBB39C59E6168C56"][0] = ( 30.5741, 1.97765, 73.9287 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_91F71CB2E1C17BB956237D834E7B9BB2F58E3427EDBBFACE4ECADC58C82B"]["_encstr_B25910591E1CDB6E9532EBB39C59E6168C56"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_91F71CB2E1C17BB956237D834E7B9BB2F58E3427EDBBFACE4ECADC58C82B", "_encstr_B25910591E1CDB6E9532EBB39C59E6168C56" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_91F71CB2E1C17BB956237D834E7B9BB2F58E3427EDBBFACE4ECADC58C82B"]["_encstr_B25910591E1CDB6E9532EBB39C59E6168C56"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_91F71CB2E1C17BB956237D834E7B9BB2F58E3427EDBBFACE4ECADC58C82B"]["_encstr_B25910591E1CDB6E9532EBB39C59E6168C56"][0] = ( 28.3429, 6.4308, 40.3279 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_8A861DF3402A4896BF62F6792BBF4DF0C48F2961D255C0C8CF1B89C0E24B0D"]["_encstr_B25910591E1CDB6E9532EBB39C59E6168C56"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_8A861DF3402A4896BF62F6792BBF4DF0C48F2961D255C0C8CF1B89C0E24B0D", "_encstr_B25910591E1CDB6E9532EBB39C59E6168C56" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_8A861DF3402A4896BF62F6792BBF4DF0C48F2961D255C0C8CF1B89C0E24B0D"]["_encstr_B25910591E1CDB6E9532EBB39C59E6168C56"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_8A861DF3402A4896BF62F6792BBF4DF0C48F2961D255C0C8CF1B89C0E24B0D"]["_encstr_B25910591E1CDB6E9532EBB39C59E6168C56"][0] = ( 15.7078, 1.95027, 36.0834 );
    anim.grenadethrowanims["_encstr_958C08CDDBD8325A959C"]["_encstr_8A861DF3402A4896BF62F6792BBF4DF0C48F2961D255C0C8CF1B89C0E24B0D"]["_encstr_B8771745E8F32F838D7321C803AF1B6F1A59CC5607AAFBA975"] = scripts\asm\asm::asm_getallanimindicesforalias( "_encstr_8A861DF3402A4896BF62F6792BBF4DF0C48F2961D255C0C8CF1B89C0E24B0D", "_encstr_B8771745E8F32F838D7321C803AF1B6F1A59CC5607AAFBA975" );
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_8A861DF3402A4896BF62F6792BBF4DF0C48F2961D255C0C8CF1B89C0E24B0D"]["_encstr_B8771745E8F32F838D7321C803AF1B6F1A59CC5607AAFBA975"] = [];
    anim.grenadethrowoffsets["_encstr_958C08CDDBD8325A959C"]["_encstr_8A861DF3402A4896BF62F6792BBF4DF0C48F2961D255C0C8CF1B89C0E24B0D"]["_encstr_B8771745E8F32F838D7321C803AF1B6F1A59CC5607AAFBA975"][0] = ( 15.7078, 1.95027, 36.0834 );
}

needtoturnformelee( var_0, var_1, var_2, var_3 )
{
    if ( !istrue( self._blackboard.meleerequestedcharge ) )
        return 0;

    var_4 = scripts\asm\asm_bb::bb_getmeleechargetarget();

    if ( !isdefined( var_4 ) )
        return 0;

    var_5 = var_4.origin - self.origin;
    var_6 = length( var_5 );

    if ( var_6 > 80 )
        return 0;

    var_7 = vectortoyaw( var_5 );

    if ( scripts\engine\utility::absangleclamp180( var_7 - self.angles[1] ) < 90 )
        return 0;

    self.desiredturnyaw = var_7;
    return 1;
}

needtoturntofacepath( var_0, var_1, var_2, var_3 )
{
    if ( !scripts\asm\asm::asm_eventfired( var_0, "_encstr_AF2D0677154F8B8C" ) )
        return 0;

    if ( !self.facemotion )
        return 0;

    var_4 = vectortoyaw( self.lookaheaddir );
    var_5 = angleclamp180( var_4 - self.angles[1] );

    if ( abs( var_5 ) < 50 )
        return 0;

    self.desiredturnyaw = var_5;
    return 1;
}

drawneedtoturn( var_0 )
{
    self notify( "_encstr_A5DC17B65A1BC6D7233985BB7D9BACAC32FA3ABDBE47D527DC" );
    self endon( "_encstr_A5DC17B65A1BC6D7233985BB7D9BACAC32FA3ABDBE47D527DC" );

    for (;;)
    {
        var_1 = self.origin + anglestoforward( self.angles ) * 100;
        waitframe();
    }
}

needtoturn( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;

    if ( scripts\asm\asm_bb::bb_shootparamsvalid() )
    {
        if ( isdefined( self._blackboard.shootparams_pos ) )
            var_4 = self._blackboard.shootparams_pos;
        else if ( isdefined( self._blackboard.shootparams_ent ) )
            var_4 = self._blackboard.shootparams_ent.origin;
    }

    if ( !isdefined( var_4 ) )
    {
        if ( isdefined( self.smartfacingpos ) )
            var_4 = self.smartfacingpos;
    }

    if ( !isdefined( var_4 ) && isdefined( self.node ) && self.node.type == "_encstr_8E2508511EE07BE6B246" && distancesquared( self.node.origin, self.origin ) < 36 && self.combatmode != "_encstr_821109FAE81117DA568730" )
        var_4 = self.node.origin + anglestoforward( self.node.angles ) * 384;

    if ( !isdefined( var_4 ) )
        return 0;

    var_5 = self.angles[1] - vectortoyaw( var_4 - self.origin );
    var_6 = distancesquared( self.origin, var_4 );

    if ( var_6 < 65536 )
    {
        var_7 = sqrt( var_6 );

        if ( var_7 > 3 )
            var_5 = var_5 + asin( -3 / var_7 );
    }

    return abs( angleclamp180( var_5 ) ) > self.turnthreshold;
}

needtoturn3d( var_0, var_1, var_2, var_3 )
{
    if ( istrue( self.matchexposednodeorientation ) && isdefined( self.node ) )
        return 0;

    var_4 = getturndesiredyaw3d();

    if ( abs( var_4 ) > self.turnthreshold )
        return 1;

    var_5 = getturndesiredpitch3d();

    if ( abs( var_5 ) > self.pitchturnthreshold )
        return 1;

    return 0;
}

getturndesiredyaw()
{
    if ( isdefined( self.desiredturnyaw ) )
        return self.desiredturnyaw;

    var_0 = 0.25;
    var_1 = undefined;
    var_2 = undefined;

    if ( scripts\asm\asm_bb::bb_shootparamsvalid() )
    {
        if ( isdefined( self._blackboard.shootparams_pos ) )
            var_2 = self._blackboard.shootparams_pos;
        else if ( isdefined( self._blackboard.shootparams_ent ) )
            var_1 = self._blackboard.shootparams_ent;
    }
    else if ( isdefined( self.smartfacingpos ) )
        var_2 = self.smartfacingpos;

    if ( !isdefined( var_2 ) && isdefined( self.node ) && self.node.type == "_encstr_8E2508511EE07BE6B246" && distancesquared( self.node.origin, self.origin ) < 36 )
        return self.node.angles[1] - self.angles[1];

    if ( isdefined( var_1 ) && !issentient( var_1 ) )
        var_0 = 1.5;

    var_3 = scripts\engine\utility::getpredictedaimyawtoshootentorpos( var_0, var_1, var_2 );
    return var_3;
}

getturndesiredyaw3d()
{
    var_0 = 0.25;
    var_1 = undefined;
    var_2 = undefined;

    if ( scripts\asm\asm_bb::bb_shootparamsvalid() )
    {
        if ( isdefined( self._blackboard.shootparams_ent ) )
            var_1 = self._blackboard.shootparams_ent;
        else if ( isdefined( self._blackboard.shootparams_pos ) )
            var_2 = self._blackboard.shootparams_pos;
    }
    else if ( isdefined( self.enemy ) )
        var_1 = self.enemy;

    if ( isdefined( var_1 ) && !issentient( var_1 ) )
        var_0 = 1.5;

    var_3 = scripts\engine\utility::getpredictedaimyawtoshootentorpos3d( var_0, var_1, var_2 );
    return var_3;
}

getturndesiredpitch3d()
{
    var_0 = 0.25;
    var_1 = undefined;
    var_2 = undefined;

    if ( scripts\asm\asm_bb::bb_shootparamsvalid() )
    {
        if ( isdefined( self._blackboard.shootparams_ent ) )
            var_1 = self._blackboard.shootparams_ent;
        else if ( isdefined( self._blackboard.shootparams_pos ) )
            var_2 = self._blackboard.shootparams_pos;
    }
    else if ( isdefined( self.enemy ) )
        var_1 = self.enemy;

    if ( isdefined( var_1 ) && !issentient( var_1 ) )
        var_0 = 1.5;

    var_3 = scripts\engine\utility::getpredictedaimpitchtoshootentorpos3d( var_0, var_1, var_2 );
    return var_3;
}

chooseturnanim( var_0, var_1, var_2 )
{
    var_3 = getturndesiredyaw();

    if ( var_3 < 0 )
        var_4 = "_encstr_8253060E2B5FE330";
    else
        var_4 = "_encstr_A5AD056A019C63";

    var_3 = abs( var_3 );
    var_5 = 0;

    if ( var_3 > 157.5 )
        var_5 = 180;
    else if ( var_3 > 112.5 )
        var_5 = 135;
    else if ( var_3 > 67.5 || !istrue( self.allowturn45 ) )
        var_5 = 90;
    else
        var_5 = 45;

    var_6 = var_4 + "_encstr_BA4C02DF" + var_5;
    var_7 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_6 );
    return var_7;
}

chooseturnanim3d( var_0, var_1, var_2 )
{
    var_3 = getturndesiredyaw3d();
    var_4 = getturndesiredpitch3d();

    if ( abs( var_3 ) > self.turnthreshold && abs( var_3 ) > abs( var_4 ) )
    {
        if ( var_3 < 0 )
            var_5 = "_encstr_8253060E2B5FE330";
        else
            var_5 = "_encstr_A5AD056A019C63";

        var_3 = abs( var_3 );
        var_6 = 0;

        if ( var_3 > 157.5 )
            var_6 = 180;
        else if ( var_3 > 112.5 )
            var_6 = 135;
        else if ( var_3 > 67.5 )
            var_6 = 90;
        else
            var_6 = 45;

        var_7 = var_5 + "_encstr_BA4C02DF" + var_6;
        var_8 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_7 );
        return var_8;
    }
    else
    {
        if ( var_4 < 0 )
            var_5 = "_encstr_87070365F7";
        else
            var_5 = "_encstr_9767056D0FBFA8";

        var_4 = abs( var_4 );
        var_6 = 0;

        if ( var_4 > 157.5 )
            var_6 = 180;
        else if ( var_4 > 112.5 )
            var_6 = 135;
        else if ( var_4 > 67.5 )
            var_6 = 90;
        else
            var_6 = 45;

        var_7 = var_5 + "_encstr_BA4C02DF" + var_6;
        var_8 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_7 );
        return var_8;
    }
}

choosecrouchturnanim( var_0, var_1, var_2 )
{
    var_3 = getturndesiredyaw();

    if ( var_3 < -135 )
        var_4 = "_encstr_9707034639";
    else if ( var_3 > 135 )
        var_4 = "_encstr_A707037D74";
    else if ( var_3 < 0 )
        var_4 = "_encstr_8F4C026A";
    else
        var_4 = "_encstr_AC4C024A";

    var_5 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_4 );
    return var_5;
}

reload_cleanup( var_0, var_1, var_2 )
{
    var_3 = self.asm.reloadweapon;
    self.asm.reloadweapon = undefined;

    if ( !isdefined( self.weaponinfo ) )
        return;

    var_4 = isdefined( var_3 ) && isdefined( self.weapon ) && var_3 == self.weapon;

    if ( !isdefined( var_3 ) )
        var_3 = self.weapon;

    var_5 = createheadicon( var_3 );

    if ( !isdefined( self.weaponinfo[var_5] ) )
        return;

    if ( !scripts\asm\asm::asm_eventfired( var_0, "_encstr_8BB10AC839DB8340C6B1A50E" ) )
        return;

    if ( self.weaponinfo[var_5].useclip )
    {
        var_6 = getweaponclipmodel( var_3 );

        if ( isdefined( var_6 ) )
        {
            var_7 = scripts\asm\asm::asm_eventfired( var_0, "_encstr_ABC511C247D10BD81A40B1362DE0801B563347" ) || scripts\asm\asm::asm_eventfired( var_0, "_encstr_8F6812858EE8B08D1A10D8C64B1C1093969D43A3" );
            var_8 = scripts\asm\asm::asm_eventfired( var_0, "_encstr_AAC111BD589B4E57E0015E8DD8BAF8254DC6F3" ) || scripts\asm\asm::asm_eventfired( var_0, "_encstr_ADE1125982037FD0DCE07F69C18292BEDF1A50C3" ) || scripts\asm\asm::asm_eventfired( var_0, "_encstr_881E131D776BEB49489A0868A788E93D22DC07908F" );

            if ( !var_7 )
                self notify( "_encstr_8AA00D1F5D20B3E471CB276D80683C" );
            else if ( var_7 && !var_8 )
            {
                if ( scripts\asm\asm::asm_eventfired( var_0, "_encstr_ABC511C247D10BD81A40B1362DE0801B563347" ) )
                    var_9 = "_encstr_97D713BBD1BFE0A996C869808715CA98BF331BF759";
                else
                    var_9 = "_encstr_B2AE148D118849F9F696852B6A0702D239A5810FEBC5";

                self detach( var_6, var_9 );
                self notify( "_encstr_9BB20E1BB1D207EB32563A858D862B91" );

                if ( var_4 )
                    _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::showweaponmagattachment( var_5 );
            }
        }
    }
}

terminateexposedprone( var_0, var_1, var_2 )
{
    self.pushable = 1;
}

playexposedproneloop( var_0, var_1, var_2 )
{
    self.pushable = 0;
    playexposedloop( var_0, var_1, var_2 );
}

playexposedloop( var_0, var_1, var_2 )
{
    scripts\asm\shared\utility::set_aim_and_turn_limits();
    var_3 = self asmgetstatetransitioningfrom( var_0 );

    if ( isdefined( var_3 ) && ( var_3 == "_encstr_91590F6EE80BDC23FA39ABE67D63DEB738" || var_3 == "_encstr_B1260F01D763117F1BDAB08011F527E8D3" || var_3 == "_encstr_A1F40C1C0BD127BDC6EB5BB73B95" || var_3 == "_encstr_8AE90F8DB8C4EBDCD116B991BEB1B7F61C" ) )
        childthread scripts\asm\shared\utility::setuseanimgoalweight( var_1, 0.2 );

    if ( isdefined( self.node ) )
        self._blackboard.lastusednode = self.node;

    if ( self.team != "_encstr_9A8507BA4040188D08" )
        thread faceenemywhenneeded( var_1 );

    scripts\asm\asm::asm_loopanimstate( var_0, var_1, 1.0 );
}

playexposedcrouchloop( var_0, var_1, var_2 )
{
    playexposedloop( var_0, var_1, var_2 );
}

playexposedidleaimdownloop( var_0, var_1, var_2 )
{
    self.aimingdown = 1;
    playexposedloop( var_0, var_1, var_2 );
}

playexposedcrouchaimdownloop( var_0, var_1, var_2 )
{
    self.aimingdown = 1;
    playexposedcrouchloop( var_0, var_1, var_2 );
}

terminateexposedidleaimdown( var_0, var_1, var_2 )
{
    self.aimingdown = 0;
}

terminateexposedcrouchaimdown( var_0, var_1, var_2 )
{
    self.aimingdown = 0;
}

faceenemywhenneeded( var_0 )
{
    self endon( var_0 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_1 = self.maxfaceenemydist * self.maxfaceenemydist;

    for (;;)
    {
        waitframe();

        if ( shouldfaceenemyinexposed() )
        {
            var_2 = distancesquared( self.origin, self.enemy.origin );

            if ( var_2 < var_1 )
                self orientmode( "_encstr_B43B0B33C2B1AC0895B92BAD5E" );
            else
                self orientmode( "_encstr_91730D640BC68899BFF532BB38850B" );

            continue;
        }

        self orientmode( "_encstr_91730D640BC68899BFF532BB38850B" );
    }
}

terminateexposedcrouch( var_0, var_1, var_2 )
{

}

shouldfaceenemyinexposed()
{
    if ( isdefined( self.pathgoalpos ) )
        return 0;

    return isdefined( self.enemy ) && isplayer( self.enemy ) && self cansee( self.enemy );
}

playanim_weaponswitch( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_3 = scripts\asm\asm_bb::bb_getrequestedweapon();
    var_4 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_5 = _encstr_83062042F108F193B56F3EFFADD38A7F58D87D8E2950BF9B8D733BD7B183C66F70A1::fasteranimspeed();
    self aisetanim( var_1, var_4, var_5 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, scripts\asm\asm::asm_getxanim( var_1, var_4 ) );
    scripts\asm\asm::asm_donotetracks( var_0, var_1, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );
    self notify( "_encstr_ACE8141AA3D09B888310689E1CE7D1EFC9D49F0F45BD" );
    scripts\common\gameskill::didsomethingotherthanshooting();
}

terminate_weaponswitch( var_0, var_1, var_2 )
{
    var_3 = weaponclass( self.weapon );
    _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::updateweaponarchetype( var_3 );
}

playturnanim( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    pushdisabledgunpose();
    scripts\common\gameskill::didsomethingotherthanshooting();
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );

    if ( scripts\engine\utility::actor_is3d() && isdefined( self.enemy ) )
        self orientmode( "_encstr_B43B0B33C2B1AC0895B92BAD5E" );
    else
        self orientmode( "_encstr_91440EF5D7AA1B467F70DAB9531A9ED1", self.angles );

    if ( isdefined( self.node ) )
        self animmode( "_encstr_8E9F0D859BD9C62B01192B8D1DC237" );
    else
        self animmode( "_encstr_A1370EF3FA638AFB695A587B03B42E57" );

    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_4 );
    self.stepoutyaw = angleclamp180( getangledelta( var_4, 0, 1 ) + self.angles[1] );
    self.useanimgoalweight = 1;
    var_5 = 1;
    self aisetanim( var_1, var_3, var_5 );

    if ( shouldfaceenemyinexposed() )
        thread playturnanim_turnanimanglefixup( var_4, var_1 );

    scripts\asm\asm::asm_donotetracks( var_0, var_1 );
}

playturnanim_turnanimanglefixup( var_0, var_1 )
{
    self endon( "_encstr_AD75063D571AE108" );
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_2 = self.enemy;
    var_2 endon( "_encstr_AD75063D571AE108" );
    var_3 = getanimlength( var_0 );

    if ( animhasnotetrack( var_0, "_encstr_82AB0A82D3502A13E08BE78F" ) )
    {
        var_4 = getnotetracktimes( var_0, "_encstr_82AB0A82D3502A13E08BE78F" );
        var_3 = var_3 * var_4[0];
    }
    else if ( animhasnotetrack( var_0, "_encstr_B4BA07CC5ADCB4CDD0" ) )
    {
        var_4 = getnotetracktimes( var_0, "_encstr_B4BA07CC5ADCB4CDD0" );
        var_3 = var_3 * var_4[0];
    }

    var_5 = int( var_3 * 20 );
    var_6 = var_5;

    while ( var_6 > 0 )
    {
        var_7 = 1 / var_6;
        var_8 = scripts\engine\utility::getyawtospot( var_2.origin );
        self.stepoutyaw = angleclamp180( self.angles[1] + var_8 );
        var_9 = self aigetanimtime( var_0 );
        var_10 = getangledelta( var_0, var_9, 1.0 );
        var_11 = angleclamp180( var_8 - var_10 );
        self orientmode( "_encstr_A34A0B518A172592D6E64FA115", angleclamp( self.angles[1] + var_11 * var_7 ) );
        var_6--;
        wait 0.05;
    }
}

playturnanim_cleanup( var_0, var_1, var_2 )
{
    self.useanimgoalweight = 0;
    self.stepoutyaw = undefined;
    self.desiredturnyaw = undefined;
    popdisabledgunpose();

    if ( istrue( self.leavecasualkiller ) )
        terminate_casualkiller( var_0, var_1, var_2 );
}

shouldsnaptocover_checktype( var_0, var_1, var_2, var_3 )
{
    if ( scripts\asm\asm_bb::bb_moverequested() )
        return 0;

    if ( !scripts\asm\shared\utility::isatcovernode() )
        return 0;

    if ( !isdefined( self.node ) )
        return 0;

    if ( isdefined( self.primaryweapon ) && _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::isusingsidearm() && weaponclass( self.primaryweapon ) != "_encstr_BE0703A54C" )
        return 0;

    return scripts\asm\shared\utility::isarrivaltype( var_0, var_1, var_2, var_3 );
}

currentsnaptonodeis( var_0, var_1, var_2, var_3 )
{
    var_4 = var_3;

    if ( !isdefined( self.node ) )
        return var_4 == "_encstr_AD5E0FA21E83DBE6AC2304D0E4DB5DD843";

    if ( distance2dsquared( self.origin, self.node.origin ) > 225 )
    {
        if ( scripts\asm\asm_bb::bb_getrequestedstance() == "_encstr_A5AD069B231F0BAF" )
            return var_4 == "_encstr_8E2508511EE07BE6B246";
        else
            return var_4 == "_encstr_AD5E0FA21E83DBE6AC2304D0E4DB5DD843";
    }

    if ( isdefined( self._blackboard.runpassthroughtype ) )
        return self._blackboard.runpassthroughtype == var_3;
    else
        return scripts\asm\shared\utility::isarrivaltype( var_0, var_1, var_2, var_3 );
}

_id_12BB8( var_0 )
{
    _encstr_953E1CDC6CC94B07E89BCB169BD2B65EDC7B3A953A4E168DB56E17CE378D::notetrack_prefix_handler( var_0 );
    return undefined;
}

reload( var_0, var_1, var_2 )
{
    self endon( "_encstr_A1D411E4CA8DDE2C32AF8E56C9D65ACD16A356" );
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );

    if ( weaponclass( self.weapon ) == "_encstr_8D940738966ED1DB8D" )
        self orientmode( "_encstr_B43B0B33C2B1AC0895B92BAD5E" );

    self aisetanim( var_1, var_3 );
    var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );
    self.asm.reloadweapon = self.weapon;
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_4 );
    scripts\asm\asm::asm_donotetracks( var_0, var_1, ::_id_12BB8 );
}

shoot_doagentnotetrackswithtimeout( var_0, var_1, var_2, var_3 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_4 = var_1 + "_encstr_A3BD09C633595885CA97A1";
    var_5 = var_1 + "_encstr_9AB00D68BC6F601B0D8B4011A265C1";
    childthread scripts\asm\shoot\script_funcs::shoot_timeout( var_4, var_5, var_3 );
    self endon( var_4 );
    var_6 = animhasnotetrack( var_2, "_encstr_88780599B4E495" );
    var_7 = weaponclass( self.weapon ) == "_encstr_BA080F126090E3D245A1F7BFBDE6CA25A0";
    var_8 = getanimlength( var_2 );
    var_9 = [];

    if ( var_6 )
    {
        var_10 = getnotetracktimes( var_2, "_encstr_88780599B4E495" );

        if ( var_10.size == 1 && var_10[0] == 0 )
            var_6 = 0;
        else
        {
            var_9[0] = var_8 * var_10[0];

            for ( var_11 = 1; var_11 < var_10.size; var_11++ )
            {
                var_12 = var_8 * var_10[var_11];
                var_12 = var_12 - var_9[var_11 - 1];
                var_9[var_11] = var_12;
            }
        }
    }

    var_13 = 0;
    var_14 = self._blackboard.shootparams_shotsperburst;
    var_15 = var_14 == 1 || self._blackboard.shootparams_style == "_encstr_BE1805DCCAB596";
    var_16 = isplayer( self.enemy ) && self.enemy isinvulnerable();
    var_17 = _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::weapon_pump_action_shotgun();
    var_15 = 1;
    var_18 = 0;

    while ( var_13 < var_14 && var_14 > 0 )
    {
        if ( var_6 )
        {
            if ( var_9[var_18] > 0 )
                wait( var_9[var_18] );

            var_18 = ( var_18 + 1 ) % var_9.size;
        }

        if ( !self.bulletsinclip )
            break;

        scripts\asm\shoot\script_funcs::shootatshootentorpos( var_15 );

        if ( var_16 )
        {
            if ( randomint( 3 ) == 0 )
                self.bulletsinclip--;
        }
        else
            self.bulletsinclip--;

        if ( var_7 )
        {
            self.rocketammo--;

            if ( weaponclass( self.weapon ) == "_encstr_BA080F126090E3D245A1F7BFBDE6CA25A0" && self tagexists( "_encstr_8FD20B6BE0AA87786007DBC1A8" ) )
                self hidepart( "_encstr_8FD20B6BE0AA87786007DBC1A8" );
        }

        var_13++;

        if ( var_17 )
            childthread scripts\asm\shoot\script_funcs::shoot_shotgunpumpsound( var_1 );

        if ( self._blackboard.shootparams_fastburst && var_13 == var_14 )
            break;

        if ( !var_6 || var_14 == 1 && self._blackboard.shootparams_style == "_encstr_BDDC07EBCCB5CA4BED" )
            self waittillmatch( var_1, "_encstr_961804BD954A" );
    }

    self notify( var_5 );
}

shoot_setshootparameters()
{
    var_0 = self._blackboard.shootparams_shotsperburst;
    var_1 = 2;

    if ( self._blackboard.shootparams_style == "_encstr_BDDC07EBCCB5CA4BED" || var_0 == 1 && self._blackboard.shootparams_style != "_encstr_8E1F05C92C6CB6" )
    {
        var_0 = 1;
        var_1 = 2;
    }
    else if ( self._blackboard.shootparams_style == "_encstr_BE1805DCCAB596" )
    {
        var_1 = 3;

        if ( var_0 == 1 )
            var_1 = 2;
        else if ( var_0 > 5 )
            var_0 = 5;
    }
    else if ( self._blackboard.shootparams_style == "_encstr_BE0703A54C" )
    {
        var_1 = 2;
        var_0 = 1;
    }
    else if ( self._blackboard.shootparams_style == "_encstr_8E1F05C92C6CB6" && self.currentpose != "_encstr_922406F1A6FD5E05" )
        var_1 = 5;
    else
    {
        var_1 = 4;

        if ( var_0 > 6 )
            var_0 = 6;
    }

    self setupshootstyleadditive( var_1, var_0 );
}

shoot_clearshootparameters()
{
    self setupshootstyleadditive( 0, 0 );
}

shoot_generic( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    self._blackboard.shoot_firstshot = 0;

    if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::isasniper( 1 ) )
        scripts\asm\track::onsniperabouttofire();

    self updateplayersightaccuracy();
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );
    var_5 = scripts\engine\utility::ter_op( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::weapon_pump_action_shotgun(), 3, 2 );

    if ( self asmcurrentstatehasshootadditive( var_0 ) )
    {
        shoot_setshootparameters();
        scripts\asm\shoot\script_funcs::shoot_donotetrackswithtimeout( var_0, var_1, var_4, var_5, "_encstr_9A3E147769B742C45189878FA020110BEDEFDB97C5BD" );
    }
    else
    {
        shoot_clearshootparameters();

        if ( isagent( self ) )
            shoot_doagentnotetrackswithtimeout( var_0, var_1, var_4, var_5 );
        else
        {
            var_6 = scripts\asm\shoot\script_funcs::shoot_getrate();
            self setflaggedanimknobrestart( var_1, var_4, 1, 0.2, var_6 );
            scripts\asm\shoot\script_funcs::shoot_donotetrackswithtimeout( var_0, var_1, var_4, 2 );
        }
    }

    self._blackboard.shootparams_numburstsleft--;

    if ( !scripts\asm\shoot\script_funcs::shootstylesingle() )
        scripts\asm\shoot\script_funcs::shoot_stopsoundwithdelay( 0.05 );

    scripts\asm\asm::asm_fireevent( var_0, "_encstr_A21E0F3B73D00A284FCD80FDDA8FABCF73" );

    if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::isasniper( 1 ) )
        scripts\asm\track::onsniperfired();
}

shoot_playidleanimloop_sniper( var_0, var_1, var_2 )
{
    thread scripts\asm\shoot\script_funcs::handleburstdelay( var_0, var_1 );

    if ( scripts\asm\asm_bb::bb_moverequested() )
        return;

    self.bshootidle = 1;
    scripts\asm\asm::asm_playadditiveanimloopstate( var_0, var_1, var_2 );
}

shouldendsniperidle( var_0, var_1, var_2, var_3 )
{
    if ( !shouldsniperidle( var_0, var_1, var_2, var_3 ) )
        return 1;

    return 0;
}

shouldsniperidle( var_0, var_1, var_2, var_3 )
{
    if ( !_encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::isasniper() )
        return 0;

    if ( scripts\asm\track::issniperconverging() )
        return 0;

    return 1;
}

shouldsniperbeginfiring( var_0, var_1, var_2, var_3 )
{
    if ( !_encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::isasniper() )
        return scripts\asm\shoot\script_funcs::shouldbeginfiring( var_0, var_1, var_2, var_3 );

    if ( scripts\asm\track::issniperconverging() )
        return 0;

    if ( !scripts\asm\shoot\script_funcs::shouldbeginfiring( var_0, var_1, var_2, var_3 ) )
        return 0;

    return 1;
}

shouldreacttonewenemy( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.stealth ) )
    {
        self.newenemyreaction = 0;
        return 0;
    }

    if ( !isdefined( self.enemy ) )
        return 0;

    if ( isdefined( self.enemy.unittype ) && self.enemy.unittype == "_encstr_83E8094727E333E8F9CE50" )
        return 0;

    if ( !istrue( self.newenemyreaction ) && !istrue( self.forcenewenemyreaction ) )
        return 0;

    if ( isdefined( self.newenemyreactiontime ) && gettime() - self.newenemyreactiontime > 1000 )
    {
        self.forcenewenemyreaction = undefined;
        return 0;
    }

    if ( istrue( self.casualkiller ) )
    {
        if ( isdefined( level.casualkillernewenemyreaction ) && gettime() < level.casualkillernewenemyreaction )
            return 0;

        level.casualkillernewenemyreaction = gettime() + 5000;
    }

    return 1;
}

shouldcasualkillerreacttonewenemy( var_0, var_1, var_2, var_3 )
{
    if ( istrue( self.casualkiller ) && istrue( self.leavecasualkiller ) )
    {
        var_4 = shouldreacttonewenemy( var_0, var_1, var_2, var_3 );

        if ( istrue( var_4 ) )
        {
            self clearbtgoal( 2 );
            return 1;
        }
    }

    return 0;
}

terminate_newenemyreaction( var_0, var_1, var_2 )
{
    self.newenemyreaction = 0;
    self.forcenewenemyreaction = undefined;
    self.stepoutyaw = undefined;
    popdisabledgunpose();

    if ( istrue( self.leavecasualkiller ) )
        terminate_casualkiller( var_0, var_1, var_2 );
}

terminate_transitiontoexposedanim( var_0, var_1, var_2 )
{
    terminate_newenemyreaction( var_0, var_1, var_2 );
    scripts\asm\soldier\cover::clearcoveranim( var_0, var_1, var_2 );
}

getnewenemyreactangleindex( var_0 )
{
    var_0 = angleclamp180( var_0 );

    if ( var_0 > 135 || var_0 < -135 )
        var_1 = 2;
    else if ( var_0 < -45 )
        var_1 = 4;
    else if ( var_0 > 45 )
        var_1 = 6;
    else
        var_1 = 8;

    return var_1;
}

getnewenemyreactdirindex()
{
    var_0 = 0;
    var_1 = self lastknownpos( self.enemy );
    var_2 = var_1 - self.origin;

    if ( length2dsquared( var_2 ) < 36 )
        var_0 = 0;
    else
    {
        var_3 = vectortoyaw( var_2 );
        var_0 = self.angles[1] - var_3;
    }

    return getnewenemyreactangleindex( var_0 );
}

getnewenemyreactalias()
{
    var_0 = getnewenemyreactdirindex();
    var_1 = "_encstr_B40101" + var_0;
    return var_1;
}

chooseanim_newenemyreaction( var_0, var_1, var_2 )
{
    var_3 = getnewenemyreactalias();
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, var_3 );
}

facegoalthread_newenemyreaction( var_0, var_1 )
{
    self notify( "_encstr_B1FB0FD30B769287C099B5B39093ED6A5D" );
    self endon( "_encstr_B1FB0FD30B769287C099B5B39093ED6A5D" );
    self endon( "_encstr_AD75063D571AE108" );
    self endon( var_0 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );

    for (;;)
    {
        var_2 = 0.25;
        var_3 = angleclamp180( var_1 - self.angles[1] );
        self orientmode( "_encstr_A34A0B518A172592D6E64FA115", self.angles[1] + var_3 * var_2 );
        waitframe();
    }
}

handlefacegoalnotetrack_newenemyreaction( var_0, var_1, var_2 )
{
    if ( var_1 == "_encstr_B6B10A2D8106F0784F3AE930" )
    {
        var_3 = var_2 - self.origin;
        var_4 = vectortoyaw( var_3 );
        thread facegoalthread_newenemyreaction( var_0, var_4 );
        return 1;
    }

    return 0;
}

playanim_newenemyreaction( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    pushdisabledgunpose();
    var_3 = self asmgetanim( var_0, var_1 );
    var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );
    self aisetanim( var_1, var_3 );
    var_5 = self lastknownpos( self.enemy );
    thread playturnanim_turnanimanglefixup( var_4, var_1 );
    scripts\asm\asm::asm_donotetrackswithinterceptor( var_0, var_1, ::handlefacegoalnotetrack_newenemyreaction, var_5 );

    if ( isdefined( self.enemy ) && self cansee( self.enemy ) )
        self.remainexposedendtime = gettime() + 2000;
}

chooseanimidle_interiorexterior( var_0, var_1, var_2 )
{
    var_3 = scripts\asm\asm::asm_getdemeanor();

    if ( scripts\asm\asm::asm_hasdemeanoranimoverride( var_3, "_encstr_A7C5056BD931D1" ) )
    {
        var_4 = scripts\asm\asm::asm_getdemeanoranimoverride( var_3, "_encstr_A7C5056BD931D1" );

        if ( isarray( var_4 ) )
            return var_4[randomint( var_4.size )];

        return var_4;
    }

    if ( isdefined( self.node ) && self.node.type == "_encstr_AFFF0C6E8FE899DDE6174B068510" )
    {
        if ( !self.node scripts\engine\utility::isvalidpeekoutdir( "_encstr_8CB405F6CE569C" ) )
            var_2 = var_2 + "_encstr_ACA906975B800F68";
    }

    if ( istrue( self.uprightcqbidle ) )
    {
        var_2 = var_2 + "_encstr_BD180AE76BC8A357FEE022FB";

        if ( !istrue( self._blackboard.hasplayedidleintro ) )
        {
            var_2 = var_2 + "_encstr_9592073E93409903BA";
            self._blackboard.hasplayedidleintro = 1;
        }
    }

    return scripts\asm\shared\utility::chooseanim_weaponclassprepended( var_0, var_1, var_2 );
}

chooseanim_playerpushed( var_0, var_1, var_2 )
{
    var_3 = scripts\asm\asm::asm_getephemeraleventdata( "_encstr_93410E6B08AB38F713F8203D8638BF07", "_encstr_93410E6B08AB38F713F8203D8638BF07" );
    var_4 = vectornormalize( var_3 );
    var_5 = vectortoangles( var_4 );
    var_6 = angleclamp180( var_5[1] - self.angles[1] );
    var_7 = scripts\asm\soldier\move::yawdiffto2468( var_6 );
    var_8 = "_encstr_B44C0828B3C044F75586" + var_7;
    var_9 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_8 );
    return var_9;
}

terminateidle( var_0, var_1, var_2 )
{
    self._blackboard.hasplayedidleintro = undefined;
}

shouldleavecasualkiller( var_0, var_1, var_2, var_3 )
{
    if ( istrue( self.leavecasualkiller ) )
    {
        if ( needtoturn( var_0, var_1, var_2, var_3 ) )
            return 0;

        if ( isdefined( self.enemy ) )
        {
            var_4 = self.angles[1] - vectortoyaw( self.enemy.origin - self.origin );

            if ( abs( angleclamp180( var_4 ) ) > 75 )
                return 0;
        }

        return 1;
    }

    return 0;
}

shouldleavecasualkillerimmediately( var_0, var_1, var_2, var_3 )
{
    if ( istrue( self.leavecasualkiller ) )
    {
        terminate_casualkiller( var_0, var_1, var_3 );
        return 1;
    }

    return 0;
}

terminate_casualkiller( var_0, var_1, var_2 )
{
    scripts\asm\shared\utility::setbasearchetype( scripts\asm\shared\utility::findoverridearchetype( "_encstr_8B1608EC43B8D647A113" ) );
    scripts\asm\shared\utility::clearoverridearchetype( "_encstr_ACF60EB7F743CD70EC51E0B885C49886", 0, 1 );
    self.newenemyreaction = 0;
    self.forcenewenemyreaction = undefined;
    self notify( "_encstr_A28F1263CA58D995A10BB9D585D8A5B4C6B1CA39" );
    self.leavecasualkiller = undefined;
    self.casualkiller = undefined;
    self setdefaultaimlimits();
}

shoulddodge( var_0, var_1, var_2, var_3 )
{
    if ( istrue( self.disabledodge ) )
        return 0;

    if ( isdefined( self.dodgecooldown ) && gettime() < self.dodgecooldown )
        return 0;

    if ( istrue( self.fixednode ) )
        return 0;

    if ( !isdefined( self.enemy ) )
        return 0;

    if ( !issentient( self.enemy ) )
        return 0;

    if ( !self issuppressed() && self canshootenemy() )
        return 0;

    if ( !self cansee( self.enemy ) )
        return 0;

    self.dodgecooldown = gettime() + randomintrange( 4000, 7000 );
    self.dodgeanim = "_encstr_AC4C024A";
    var_4 = scripts\asm\asm::asm_getanim( var_0, var_2 );
    var_5 = scripts\asm\asm::asm_getxanim( var_2, var_4 );
    var_6 = getmovedelta( var_5, 0, 1 );
    self.dodgeanim = "_encstr_8F4C026A";
    var_4 = scripts\asm\asm::asm_getanim( var_0, var_2 );
    var_5 = scripts\asm\asm::asm_getxanim( var_2, var_4 );
    var_7 = getmovedelta( var_5, 0, 1 );
    var_6 = rotatevector( var_6, self.angles );
    var_7 = rotatevector( var_7, self.angles );
    var_8 = self.origin - self.enemy.origin;
    var_9 = generateaxisanglesfromforwardvector( var_8, self.enemy.angles );
    var_10 = angleclamp180( var_9[1] - self.enemy.angles[1] );

    if ( abs( var_10 ) > 4 )
        return 0;

    if ( var_10 > 0 )
    {
        if ( checkdodge( var_7 ) )
        {
            self.dodgeanim = "_encstr_8F4C026A";
            return 1;
        }
    }
    else if ( checkdodge( var_6 ) )
    {
        self.dodgeanim = "_encstr_AC4C024A";
        return 1;
    }

    return 0;
}

checkdodge( var_0 )
{
    var_1 = self.origin + var_0;

    if ( !self isingoal( var_1 ) )
        return 0;

    if ( !navisstraightlinereachable( self.origin, var_1, self ) )
        return 0;

    var_2 = self getapproxeyepos();
    var_3 = var_2 + var_0;

    if ( !sighttracepassed( var_2, var_3, 1, self ) )
        return 0;

    if ( isai( self.enemy ) && !isbot( self.enemy ) )
        var_4 = self.enemy getapproxeyepos();
    else
        var_4 = self.enemy geteye();

    if ( !sighttracepassed( var_3, var_4, 0, undefined ) )
        return 0;

    return 1;
}

chooseanim_dodge( var_0, var_1, var_2 )
{
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, self.dodgeanim );
}

pushdisabledgunpose()
{
    if ( isdefined( self.gunposeoverride ) )
        self.stashedgunposeoverride = self.gunposeoverride;

    self.gunposeoverride = "_encstr_B2650840FBDB7F1188A1";
}

popdisabledgunpose()
{
    if ( isdefined( self.stashedgunposeoverride ) )
    {
        self.gunposeoverride = self.stashedgunposeoverride;
        self.stashedgunposeoverride = undefined;
    }
    else
        self.gunposeoverride = undefined;
}
