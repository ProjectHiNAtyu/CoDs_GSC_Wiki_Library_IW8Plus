// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

shouldthrowgrenade( var_0, var_1, var_2, var_3 )
{
    if ( !scripts\asm\asm_bb::bb_throwgrenaderequested() )
        return 0;

    if ( isdefined( var_3 ) && isdefined( self.node ) && isdefined( self.node.type ) && self.node.type != var_3 )
        return 0;

    var_4 = scripts\asm\asm_bb::bb_getthrowgrenadetarget();

    if ( !isdefined( var_4 ) || !isdefined( self.enemy ) || var_4 != self.enemy )
    {
        scripts\asm\asm::asm_fireephemeralevent( "_encstr_A5AA0DEBA0960F6B8025ADBE1BC0B7", "_encstr_961804BD954A" );
        return 0;
    }

    if ( scripts\aitypes\throwgrenade::grenadecooldownelapsed( var_4 ) )
    {
        var_5 = scripts\asm\asm::asm_getanim( var_0, var_2 );

        if ( isdefined( var_5 ) )
        {
            var_6 = getgrenadethrowoffset( var_2, var_5 );
            var_7 = self.randomgrenaderange;
            var_8 = distance( var_4.origin, self.origin );

            if ( var_8 < 800 )
            {
                if ( var_8 < 256 )
                    var_7 = 0;
                else
                    var_7 = var_7 * ( ( var_8 - 256 ) / 544 );
            }

            var_9 = self checkgrenadethrow( var_6, var_7, "_encstr_A9230BE827EE79B392375EEC08", "_encstr_8EFC096DD3700EDBBBB84A", "_encstr_88E209ABB792BA5BA83D2D" );
            self.a.nextgrenadetrytime = gettime() + randomintrange( 1000, 2000 );

            if ( isdefined( var_9 ) )
            {
                var_10 = spawnstruct();
                var_10.xanim = var_5;
                var_10.vel = var_9;
                var_10.target = var_4;
                var_10.handoffset = var_6;
                var_10.fastthrow = 0;
                var_10.withbounce = shouldbounce( self.grenadeweapon );
                var_10.time = gettime();
                self._blackboard.throwdata = var_10;
                return 1;
            }
        }
    }

    scripts\asm\asm::asm_fireephemeralevent( "_encstr_A5AA0DEBA0960F6B8025ADBE1BC0B7", "_encstr_961804BD954A" );
    return 0;
}

chooseanim_throwgrenade( var_0, var_1, var_2 )
{
    var_3 = undefined;
    var_4 = scripts\asm\asm::asm_getallanimindicesforalias( var_1, "_encstr_B25910591E1CDB6E9532EBB39C59E6168C56" );

    if ( isarray( var_4 ) )
    {
        var_5 = [];

        foreach ( var_7 in var_4 )
        {
            var_8 = scripts\asm\asm::asm_getxanim( var_1, var_7 );
            var_9 = getnotetracktimes( var_8, "_encstr_97E30EEC9359DC0B19ACBE47D027BDDD" );

            if ( var_9.size > 0 )
                var_10 = getmovedelta( var_8, 0, var_9[0] );
            else
                var_10 = getmovedelta( var_8 );

            var_10 = self localtoworldcoords( var_10 );

            if ( self maymovefrompointtopoint( self.origin, var_10 ) )
                var_5[var_5.size] = var_7;
        }

        if ( var_5.size > 0 )
            var_3 = var_5[randomint( var_5.size )];
        else
            return undefined;
    }
    else
        var_3 = var_4;

    return var_3;
}

playanim_throwgrenade( var_0, var_1, var_2 )
{
    var_3 = self._blackboard.throwdata;
    self.ispreppinggrenade = 1;
    var_4 = trygrenadethrow( var_0, var_1, var_3 );

    if ( !var_4 )
    {
        self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
        wait 0.2;
        scripts\asm\asm::asm_fireevent( var_0, "_encstr_961804BD954A" );
    }
}

playcoveranim_throwgrenade( var_0, var_1, var_2 )
{
    if ( isdefined( self.node ) )
        self.keepclaimednodeifvalid = 1;

    playanim_throwgrenade( var_0, var_1, var_2 );
}

playcoveranim_throwgrenade_cleanup( var_0, var_1, var_2 )
{
    scripts\asm\soldier\cover::clearcoveranim( var_0, var_1, var_2 );
    playanim_throwgrenade_cleanup( var_0, var_1, var_2 );
}

playanim_throwgrenade_cleanup( var_0, var_1, var_2 )
{
    self._blackboard.throwdata = undefined;
    scripts\asm\asm::asm_fireephemeralevent( "_encstr_A5AA0DEBA0960F6B8025ADBE1BC0B7", "_encstr_961804BD954A" );

    if ( scripts\common\utility::issp() && isdefined( self.isholdinggrenade ) )
    {
        _encstr_83062042F108F193B56F3EFFADD38A7F58D87D8E2950BF9B8D733BD7B183C66F70A1::dropgrenade();
        self.isholdinggrenade = undefined;
    }

    self.ispreppinggrenade = undefined;
}

shouldbounce( var_0 )
{
    var_1 = var_0.basename;
    return var_1 != "_encstr_83D00958E63AA576398567" && var_1 != "_encstr_8B1804DF2043" && var_1 != "_encstr_BED40B76C8310FF3DD0BA0800F";
}

trygrenadethrow( var_0, var_1, var_2, var_3 )
{
    var_4 = var_2.destination;
    var_5 = var_2.target;
    var_6 = var_2.withbounce;

    if ( !isdefined( var_6 ) )
        var_6 = 1;

    if ( isdefined( var_4 ) )
    {
        var_7 = getgrenadethrowoffset( var_1, var_2.xanim );

        if ( !isdefined( var_2.fastthrow ) )
            var_8 = self checkgrenadethrowpos( var_7, var_4, var_6, "_encstr_A9230BE827EE79B392375EEC08", "_encstr_8EFC096DD3700EDBBBB84A", "_encstr_88E209ABB792BA5BA83D2D" );
        else
            var_8 = self checkgrenadethrowpos( var_7, var_4, var_6, "_encstr_8EFC096DD3700EDBBBB84A", "_encstr_A9230BE827EE79B392375EEC08" );
    }
    else
        var_8 = var_2.vel;

    var_5 = var_2.target;

    if ( isdefined( var_8 ) )
    {
        if ( !isdefined( self.oldgrenawareness ) )
            self.oldgrenawareness = self.grenadeawareness;

        self.grenadeawareness = 0;
        var_9 = getdesiredgrenadetimervalue();
        setgrenadetimer( self.activegrenadetimer, min( gettime() + 3000, var_9 ) );
        var_10 = 0;

        if ( usingplayergrenadetimer() )
        {
            var_5.numgrenadesinprogresstowardsplayer++;
            thread reducegiptponkillanimscript( var_1, var_5 );

            if ( var_5.numgrenadesinprogresstowardsplayer > 1 )
                var_10 = 1;

            if ( self.activegrenadetimer.timername == "_encstr_95810C99C9C2ECCEC9B2DCC246CA" )
            {
                if ( var_5.numgrenadesinprogresstowardsplayer <= 1 )
                    var_5.lastfraggrenadetoplayerstart = gettime();
            }
        }

        if ( isdefined( var_3 ) )
            thread dogrenadethrow( var_0, var_1, var_2.xanim, var_8, var_9, var_10 );
        else
            dogrenadethrow( var_0, var_1, var_2.xanim, var_8, var_9, var_10 );

        return 1;
    }
    else
    {

    }

    return 0;
}

getgrenadethrowoffset( var_0, var_1 )
{
    var_2 = ( 0, 0, 64 );
    var_3 = scripts\asm\shared\utility::getbasearchetype();
    var_4 = 0;

    if ( isdefined( anim.grenadethrowanims ) )
    {
        if ( !isdefined( anim.grenadethrowanims[var_3] ) )
            var_3 = "_encstr_958C08CDDBD8325A959C";

        if ( isdefined( anim.grenadethrowanims[var_3] ) )
        {
            if ( isdefined( anim.grenadethrowanims[var_3][var_0] ) )
            {
                foreach ( var_8, var_6 in anim.grenadethrowanims[var_3][var_0] )
                {
                    for ( var_7 = 0; var_7 < var_6.size; var_7++ )
                    {
                        if ( var_6[var_7] == var_1 )
                        {
                            var_2 = anim.grenadethrowoffsets[var_3][var_0][var_8][var_7];
                            var_4 = 1;
                            break;
                        }
                    }

                    if ( var_4 )
                        break;
                }
            }
        }
    }

    return var_2;
}

getdesiredgrenadetimervalue()
{
    var_0 = undefined;

    if ( usingplayergrenadetimer() )
    {
        var_1 = self.activegrenadetimer.player;
        var_0 = gettime() + var_1.gs.playergrenadebasetime + randomint( var_1.gs.playergrenaderangetime );
    }
    else
        var_0 = gettime() + 30000 + randomint( 30000 );

    return var_0;
}

usingplayergrenadetimer()
{
    return self.activegrenadetimer.isplayertimer;
}

reducegiptponkillanimscript( var_0, var_1 )
{
    self endon( "_encstr_964A24D9F0609B5F33494F2567C1983FAFF08CEF1F5FA0B858135061B1F8ECA8B2A7E5932BD5" );
    self waittill( var_0 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    var_1.numgrenadesinprogresstowardsplayer--;
}

dogrenadethrow( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    self endon( "_encstr_85140F22139204D9DDF8E3DF36CDE82275" );
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    scripts\asm\asm::asm_fireephemeralevent( "_encstr_A5AA0DEBA0960F6B8025ADBE1BC0B7", "_encstr_99AD06D3A5B1538B" );
    var_6 = scripts\asm\asm_bb::bb_getcovernode();

    if ( !isdefined( var_6 ) || var_6.type == "_encstr_8E2508511EE07BE6B246" || var_6.type == "_encstr_8F0D0582C21D43" )
        self orientmode( "_encstr_812A0F0196B3F8C79A470D3B7743BB6046", var_3 );

    var_7 = scripts\asm\asm::asm_getbodyknob();
    var_8 = scripts\asm\asm::asm_getxanim( var_1, var_2 );
    _encstr_88C92737B1934B831DDC5E0BE6A5ADCB980B1D1DC6CAB1A12CD1A3AC937DBB9CC2071C59278B3BB9C6::evaluateattackevent( self.grenadeweapon.basename );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_8 );
    self aisetanim( var_1, var_2, fasteranimspeed() );
    thread scripts\asm\asm::asm_donotetracks( var_0, var_1 );
    var_9 = _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::getgrenademodel();
    var_10 = "_encstr_8BBA05185F8B99";
    var_11 = 0;

    while ( !var_11 )
    {
        self waittill( var_1, var_12 );

        if ( !isarray( var_12 ) )
            var_12 = [ var_12 ];

        foreach ( var_14 in var_12 )
        {
            if ( var_14 == "_encstr_A5B70D7956F390C3527D691935230B" || var_14 == "_encstr_A9D00EB327ACB9C2C859AF9396CE0D47" )
            {
                var_10 = attachgrenademodel( var_1, var_9, "_encstr_B2AE148D118849F9F696852B6A0702D239A5810FEBC5" );
                self.isholdinggrenade = 1;
            }

            if ( var_14 == "_encstr_97E30EEC9359DC0B19ACBE47D027BDDD" || var_14 == "_encstr_BD630E11DB6FC0F8F78DA131B85AC014" )
            {
                if ( isdefined( self.animtree ) && self.animtree == "_encstr_9B07038DB1" )
                    self playsound( "_encstr_AC9C12EE2C874A32E938D7CB488614927BA876A4" );

                var_11 = 1;
                continue;
            }

            if ( var_14 == "_encstr_961804BD954A" )
            {
                self.activegrenadetimer.player.numgrenadesinprogresstowardsplayer--;
                self notify( "_encstr_964A24D9F0609B5F33494F2567C1983FAFF08CEF1F5FA0B858135061B1F8ECA8B2A7E5932BD5" );
                return 0;
            }
        }
    }

    self notify( "_encstr_964A24D9F0609B5F33494F2567C1983FAFF08CEF1F5FA0B858135061B1F8ECA8B2A7E5932BD5" );

    if ( usingplayergrenadetimer() )
        thread watchgrenadetowardsplayer( var_1, self.activegrenadetimer.player, var_4 );

    var_22 = self throwgrenade();

    if ( !usingplayergrenadetimer() )
        setgrenadetimer( self.activegrenadetimer, var_4 );

    if ( var_5 && self.activegrenadetimer.isplayertimer )
    {
        var_23 = self.activegrenadetimer.player;

        if ( var_23.numgrenadesinprogresstowardsplayer > 1 || gettime() - var_23.lastgrenadelandednearplayertime < 2000 )
            var_23.grenadetimers["_encstr_A2BE0F32DEBA318D59D7D94EB2E6858CB2"] = gettime() + min( 5000, var_23.gs.playerdoublegrenadetime );
    }

    self notify( "_encstr_82F513C36BE74BF9C1A2C96E40D17F779A436286F8" );

    if ( var_10 != "_encstr_8BBA05185F8B99" )
        self detach( var_9, var_10 );

    self.isholdinggrenade = undefined;
    self.ispreppinggrenade = undefined;
    self.grenadeawareness = self.oldgrenawareness;
    self.oldgrenawareness = undefined;
    self.throwgrenadeatenemyasap = undefined;

    if ( isdefined( var_22 ) && self.team == "_encstr_8E8405EA382B2A" )
        level notify( "_encstr_9AFA13B1FA8FA1D8D96FE5339EBEF87DBFD288DBD2", var_22 );

    self waittillmatch( var_1, "_encstr_961804BD954A" );
    self notify( "_encstr_8D5313C29F6307695F85F9B03324CD49438A2ADFF3" );
    self notify( "_encstr_8C25132BF1EFA3BD18CF0BF75B30460B1849220259" );
}

throwgrenade_shouldabort( var_0, var_1, var_2, var_3 )
{
    if ( !scripts\asm\asm_bb::bb_throwgrenaderequested() )
    {
        if ( scripts\asm\asm::asm_eventfired( var_0, "_encstr_97E30EEC9359DC0B19ACBE47D027BDDD" ) || scripts\asm\asm::asm_eventfired( var_0, "_encstr_BD630E11DB6FC0F8F78DA131B85AC014" ) )
            return 0;

        if ( scripts\asm\asm::asm_eventfired( var_0, "_encstr_A9D00EB327ACB9C2C859AF9396CE0D47" ) || scripts\asm\asm::asm_eventfired( var_0, "_encstr_A5B70D7956F390C3527D691935230B" ) )
            return 0;

        return 1;
    }

    return 0;
}

fasteranimspeed()
{
    return 1.5;
}

attachgrenademodel( var_0, var_1, var_2 )
{
    self attach( var_1, var_2 );
    thread detachgrenadeonscriptchange( var_0, var_1, var_2 );
    return var_2;
}

waittillscriptchange( var_0 )
{
    self endon( var_0 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    self waittill( "_encstr_85140F22139204D9DDF8E3DF36CDE82275" );
}

detachgrenadeonscriptchange( var_0, var_1, var_2 )
{
    self endon( "_encstr_82F513C36BE74BF9C1A2C96E40D17F779A436286F8" );
    waittillscriptchange( var_0 );

    if ( !isdefined( self ) )
        return;

    if ( isdefined( self.oldgrenawareness ) )
    {
        self.grenadeawareness = self.oldgrenawareness;
        self.oldgrenawareness = undefined;
    }

    self detach( var_1, var_2 );
}

watchgrenadetowardsplayer( var_0, var_1, var_2 )
{
    var_1 endon( "_encstr_AD75063D571AE108" );
    watchgrenadetowardsplayerinternal( var_0, var_2 );
    var_1.numgrenadesinprogresstowardsplayer--;
}

watchgrenadetowardsplayerinternal( var_0, var_1 )
{
    var_2 = self.activegrenadetimer;
    var_3 = spawnstruct();
    var_3 thread watchgrenadetowardsplayertimeout( 5 );
    var_3 endon( "_encstr_83E021EEC28E8D86E8E4ACE6B0C856A8B7772C93236E41C6C2BC56E42AA5ADACDB571D" );
    var_4 = self.grenadeweapon.basename;
    var_5 = getgrenadeithrew( var_0 );

    if ( !isdefined( var_5 ) )
        return;

    setgrenadetimer( var_2, min( gettime() + 5000, var_1 ) );
    var_6 = 62500;
    var_7 = 160000;

    if ( var_4 == "_encstr_A7D70E338D169B1ABED9E4B29BB01995" )
    {
        var_6 = 810000;
        var_7 = 1690000;
    }

    var_8 = level.players;
    var_9 = var_5.origin;

    for (;;)
    {
        wait 0.1;

        if ( !isdefined( var_5 ) )
            break;

        if ( distancesquared( var_5.origin, var_9 ) < 400 )
        {
            var_10 = [];

            for ( var_11 = 0; var_11 < var_8.size; var_11++ )
            {
                var_12 = var_8[var_11];
                var_13 = distancesquared( var_5.origin, var_12.origin );

                if ( var_13 < var_6 )
                {
                    var_12 grenadelandednearplayer( var_2, var_1 );
                    continue;
                }

                if ( var_13 < var_7 )
                    var_10[var_10.size] = var_12;
            }

            var_8 = var_10;

            if ( var_8.size == 0 )
                break;
        }

        var_9 = var_5.origin;
    }
}

grenadelandednearplayer( var_0, var_1 )
{
    var_2 = self;
    anim.throwgrenadeatplayerasap = undefined;

    if ( gettime() - var_2.lastgrenadelandednearplayertime < 3000 )
        var_2.grenadetimers["_encstr_A2BE0F32DEBA318D59D7D94EB2E6858CB2"] = gettime() + var_2.gs.playerdoublegrenadetime;

    var_2.lastgrenadelandednearplayertime = gettime();
    var_3 = var_2.grenadetimers[var_0.timername];
    var_2.grenadetimers[var_0.timername] = max( var_1, var_3 );
}

setgrenadetimer( var_0, var_1 )
{
    if ( var_0.isplayertimer )
    {
        var_2 = var_0.player;
        var_3 = var_2.grenadetimers[var_0.timername];
        var_2.grenadetimers[var_0.timername] = max( var_1, var_3 );
    }
    else
    {
        var_3 = anim.grenadetimers[var_0.timername];
        anim.grenadetimers[var_0.timername] = max( var_1, var_3 );
    }
}

getgrenadeithrew( var_0 )
{
    self endon( "_encstr_85140F22139204D9DDF8E3DF36CDE82275" );
    self endon( var_0 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    self waittill( "_encstr_9B620D8F0DC07577C551F16A3826BF", var_1 );
    return var_1;
}

watchgrenadetowardsplayertimeout( var_0 )
{
    wait( var_0 );
    self notify( "_encstr_83E021EEC28E8D86E8E4ACE6B0C856A8B7772C93236E41C6C2BC56E42AA5ADACDB571D" );
}

getgrenadetimertime( var_0 )
{
    if ( var_0.isplayertimer )
        return var_0.player.grenadetimers[var_0.timername];
    else
        return anim.grenadetimers[var_0.timername];
}

offsettoorigin( var_0 )
{
    var_1 = anglestoforward( self.angles );
    var_2 = anglestoright( self.angles );
    var_3 = anglestoup( self.angles );
    var_1 = var_1 * var_0[0];
    var_2 = var_2 * var_0[1];
    var_3 = var_3 * var_0[2];
    return var_1 + var_2 + var_3;
}
