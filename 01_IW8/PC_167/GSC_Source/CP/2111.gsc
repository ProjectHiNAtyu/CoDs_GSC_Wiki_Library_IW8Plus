// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

deathlmgcleanup()
{
    if ( !isdefined( self._blackboard.leftweaponent ) )
        return;

    var_0 = self._blackboard.leftweaponent;
    var_0 delete();
    self._blackboard.leftweaponent = undefined;
    _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::forceuseweapon( self.primaryweapon, "_encstr_BA7F0830B3A7859B60B0" );
}

playdeathanim( var_0, var_1, var_2 )
{
    stop_sounds();
    self stoplookat();

    if ( isdefined( self.fnlaseroff ) )
        self [[ self.fnlaseroff ]]();

    if ( isdefined( self.fnasm_clearfingerposes ) )
        self [[ self.fnasm_clearfingerposes ]]();

    if ( isdefined( self.fnachievements ) )
        self thread [[ self.fnachievements ]]();

    removeselffrom_squadlastseenenemypos( self.origin );
    anim.numdeathsuntilcrawlingpain--;
    anim.numdeathsuntilcornergrenadedeath--;
    deathlmgcleanup();
    self.disabledeathorient = !( self.a.nodeath || istrue( self.noragdoll ) );

    if ( self.a.nodeath )
    {
        deathcleanup();
        return;
    }
    else if ( isdefined( self.ragdoll_immediate ) || self.forceragdollimmediate )
    {
        if ( isagent( self ) )
        {
            if ( istrue( self.clearsoundsubmixmpbrinfilanim ) )
                lbravo_spawner_jammer1();

            _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::dropallaiweapons();
            return;
        }

        if ( isdefined( self.doantigravgrenaderagdoll ) && self.doantigravgrenaderagdoll )
            self animmode( "_encstr_B69807B9DE36C69683" );
        else if ( istrue( self.nogravityragdoll ) )
            self animmode( "_encstr_8B970A9BF6D99C589DD2472F" );
        else
            self animmode( "_encstr_8AD6086722F1FB98F58B" );

        doimmediateragdolldeath();

        if ( !isdefined( self ) )
            return;
    }

    var_3 = scripts\common\utility::wasdamagedbyexplosive();

    if ( shouldhelmetpopondeath( var_3 ) )
        helmetpop();

    if ( shouldheadpop( var_3 ) )
        headpop();

    if ( !isdefined( self.skipdeathanim ) )
        self aiclearanim( scripts\asm\asm::asm_getroot(), 0.3 );

    playdeathsound( var_3 );

    if ( isdefined( self.asm.deathfunc ) )
    {
        self [[ self.asm.deathfunc ]]();

        if ( !isdefined( self.deathfunction ) )
        {
            deathcleanup();
            return;
        }
    }

    if ( isdefined( self.deathfunction ) )
    {
        var_4 = self [[ self.deathfunction ]]();

        if ( !isdefined( var_4 ) )
            var_4 = 1;

        if ( var_4 )
        {
            deathcleanup();
            return;
        }
    }

    self endon( "_encstr_8A490E5973475A8EE546CA63B23ACA46" );

    if ( shouldgib() && !self isragdoll() )
    {
        if ( istrue( self.clearsoundsubmixmpbrinfilanim ) )
            lbravo_spawner_jammer1();

        _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::dropallaiweapons();
        dogib();

        if ( isagent( self ) )
            self.nocorpse = 1;
        else
        {
            self hide();

            if ( !isagent( self ) )
                wait 0.1;
        }

        if ( isdefined( self ) )
        {
            deathcleanup();

            if ( !isagent( self ) )
                self delete();
        }

        return;
    }

    if ( isdefined( self.deathbysuffocation ) && !isdefined( self.deathanim ) )
        self.deathanim = getsuffocationdeathanim();

    var_5 = undefined;
    var_6 = undefined;
    var_7 = isdefined( self.deathalias ) && isdefined( self.deathstate );

    if ( !isdefined( self.skipdeathanim ) )
    {
        if ( isdefined( self.deathanim ) )
        {
            var_5 = self.deathanim;
            var_6 = scripts\asm\asm::asm_getxanim( var_1, var_5 );
        }
        else if ( var_7 )
        {
            var_5 = scripts\asm\asm::asm_lookupanimfromalias( self.deathstate, self.deathalias );
            var_6 = scripts\asm\asm::asm_getxanim( self.deathstate, var_5 );
        }
        else
        {
            var_5 = scripts\asm\asm::asm_getanim( var_0, var_1, var_2 );
            var_6 = scripts\asm\asm::asm_getxanim( var_1, var_5 );
        }

        if ( !animhasnotetrack( var_6, "_encstr_96C60893FDB828DF53E5" ) && !animhasnotetrack( var_6, "_encstr_9ACB0BA52026FDD7A3504B6941" ) )
            _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::dropallaiweapons();

        if ( animhasnotetrack( var_6, "_encstr_96C60893FDB828DF53E5" ) )
            self._blackboard.awaitingdropgunnotetrack = 1;

        if ( istrue( self.clearsoundsubmixmpbrinfilanim ) )
            lbravo_spawner_jammer1();

        if ( isdefined( self.asm.flashlight ) && self.asm.flashlight )
            scripts\asm\soldier\patrol::detachflashlight();

        handleburningtodeath( var_6 );
        self.deathanimduration = int( getanimlength( var_6 ) * 1000 );
        var_8 = isdefined( var_2 ) && var_2 == "_encstr_8A9D130B4BAEC2F328A8A5ED416307BA06E3B7ABE9";

        if ( istrue( self.disabledeathdirectionalorient ) )
            var_8 = 0;

        orientmeleevictim( var_8 );

        if ( isnumber( var_5 ) )
        {
            if ( var_7 )
                self aisetanim( self.deathstate, var_5 );
            else
                self aisetanim( var_1, var_5 );
        }
        else
        {
            var_9 = scripts\asm\asm::asm_getinnerrootknob();
            self clearanim( var_9, 0.05 );
            self setflaggedanimknoballrestart( var_1, var_5, var_9, 1, 0.05 );
        }

        if ( var_7 )
            scripts\asm\asm::asm_playfacialanim( var_0, self.deathstate, var_6 );
        else
            scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_6 );
    }

    if ( isdefined( self.deathanimmode ) )
        self animmode( self.deathanimmode );

    if ( isdefined( self.skipdeathanim ) )
    {
        if ( !isdefined( self.noragdoll ) )
        {
            if ( isdefined( self.fnpreragdoll ) )
                self [[ self.fnpreragdoll ]]();

            if ( !isdefined( self ) )
                return;

            if ( istrue( self.clearsoundsubmixmpbrinfilanim ) )
                lbravo_spawner_jammer1();

            _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::dropallaiweapons();
            self startragdoll();
        }

        if ( !isagent( self ) )
        {
            wait 0.05;
            self animmode( "_encstr_8AD6086722F1FB98F58B" );
        }
    }
    else if ( isdefined( self.ragdolltime ) )
        thread waitforragdoll( self.ragdolltime );
    else if ( getdvarint( "_encstr_8A8718DF5BAAC91C970371B9298744C805BC192FCE9F50D783BA" ) == 1 )
        thread startragdollwithoutwait();
    else
    {
        var_10 = getnotetracktimes( var_6, "_encstr_A6B50E7F1099CAFB7FFE960FED37326C" );
        var_11 = !var_7 && !isdefined( self.deathanim ) && ( var_10.size == 0 || var_10[0] > 0.5 );

        if ( var_11 )
        {
            if ( self.damagemod == "_encstr_8DED0A21C79B660BC7588981" )
                var_12 = 0.7;
            else
                var_12 = 0.35;

            thread waitforragdoll( getanimlength( var_6 ) * var_12 );
        }
    }

    if ( !isagent( self ) && !isdefined( self.skipdeathanim ) )
        thread playdeathfx();

    self endon( "_encstr_8A8417D15DAA589B933293B9F99345E0C3B87F59C81250D7C3" );

    if ( !isagent( self ) )
    {
        if ( isdefined( self.skipdeathanim ) )
            wait 0.05;
        else
        {
            var_13 = var_1;

            if ( var_7 )
                var_13 = self.deathstate;

            scripts\asm\asm::asm_donotetracks( var_0, var_13, ::deathnotetrackhandler );
        }
    }

    if ( !isdefined( self ) )
        return;

    if ( istrue( self.clearsoundsubmixmpbrinfilanim ) )
        lbravo_spawner_jammer1();

    _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::dropallaiweapons();
    self notify( "_encstr_93E111670889412461984BF760FBE8984513ED" );

    if ( !isagent( self ) )
    {
        if ( isdefined( self.ragdoll_immediate ) || self.forceragdollimmediate )
        {
            wait 0.5;

            if ( !isdefined( self ) )
                return;

            self aisetanimrate( scripts\asm\asm::asm_getroot(), 0 );
        }
    }

    deathcleanup();
}

deathnotetrackhandler( var_0 )
{
    if ( isdefined( self.burningtodeath ) && self.burningtodeath )
    {
        switch ( var_0 )
        {
            case "_encstr_88D60BADF63256D8D76EBB2C0E":
                handleburndeathmodelswap();
                return;
            case "_encstr_85DD15A22BBE33592055D8F779909E03EB06CB4B311693":
                thread handleburndeathvfx();
                return;
        }
    }

    _encstr_953E1CDC6CC94B07E89BCB169BD2B65EDC7B3A953A4E168DB56E17CE378D::notetrack_prefix_handler( var_0 );
}

handleburningtodeath( var_0 )
{
    if ( isscriptedagent( self ) && !nullweapon( self.damageweapon ) && self.unittype != "_encstr_8BFC0BC2CBD4F737E0A5E1FD79" && scripts\common\utility::_id_132EC( self.damageweapon ) )
    {
        self.burningtodeath = 1;
        thread handleburndeathvfx();
        return;
    }

    if ( !isdefined( self.burningtodeath ) || !self.burningtodeath )
        return;

    if ( isscriptedagent( self ) )
        return;

    if ( self.unittype != "_encstr_AA180446F6EC" && ( !isdefined( var_0 ) || !animhasnotetrack( var_0, "_encstr_88D60BADF63256D8D76EBB2C0E" ) ) )
    {
        if ( isdefined( self.headmodel ) )
        {
            self detach( self.headmodel );
            self.headmodel = undefined;
        }

        if ( isdefined( self.hatmodel ) )
        {
            self detach( self.hatmodel );
            self.hatmodel = undefined;
        }

        self setmodel( "_encstr_9A370FE5CDDB7A43FEDD2233C71940E335" );

        if ( !isdefined( var_0 ) || !animhasnotetrack( var_0, "_encstr_85DD15A22BBE33592055D8F779909E03EB06CB4B311693" ) )
            thread handleburndeathvfx();
    }
}

handleburndeathmodelswap()
{
    if ( isdefined( self.headmodel ) )
    {
        self detach( self.headmodel );
        self.headmodel = undefined;
    }

    if ( isdefined( self.hatmodel ) )
    {
        self detach( self.hatmodel );
        self.hatmodel = undefined;
    }

    self setmodel( "_encstr_9A370FE5CDDB7A43FEDD2233C71940E335" );
}

handleburndeathvfx()
{
    self endon( "_encstr_88D50E6E47B707BE98AE39CDEB2B8C16" );
    self endon( "_encstr_8A490E5973475A8EE546CA63B23ACA46" );
    var_0 = 1;

    if ( self isscriptable() )
    {
        var_1 = self getscriptablepartstate( "_encstr_832419E027822057A30578FD9FAA59A8C703B091EF27B8FF4B2DE4", 1 );

        if ( isdefined( var_1 ) )
        {
            self setscriptablepartstate( "_encstr_832419E027822057A30578FD9FAA59A8C703B091EF27B8FF4B2DE4", "_encstr_930B07BB1B6B3854FF" );
            var_0 = 0;
        }
    }

    if ( var_0 )
    {
        var_2 = getburnvfxtagpackets();

        foreach ( var_4 in var_2 )
        {
            if ( !isdefined( self ) )
                return;

            playfxontag( level.g_effect[var_4.burnvfx], self, var_4.tag );
            wait 0.05;
        }
    }
}

getburnvfxtagpackets()
{
    var_0 = [];
    var_0[var_0.size] = createburnvfxpacket( "_encstr_BD500A3C087F4AD519410B6F", "_encstr_A9261235E93AAF299F2B703FC305248950792F30" );
    var_0[var_0.size] = createburnvfxpacket( "_encstr_AC500A7A366A5BBFC04F9465", "_encstr_A9261235E93AAF299F2B703FC305248950792F30" );
    var_0[var_0.size] = createburnvfxpacket( "_encstr_831E0E6377F352B041BB327DF169FAEA", "_encstr_8666129DCCF0F598AE27CDFAADB28C7D43A5D9A1" );
    var_0[var_0.size] = createburnvfxpacket( "_encstr_A11E0E15BF4273488FCA930836A760BD", "_encstr_8666129DCCF0F598AE27CDFAADB28C7D43A5D9A1" );
    var_0[var_0.size] = createburnvfxpacket( "_encstr_83890D9CA8EF0B79D830939788913A", "_encstr_8666129DCCF0F598AE27CDFAADB28C7D43A5D9A1" );
    var_0[var_0.size] = createburnvfxpacket( "_encstr_8EEC09159F6238030BFA23", "_encstr_B183124863801E35BB7AE878D5E37746C837B830" );
    var_0[var_0.size] = createburnvfxpacket( "_encstr_A78B0B4D7DAC6398F6DDEB27A5", "_encstr_A9261235E93AAF299F2B703FC305248950792F30" );
    var_0[var_0.size] = createburnvfxpacket( "_encstr_8D8B0B309FA99B7EFA735F68F1", "_encstr_A9261235E93AAF299F2B703FC305248950792F30" );
    var_0[var_0.size] = createburnvfxpacket( "_encstr_A9B30EA6BECD347BAE3623569CBEC95A", "_encstr_8666129DCCF0F598AE27CDFAADB28C7D43A5D9A1" );
    var_0[var_0.size] = createburnvfxpacket( "_encstr_8BB30ED4AFDC43DEEAB191ACE47DB156", "_encstr_8666129DCCF0F598AE27CDFAADB28C7D43A5D9A1" );
    return var_0;
}

createburnvfxpacket( var_0, var_1, var_2 )
{
    var_3 = spawnstruct();
    var_3.tag = var_0;
    var_3.burnvfx = var_1;
    return var_3;
}

lbravo_spawner_jammer1()
{
    self detachshieldmodel( self.riotshieldmodel, self._id_12D50 );
    self.clearsoundsubmixmpbrinfilanim = undefined;
}

c8deathsound( var_0, var_1 )
{
    var_2 = getsubstr( var_1, 0, 3 );

    if ( var_2 == "_encstr_A2190467EDEB" )
    {
        var_3 = getsubstr( var_1, 3 );
        var_0 playsoundatviewheight( var_3 );
        return;
    }

    if ( var_2 != "_encstr_A31904E09BD7" )
        return;

    var_3 = getsubstr( var_1, 3 );

    if ( !isdefined( var_0.deathsoundent ) )
    {
        var_0.deathsoundent = spawn( "_encstr_AD050EE61B93A50E8ED7DB39D29D96B9", var_0.origin );
        var_0.deathsoundent linkto( var_0, "_encstr_B40101" );
    }

    var_4 = var_0.deathsoundent;
    var_4 notify( "_encstr_AB5C12A38B77FF396E803963C18BC8D6CF3398C9" );
    var_4 endon( "_encstr_AB5C12A38B77FF396E803963C18BC8D6CF3398C9" );
    var_4 playsound( var_3 );
    var_5 = lookupsoundlength( var_3 );
    wait( var_5 * 0.001 + 0.1 );
    var_4 delete();
}

playexplosivedeathanim( var_0, var_1, var_2 )
{
    if ( ( scripts\common\utility::isdamageweapon( getcompleteweaponname( "_encstr_AF8B1358AB4F81CA622F5D53DFFB8FF8A286615142" ) ) || scripts\common\utility::wasdamagedbyoffhandshield() || scripts\common\utility::isdamageweapon( getcompleteweaponname( "_encstr_AAE30A689B7FB1F6A2E3B3AF" ) ) ) && isdefined( self.attacker ) )
    {
        var_3 = vectortoyaw( self.attacker.origin - self.origin );

        if ( self.damageyaw > 135 || self.damageyaw <= -135 )
            self orientmode( "_encstr_A34A0B518A172592D6E64FA115", var_3 );
        else if ( self.damageyaw > 45 && self.damageyaw <= 135 )
            self orientmode( "_encstr_A34A0B518A172592D6E64FA115", var_3 + 90 );
        else if ( self.damageyaw > -45 && self.damageyaw <= 45 )
            self orientmode( "_encstr_A34A0B518A172592D6E64FA115", var_3 - 180 );
        else
            self orientmode( "_encstr_A34A0B518A172592D6E64FA115", var_3 - 90 );
    }

    playdeathanim( var_0, var_1, var_2 );
}

playbalconydeathanim( var_0, var_1, var_2 )
{
    anim.nextbalconydeathtime = gettime() + randomintrange( 25000, 35000 );
    self orientmode( "_encstr_A34A0B518A172592D6E64FA115", self._blackboard.balconydeathnode.angles[1] );
    playdeathanim( var_0, var_1, var_2 );
}

playdeathanim_melee_ragdolldelayed( var_0, var_1, var_2 )
{
    var_3 = isagent( self );

    if ( !var_3 )
    {
        if ( isdefined( self.meleestatename ) )
        {
            var_4 = var_2;

            if ( !isdefined( var_4 ) )
                var_4 = 10;

            scripts\asm\asm::asm_donotetrackswithtimeout( var_0, self.meleestatename, var_4 );
        }
    }

    _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::dropallaiweapons();

    if ( istrue( self.clearsoundsubmixmpbrinfilanim ) )
        lbravo_spawner_jammer1();

    if ( isdefined( self.fnpreragdoll ) )
        self [[ self.fnpreragdoll ]]();

    if ( !isdefined( self ) )
        return;

    if ( !var_3 )
    {
        self startragdoll();
        wait 0.1;
    }

    deathcleanup();
}

deathcleanup()
{
    if ( istrue( self.skipdeathcleanup ) )
        return;

    if ( isdefined( self ) )
    {
        if ( self.unittype == "_encstr_9B07038DB1" )
        {

        }
        else if ( self.unittype == "_encstr_AF07035938" )
            c8_scriptablecleanup();
    }

    scripts\asm\asm_bb::bb_clearmeleetarget();
    self notify( "_encstr_B2F1150BDFFAE03B721F4963CFAA732994F4B3A14654D8" );

    if ( isagent( self ) )
        return;

    var_0 = 3;

    while ( isdefined( self ) && self.script != "_encstr_AD75063D571AE108" && var_0 > 0 )
    {
        var_0--;
        wait 0.05;
    }

    self notify( "_encstr_85140F22139204D9DDF8E3DF36CDE82275" );
}

chooseshockdeathanim( var_0, var_1, var_2, var_3 )
{
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_93AE09307BC968690A0D3C" );
}

shouldplayshockdeath( var_0, var_1, var_2, var_3 )
{
    return scripts\asm\shared\utility::isshocked() || isdefined( self.shockdeath );
}

shouldplayexplosivedeath( var_0, var_1, var_2, var_3 )
{
    if ( self.unittype == "_encstr_8BFC0BC2CBD4F737E0A5E1FD79" )
        return 0;

    if ( istrue( self.playerlootleadervalidity ) )
    {
        self.playerlootleadervalidity = 0;
        return 1;
    }

    if ( scripts\common\utility::wasdamagedbyexplosive() )
        return 1;

    return 0;
}

shouldplayplayermeleedeath( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.damagemod ) && isalive( self.attacker ) )
    {
        if ( !isplayer( self.attacker ) )
            return 0;

        if ( scripts\common\utility::getdamagetype( self.damagemod ) != "_encstr_A6C7065BACB1CA95" )
            return 0;

        return 1;
    }

    return 0;
}

shouldplaybalconydeath( var_0, var_1, var_2, var_3 )
{
    if ( self.currentpose == "_encstr_922406F1A6FD5E05" )
        return 0;

    if ( !isdefined( self.burningtodeath ) && scripts\common\utility::wasdamagedbyexplosive() )
        return 0;

    if ( gettime() < anim.nextbalconydeathtime && !istrue( self.forcebalconydeath ) )
        return 0;

    var_4 = undefined;

    if ( isdefined( self._blackboard.covernode ) )
        var_4 = self._blackboard.covernode;
    else if ( isdefined( self._blackboard.lastusednode ) )
        var_4 = self._blackboard.lastusednode;

    if ( !isdefined( var_4 ) || !isdefined( var_4.script_balcony ) )
        return 0;

    if ( abs( angleclamp180( var_4.angles[1] - self.angles[1] ) ) > 30 )
        return 0;

    if ( isdefined( self.script_chance ) )
    {
        if ( randomfloat( 1 ) > self.script_chance )
            return 0;
    }

    if ( self nearnode( var_4 ) )
    {
        self._blackboard.balconydeathnode = var_4;
        return 1;
    }

    return 0;
}

shouldplaybalconyraildeath( var_0, var_1, var_2, var_3 )
{
    return self._blackboard.balconydeathnode.script_balcony == 1;
}

choosebalconydeathanim( var_0, var_1, var_2, var_3 )
{
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, self.currentpose );
}

shouldplaystrongdamagedeath( var_0, var_1, var_2, var_3 )
{
    var_4 = self.damageweapon;

    if ( !isdefined( var_4 ) || nullweapon( var_4 ) )
        return 0;

    if ( isdefined( self.a.doinglongdeath ) )
        return 0;

    if ( self.currentpose == "_encstr_922406F1A6FD5E05" || isdefined( self.a.onback ) )
        return 0;

    if ( self.damagemod == "_encstr_8DED0A21C79B660BC7588981" )
        return 0;

    if ( abs( self.damageyaw ) < 45 )
        return 0;

    if ( self.damagetaken > 500 )
        return 1;

    if ( self.a.movement == "_encstr_B4190493D573" && !isattackerwithindist( self.attacker, 275 ) )
    {
        if ( randomint( 100 ) < 65 )
            return 0;
    }

    if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::issniperrifle( var_4 ) && self.maxhealth < self.damagetaken )
        return 1;

    if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::isshotgun( var_4 ) && isattackerwithindist( self.attacker, 512 ) )
        return 1;

    if ( var_4.basename == "_encstr_96910FB4DDDCFA9159CE58DC3A58D1DE4E" && scripts\common\utility::isweaponepic( var_4 ) )
        return 1;

    return 0;
}

stop_sounds()
{
    self stopsoundchannel( "_encstr_99091490476C28FD776671906BE8B3A763D637A19BF0" );
    self stopsoundchannel( "_encstr_99A90DD628B017CF2F80125B890F47" );
    scripts\asm\shared\utility::disabledefaultfacialanims( 0 );
    self stoploopsound();
}

c6_scriptablecleanup()
{
    if ( !isdefined( self ) )
        return;

    self.bt.disabledismemberbehaviors = 1;

    if ( isdefined( self.asm.bpreragdolled ) )
        return;

    self.asm.bpreragdolled = 1;
    self.scriptablecleanup = 1;

    if ( !isdefined( self._blackboard.scriptableparts ) )
        return;

    foreach ( var_3, var_1 in self._blackboard.scriptableparts )
    {
        var_2 = var_1.state;

        if ( var_2 == "_encstr_820E07FAE8780B3A4C" )
            continue;

        if ( issubstr( var_2, "_encstr_8ED8063792AF1BA1" ) )
            var_2 = "_encstr_B6F909E2C86F491378B5E0";

        self setscriptablepartstate( var_3, var_2 + "_encstr_ADF408F1C77CE8E19AE8" );
    }

    self setscriptablepartstate( "_encstr_A5D5128EDEE4E6BDF5F667CAC9C6F65823FA99E1", "_encstr_820E07FAE8780B3A4C" );
}

c8_scriptablecleanup()
{
    self.bt.disabledismemberbehaviors = 1;

    if ( isdefined( self.asm.bpreragdolled ) )
        return;

    self.asm.bpreragdolled = 1;
    self.scriptablecleanup = 1;

    if ( !isdefined( self._blackboard.scriptableparts ) )
        return;

    foreach ( var_2, var_1 in self._blackboard.scriptableparts )
    {
        if ( issubstr( var_2, "_encstr_A56807D3F9F43E166B" ) )
            self setscriptablepartstate( var_2, "_encstr_88C007F34B700B5710" );
    }

    self setscriptablepartstate( "_encstr_A5D5128EDEE4E6BDF5F667CAC9C6F65823FA99E1", "_encstr_820E07FAE8780B3A4C" );
}

choosemovingdeathanim( var_0, var_1, var_2 )
{
    var_3 = length( self.velocity );
    var_4 = scripts\asm\shared\utility::getbasearchetype();
    var_5 = getnextlowestspeedthresholdstring( var_4, var_3 );
    var_6 = [];
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, var_5 );

    if ( var_6.size == 0 )
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );

    return var_6[randomint( var_6.size )];
}

choosecrouchingdeathanim( var_0, var_1, var_2 )
{
    if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_9ABA05E87F4B70" ) )
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_81CC0586952C91" );

    if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A", "_encstr_9B7A0CF35815C3971660B7CF306B", "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4", "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB", "_encstr_9ABA05E87F4B70" ) )
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_877D06BB570AB0D0" );

    return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );
}

choosecoverdeathanim( var_0, var_1, var_2 )
{
    switch ( var_2 )
    {
        case "_encstr_96BC0CA9321B0D2861C34163F697":
            return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A5AD069B231F0BAF" );
        case "_encstr_82780EB1ED67CA27BE56E138DBCD5691":
            return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8E2508591EE07BE6B246" );
        case "_encstr_8DE30D6CF69D2B937DB1277BAE8DD0":
            if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_9ABA05E87F4B70" ) && ( self.damageyaw > 135 || self.damageyaw <= -45 ) )
                return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9A460C3803FDC34193670BF531CB" );

            if ( self.damageyaw > -45 && self.damageyaw <= 45 )
                return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A9990CD61AD7C3B76C899080A244" );

            return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A19E0F56B64FC3FB90593B2788E9A51A01" );
        case "_encstr_91280CE8026B33B37F7ABBA448FB":
            if ( self.currentpose == "_encstr_A5AD069B231F0BAF" )
                return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A24F0C9B83FCCA3CB9532B76E838" );
            else
            {
                if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_9ABA05E87F4B70" ) )
                    return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_84BC12484A07316B9793CE487D9F10972C125840" );

                return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A7BD1593F87FB47B4E2EEAFF3D11D3B191605A3AB0D1EB" );
            }
        case "_encstr_87970BBFC71BCD10D7953951BB":
            if ( self.currentpose == "_encstr_A5AD069B231F0BAF" )
                return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A1440B89E7DA515EC37BA8E803" );
            else
                return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_BE120C632BCCE8AF1B27DE5D8DD0" );
        case "_encstr_87CA094717FC92B241D3B7":
            return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_B607039FCA" );
    }
}

choosestandingdeathanim( var_0, var_1, var_2 )
{
    if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::isusingsidearm() )
        return choosestandingpistoldeathanim( var_0, var_1, var_2 );

    if ( isdefined( self.attacker ) && self shouldplaymeleedeathanim( self.attacker ) )
        return choosestandingmeleedeathanim( var_0, var_1, var_2 );

    var_3 = [];

    if ( scripts\engine\utility::damagelocationisany( "_encstr_9B7A0CF35815C3971660B7CF306B", "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8DA00BB1DB7795C9BE31F6C8E5" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_81CC0586952C91" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_9ABA05E87F4B70" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_9ABA05E87F4B70" );
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A", "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_836F0E207FF0A347963BBF3321912548" );

    if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_952B0C65857BBFB80F9FC0B8A75A" );

    if ( self.damageyaw > 135 || self.damageyaw <= -135 )
    {
        if ( scripts\engine\utility::damagelocationisany( "_encstr_9ABA05E87F4B70", "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3" ) )
            var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_97D708BB10FAF6A79942" );

        if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A" ) )
            var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_97D708BB10FAF6A79942" );
    }
    else if ( self.damageyaw > -45 && self.damageyaw <= 45 )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_B69B0589C236B6" );

    var_4 = var_3.size > 0;

    if ( !var_4 || randomint( 100 ) < 15 )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );

    if ( randomint( 100 ) < 10 && firingdeathallowed() )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_91DC0F8C953385BA1B8EEB334B4EA5DC3B" );

    return var_3[randomint( var_3.size )];
}

chooseexplosivedeathanim( var_0, var_1, var_2 )
{
    var_3 = 0;
    var_4 = self.damageweapon;

    if ( !nullweapon( var_4 ) && self.unittype != "_encstr_8BFC0BC2CBD4F737E0A5E1FD79" && scripts\common\utility::_id_132EC( var_4 ) )
    {
        if ( scripts\asm\asm::asm_hasalias( var_1, "_encstr_887F0AD67BB1BD1D7B67F566" ) )
            var_3 = 1;
    }

    var_5 = undefined;

    if ( var_3 && self.currentpose == "_encstr_922406F1A6FD5E05" )
        var_5 = "_encstr_BD3F0EADDE36DBD1DECEEBC1397B3795";
    else
    {
        var_5 = "_encstr_AB440A3180D0C0109B17550B";

        if ( var_3 )
            var_5 = "_encstr_8DCB085BEF657B4DCF0B";

        if ( self.currentpose == "_encstr_B13D076BED70539F23" )
            var_5 = var_5 + "_encstr_AAE80859923A77033FD0";
        else if ( self.currentpose == "_encstr_922406F1A6FD5E05" )
            var_5 = var_5 + "_encstr_B198072913A2201592";

        var_5 = var_5 + scripts\asm\soldier\pain::getpaindirectiontoactor();
    }

    var_6 = scripts\asm\asm::asm_lookupanimfromalias( var_1, var_5 );

    if ( var_3 )
        var_6 = scripts\asm\shared\utility::preventrecentanimindex( var_1, var_5, var_6 );

    var_7 = scripts\asm\asm::asm_getxanim( var_1, var_6 );

    if ( getdvar( "_encstr_8F061950FA526F793B90C55D99D30D837EA32928032F0F9027AB6A", "_encstr_AB0703DBB9" ) == "_encstr_AB0703DBB9" )
    {
        var_8 = 1;
        var_9 = getnotetracktimes( var_7, "_encstr_A6B50E7F1099CAFB7FFE960FED37326C" );

        if ( var_9.size > 0 )
            var_8 = var_9[0];

        var_10 = getmovedelta( var_7, 0, var_8 );
        var_11 = self localtoworldcoords( var_10 );
        var_12 = 0;

        if ( scripts\engine\utility::actor_is3d() )
            var_12 = navtrace3d( self.origin, var_11, 0 );
        else
            var_12 = self maymovefrompointtopoint( self.origin, var_11, 0, 1 );

        if ( !var_12 )
        {
            if ( var_3 )
                var_6 = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_870910747DCAF94BC89C81A94094F5AC2F43" );
            else
                var_6 = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );
        }
    }

    self.deathanimmode = "_encstr_8B970A9BF6D99C589DD2472F";
    return var_6;
}

choosestandingpistoldeathanim( var_0, var_1, var_2 )
{
    if ( abs( self.damageyaw ) < 50 )
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8A3F090147D3DD909C21BB" );

    var_3 = [];

    if ( abs( self.damageyaw ) < 110 )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8A3F090147D3DD909C21BB" );

    if ( scripts\engine\utility::damagelocationisany( "_encstr_952B0C65857BBFB80F9FC0B8A75A", "_encstr_9B7A0CF35815C3971660B7CF306B", "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_813713034BB394B071BFB9301DEBC0616BFBF22A62" );

    if ( !scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_9ABA05E87F4B70", "_encstr_A6CC076A05751852B3", "_encstr_95E80A8D59CCD1F533DBED3A", "_encstr_8ECF0B734B47E3AB67AD07909B", "_encstr_BDB30AC6CA66A3FAA158CD23", "_encstr_A1BD0B9C96D9D0A3F51A169B19", "_encstr_8A1804DAAB75" ) && randomint( 2 ) == 0 )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_B82C1287E48B5158DCD7081853ED33CF428D758B" );

    if ( var_3.size == 0 || scripts\engine\utility::damagelocationisany( "_encstr_9B7A0CF35815C3971660B7CF306B", "_encstr_952B0C65857BBFB80F9FC0B8A75A", "_encstr_9ABA05E87F4B70", "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB", "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4" ) )
        var_3[var_3.size] = scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_86A00FCFACC319ED849FF8F853A11B71DB" );

    return var_3[randomint( var_3.size )];
}

choosestandingmeleedeathanim( var_0, var_1, var_2 )
{
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_8B1608EC43B8D647A113" );
}

firingdeathallowed()
{
    return 0;
}

playdeathfx()
{
    self endon( "_encstr_85140F22139204D9DDF8E3DF36CDE82275" );

    if ( self.stairsstate != "_encstr_8BBA05185F8B99" )
        return;

    wait 2;

    if ( isdefined( self.noragdoll ) && self.damagemod != "_encstr_8DED0A21C79B660BC7588981" )
        play_blood_pool();
}

play_blood_pool( var_0, var_1 )
{
    if ( !isdefined( self ) )
        return;

    if ( isdefined( self.skipbloodpool ) )
        return;

    var_2 = self gettagorigin( "_encstr_813B0D4027B190B37585FBC819FD28" );
    var_3 = self gettagangles( "_encstr_813B0D4027B190B37585FBC819FD28" );
    var_4 = anglestoforward( var_3 );
    var_5 = anglestoup( var_3 );
    var_6 = anglestoright( var_3 );
    var_2 = var_2 + var_4 * -8.5 + var_5 * 5 + var_6 * 0;
    var_7 = scripts\engine\trace::_bullet_trace( var_2 + ( 0, 0, 30 ), var_2 - ( 0, 0, 100 ), 0, undefined );

    if ( var_7["_encstr_820E07FAE8780B3A4C"][2] > 0.9 )
        playfx( level._effect["_encstr_8F361A3BFFE3896C706B50C6E4D89D6123DA8710C131BDB6472BC2E0"], var_2 );
}

waitforragdoll( var_0 )
{
    wait( var_0 );

    if ( !isdefined( self ) )
        return;

    if ( isagent( self ) )
        return;

    if ( isdefined( self ) )
        _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::dropallaiweapons();

    if ( isdefined( self.fnpreragdoll ) )
        self [[ self.fnpreragdoll ]]();

    if ( isdefined( self ) && !isdefined( self.noragdoll ) )
        self startragdoll();
}

startragdollwithoutwait()
{
    if ( isagent( self ) )
        return;

    if ( isdefined( self ) )
        _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::dropallaiweapons();

    if ( isdefined( self.fnpreragdoll ) )
        self [[ self.fnpreragdoll ]]();

    if ( isdefined( self ) && !isdefined( self.noragdoll ) )
        self startragdoll();
}

doimmediateragdolldeath()
{
    _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::dropallaiweapons();
    self.skipdeathanim = 1;

    if ( isdefined( self.fnpreragdoll ) )
        self [[ self.fnpreragdoll ]]();

    if ( !isdefined( self ) )
        return;

    var_0 = 10;
    var_1 = scripts\common\utility::getdamagetype( self.damagemod );

    if ( isdefined( self.attacker ) && self.attacker == level.player && var_1 == "_encstr_A6C7065BACB1CA95" )
        var_0 = 5;

    var_2 = self.damagetaken;

    if ( var_1 == "_encstr_A6260731BAD8D82BD1" || isdefined( self.damagemod ) && self.damagemod == "_encstr_9B0D099AD3887D91252954" )
        var_2 = min( var_2, 300 );

    var_3 = var_0 * var_2;
    var_4 = max( 0.3, self.damagedir[2] );
    var_5 = ( self.damagedir[0], self.damagedir[1], var_4 );

    if ( isdefined( self.ragdoll_directionscale ) )
        var_5 = var_5 * self.ragdoll_directionscale;
    else
        var_5 = var_5 * var_3;

    if ( self.forceragdollimmediate )
        var_5 = var_5 + self.prevanimdelta * 20 * 10;

    if ( isdefined( self.ragdoll_start_vel ) )
        var_5 = var_5 + self.ragdoll_start_vel * 10;

    var_6 = self.damagelocation;

    if ( isdefined( self.ragdoll_damagelocation_none ) && var_6 == "_encstr_8BBA05185F8B99" )
        var_6 = self.ragdoll_damagelocation_none;

    if ( isdefined( self.doantigravgrenaderagdoll ) && self.doantigravgrenaderagdoll == 1 )
    {
        var_5 = vectornormalize( ( self.damagedir[0], self.damagedir[1], self.damagedir[2] ) );
        var_5 = var_5 * 1500;
    }

    self startragdollfromimpact( var_6, var_5 );
    wait 0.05;
}

shouldhelmetpoponpain( var_0 )
{
    if ( !istrue( self.shouldhelmetpop ) )
        return 0;

    if ( isdefined( self.lastattacker ) && isdefined( self.lastattacker.team ) && isdefined( self.team ) && self.lastattacker.team == self.team )
        return 0;

    if ( isdefined( self.helmetsubpart ) && !var_0 )
        return 0;

    if ( isdefined( self.onlyhelmetpopondeath ) && self.onlyhelmetpopondeath )
        return 0;

    if ( isdefined( self.magic_bullet_shield ) && self.magic_bullet_shield )
        return 0;

    if ( isdefined( self.damagelocation ) && self.damagelocation == "_encstr_A6CC076A05751852B3" )
        return 1;

    if ( var_0 && randomint( 2 ) == 0 )
        return 1;

    return 0;
}

shouldhelmetpopondeath( var_0 )
{
    if ( !istrue( self.shouldhelmetpop ) )
        return 0;

    if ( self.unittype != "_encstr_958C08CDDBD8325A959C" && self.unittype != "_encstr_8BFC0BC2CBD4F737E0A5E1FD79" )
        return 0;

    if ( self.damagemod == "_encstr_8DED0A21C79B660BC7588981" && randomint( 3 ) < 2 )
        return 0;

    if ( isdefined( self.damagelocation ) && ( self.damagelocation == "_encstr_A6CC076A05751852B3" || self.damagelocation == "_encstr_81CC0586952C91" ) )
        return 1;

    if ( var_0 && randomint( 3 ) == 0 )
        return 1;

    return 0;
}

helmetpop()
{
    if ( !isdefined( self ) )
        return;

    if ( !isdefined( self.hatmodel ) )
        return;

    if ( isdefined( self.dontbreakhelmet ) && self.dontbreakhelmet )
        return;

    var_0 = self gettagorigin( "_encstr_AADA07DBF19A4A81D7" );

    if ( isdefined( self.helmetshatterfx ) )
    {
        var_1 = anglestoforward( self gettagangles( "_encstr_AADA07DBF19A4A81D7" ) );
        playfx( self.helmetshatterfx, var_0, var_1 );
    }

    playworldsound( "_encstr_AD8D1EAADB30ADD5A537DB50BB59C5BF75A9D8BFEAB7F05DC5013BD51920D727", var_0 );

    if ( isdefined( self.helmetsubpart ) )
    {
        self.helmetsubpart = undefined;
        var_2 = self getdamageparthealth( "_encstr_A6CC076A05751852B3", "_encstr_A6CC076A05751852B3" );

        if ( var_2 > 0 )
            self damagedamagepart( var_2, "_encstr_A6CC076A05751852B3", "_encstr_A6CC076A05751852B3" );
    }

    var_3 = getpartname( self.hatmodel, 0 );
    var_4 = spawn( "_encstr_82DC0DC6CB18BB5744B8C3978DEFB0", self.origin + ( 0, 0, 64 ) );
    var_4 setmodel( self.hatmodel );
    var_4.origin = self gettagorigin( var_3 );
    var_4.angles = self gettagangles( var_3 );
    waitframe();

    if ( isdefined( self.damagedir ) && self.damagedir != ( 0, 0, 0 ) )
        var_4 thread helmetlaunch( self.damagedir );
    else
        var_4 thread helmetlaunch( ( randomfloatrange( -0.25, 0.25 ), randomfloatrange( -0.25, 0.25 ), randomfloatrange( -1, 1 ) ) );

    self detach( self.hatmodel, "_encstr_B40101" );
    self.hatmodel = undefined;
    self hidepartandchildren_allinstances( "_encstr_9ABB0968F1402B19E2AFA9" );

    if ( isalive( self ) && shouldplaysuffocatedeath() )
    {
        playfxontag( level.g_effect["_encstr_8FA01772D829B57F6B70BAA275911F717F201A0A208F6EF3A1"], self, "_encstr_AADA07DBF19A4A81D7" );

        if ( self.asmname != "_encstr_A5FC13A2490B382962229F039AEBD0A95B0A47160A" && self.asmname != "_encstr_88D40D4F5639F6BED94EB0CE2D3AF2" )
            self.deathbysuffocation = 1;

        self kill();
    }
}

helmetlaunch( var_0 )
{
    var_1 = var_0;
    var_1 = var_1 * randomfloatrange( 2000, 4000 );
    var_2 = var_1[0];
    var_3 = var_1[1];
    var_4 = randomfloatrange( 1500, 3000 );
    var_5 = self.origin + ( randomfloatrange( -1, 1 ), randomfloatrange( -1, 1 ), randomfloatrange( -1, 1 ) ) * 5;
    self physicslaunchclient( var_5, ( var_2, var_3, var_4 ) );
    wait 60;

    for (;;)
    {
        if ( !isdefined( self ) )
            return;

        if ( distancesquared( self.origin, level.player.origin ) > 262144 )
            break;

        wait 30;
    }

    self delete();
}

getsuffocationdeathanim()
{
    var_0 = undefined;

    if ( randomint( 11 ) >= 1 )
        return var_0;

    return var_0;
}

shouldplaysuffocatedeath()
{
    return 0;
}

shouldheadpop( var_0 )
{
    if ( self.unittype != "_encstr_958C08CDDBD8325A959C" && self.unittype != "_encstr_8BFC0BC2CBD4F737E0A5E1FD79" )
        return 0;

    if ( isdefined( self.forceheadpop ) )
        return 1;

    if ( self.damagemod == "_encstr_8DED0A21C79B660BC7588981" )
        return 0;

    if ( self.damagemod == "_encstr_9B0D099AD3887D91252954" )
        return 0;

    var_1 = self.damageweapon;

    if ( nullweapon( var_1 ) )
        return 0;

    if ( self.damagemod == "_encstr_84670F0D974DCF124E3F7A931851A1FB9F" && var_1.classname == "_encstr_A7AF07D1EF1B06683C" && istrue( level.disableheadpopbyturret ) )
        return 0;

    return 0;
}

headpop()
{
    if ( !isdefined( self.headmodel ) )
        return;

    var_0 = self gettagorigin( "_encstr_AADA07DBF19A4A81D7" );
    var_1 = anglestoforward( self gettagangles( "_encstr_AADA07DBF19A4A81D7" ) );
    playfxontag( level.g_effect["_encstr_A7CF0FD4750BC2B636D84F7B0108750AE1"], self, "_encstr_AADA07DBF19A4A81D7" );
    self detach( self.headmodel, "_encstr_B40101" );
    self.headmodel = undefined;
}

cross2d( var_0, var_1 )
{
    return var_0[0] * var_1[1] - var_1[0] * var_0[1];
}

meleegetattackercardinaldirection( var_0, var_1 )
{
    var_2 = vectordot( var_1, var_0 );
    var_3 = cos( 60 );

    if ( squared( var_2 ) < squared( var_3 ) )
    {
        if ( cross2d( var_0, var_1 ) > 0 )
            return 1;
        else
            return 3;
    }
    else if ( var_2 < 0 )
        return 0;
    else
        return 2;
}

orientmeleevictim( var_0 )
{
    var_1 = getcompleteweaponname( "_encstr_AF8B1358AB4F81CA622F5D53DFFB8FF8A286615142" );
    var_2 = getcompleteweaponname( "_encstr_AAE30A689B7FB1F6A2E3B3AF" );

    if ( scripts\common\utility::isdamageweapon( var_1 ) || scripts\common\utility::isdamageweapon( var_2 ) )
        return;

    if ( var_0 || self.damagemod == "_encstr_8DED0A21C79B660BC7588981" && isdefined( self.attacker ) && !scripts\common\utility::wasdamagedbyoffhandshield() && !scripts\common\utility::isdamageweapon( var_2 ) )
    {
        if ( scripts\engine\utility::actor_is3d() )
        {
            var_3 = self.attacker.origin - self.origin;
            var_4 = generateaxisanglesfromforwardvector( var_3, self.angles );
            self orientmode( "_encstr_91440EF5D7AA1B467F70DAB9531A9ED1", var_4 );
        }
        else
        {
            var_5 = self.damagedir;
            var_6 = anglestoforward( self.angles );
            var_7 = vectornormalize( ( var_5[0], var_5[1], 0 ) );
            var_8 = vectornormalize( ( var_6[0], var_6[1], 0 ) );
            var_9 = meleegetattackercardinaldirection( var_8, var_7 );
            var_10 = var_9 * 90;
            var_11 = ( -1 * var_7[0], -1 * var_7[1], 0 );
            var_12 = rotatevector( var_11, ( 0, var_10, 0 ) );
            var_13 = vectortoyaw( var_12 );
            var_14 = anglestoforward( ( 0, var_13, 0 ) );
            self orientmode( "_encstr_A34A0B518A172592D6E64FA115", var_13 );
        }
    }
}

playdeathsound( var_0 )
{
    if ( isdefined( self.diequietly ) && self.diequietly )
        return;

    if ( shouldskipdeathsound() )
        return;

    var_1 = "_encstr_AD75063D571AE108";
    var_2 = undefined;

    if ( isdefined( self.damagemod ) && self.damagemod == "_encstr_8DED0A21C79B660BC7588981" )
        var_1 = "_encstr_AD75063D571AE108";
    else
    {
        if ( isdefined( self.damageweapon ) && !nullweapon( self.damageweapon ) )
            var_2 = getweaponammopoolname( self.damageweapon );

        if ( var_0 )
        {
            if ( isdefined( var_2 ) && var_2 == "_encstr_8DCB085BEF657B4DCF0B" )
                var_1 = "_encstr_83310BDCF5FA3349844FD86863";
            else
                var_1 = "_encstr_840F0BACF038D87B2359C2E81A";
        }
        else
        {
            if ( isdefined( self._blackboard.balconydeathnode ) )
                var_1 = "_encstr_B6DD0A9958C6C691AC584743";

            if ( isdefined( var_2 ) && var_2 == "_encstr_AD360B5ACD7E474DF83389820B" )
                var_1 = "_encstr_84D00BF04583C8D0AA673BE9AB";
        }
    }

    _encstr_B282169B8DE496C13ACDE52C9BB4B6F29958D8595C3B6E1B::saygenericdialogue( var_1 );
}

shouldskipdeathsound()
{
    if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3" ) )
    {
        if ( isdefined( self.damageweapon ) && !nullweapon( self.damageweapon ) )
        {
            if ( self.damageweapon.classname == "_encstr_A1100738A33A638123" )
                return 0;

            if ( self.damageweapon.basename == "_encstr_8DCB085BEF657B4DCF0B" )
                return 0;
        }

        return 1;
    }

    return 0;
}

removeselffrom_squadlastseenenemypos( var_0 )
{
    for ( var_1 = 0; var_1 < anim.squadindex.size; var_1++ )
        anim.squadindex[var_1] clearsightposnear( var_0 );
}

clearsightposnear( var_0 )
{
    if ( !isdefined( self.sightpos ) )
        return;

    if ( distance( var_0, self.sightpos ) < 80 )
    {
        self.sightpos = undefined;
        self.sighttime = gettime();
    }
}

isattackerwithindist( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( distance( self.origin, var_0.origin ) > var_1 )
        return 0;

    return 1;
}

isspecialdeath( var_0, var_1, var_2, var_3 )
{
    if ( scripts\asm\shared\utility::isshocked() )
        return 1;

    return 0;
}

choosespecialdeath( var_0, var_1, var_2 )
{
    if ( scripts\asm\shared\utility::isshocked() )
        return scripts\asm\asm::asm_lookupanimfromalias( var_1, "_encstr_A2490C8F1B1847204FCBB9B9E360" );
    else
        return scripts\asm\asm::asm_lookupanimfromalias( "_encstr_8E1C0EB47DE11BDC7F80E24A887DD40F", "_encstr_8B1608EC43B8D647A113" );
}

shouldgib()
{
    if ( !objective_mlgicon() )
        return 0;

    if ( isdefined( self.nogib ) )
        return 0;

    if ( self.unittype != "_encstr_958C08CDDBD8325A959C" && self.unittype != "_encstr_8BFC0BC2CBD4F737E0A5E1FD79" && self.unittype != "_encstr_83E8094727E333E8F9CE50" )
        return 0;

    if ( isdefined( self.damagemod ) && self.damagemod == "_encstr_8DED0A21C79B660BC7588981" )
        return 0;

    if ( isdefined( self.damagemod ) && isexplosivedamagemod( self.damagemod ) )
    {
        if ( isdefined( self.lastattacker ) && ( scripts\engine\utility::is_equal( self.lastattacker.asmname, "_encstr_8EF60E63FBE3D70440A312175B98CF6B" ) || scripts\engine\utility::is_equal( self.lastattacker.asmname, "_encstr_BE4111D745743093B34A59E0D2735D7001AB59" ) ) )
            return 1;

        if ( isdefined( self.damageweapon ) && scripts\engine\utility::is_equal( self.damageweapon.basename, "_encstr_B6AA0DDCAEB4C64B46B27DD9599B1D" ) )
            return 1;
    }

    return 0;
}

dogibdefault( var_0 )
{
    var_1 = var_0 gettagorigin( "_encstr_8EEC09159F6238030BFA23" );

    if ( isdefined( var_0.damagedir ) && var_0.damagedir != ( 0, 0, 0 ) )
        playfx( level.g_effect["_encstr_8BF513F2D8AB36D38EEC3132E8F1E73DC1180AAA10"], var_1, var_0.damagedir );
    else
        playfx( level.g_effect["_encstr_8BF513F2D8AB36D38EEC3132E8F1E73DC1180AAA10"], var_1, ( 1, 0, 0 ) );

    if ( isagent( var_0 ) )
        var_0 playsound( "_encstr_92B30D6F234A09E94D1C433D9841E8" );
    else
    {
        var_2 = spawn( "_encstr_AD050EE61B93A50E8ED7DB39D29D96B9", var_1 );
        var_2 playsound( "_encstr_92B30D6F234A09E94D1C433D9841E8", "_encstr_95C70A37B8E87540AD27CEA1" );
        var_2 waittill( "_encstr_95C70A37B8E87540AD27CEA1" );
        wait 0.1;
        var_2 delete();
    }
}

dogib()
{
    if ( isdefined( self.gib_override_func ) )
        level thread [[ self.gib_override_func ]]( self );
    else
        level thread dogibdefault( self );
}

shouldplayshieldbashdeath( var_0, var_1, var_2, var_3 )
{
    var_4 = self.damageweapon;

    if ( isdefined( var_4 ) )
    {
        if ( var_4.type == "_encstr_A32D07CFD14BAA94D0" )
            return 1;

        var_5 = var_4.basename;

        if ( var_5 == "_encstr_86281220EB4EE7772AA028D9528ECAE3E34E96BF" || var_5 == "_encstr_8AD8114BDD9BEBC61B86586CB5EBB5CA6356AC" || var_5 == "_encstr_B89713B4BB6EEBC66CDDB793B62B4EFA33A5E647B9" )
            return 1;
    }

    if ( isdefined( self.lastattacker ) && isdefined( self.lastattacker.unittype ) && self.lastattacker.unittype == "_encstr_AF07035938" && isdefined( self.damagemod ) && self.damagemod == "_encstr_8DED0A21C79B660BC7588981" )
        return 1;

    return 0;
}

doshieldbashdeath( var_0, var_1, var_2, var_3 )
{
    stop_sounds();
    _encstr_842518E6D8395A38A3B9BC0B73B4AD5EB9862CE4AC8CE23BDC1B::dropallaiweapons();
    var_4 = vectornormalize( self.origin - level.player.origin + ( 0, 0, 30 ) );
    var_5 = self.damageweapon;
    var_6 = var_5.basename;

    if ( var_6 == "_encstr_8AD8114BDD9BEBC61B86586CB5EBB5CA6356AC" || var_6 == "_encstr_B89713B4BB6EEBC66CDDB793B62B4EFA33A5E647B9" )
        var_4 = vectornormalize( self.origin - level.player.origin + ( 0, 0, 30 ) + anglestoright( level.player.angles ) * 50 );

    self setanimrate( scripts\asm\asm::asm_getroot(), 0 );

    if ( isdefined( self.fnpreragdoll ) )
        self [[ self.fnpreragdoll ]]();

    if ( !isdefined( self ) )
        return;

    self startragdollfromimpact( "_encstr_952B0C65857BBFB80F9FC0B8A75A", var_4 * 2400 );

    if ( isdefined( self.unittype ) && self.unittype == "_encstr_9B07038DB1" )
        self playsound( "_encstr_B1191253F1687F9B1DDE7A12616DC3B960E5C799" );

    level.player playrumblelooponentity( "_encstr_B4BE0D8C58DAB09DCA7D342BB03BCB" );
    earthquake( 0.5, 1, level.player.origin, 100 );
    level.player scripts\engine\utility::delaycall( 0.25, ::stoprumble, "_encstr_B4BE0D8C58DAB09DCA7D342BB03BCB" );
    wait 1;
    deathcleanup();
}

getpainbodypartdeath()
{
    if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_9ABA05E87F4B70" ) )
    {
        var_0 = "_encstr_81CC0586952C91";
        return var_0;
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8D9A10260457F8118F7ED3639F75A0BB9BDB", "_encstr_970110C3DBB4827401D972BD36B0A7CB1D45", "_encstr_A1BD0B9C96D9D0A3F51A169B19" ) )
    {
        var_0 = "_encstr_8B9B085B961998DB19F2";
        return var_0;
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_A9C30F63CA998ED716E4D67D5D1C0ECAE4", "_encstr_8B970F1B56991DD758E4D6EB63ED77B239", "_encstr_BDB30AC6CA66A3FAA158CD23" ) )
    {
        var_0 = "_encstr_8B9B085B961998DB19F2";
        return var_0;
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_BDF80F4495E9F3C9C1387AF15011FA4F83", "_encstr_BACF0FC17D8FB0A0BB52111E2A5F6CE022", "_encstr_95E80A8D59CCD1F533DBED3A" ) )
    {
        var_0 = "_encstr_95CC0C8DF6DD594E98F63297AF1B";
        return var_0;
    }
    else if ( scripts\engine\utility::damagelocationisany( "_encstr_8B1D10834BA13813E7693FB7D86B8BE80920", "_encstr_A91A1025A967F88DCF6A0971613BC8C83F2A", "_encstr_8ECF0B734B47E3AB67AD07909B" ) )
    {
        var_0 = "_encstr_96CC0CB17BBB599389BD46BCF5E4";
        return var_0;
    }
    else
    {
        var_0 = "_encstr_8B9B085B961998DB19F2";
        return var_0;
    }
}

getpainbodypartcrouchdeath()
{
    if ( scripts\engine\utility::damagelocationisany( "_encstr_81CC0586952C91", "_encstr_A6CC076A05751852B3", "_encstr_9ABA05E87F4B70" ) )
    {
        var_0 = "_encstr_81CC0586952C91";
        return var_0;
    }
    else
    {
        var_0 = "_encstr_8B9B085B961998DB19F2";
        return var_0;
    }
}

choosedirectionaldeathanim( var_0, var_1, var_2 )
{
    var_3 = scripts\asm\soldier\pain::getpainweaponsize();

    if ( isdefined( self.asm.painloc ) && isdefined( self.asm.painsize ) && isdefined( self.currentpose ) && self.asm.painloc == "_encstr_AFD50A3C308FCD6BD2187B33" && self.asm.painsize == "_encstr_A51A04DF02E4" && self.currentpose == "_encstr_922406F1A6FD5E05" )
    {
        var_4 = "_encstr_AFD50A3C308FCD6BD2187B33";
        var_3 = "_encstr_A51A04DF02E4";
    }
    else
    {
        var_4 = getpainbodypartdeath();
        var_3 = scripts\asm\soldier\pain::getpainweaponsize();
    }

    var_5 = anglestoforward( self.angles );
    var_6 = vectornormalize( ( self.damagedir[0], self.damagedir[1], 0 ) );
    var_7 = vectornormalize( ( var_5[0], var_5[1], 0 ) );
    var_8 = meleegetattackercardinaldirection( var_7, var_6 );
    var_9 = undefined;

    if ( var_8 == 2 )
        var_9 = "_encstr_8B0703EBE0";
    else if ( var_8 == 3 )
        var_9 = "_encstr_A50703AFD8";
    else if ( var_8 == 1 )
        var_9 = "_encstr_AF0703DE3B";
    else
        var_9 = "_encstr_8C0703271D";

    if ( shouldfireintoairdeath( var_1, var_4 ) )
        var_10 = "_encstr_B4100E564A0DCA11E4BAAB58D9A6A36A";
    else
        var_10 = var_4 + var_3 + var_9;

    return scripts\asm\asm::asm_lookupanimfromalias( var_1, var_10 );
}

choosedirectionalcrouchdeathanim( var_0, var_1, var_2 )
{
    var_3 = getpainbodypartcrouchdeath();
    var_4 = scripts\asm\soldier\pain::getpainweaponsize();
    var_5 = anglestoforward( self.angles );
    var_6 = vectornormalize( ( self.damagedir[0], self.damagedir[1], 0 ) );
    var_7 = vectornormalize( ( var_5[0], var_5[1], 0 ) );
    var_8 = meleegetattackercardinaldirection( var_7, var_6 );
    var_9 = undefined;

    if ( var_8 == 2 )
        var_9 = "_encstr_8B0703EBE0";
    else if ( var_8 == 3 )
        var_9 = "_encstr_A50703AFD8";
    else if ( var_8 == 1 )
        var_9 = "_encstr_AF0703DE3B";
    else
        var_9 = "_encstr_8C0703271D";

    if ( shouldfireintoairdeath( var_1, var_3 ) )
        var_10 = "_encstr_B4100E564A0DCA11E4BAAB58D9A6A36A";
    else
        var_10 = var_3 + var_4 + var_9;

    return scripts\asm\asm::asm_lookupanimfromalias( var_1, var_10 );
}

shouldfireintoairdeath( var_0, var_1 )
{
    if ( scripts\common\utility::iscp() )
        return 0;

    var_2 = weaponclass( self.weapon );
    var_3 = istrue( self.diequietly ) || var_2 == "_encstr_BA080F126090E3D245A1F7BFBDE6CA25A0" || var_2 == "_encstr_A1100738A33A638123" || var_2 == "_encstr_8D940738966ED1DB8D";

    if ( !scripts\asm\asm::asm_hasalias( var_0, "_encstr_B4100E564A0DCA11E4BAAB58D9A6A36A" ) )
        return 0;

    if ( !self._blackboard.bfire )
        return 0;

    if ( var_3 )
        return 0;

    if ( var_1 == "_encstr_AFD50A3C308FCD6BD2187B33" )
        return 0;

    if ( var_1 == "_encstr_81CC0586952C91" )
        var_4 = 0.3;
    else
        var_4 = 0.15;

    return randomfloat( 1 ) < var_4;
}

choosedirectionallargepaindeathanim( var_0, var_1, var_2 )
{
    var_3 = "_encstr_AFD50A3C308FCD6BD2187B33";
    var_4 = "_encstr_A51A04DF02E4";
    var_5 = anglestoforward( self.angles );
    var_6 = vectornormalize( ( self.damagedir[0], self.damagedir[1], 0 ) );
    var_7 = vectornormalize( ( var_5[0], var_5[1], 0 ) );
    var_8 = meleegetattackercardinaldirection( var_7, var_6 );
    var_9 = undefined;

    if ( var_8 == 2 )
        var_9 = "_encstr_8B0703EBE0";
    else if ( var_8 == 3 )
        var_9 = "_encstr_A50703AFD8";
    else if ( var_8 == 1 )
        var_9 = "_encstr_AF0703DE3B";
    else
        var_9 = "_encstr_8C0703271D";

    var_10 = var_3 + var_4 + var_9;
    return scripts\asm\asm::asm_lookupanimfromalias( var_1, var_10 );
}
