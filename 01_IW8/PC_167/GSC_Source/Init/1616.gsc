// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

throwgrenade_init( var_0 )
{
    scripts\asm\asm_bb::bb_requestthrowgrenade( 1, self.enemy );
    self.bt.instancedata[var_0] = spawnstruct();
    self.bt.instancedata[var_0].timeout = gettime() + 4000;
}

throwgrenade_terminate( var_0 )
{
    scripts\asm\asm_bb::bb_requestthrowgrenade( 0 );
    self.bt.instancedata[var_0] = undefined;
}

throwgrenade_update( var_0 )
{
    var_1 = scripts\asm\asm_bb::bb_getthrowgrenadetarget();

    if ( !isdefined( var_1 ) )
        return anim.failure;

    if ( scripts\asm\asm::asm_ephemeraleventfired( "_encstr_A5AA0DEBA0960F6B8025ADBE1BC0B7", "_encstr_99AD06D3A5B1538B", 0 ) )
    {
        self.bt.instancedata[var_0].started = 1;
        self.bt.instancedata[var_0].timeout = self.bt.instancedata[var_0].timeout + 10000;
    }

    if ( scripts\asm\asm::asm_ephemeraleventfired( "_encstr_A5AA0DEBA0960F6B8025ADBE1BC0B7", "_encstr_961804BD954A" ) )
        return anim.success;

    if ( gettime() > self.bt.instancedata[var_0].timeout )
        return anim.failure;

    if ( !istrue( self.bt.instancedata[var_0].started ) )
    {
        var_2 = scripts\engine\utility::getyawtospot( var_1.origin );

        if ( abs( var_2 ) > 90 )
            return anim.failure;
    }

    return anim.running;
}

hasgrenadetimerelapsed( var_0 )
{
    if ( mygrenadecooldownelapsed() && ( gettime() >= 10000 || isdefined( level.ignoregrenadesafetime ) && level.ignoregrenadesafetime ) )
    {
        self.a.nextgrenadetrytime = gettime() + 500;
        return anim.success;
    }

    return anim.failure;
}

canthrowgrenade( var_0 )
{
    if ( isdefined( self.pathgoalpos ) || self.arriving )
        return anim.failure;

    if ( nullweapon( self.grenadeweapon ) )
        return anim.failure;

    if ( isdefined( self.enemy ) && isdefined( self.enemy.dontgrenademe ) && self.enemy.dontgrenademe )
        return anim.failure;

    if ( istrue( self.dontevershoot ) )
        return anim.failure;

    if ( scripts\engine\utility::actor_is3d() )
        return anim.failure;

    if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::usingmg() )
        return anim.failure;

    if ( isdefined( anim.throwgrenadeatplayerasap ) && isalive( level.player ) )
    {
        if ( grenadethrowvaliditycheck( level.player, 200 ) )
            return anim.success;
    }

    if ( isdefined( self.enemy ) && grenadethrowvaliditycheck( self.enemy, self.minexposedgrenadedist ) )
        return anim.success;

    return anim.failure;
}

grenadepossafewrapper( var_0, var_1 )
{
    if ( isdefined( self.grenadesafedist ) && !self isgrenadepossafe( var_0, var_1, self.grenadesafedist ) )
        return 0;
    else if ( !self isgrenadepossafe( var_0, var_1 ) )
        return 0;

    return 1;
}

grenadethrowvaliditycheck( var_0, var_1 )
{
    var_2 = var_0.origin;

    if ( !self cansee( var_0 ) )
    {
        if ( isdefined( self.enemy ) && var_0 == self.enemy && isdefined( self.shootpos ) )
            var_2 = self.shootpos;

        var_1 = 100;
    }
    else if ( !isdefined( var_1 ) )
        var_1 = 100;

    if ( distancesquared( self.origin, var_2 ) < var_1 * var_1 )
        return 0;

    setactivegrenadetimer( var_0 );

    if ( !grenadecooldownelapsed( var_0 ) )
        return 0;

    var_3 = scripts\engine\utility::getyawtospot( var_2 );

    if ( abs( var_3 ) > 60 )
        return 0;

    if ( self.weapon.basename == "_encstr_8FA2056B2FF7AE" || self.grenadeammo <= 0 )
        return 0;

    if ( isdefined( self.enemy ) && var_0 == self.enemy )
    {
        if ( !checkgrenadethrowdist() )
            return 0;

        if ( !grenadepossafewrapper( var_0, var_0.origin ) )
            return 0;

        if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::canseeenemyfromexposed() )
            return 1;

        if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::cansuppressenemyfromexposed() )
            return 1;
    }

    return 1;
}

mygrenadecooldownelapsed()
{
    return gettime() >= self.a.nextgrenadetrytime;
}

checkgrenadethrowdist()
{
    var_0 = self.enemy.origin - self.origin;
    var_1 = lengthsquared( ( var_0[0], var_0[1], 0 ) );

    if ( self.grenadeweapon.basename == "_encstr_A7D70E338D169B1ABED9E4B29BB01995" )
        return var_1 < 589824;

    return var_1 >= 40000 && var_1 <= 1562500;
}

grenadecooldownelapsed( var_0 )
{
    if ( isdefined( self.fngrenadecooldownelapsedoverride ) )
        return [[ self.fngrenadecooldownelapsedoverride ]]( var_0 );

    if ( scripts\engine\utility::player_died_recently() )
        return 0;

    if ( isdefined( self.script_forcegrenade ) && self.script_forcegrenade == 1 )
        return 1;

    if ( gettime() >= getgrenadetimertime( self.activegrenadetimer ) )
        return 1;

    if ( self.activegrenadetimer.isplayertimer && self.activegrenadetimer.timername == "_encstr_95810C99C9C2ECCEC9B2DCC246CA" )
        return maythrowdoublegrenade( var_0 );

    return 0;
}

setactivegrenadetimer( var_0 )
{
    self.activegrenadetimer = spawnstruct();

    if ( isplayer( var_0 ) && isdefined( var_0.grenadetimers ) )
    {
        self.activegrenadetimer.isplayertimer = 1;
        self.activegrenadetimer.player = var_0;
        self.activegrenadetimer.timername = self.grenadeweapon.basename;
    }
    else
    {
        self.activegrenadetimer.isplayertimer = 0;
        self.activegrenadetimer.timername = "_encstr_85190481CBA0" + self.grenadeweapon.basename;
    }
}

maythrowdoublegrenade( var_0 )
{
    if ( scripts\engine\utility::player_died_recently() )
        return 0;

    if ( !var_0.gs.double_grenades_allowed )
        return 0;

    var_1 = gettime();

    if ( var_1 < var_0.grenadetimers["_encstr_A2BE0F32DEBA318D59D7D94EB2E6858CB2"] )
        return 0;

    if ( var_1 > var_0.lastfraggrenadetoplayerstart + 3000 )
        return 0;

    if ( var_1 < var_0.lastfraggrenadetoplayerstart + 500 )
        return 0;

    return var_0.numgrenadesinprogresstowardsplayer < 2;
}

getgrenadetimertime( var_0 )
{
    if ( var_0.isplayertimer )
        return var_0.player.grenadetimers[var_0.timername];
    else
        return anim.grenadetimers[var_0.timername];
}
