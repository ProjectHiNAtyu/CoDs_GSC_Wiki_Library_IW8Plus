// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

registernotetracks()
{
    anim.notetracks["_encstr_ABD2172870F82DCFC81F4B7F8567E08569F2684E37097753F2"] = ::notetrackmovementstop;
    anim.notetracks["_encstr_8C6917E922670941EDDF456BF5D7F04DEA8F49795B9F31A856"] = ::notetrackmovementwalk;
    anim.notetracks["_encstr_B16416B3CBE2C181ED5D4339C5CDC085CE2EA9BDC34B1852"] = ::notetrackmovementrun;
    anim.notetracks["_encstr_BAF01585CD5A5BD7B6DECE56D6ACCD8E04D310B98EDB0E"] = ::notetrackmovementstop;
    anim.notetracks["_encstr_A9D115B0E62DB5BEDADB3B2BD6CACD47017A10EE2C63B6"] = ::notetrackmovementwalk;
    anim.notetracks["_encstr_8A7114B0DC96DA7DDAEDB32B6B599BE804A7409357E6"] = ::notetrackmovementrun;
    anim.notetracks["_encstr_99622F8F78207DE1C3A8BB77818BAA2C8E48572B59BBA7EB3BA8C5ABFD8DA3C931F07AEE3A13F542775C4BA5C8594A9FD8"] = ::notetrackmovementgunposeoverride;
    anim.notetracks["_encstr_BA4F1CDEB05B5ACFF9E07B3F20B3A7E32BFFB106AEEF233D23792B27F86B"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_8BE91D136B426121833D2359627868A67ABA3319E78AB488CA19ABD0CF58E8"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_BDC81EDFF5FAB38E03E7E0608B48C0C7420E69F70E325D31FA0F40D097659909"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_A3D51D0BDC4BB6D76CBD9DB2C9C17BB9AC019E04D8DEB32B9CFAB9D1859B32"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_A32223EF463422692BA8E54B0B43D2D7433E0A478F67A5FF9667B1971658D8CBE2FD30D628"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_AA6D24DB5B1088261E289EDD93EFCABF694ADFFE197FB3FAAAF7DB7F1A63B8B68FDBC2CFE93C"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_B46B195A90D0B3DF193085FADBA177E0B531DAFE1D5AA9A797576B"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_864A204BE6DCE8D0F782A3C97B93F0A077206B4195C048B76FDAF9B672E3B8580ED0"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_86E61727D088C55977B7239FF6391283510AEEAAB8030F9243"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_B68C1058E64BDAF5C296B6A5E6EC80E90289"] = ::notetrackalertnessaiming;
    anim.notetracks["_encstr_A68C10C29BB4ADBE2CD2AD5A739D049E1003"] = ::notetrackalertnessalert;
    anim.notetracks["_encstr_915D1818F24CC3F6A7449D0E34F3F987B27E629A9AE63B8B7F7C"] = ::notetrackalertnesscasual;
    anim.notetracks["_encstr_929517E9A8AB7B68984C210DB0A029A09EC1A11E69F8534258"] = ::notetrackalertnessalert;
    anim.notetracks["_encstr_81EE1885E6A56B7D581B9527479BACE66E047A4085B4B6A57376"] = ::notetrackalertnessaiming;
    anim.notetracks["_encstr_B8EF0B0708B1D6324113BE65F0"] = ::notetrackgravity;
    anim.notetracks["_encstr_8D550C3A3A2753F239FA4F0FE4FD"] = ::notetrackgravity;
    anim.notetracks["_encstr_A3BF0F61F554F8042AF39111EB725640ED"] = ::notetrackbodyfall;
    anim.notetracks["_encstr_9A650FC698982FCD2302B869F3A3417558"] = ::notetrackbodyfall;
    anim.notetracks["_encstr_B6B30A278FC7F078673A0B11"] = ::notetrackcodemove;
    anim.notetracks["_encstr_8B4F0B66C23656BEB2E656DABC"] = ::notetrackfaceenemy;
    anim.notetracks["_encstr_8DC71161E9A2D8C0C3992BF162EB8F58BE7DED"] = ::notetrackpistolrechamber;
    anim.notetracks["_encstr_9A6F0BFC38A11B51673822AA63"] = ::notetrackloadshell;
    anim.notetracks["_encstr_88780599B4E495"] = ::notetrackfire;
    anim.notetracks["_encstr_9ACB0BA52026FDD7A3504B6941"] = ::notetrackfirespray;
    anim.notetracks["_encstr_BE650C37B3D8589AC17A9CCF6AB0"] = ::notetrackguntochest;
    anim.notetracks["_encstr_A54F0B51EB03182279CA635FFB"] = ::notetrackguntoback;
    anim.notetracks["_encstr_925C0C4298EDF9E2CE2671773373"] = ::notetrackguntoright;
    anim.notetracks["_encstr_8AD50EA2E4B37BA8F998E3A8BE5F3D41"] = ::notetrackpistolpickup;
    anim.notetracks["_encstr_92830FB873AB13656149ABF338535BFF42"] = ::notetrackpistolputaway;
    anim.notetracks["_encstr_86CB0C838374D22C5831F63D3090"] = ::notetrackrefillclip;
    anim.notetracks["_encstr_834A0C9CACD87BC22308327B9BAC"] = ::notetrackrefillclip;
    anim.notetracks["_encstr_87C9066B216832AE"] = ::notetrackhton0;
    anim.notetracks["_encstr_A20C089BD198C25ED123"] = ::notetrackhton0;
    anim.notetracks["_encstr_950C088961897F38C7EE"] = ::notetrackhton1;
    anim.notetracks["_encstr_969B07C053DF90B512"] = ::notetrackhtoff;

    if ( isdefined( level._notetrackfx ) )
    {
        var_0 = getarraykeys( level._notetrackfx );

        foreach ( var_2 in var_0 )
            anim.notetracks[var_2] = ::customnotetrackfx;
    }
}

notetrackstopanim( var_0, var_1 )
{

}

notetrackcoverposerequest( var_0, var_1 )
{
    var_2 = strtok( var_0, "_encstr_B21704107A02" )[1];

    switch ( var_2 )
    {
        case "_encstr_87970BBFC71BCD10D7953951BB":
        case "_encstr_96BC0CA9321B0D2861C34163F697":
        case "_encstr_8DE30D6CF69D2B937DB1277BAE8DD0":
        case "_encstr_93460F52DBA34A1AF0CFD1FE3A32CB2E6B":
        case "_encstr_8D54137A7DAC62436F9BEB1FE3D9D8FABE1D4F1868":
        case "_encstr_B80812568FA0206889F5F522A877E78367638B1C":
        case "_encstr_91280CE8026B33B37F7ABBA448FB":
        case "_encstr_8E2508591EE07BE6B246":
        case "_encstr_922406F1A6FD5E05":
            self.a.coverpose_request = var_2;
            break;
        default:
    }
}

notetrackmovementstop( var_0, var_1 )
{
    self.a.movement = "_encstr_B419059BD17BE0";
}

notetrackmovementwalk( var_0, var_1 )
{
    self.a.movement = "_encstr_99F605EE16B1DA";
}

notetrackmovementrun( var_0, var_1 )
{
    self.a.movement = "_encstr_B4190493D573";
}

notetrackmovementgunposeoverride( var_0, var_1 )
{
    self.asm.movementgunposeoverride = "_encstr_B4B80DA86BA5FFA99F3EF86D07AFB0";
}

notetrackalertnessaiming( var_0, var_1 )
{

}

notetrackalertnesscasual( var_0, var_1 )
{

}

notetrackalertnessalert( var_0, var_1 )
{

}

notetrackloadshell( var_0, var_1 )
{

}

notetrackpistolrechamber( var_0, var_1 )
{

}

notetrackgravity( var_0, var_1 )
{
    if ( issubstr( var_0, "_encstr_AB0703DBB9" ) )
        self animmode( "_encstr_8AD6086722F1FB98F58B" );
    else if ( issubstr( var_0, "_encstr_BA19049F4B2D" ) )
        self animmode( "_encstr_8B970A9BF6D99C589DD2472F" );
}

customnotetrackfx( var_0, var_1 )
{
    if ( isdefined( self.groundtype ) )
        var_2 = self.groundtype;
    else
        var_2 = "_encstr_96670551849240";

    var_3 = undefined;

    if ( isdefined( level._notetrackfx[var_0][var_2] ) )
        var_3 = level._notetrackfx[var_0][var_2];
    else if ( isdefined( level._notetrackfx[var_0]["_encstr_AF1904A7F929"] ) )
        var_3 = level._notetrackfx[var_0]["_encstr_AF1904A7F929"];

    if ( !isdefined( var_3 ) )
        return;

    if ( isai( self ) && isdefined( var_3.fx ) )
        playfxontag( var_3.fx, self, var_3.tag );

    if ( !isdefined( var_3.sound_prefix ) && !isdefined( var_3.sound_suffix ) )
        return;

    var_4 = "_encstr_B40101" + var_3.sound_prefix + var_2 + var_3.sound_suffix;

    if ( soundexists( var_4 ) )
        self playsound( var_4 );
}

notetrackcodemove( var_0, var_1 )
{
    return "_encstr_B6B30A278FC7F078673A0B11";
}

notetrackfaceenemy( var_0, var_1 )
{
    self orientmode( "_encstr_B43B0B33C2B1AC0895B92BAD5E" );
}

notetrackbodyfall( var_0, var_1 )
{
    var_2 = "_encstr_853507A99F3D619182";

    if ( issubstr( var_0, "_encstr_8DEC06B1E943615B" ) )
        var_2 = "_encstr_9A9207D18808728A45";

    if ( isdefined( self.groundtype ) )
        var_3 = self.groundtype;
    else
        var_3 = "_encstr_96670551849240";

    if ( var_2 == "_encstr_9A9207D18808728A45" )
        self playsurfacesound( "_encstr_BE570F26DEC8E53316B1B1EB8EB72737BD", var_3 );
    else
        self playsurfacesound( "_encstr_B1A214137B8C9733851B1BBE634BB6897DB9D658C61B", var_3 );
}

donotetracks( var_0, var_1, var_2 )
{
    for (;;)
    {
        self waittill( var_0, var_3 );

        if ( !isdefined( var_3 ) )
            var_3 = [ "_encstr_8C500ABA9B23CACC2D37AC8C" ];

        if ( !isarray( var_3 ) )
            var_3 = [ var_3 ];

        scripts\common\notetrack::validatenotetracks( var_0, var_3 );

        foreach ( var_5 in var_3 )
        {
            var_6 = handlenotetrack( var_5, var_0, var_1 );

            if ( isdefined( var_6 ) )
                return var_6;
        }
    }
}

handlenotetrack( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.fnasm_handlenotetrack ) )
        [[ self.fnasm_handlenotetrack ]]( var_0, var_1, var_2, var_3 );
    else if ( isdefined( level._defaultnotetrackhandler ) )
        [[ level._defaultnotetrackhandler ]]( var_0, var_1, var_2, var_3 );
    else
    {

    }
}

hascustomnotetrackhandler( var_0 )
{
    var_1 = anim.notetracks[var_0];

    if ( isdefined( var_1 ) )
        return 1;

    if ( isdefined( self.customnotetrackhandler ) )
        return 1;

    return 0;
}

handlecustomnotetrackhandler( var_0, var_1, var_2, var_3 )
{
    var_4 = anim.notetracks[var_0];

    if ( isdefined( var_4 ) )
        return [[ var_4 ]]( var_0, var_1 );
    else if ( isdefined( self.customnotetrackhandler ) )
    {
        if ( isdefined( var_3 ) )
            return [[ self.customnotetrackhandler ]]( var_0, var_1, var_2, var_3 );
        else
            return [[ self.customnotetrackhandler ]]( var_0, var_1, var_2 );
    }
}

handlecommonnotetrack( var_0, var_1, var_2, var_3 )
{
    switch ( var_0 )
    {
        case "_encstr_8C500ABA9B23CACC2D37AC8C":
        case "_encstr_B4BA07CC5ADCB4CDD0":
        case "_encstr_961804BD954A":
            return var_0;
        case "_encstr_8CF40DA83FF6B8770A8ECDC7F2A2AB":
            if ( isdefined( self.enemy ) )
                return var_0;

            break;
        case "_encstr_9AC00C9B77D2CD434037B50B8DC6":
            thread scripts\engine\utility::play_sound_in_space( "_encstr_9A511268A7211F9AC1C3CF8F35B7F97BDD7B5AC8", self gettagorigin( "_encstr_91AC11B5CEE8277FD58F01014B3717C330240D" ) );
            break;
        case "_encstr_A95B0CDCBB2D6ED00263589C7695":
            thread scripts\engine\utility::play_sound_in_space( "_encstr_BAFB12DA2BC656567DB9BB5AE6CE7DB10BC9B3AC", self gettagorigin( "_encstr_91AC11B5CEE8277FD58F01014B3717C330240D" ) );
            break;
        case "_encstr_8A7F09B0F02E8187519598":
            self.a.nodeath = 1;
            break;
        case "_encstr_8B2D0838BA46B179FF0E":
            self.allowpain = 0;
            break;
        case "_encstr_AD8F0BA94A306DC78F8BFA70A5":
            self.allowpain = 1;
            break;
        case "_encstr_820915805DB439B6C98BD9D30B724397E6FAA102CB7CA2":
        case "_encstr_932113AF858AC3FE7D9F60D067C87A91E3EC14A39B":
            self.a.meleestate = "_encstr_8253060E2B5FE330";
            break;
        case "_encstr_B1901458B9A5D6D7B595D8595902F480883656991D88":
        case "_encstr_91141285CD2DD6BEB595B1955904A70236596647":
            self.a.meleestate = "_encstr_A5AD056A019C63";
            break;
        case "_encstr_ACE21A6BBFFBAF69B9F134B88F5C8BDD3BA6B5100F23A830481DE083":
            if ( isdefined( self.hatmodel ) )
            {
                if ( isdefined( self.helmetsidemodel ) )
                {
                    self detach( self.helmetsidemodel, "_encstr_A5090F2A0574D70954986AA88AD429222A" );
                    self.helmetsidemodel = undefined;
                }

                self detach( self.hatmodel, "_encstr_B40101" );
                self attach( self.hatmodel, "_encstr_A98C10F13178694B8747B838C190EC95ADB3" );
                self.hatmodel = undefined;
            }

            break;
        case "_encstr_B8050CBE1EE33A5B313BF3CFC833":
            level notify( "_encstr_8C6E0CD79071DF276E7B363D2328", self );
            break;
        case "_encstr_B2050C88D23B3F6341BF1C88E377":
            level notify( "_encstr_8C6E0CD79071DF276E7B363D2328", self );
            break;
        case "_encstr_A6700CDE7B7285D307C3D808A344":
            if ( !self.fixednode )
                self animmode( "_encstr_8BF30E733083B2CF09E607347E10AB3B" );

            break;
        default:
            return "_encstr_88840CFAF55DDC0D2CB98CC65623";
    }
}

donotetracksintercept( var_0, var_1, var_2 )
{
    for (;;)
    {
        self waittill( var_0, var_3 );

        if ( !isdefined( var_3 ) )
            var_3 = [ "_encstr_8C500ABA9B23CACC2D37AC8C" ];

        if ( !isarray( var_3 ) )
            var_3 = [ var_3 ];

        scripts\common\notetrack::validatenotetracks( var_0, var_3 );
        var_4 = [[ var_1 ]]( var_3 );

        if ( isdefined( var_4 ) && var_4 )
            continue;

        var_5 = undefined;

        foreach ( var_7 in var_3 )
        {
            var_8 = handlenotetrack( var_7, var_0 );

            if ( isdefined( var_8 ) )
            {
                var_5 = var_8;
                break;
            }
        }

        if ( isdefined( var_5 ) )
            return var_5;
    }
}

donotetrackspostcallback( var_0, var_1 )
{
    for (;;)
    {
        self waittill( var_0, var_2 );

        if ( !isdefined( var_2 ) )
            var_2 = [ "_encstr_8C500ABA9B23CACC2D37AC8C" ];

        if ( !isarray( var_2 ) )
            var_2 = [ var_2 ];

        scripts\common\notetrack::validatenotetracks( var_0, var_2 );
        var_3 = undefined;

        foreach ( var_5 in var_2 )
        {
            var_6 = handlenotetrack( var_5, var_0 );

            if ( isdefined( var_6 ) )
            {
                var_3 = var_6;
                break;
            }
        }

        [[ var_1 ]]( var_2 );

        if ( isdefined( var_3 ) )
            return var_3;
    }
}

donotetracksfortimeout( var_0, var_1, var_2, var_3 )
{
    donotetracks( var_0, var_2, var_3 );
}

donotetracksforever( var_0, var_1, var_2, var_3 )
{
    donotetracksforeverproc( ::donotetracks, var_0, var_1, var_2, var_3 );
}

donotetracksforeverintercept( var_0, var_1, var_2, var_3 )
{
    donotetracksforeverproc( ::donotetracksintercept, var_0, var_1, var_2, var_3 );
}

donotetracksforeverproc( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_2 ) )
        self endon( var_2 );

    self endon( "_encstr_85140F22139204D9DDF8E3DF36CDE82275" );

    if ( !isdefined( var_4 ) )
        var_4 = "_encstr_8C500ABA9B23CACC2D37AC8C";

    for (;;)
    {
        var_5 = gettime();
        var_6 = [[ var_0 ]]( var_1, var_3, var_4 );
        var_7 = gettime() - var_5;

        if ( var_7 < 0.05 )
        {
            var_5 = gettime();
            var_6 = [[ var_0 ]]( var_1, var_3, var_4 );
            var_7 = gettime() - var_5;

            if ( var_7 < 0.05 )
                wait( 0.05 - var_7 );
        }
    }
}

donotetrackswithtimeout( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4 thread donotetracksfortimeendnotify( var_1 );
    donotetracksfortimeproc( ::donotetracksfortimeout, var_0, var_2, var_3, var_4 );
}

donotetracksfortime( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4 thread donotetracksfortimeendnotify( var_0 );
    donotetracksfortimeproc( ::donotetracksforever, var_1, var_2, var_3, var_4 );
}

donotetracksfortimeintercept( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4 thread donotetracksfortimeendnotify( var_0 );
    donotetracksfortimeproc( ::donotetracksforeverintercept, var_1, var_2, var_3, var_4 );
}

donotetracksfortimeproc( var_0, var_1, var_2, var_3, var_4 )
{
    var_4 endon( "_encstr_91C41068B32D1916BB6735A554E31987946B" );
    [[ var_0 ]]( var_1, undefined, var_2, var_3 );
}

donotetracksfortimeendnotify( var_0 )
{
    wait( var_0 );
    self notify( "_encstr_91C41068B32D1916BB6735A554E31987946B" );
}

notetrack_prefix_handler( var_0 )
{
    return [[ level.fnnotetrackprefixhandler ]]( var_0 );
}

notetrack_prefix_handler_common( var_0 )
{
    return 0;
}

shootnotetrack()
{
    waittillframeend;

    if ( isdefined( self ) && gettime() > self.a.lastshoottime )
    {
        if ( istrue( self._blackboard.shootparams_valid ) )
            var_0 = self._blackboard.shootparams_shotsperburst == 1;
        else
            var_0 = 1;

        _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::shootenemywrapper( var_0 );
        scripts\asm\shared\utility::decrementbulletsinclip();

        if ( weaponclass( self.weapon ) == "_encstr_BA080F126090E3D245A1F7BFBDE6CA25A0" )
            self.rocketammo--;
    }
}

notetrackfire( var_0, var_1 )
{
    if ( isdefined( self.script ) && isdefined( anim.fire_notetrack_functions[self.script] ) )
        thread [[ anim.fire_notetrack_functions[self.script] ]]();
    else
        thread shootnotetrack();
}

notetrackfirespray( var_0, var_1 )
{
    if ( !isalive( self ) && self isbadguy() )
    {
        if ( isdefined( self.changed_team ) )
            return;

        self.changed_team = 1;
        var_2["_encstr_8E8405EA382B2A"] = "_encstr_B848067B63177293";
        var_2["_encstr_B848067B63177293"] = "_encstr_8E8405EA382B2A";
        self.team = var_2[self.team];
    }

    if ( !issentient( self ) )
    {
        self notify( "_encstr_88780599B4E495" );
        return;
    }

    if ( getqueuedspleveltransients( self.a.weaponpos["_encstr_8253060E2B5FE330"] ) )
        return;

    var_3 = self getmuzzlepos();
    var_4 = anglestoforward( self getmuzzleangle() );
    var_5 = 10;

    if ( isdefined( self.isrambo ) )
        var_5 = 20;

    var_6 = 0;

    if ( isalive( self.enemy ) && issentient( self.enemy ) && self canshootenemy() )
    {
        var_7 = vectornormalize( self.enemy geteye() - var_3 );

        if ( vectordot( var_4, var_7 ) > cos( var_5 ) )
            var_6 = 1;
    }

    if ( var_6 )
        _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::shootenemywrapper();
    else
    {
        var_4 = var_4 + ( ( randomfloat( 2 ) - 1 ) * 0.1, ( randomfloat( 2 ) - 1 ) * 0.1, ( randomfloat( 2 ) - 1 ) * 0.1 );
        var_8 = var_3 + var_4 * 1000;
        self [[ anim.shootposwrapper_func ]]( var_8 );
    }

    scripts\asm\shared\utility::decrementbulletsinclip();
}

notetrackrefillclip( var_0, var_1 )
{
    _encstr_8B451CFBA1F677CA7807C791254855A69C99525388403BC42821CE9FF730::refillclip();
    self.a.needstorechamber = 0;
}

getpreferredweapon()
{
    if ( isdefined( self.wantshotgun ) && self.wantshotgun )
    {
        if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::isshotgun( self.primaryweapon ) )
            return self.primaryweapon;
        else if ( _encstr_96322092C72534F043F78E4F98BFBD5F5398875269C3CB893292B5F278682D370F83::isshotgun( self.secondaryweapon ) )
            return self.secondaryweapon;
    }

    return self.primaryweapon;
}

notetrackguntochest( var_0, var_1 )
{
    if ( isdefined( self.fnplaceweaponon ) )
        self [[ self.fnplaceweaponon ]]( self.weapon, "_encstr_9A7606B11A95DCD1" );
}

notetrackguntoback( var_0, var_1 )
{
    if ( isdefined( self.fnplaceweaponon ) )
        self [[ self.fnplaceweaponon ]]( self.weapon, "_encstr_B69B0589C236B6" );

    self.weapon = getpreferredweapon();
    self.bulletsinclip = weaponclipsize( self.weapon );
}

notetrackpistolpickup( var_0, var_1 )
{
    if ( isdefined( self.fnplaceweaponon ) )
        self [[ self.fnplaceweaponon ]]( self.sidearm, "_encstr_8253060E2B5FE330" );

    self.bulletsinclip = weaponclipsize( self.weapon );
    self notify( "_encstr_8C25132BF1EFA3BD18CF0BF75B30460B1849220259" );
}

notetrackpistolputaway( var_0, var_1 )
{
    if ( isdefined( self.fnplaceweaponon ) )
    {
        if ( isdefined( self.stowsidearmposition ) )
            self [[ self.fnplaceweaponon ]]( self.weapon, self.stowsidearmposition );
        else
            self [[ self.fnplaceweaponon ]]( self.weapon, "_encstr_8BBA05185F8B99" );
    }

    self.weapon = getpreferredweapon();
    self.bulletsinclip = weaponclipsize( self.weapon );
}

notetrackguntoright( var_0, var_1 )
{
    if ( isdefined( self.fnplaceweaponon ) )
        self [[ self.fnplaceweaponon ]]( self.weapon, "_encstr_8253060E2B5FE330" );

    self.bulletsinclip = weaponclipsize( self.weapon );
}

notetrackhton0( var_0, var_1 )
{
    if ( !self isinscriptedstate() )
        self enablestatelookat( 1, 0 );
}

notetrackhton1( var_0, var_1 )
{
    if ( !self isinscriptedstate() )
        self enablestatelookat( 1, 1 );
}

notetrackhtoff( var_0, var_1 )
{
    if ( !self isinscriptedstate() )
        self enablestatelookat( 0 );
}
