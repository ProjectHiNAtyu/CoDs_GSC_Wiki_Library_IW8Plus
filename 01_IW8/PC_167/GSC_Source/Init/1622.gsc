// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

ai_request_gesture( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_2 ) )
        var_2 = 1000;

    ai_request_gesture_internal( var_0, var_1, var_2, var_3 );
}

ai_cancel_gesture()
{
    if ( !isdefined( self._blackboard.gesturerequest ) )
        return;

    if ( isdefined( self._blackboard.gesturerequest.notifyname ) )
        self notify( self._blackboard.gesturerequest.notifyname, "_encstr_B2F00F69DFFB2835B30F1F6F375A76F88C" );

    self._blackboard.gesturerequest = undefined;
}

handlegesturenotetrack( var_0 )
{
    self waittill( var_0, var_1 );

    if ( !isdefined( var_1 ) )
        var_1 = [ "_encstr_8C500ABA9B23CACC2D37AC8C" ];

    if ( !isarray( var_1 ) )
        var_1 = [ var_1 ];

    var_2 = undefined;

    foreach ( var_4 in var_1 )
    {
        if ( var_4 == "_encstr_83AA0ED6ED390B64B9E7AD451A20B848" )
        {
            self.gunposeoverride_internal = undefined;
            continue;
        }
        else if ( var_4 == "_encstr_93CB0D5B8808A1FB017887BED62193" )
        {
            self._blackboard.partialgestureplaying = 0;
            continue;
        }
        else
            var_5 = [[ self.fnasm_handlenotetrack ]]( var_4, var_0 );

        if ( isdefined( var_5 ) )
            var_2 = var_5;
    }

    return var_2;
}

gesturedonotetracks( var_0 )
{
    self endon( "_encstr_AD2D109DCA6ED1AE3956FA475AADACF6EA1D" );
    thread gesturenotetracktimeoutthread( var_0 );

    for (;;)
    {
        var_1 = handlegesturenotetrack( "_encstr_8F0508CE59DCA357392B" );

        if ( isdefined( var_1 ) )
            return var_1;
    }

    self notify( "_encstr_8F8311245AFB63A54299699CE0707776B82D71" );
}

gesturenotetracktimeoutthread( var_0 )
{
    self endon( "_encstr_8F8311245AFB63A54299699CE0707776B82D71" );
    wait( var_0 );
    self notify( "_encstr_AD2D109DCA6ED1AE3956FA475AADACF6EA1D" );
}

gesture( var_0 )
{
    self endon( "_encstr_A6F10F617BFFE8E0674AEBFB4E4EA84D63" );
    self endon( "_encstr_AD75063D571AE108" );

    for (;;)
    {
        if ( !isdefined( self._blackboard.gesturerequest ) )
            self waittill( "_encstr_8F84123B59E63ABA4EACEB9CAC175D59CDE8AC23" );

        for (;;)
        {
            if ( !isdefined( self._blackboard.gesturerequest ) )
                break;

            if ( self._blackboard.gesturerequest.timeoutms < gettime() )
            {
                ai_cancel_gesture();
                break;
            }

            if ( scripts\asm\asm_bb::bb_moverequested() )
            {
                var_1 = self aigettargetspeed();

                if ( !istrue( self.allowrunninggesture ) && var_1 > 135 )
                {
                    wait 0.1;
                    continue;
                }

                if ( self pathdisttogoal() < var_1 * 2.5 )
                {
                    wait 0.1;
                    continue;
                }
            }

            self._blackboard.gesturerequest.latestalias = get_gesture_alias( self._blackboard.gesturerequest.gesture, self._blackboard.gesturerequest.target );
            var_2 = self aiplaygesture( self._blackboard.gesturerequest.latestalias );

            if ( !isdefined( var_2 ) )
            {
                wait 0.1;
                continue;
            }

            self.gunposeoverride_internal = "_encstr_B2650840FBDB7F1188A1";
            self.baimedataimtarget = 0;

            if ( self._blackboard.gesturerequest.disablelookat )
            {
                self.disableautolookat = 1;
                self stoplookat();
            }

            var_4 = self._blackboard.gesturerequest.notifyname;
            self._blackboard.gesturerequest = undefined;
            self._blackboard.partialgestureplaying = 1;
            gesturedonotetracks( getanimlength( var_2 ) );
            self._blackboard.partialgestureplaying = 0;

            if ( isdefined( var_4 ) )
                self notify( var_4, "_encstr_84F00FD1F06B557B5368B08CE07D78D373" );

            self.disableautolookat = 0;
            self.gunposeoverride_internal = undefined;
            self aicleargesture();
            wait 0.4;
        }
    }
}

gesture_should_disable_lookat( var_0 )
{
    var_1 = [ "_encstr_87890D404A828B49DB2F4FC8E12B13", "_encstr_857E0FB54B1B2D4785C92FAF38BD5A9B1D", "_encstr_924507E545C640A0AB", "_encstr_BEB707180BB7CF98C3", "_encstr_8F9F0812403F395729EC" ];

    if ( isdefined( self._blackboard.civilianfocuscurvalue ) && var_0 == "_encstr_924507E545C640A0AB" )
        return 0;

    if ( scripts\engine\utility::array_contains( var_1, var_0 ) )
        return 1;

    return 0;
}

ai_request_gesture_internal( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self._blackboard.gesturerequest ) )
        ai_cancel_gesture();

    self._blackboard.gesturerequest = spawnstruct();
    self._blackboard.gesturerequest.gesture = var_0;
    self._blackboard.gesturerequest.target = var_1;
    self._blackboard.gesturerequest.timeoutms = gettime() + var_2;
    self._blackboard.gesturerequest.notifyname = var_3;
    self._blackboard.gesturerequest.disablelookat = gesture_should_disable_lookat( var_0 );
    self notify( "_encstr_8F84123B59E63ABA4EACEB9CAC175D59CDE8AC23" );
}

civisfocusingleft()
{
    return self._blackboard.civilianfocusstate == 3;
}

civisfocusingright()
{
    return self._blackboard.civilianfocusstate == 4;
}

get_gesture_alias( var_0, var_1 )
{
    if ( isdefined( self._blackboard.civilianfocuscurvalue ) )
    {
        if ( var_0 == "_encstr_924507E545C640A0AB" )
        {
            var_2 = randomint( 3 ) + 1;

            if ( civisfocusingleft() )
                var_0 = var_0 + "_encstr_BA4C02DF" + var_2 + "_encstr_A50703AFB1";
            else if ( civisfocusingright() )
                var_0 = var_0 + "_encstr_BA4C02DF" + var_2 + "_encstr_9207034F36";
        }
        else if ( var_0 == "_encstr_96C9079FC1BF36D751" )
        {
            var_2 = randomint( 2 ) + 1;

            if ( civisfocusingleft() )
                var_0 = var_0 + "_encstr_BA4C02DF" + var_2 + "_encstr_A50703AFB1";
            else if ( civisfocusingright() )
                var_0 = var_0 + "_encstr_BA4C02DF" + var_2 + "_encstr_9207034F36";
        }
    }

    if ( isdefined( var_1 ) && ( var_0 == "_encstr_87890D404A828B49DB2F4FC8E12B13" || var_0 == "_encstr_857E0FB54B1B2D4785C92FAF38BD5A9B1D" || var_0 == "_encstr_924507E545C640A0AB" || var_0 == "_encstr_B419059BD17BE0" || var_0 == "_encstr_A3AD05049840F2" || var_0 == "_encstr_BECC055CF3811A" ) )
    {
        var_3 = vectortoyaw( var_1.origin - self.origin );
        var_4 = angleclamp180( var_3 - self.angles[1] );
        var_5 = getangleindex( var_4, 22.5 );
        var_5 = scripts\asm\shared\utility::mapangleindextonumpad( var_5 );
        return var_0 + var_5;
    }

    return var_0;
}

ai_finish_gesture()
{
    if ( isdefined( self._blackboard.gesturerequest.notifyname ) )
        self notify( self._blackboard.gesturerequest.notifyname, "_encstr_8F8311245AFB63A54299699CE0707776B82D71" );

    self._blackboard.gesturerequest = undefined;
}

chooseanim_gesture( var_0, var_1, var_2 )
{
    var_3 = scripts\asm\asm::asm_lookupanimfromalias( var_1, self._blackboard.gesturerequest.latestalias );
    return var_3;
}

playcoveranim_gesture( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_A3DB0AF5332DDCD237D0AC8C" );
    self._blackboard.activegesturenotify = self._blackboard.gesturerequest.notifyname;
    childthread scripts\asm\shared\utility::setuseanimgoalweight( var_1, 0.2 );
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );
    self orientmode( "_encstr_91730D640BC68899BFF532BB38850B" );

    if ( scripts\asm\asm::asm_currentstatehasflag( var_0, "_encstr_B43B0D73DE3AAC1DC9851B6D50D2B5" ) )
    {
        var_5 = getangledelta( var_4, 0.0, 1.0 );
        self.stepoutyaw = self.angles[1] + var_5;
    }

    self._blackboard.gesturerequest = undefined;
    self aisetanim( var_1, var_3 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_4 );
    scripts\asm\asm::asm_donotetracks( var_0, var_1, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );
    self orientmode( "_encstr_91730D640BC68899BFF532BB38850B" );

    if ( isdefined( self._blackboard.activegesturenotify ) )
    {
        self notify( self._blackboard.activegesturenotify, "_encstr_8F8311245AFB63A54299699CE0707776B82D71" );
        self._blackboard.activegesturenotify = undefined;
    }
}

cleargestureanim( var_0, var_1, var_2 )
{
    if ( isdefined( self._blackboard.activegesturenotify ) )
    {
        self notify( self._blackboard.activegesturenotify, "_encstr_B2F00F69DFFB2835B30F1F6F375A76F88C" );
        self._blackboard.activegesturenotify = undefined;
    }
}

gesture_finishearly( var_0, var_1, var_2, var_3 )
{
    if ( scripts\asm\asm_bb::bb_moverequested() && istrue( self.gestureinterruptible ) )
    {
        if ( isdefined( self.gestureinterruptibleifplayerwithindist ) )
        {
            if ( distancesquared( self.origin, level.player.origin ) < self.gestureinterruptibleifplayerwithindist * self.gestureinterruptibleifplayerwithindist )
                return 1;
        }
        else
            return 1;
    }

    return scripts\asm\asm::asm_eventfired( var_0, "_encstr_93CB0D5B8808A1FB017887BED62193" ) && scripts\asm\asm_bb::bb_moverequested();
}
