// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

set_forcegoal()
{
    if ( isdefined( self.set_forcedgoal ) )
        return;

    self.oldfightdist = self.pathenemyfightdist;
    self.oldmaxdist = self.pathenemylookahead;
    self.oldmaxsight = self.maxsightdistsqrd;
    self.pathenemyfightdist = 8;
    self.pathenemylookahead = 8;
    self.maxsightdistsqrd = 1;
    self.set_forcedgoal = 1;
}

unset_forcegoal()
{
    if ( !isdefined( self.set_forcedgoal ) )
        return;

    self.pathenemyfightdist = self.oldfightdist;
    self.pathenemylookahead = self.oldmaxdist;
    self.maxsightdistsqrd = self.oldmaxsight;
    self.set_forcedgoal = undefined;
}

disable_exits()
{
    self.disableexits = 1;
}

enable_exits()
{
    self.disableexits = 0;
}

disable_turnanims()
{
    self.noturnanims = 1;
}

enable_turnanims()
{
    self.noturnanims = undefined;
}

disable_arrivals()
{
    self.disablearrivals = 1;
}

enable_arrivals()
{
    self endon( "_encstr_A3750609A5E61883" );
    waittillframeend;
    self.disablearrivals = 0;
}

set_rebel( var_0 )
{
    self._blackboard.isrebel = var_0;
}

spawn_failed( var_0 )
{
    if ( !isalive( var_0 ) )
        return 1;

    if ( scripts\common\utility::issp() && !isdefined( var_0.finished_spawning ) )
        var_0 scripts\engine\utility::waittill_either( "_encstr_B8931299A5CD2D371AACC8406E0716DDCD5A37CE", "_encstr_A3750609A5E61883" );

    if ( isalive( var_0 ) )
        return 0;

    return 1;
}

gun_remove()
{
    if ( isai( self ) )
        scripts\engine\utility::script_func( "_encstr_82A41351C2CFB5C633CD7146CA47C5B71BC7B8A06D", self.weapon, "_encstr_AABA05236DC831" );
    else if ( isdefined( self.fake_weapon_models ) )
        set_strict_ff();
    else
        self detach( getweaponmodel( self.weapon ), "_encstr_A1AC113BE001AF83334F1AD5209F0B51A910B3" );
}

set_strict_ff()
{
    if ( isdefined( self.fake_weapon_models ) )
    {
        for ( var_0 = self.fake_weapon_models.size - 1; var_0 >= 0; var_0-- )
            self detach( self.fake_weapon_models[var_0] );

        self.fake_weapon_models = undefined;
    }
}

set_start_cash( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        if ( issubstr( var_2, "_encstr_819208B8983B1DF2F990" ) || issubstr( var_2, "_encstr_806209E3C813A5371B16DC" ) )
        {
            if ( var_0.size > 1 )
            {
                var_0 = scripts\engine\utility::array_remove( var_0, var_2 );
                var_0 = scripts\engine\utility::array_insert( var_0, var_2, 1 );
            }
        }
    }

    foreach ( var_2 in var_0 )
        self attach( var_2 );

    self.fake_weapon_models = var_0;
}

gun_recall()
{
    if ( isai( self ) )
        scripts\engine\utility::script_func( "_encstr_82A41351C2CFB5C633CD7146CA47C5B71BC7B8A06D", self.weapon, "_encstr_9353062E718710C9" );
    else
        self attach( getweaponmodel( self.weapon ), "_encstr_A1AC113BE001AF83334F1AD5209F0B51A910B3" );
}

set_gunpose( var_0, var_1 )
{
    if ( var_0 == "_encstr_95DA0A585D1D7B5BB01D2D1B" )
        var_0 = undefined;

    self.gunposeoverride = var_0;
    self.gundiscipline = isdefined( var_1 ) && var_1;
}

reset_gunpose()
{
    self.gunposeoverride = undefined;
    self.gundiscipline = 1;
}

poi_enable( var_0, var_1 )
{
    scripts\asm\shared\utility::toggle_poi( var_0, var_1 );
}

stop_use_turret()
{
    self notify( "_encstr_9F8A10F67BE7020103DFD1B7A477DB68B873" );
    self unlink();
    self._blackboard.requestedturret = undefined;
    self._blackboard.requestedturretpose = undefined;
}

stop_magic_bullet_shield()
{
    self notify( "_encstr_A3731927B465381807BA49B0A2F74ED87D3483D177CA405B4F0221" );

    if ( isai( self ) )
    {
        if ( isdefined( self.old_attackeraccuracy ) )
        {
            self.attackeraccuracy = self.old_attackeraccuracy;
            self.old_attackeraccuracy = undefined;
        }
        else
            self.attackeraccuracy = 1;
    }

    self.magic_bullet_shield = undefined;
    self.damageshield = 0;
    self notify( "_encstr_81FD22C288F3914B4D8FA29058331080C7DBE99F3B37594DA5C8C3F230C9034018B5C0AF" );
}

magic_bullet_death_detection()
{

}

magic_bullet_shield( var_0 )
{
    if ( isai( self ) )
    {

    }
    else
        self.health = 100000;

    self endon( "_encstr_81FD22C288F3914B4D8FA29058331080C7DBE99F3B37594DA5C8C3F230C9034018B5C0AF" );

    if ( isai( self ) )
    {
        self.old_attackeraccuracy = self.attackeraccuracy;
        self.attackeraccuracy = 0.1;
    }

    self notify( "_encstr_BAC6142D8FD19FEE8F3873DA70C3E38F8BE3A1DD9119" );
    self.magic_bullet_shield = 1;
    self.damageshield = 1;
}

force_long_death_on_back_with_pistol( var_0 )
{
    self.forcelongdeath = 4;

    if ( istrue( var_0 ) )
        self.skipdyingbackcrawl = 1;

    self asmsetstate( self.asmname, "_encstr_8FD212D2E8505732D8476C67CD20F1A38D611BEA" );
}

force_long_death_crawling_away()
{
    self.forcelongdeath = 3;
}

force_long_death_stumbling()
{
    self.forcelongdeath = 2;
}

find_and_teleport_to_cover( var_0 )
{
    var_1 = 0;
    var_2 = undefined;
    var_3 = 1;
    var_4 = self findbestcovernode( var_0, var_1, var_2, var_3 );

    if ( isdefined( var_4 ) )
    {
        var_5 = var_4.angles;
        var_6 = var_4.origin;

        if ( !issubstr( var_4.type, "_encstr_9F24060875D5FD98" ) )
        {
            if ( issubstr( var_4.type, "_encstr_B1AD05C45666E8" ) )
                var_5 = var_5 + ( 0, 90, 0 );
            else if ( issubstr( var_4.type, "_encstr_9353063E718710C9" ) || issubstr( var_4.type, "_encstr_8FAB0D6BED9E624B27B0E2A78B8F9A" ) || issubstr( var_4.type, "_encstr_AAF60845EF6BEECF7870" ) || issubstr( var_4.type, "_encstr_A6FF0C9F778B38368A3173D90A73" ) )
                var_5 = var_5 - ( 0, 90, 0 );
        }

        self forceteleport( var_6, var_5 );
        self usecovernode( var_4, 1 );
        self setgoalnode( var_4 );
        return 1;
    }

    return 0;
}

bot_ctf_get_node_chance( var_0 )
{
    if ( !isdefined( self._blackboard.bot_cur_loadout_num ) )
    {
        self._blackboard.bot_cur_loadout_num = 1;
        self._blackboard.bot_ctf_recover_flag = var_0;
        return 1;
    }

    return 0;
}

bot_ctf_flag_picked_up_of_team()
{
    if ( isdefined( self._blackboard.bot_cur_loadout_num ) && self._blackboard.bot_cur_loadout_num == 1 )
        self._blackboard.bot_cur_loadout_num = 2;
}

bot_ctf_enemy_team_flag_is_picked_up()
{
    if ( isdefined( self._blackboard.bot_cur_loadout_num ) )
    {
        if ( self._blackboard.bot_cur_loadout_num == 1 )
        {
            self._blackboard.bot_cur_loadout_num = undefined;
            self._blackboard.bot_ctf_recover_flag = undefined;
            return 1;
        }
        else if ( self._blackboard.bot_cur_loadout_num == 2 )
        {
            self._blackboard.bot_cur_loadout_num = 3;
            return 1;
        }
    }

    return 0;
}

bot_ctf_flag_is_home_of_team()
{
    if ( isdefined( self._blackboard.bot_cur_loadout_num ) && self._blackboard.bot_cur_loadout_num == 3 )
    {
        self._blackboard.bot_cur_loadout_num = undefined;
        self._blackboard.bot_ctf_recover_flag = undefined;
    }
}

bomber_spawn_origins( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isalive( var_0 ) )
        return;

    var_2 = var_0 bot_ctf_get_node_chance( var_1 );

    if ( var_2 )
    {
        var_0.ignoreall = 1;
        var_0.ignoreme = 1;
    }
}

blueprintextract_createtempobjective( var_0 )
{
    if ( !isdefined( var_0 ) || !isalive( var_0 ) )
        return;

    var_1 = var_0 bot_ctf_enemy_team_flag_is_picked_up();

    if ( var_1 )
    {
        var_0.ignoreall = 0;
        var_0.ignoreme = 0;
    }
}
