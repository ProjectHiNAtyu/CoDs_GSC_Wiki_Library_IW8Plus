// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( getdvarint( "_encstr_AAF21BE3579341072F08FA41137E4702683B7F76CF1055F7C603324A18", 0 ) == 0 )
        return;

    level.usec130spawn = getdvarint( "_encstr_A968149BD827FA9D58DA2BD7D86266C0FAE6E085BBDC", 0 ) == 1;
    level.usesquadspawn = getdvarint( "_encstr_BA81152A9960AF9A573B4FAF2F07E3C9B866A27271F056", 0 ) == 1;
    level.usesquadspawnselection = getdvarint( "_encstr_A9BB1E37B14EFA9DC26B957D9B3858EECDB9AC63AC1BD1D2BDDCF5CDB8AB8523", 1 ) == 1;
    level.checkspawnselectionafk = scripts\mp\utility\game::matchmakinggame() && getdvarint( "_encstr_93B81C0B3ECEC16C0F289BE92778FAB8B0B7618193C819ABEF687FC8B8A7", 1 ) == 1;
    level.usespawnselection = 0;
    level.availablespawnlocations = [];

    foreach ( var_1 in level.teamnamelist )
        level.availablespawnlocations[var_1] = [];

    level thread initspawns();
    scripts\common\ui::lui_registercallback( "_encstr_9BEE1C9911B691D0A36BBE2343BF9450C16E272FAD1A492E2B6290A97A83", ::endcondition_focuschanged );
    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::updatefobspawnsindanger );
}

delayspawntoc130()
{

}

churnareas()
{
    var_0 = [];
    var_0[0] = "_encstr_8C2A082497DEAFDAAF4F";
    var_0[1] = "_encstr_9B2A08B4671847C2AD39";
    var_0[2] = "_encstr_982A088DC2CD950C66AF";
    var_1 = [];
    var_1[var_1.size] = var_0[0] + ( randomint( 3 ) + 1 );
    var_1[var_1.size] = var_0[1] + ( randomint( 3 ) + 1 );
    var_1[var_1.size] = var_0[2] + ( randomint( 3 ) + 1 );
    setspawnlocations( var_1, "_encstr_BC850785638DA59537" );
    var_2 = [];
    var_2[var_1.size] = var_0[0] + ( randomint( 3 ) + 1 );
    var_2[var_1.size] = var_0[1] + ( randomint( 3 ) + 1 );
    var_2[var_1.size] = var_0[2] + ( randomint( 3 ) + 1 );
    setspawnlocations( var_2, "_encstr_BA840579D3F7F6" );
    updatespawnareas();

    for (;;)
    {
        wait 10.0;
        var_1 = [];
        var_1[var_1.size] = var_0[0] + ( randomint( 3 ) + 1 );
        var_1[var_1.size] = var_0[1] + ( randomint( 3 ) + 1 );
        var_1[var_1.size] = var_0[2] + ( randomint( 3 ) + 1 );
        setspawnlocations( var_1, "_encstr_BC850785638DA59537" );
        var_2 = [];
        var_2[var_2.size] = var_0[0] + ( randomint( 3 ) + 1 );
        var_2[var_2.size] = var_0[1] + ( randomint( 3 ) + 1 );
        var_2[var_2.size] = var_0[2] + ( randomint( 3 ) + 1 );
        setspawnlocations( var_2, "_encstr_BA840579D3F7F6" );
        updatespawnareas();
    }
}

setspawnlocations( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in level.availablespawnlocations[var_1] )
    {
        if ( issubstr( var_4, "_encstr_BD240891F2B985B596B1" ) || issubstr( var_4, "_encstr_BC5008F4B573F81FC5B2" ) || issubstr( var_4, "_encstr_A295063B80E35E93" ) )
            var_2[var_2.size] = var_4;
    }

    level.availablespawnlocations[var_1] = [];

    foreach ( var_7 in var_0 )
    {
        if ( !scripts\engine\utility::array_contains( level.availablespawnlocations[var_1], var_7 ) )
            level.availablespawnlocations[var_1][level.availablespawnlocations[var_1].size] = var_7;
    }

    foreach ( var_7 in var_2 )
    {
        if ( !scripts\engine\utility::array_contains( level.availablespawnlocations[var_1], var_7 ) )
            level.availablespawnlocations[var_1][level.availablespawnlocations[var_1].size] = var_7;
    }
}

allowspawnlocation( var_0, var_1 )
{
    if ( !scripts\engine\utility::array_contains( level.availablespawnlocations[var_1], var_0 ) )
        level.availablespawnlocations[var_1][level.availablespawnlocations[var_1].size] = var_0;
}

removespawnlocation( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in level.availablespawnlocations[var_1] )
    {
        if ( var_4 != var_0 )
            var_2[var_2.size] = var_4;
    }

    level.availablespawnlocations[var_1] = var_2;
}

updatespawnareas()
{
    level notify( "_encstr_BE6614470B6CF5BD83DCFADA2CC17DB1865873B3B246" );
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    setupspawnlocations();

    if ( scripts\mp\utility\game::getgametype() == "_encstr_BD19047616EB" )
        setupspawninfluencezones();
}

setupspawnlocations()
{
    while ( !isdefined( level.gamemodespawnpointnames ) )
        waitframe();

    level.spawnselectionlocations = [];

    foreach ( var_1 in level.teamnamelist )
    {
        var_2 = scripts\mp\spawnlogic::getspawnpointarray( level.gamemodespawnpointnames[var_1] );
        scripts\mp\spawnlogic::registerspawnpoints( var_1, var_2 );

        foreach ( var_4 in var_2 )
        {
            if ( !isdefined( var_4.target ) || var_4.target == "_encstr_A40101" )
                continue;

            var_5 = getentarray( var_4.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

            if ( !isdefined( var_5 ) || var_5.size == 0 )
                var_5 = scripts\engine\utility::getstructarray( var_4.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

            if ( var_5.size == 0 )
                continue;

            var_6 = undefined;

            if ( var_5.size == 1 )
                var_6 = var_5[0];
            else if ( isdefined( scripts\cp_mp\utility\game_utility::getlocaleid() ) )
            {
                foreach ( var_8 in var_5 )
                {
                    if ( isdefined( var_8.script_noteworthy ) && var_8.script_noteworthy == level.localeid )
                    {
                        var_6 = var_8;
                        break;
                    }
                }
            }
            else
            {
                var_10 = undefined;

                foreach ( var_8 in var_5 )
                {
                    var_12 = distancesquared( var_4.origin, var_8.origin );

                    if ( !isdefined( var_10 ) || var_12 < var_10 )
                    {
                        var_6 = var_8;
                        var_10 = var_12;
                    }
                }
            }

            if ( !isdefined( var_6 ) )
                continue;

            var_14 = var_6.script_label;
            var_15 = var_1;

            if ( isdefined( var_6.script_team ) && scripts\mp\utility\teams::isgameplayteam( var_6.script_team ) )
            {
                if ( scripts\cp_mp\utility\game_utility::getmapname() == "_encstr_AA240B913AD1C3B379DB98C832" && var_6.targetname == "_encstr_94BD14AFDF804A4730F61AC2EE60918265773F4B4B3E" )
                    var_15 = "_encstr_BA840579D3F7F6";
                else
                    var_15 = var_6.script_team;
            }

            if ( isdefined( level.spawnselectionlocations[var_14] ) && isdefined( level.spawnselectionlocations[var_14][var_15] ) )
            {
                var_16 = level.spawnselectionlocations[var_14][var_15];

                if ( !scripts\engine\utility::array_contains( var_16.spawnpoints, var_4 ) )
                    var_16.spawnpoints[var_16.spawnpoints.size] = var_4;

                continue;
            }

            var_17 = spawnstruct();
            var_17.origin = var_6.origin;
            var_17.angles = var_6.angles;
            var_17.spawnpoints = [];
            var_17.spawnpoints[0] = var_4;

            if ( !issubstr( var_14, "_encstr_A418051B62EBDD" ) )
                initspawnarea( var_15, var_17, var_14 );
            else
                level.spawnselectionlocations[var_14][var_15] = var_17;
        }

        foreach ( var_21, var_20 in level.spawnselectionlocations )
        {
            if ( isdefined( var_20[var_1] ) )
                scripts\mp\spawnlogic::registerspawnset( var_21 + "_encstr_984C028E" + var_1, var_20[var_1].spawnpoints );
        }
    }

    level.usespawnselection = getdvarint( "_encstr_AAF21BE3579341072F08FA41137E4702683B7F76CF1055F7C603324A18", 0 ) == 1 && level.spawnselectionlocations.size > 0;

    if ( level.usespawnselection )
        level.getspawnpoint = ::getspawnpoint;
}

initspawnarea( var_0, var_1, var_2 )
{
    var_3 = tablelookuprownum( "_encstr_A4731DB8D31D3FD3679FD85E65BBB9E733AA3028B826712D3FA457E87BFF83", 0, var_2 );
    var_4 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_1.origin );
    var_4 setmodel( "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
    var_1.anchorentity = var_4;
    var_1.typeid = var_3;
    var_1.typeref = var_2;
    var_1.owner = "_encstr_BC850785638DA59537";

    if ( !issubstr( var_2, "_encstr_BA0703A843" ) && !issubstr( var_2, "_encstr_BC5008F4B573F81FC5B2" ) )
    {
        var_5 = getlabelid( var_2 + "_encstr_984C028E" + level.localeid );

        if ( !isdefined( var_5 ) || var_5 == -1 )
            var_1.labelid = var_3;
        else
            var_1.labelid = var_5;
    }
    else
        var_1.labelid = var_3;

    if ( isdefined( var_1.dynamicent ) )
        var_4 linkto( var_1.dynamicent );

    level.spawnselectionlocations[var_2][var_0] = var_1;
}

getlabelid( var_0 )
{
    var_1 = tablelookuprownum( "_encstr_A4731DB8D31D3FD3679FD85E65BBB9E733AA3028B826712D3FA457E87BFF83", 0, var_0 );

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    return var_1;
}

setanchorent( var_0, var_1, var_2 )
{
    level.spawnselectionlocations[var_0][var_1].anchorentity = var_2;
}

setupspawninfluencezones()
{
    level.spawninfluencezones = [];

    for ( var_0 = 1; var_0 <= 5; var_0++ )
    {
        var_1 = scripts\cp_mp\utility\game_utility::getlocaleent( "_encstr_A13109876436430D1531C7" + var_0 + "_encstr_ABB9148043F319D7A5D038609A3BBBB007FD8AB7A64F" );

        if ( !isdefined( var_1 ) )
            continue;

        scripts\mp\utility\trigger::makeenterexittrigger( var_1, ::spawninfluencezone_onusebegin, ::spawninfluencezone_onuseend );
        var_1.touchlist = [];
        level.spawninfluencezones["_encstr_A13109876436430D1531C7" + var_0] = var_1;
    }
}

spawninfluencezone_onusebegin( var_0, var_1 )
{
    if ( isdefined( var_0.classname ) && var_0.classname == "_encstr_AB440F9BD8932D071DAFB3CA435A3663B2" )
        return;

    var_1.touchlist = scripts\engine\utility::array_add( var_1.touchlist, var_0 );
}

spawninfluencezone_onuseend( var_0, var_1 )
{
    if ( isdefined( var_0.classname ) && var_0.classname == "_encstr_AB440F9BD8932D071DAFB3CA435A3663B2" )
        return;

    var_1.touchlist = scripts\engine\utility::array_remove( var_1.touchlist, var_0 );
}

isteamtouching( var_0 )
{
    var_1 = 0;
    var_2 = [];

    foreach ( var_4 in self.touchlist )
    {
        if ( !isdefined( var_4 ) )
            continue;

        if ( isdefined( var_4.team ) && var_4.team == var_0 )
            var_1 = 1;

        var_2[var_2.size] = var_4;
    }

    self.touchlist = var_2;
    return var_1;
}

getspawnpoint()
{
    scripts\mp\spawnlogic::deactivateallspawnsets();

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        var_0 = scripts\mp\spawnlogic::getspawnpointarray( level.gamemodestartspawnpointnames[self.team] );
        var_1 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_0 );
        return var_1;
    }

    var_1 = undefined;
    self._id_1443D = 0;

    if ( !isdefined( self.selectedspawnarea ) )
    {
        if ( self.team == "_encstr_BC850785638DA59537" )
            self.selectedspawnarea = "_encstr_A4B9109F170167BF36E602DAA89BAF9A11C3";
        else
            self.selectedspawnarea = "_encstr_9C6B0EAF178968E0DBB96932A2E73B99";
    }

    if ( isdefined( self.selectedspawnarea ) )
    {
        if ( issubstr( self.selectedspawnarea, "_encstr_A295063B80E35E93" ) )
        {
            var_2 = undefined;

            if ( self.selectedspawnarea == "_encstr_97460D037BBFD74089349B8B246FB8" )
                var_2 = level.squaddata[self.team][self.squadindex].squadleaderindex;
            else
                var_2 = int( getsubstr( self.selectedspawnarea, self.selectedspawnarea.size - 1, self.selectedspawnarea.size ) );

            var_3 = level.squaddata[self.team][self.squadindex].players[var_2];
            var_1 = scripts\mp\spawnscoring::findteammatebuddyspawn( var_3 );
            var_3 thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_933E0C53A7B39F0FAF9003EA4835" );
            thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_AA2C11632F2D696211B3A89EDB1D8F536565E8" );
            self._id_1443D = 1;

            if ( isdefined( var_3.vehicle ) )
            {
                self.spawningintovehicle = 1;
                self._id_14268 = var_3.vehicle.vehiclename;
            }

            scripts\mp\utility\stats::incpersstat( "_encstr_B868119B070BDDB96ACAC62BB13AA9B857B091", 1 );
            var_3 scripts\mp\utility\stats::incpersstat( "_encstr_9CEB1B339BEB624B5768FBC740EB153A0B2E72EA7D1BAA4CB920D3CFE0", 1 );
        }
        else if ( issubstr( self.selectedspawnarea, "_encstr_BD240891F2B985B596B1" ) )
        {
            var_1 = scripts\mp\spawnlogic::getspawnpoint( self, self.team, undefined, undefined, "_encstr_8B1904982C46" );
            thread _encstr_8CD91D80976A38F14BDA6841F21617E1AD27A358431533172282B1F80F8B67::spawnplayertoc130();
        }
        else if ( issubstr( self.selectedspawnarea, "_encstr_BC5008F4B573F81FC5B2" ) )
        {
            var_1 = scripts\mp\spawnlogic::getspawnpoint( self, self.team, undefined, undefined, "_encstr_8B1904982C46" );
            var_4 = level.spawnselectionlocations[self.selectedspawnarea][self.team].dynamicent;
            var_1.origin = var_4.origin + anglestoforward( var_4.angles ) * -200 + ( 0, 0, 64 );
            var_1.angles = ( 0, var_4.angles[1], 0 );
            var_5 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getavailablevehicleseats( var_4, 1 );

            if ( var_5.size > 0 && istrue( scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_vehiclecanbeused( var_4 ) ) )
            {
                var_6 = spawnstruct();
                var_6.useonspawn = 1;
                var_6.enterstartwaitmsg = "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C";
                thread scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_enter( var_4, var_5[0], self, var_6 );
            }

            self.spawningintovehicle = 1;
            scripts\mp\utility\stats::incpersstat( "_encstr_812313437BC7A7E51943FCFD67082357FBF0DA3AA1", 1 );
        }
        else
        {
            if ( isdefined( level.spawninfluencezones ) )
            {
                var_7 = undefined;
                var_8 = getarraykeys( level.spawninfluencezones );

                foreach ( var_10 in var_8 )
                {
                    if ( var_10 == self.selectedspawnarea )
                        var_7 = level.spawninfluencezones[var_10];
                }

                if ( isdefined( var_7 ) && var_7 isteamtouching( scripts\mp\utility\game::getotherteam( self.team )[0] ) )
                {
                    var_12 = self.selectedspawnarea + "_encstr_8C1107F73B1E708D47" + self.team;
                    var_13 = level.spawnglobals.spawnsets[var_12];

                    if ( !isdefined( var_13 ) )
                        var_12 = self.selectedspawnarea + "_encstr_984C028E" + self.team;
                }
                else
                    var_12 = self.selectedspawnarea + "_encstr_984C028E" + self.team;
            }
            else
                var_12 = self.selectedspawnarea + "_encstr_984C028E" + self.team;

            scripts\mp\spawnlogic::activatespawnset( var_12, 1 );
            var_1 = scripts\mp\spawnlogic::getspawnpoint( self, self.team, undefined, undefined, "_encstr_8B1904982C46" );

            if ( issubstr( self.selectedspawnarea, "_encstr_9705092EF810193ADEF11F" ) || issubstr( self.selectedspawnarea, "_encstr_B84D079ECA88B3381F" ) )
                scripts\mp\utility\stats::incpersstat( "_encstr_800610C3703333538F6DB4B57633BBFE7FA0", 1 );
            else
                scripts\mp\utility\stats::incpersstat( "_encstr_A62910BF9B4AE4103B37F8D15EE4A991A25F", 1 );
        }
    }
    else
        var_1 = scripts\mp\spawnlogic::getspawnpoint( self, self.team, undefined, undefined, "_encstr_8B1904982C46" );

    if ( istrue( level.usesquadspawn ) && istrue( self.squadspawnconfirmed ) )
    {
        var_14 = self getspectatingplayer();

        if ( isdefined( var_14 ) && isdefined( self.squadindex ) && self.team == var_14.team && self.squadindex == var_14.squadindex )
        {
            var_1 = scripts\mp\spawnscoring::findteammatebuddyspawn( var_14 );
            var_14 thread scripts\mp\utility\points::sec_sys_struct_1( "_encstr_933E0C53A7B39F0FAF9003EA4835" );
            thread scripts\mp\utility\points::sec_sys_struct_1( "_encstr_AA2C11632F2D696211B3A89EDB1D8F536565E8" );
            self._id_1443D = 1;
        }
    }

    return var_1;
}

refreshplayerspawnareaomnvars()
{
    for ( var_0 = 0; var_0 < 16; var_0++ )
    {
        self setclientomnvar( "_encstr_B436152344410B45EB913F19F14C4DA85DDDDC375983CF" + var_0, undefined );
        self setclientomnvar( "_encstr_AFCB11ABD2D7477BB5FAE6072CBBB9EB4B8CEB" + var_0, -1 );
    }

    if ( isdefined( self.forcedavailablespawnlocation ) )
        picklane( self.forcedavailablespawnlocation );

    thread obj_room_fire_03();

    if ( istrue( level.usesquadspawnselection ) )
        thread evaluatesquadspawn();
}

obj_room_fire_03()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A2BF0CF1C504995E3ABF99435772" );
    self notify( "_encstr_ABB7129D46B7B8D366036061A8F6D7730FEF900E" );
    self endon( "_encstr_ABB7129D46B7B8D366036061A8F6D7730FEF900E" );
    var_0 = [];

    for (;;)
    {
        if ( var_0.size > level.availablespawnlocations[self.team].size )
        {
            thread refreshplayerspawnareaomnvars();
            return;
        }

        var_1 = 0;

        foreach ( var_3 in level.availablespawnlocations[self.team] )
        {
            if ( !isdefined( var_0[var_1] ) )
                break;

            if ( var_0[var_1].location != var_3 )
            {
                thread refreshplayerspawnareaomnvars();
                return;
            }

            var_1++;
        }

        var_1 = 0;

        foreach ( var_3 in level.availablespawnlocations[self.team] )
        {
            var_6 = level.spawnselectionlocations[var_3][self.team];

            if ( var_1 == var_0.size )
            {
                var_7 = spawnstruct();
                var_7.location = undefined;
                var_7.entity = undefined;
                var_7.id = undefined;
                var_0[var_0.size] = var_7;
            }

            if ( !isdefined( var_0[var_1].location ) )
                var_0[var_1].location = var_3;

            if ( !isdefined( var_0[var_1].entity ) )
            {
                var_0[var_1].entity = var_6.anchorentity;
                self setclientomnvar( "_encstr_B436152344410B45EB913F19F14C4DA85DDDDC375983CF" + var_1, var_6.anchorentity );
            }

            var_8 = 0;
            var_9 = 0;
            var_10 = 0;

            if ( isdefined( var_6.objectivekey ) )
                var_8 = istrue( var_6.start_reach_icbm_launch );
            else if ( issubstr( var_3, "_encstr_BC5008F4B573F81FC5B2" ) )
            {
                var_11 = var_6.dynamicent;

                if ( isdefined( var_11 ) && !istrue( var_11.isdestroyed ) )
                {
                    var_8 = istrue( var_11.start_reach_icbm_launch );
                    var_9 = shouldmodelognotify( var_11, self );

                    if ( scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getavailablevehicleseats( var_11 ).size == 0 || !istrue( scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_vehiclecanbeused( var_11 ) ) )
                        var_10 = 1;
                }
            }

            var_12 = var_6.labelid;

            if ( var_8 )
                var_12 = var_12 + 128;

            if ( istrue( var_10 ) )
                var_12 = var_12 + 1024;

            if ( istrue( var_9 ) )
                var_12 = var_12 + 2048;

            if ( !isdefined( var_0[var_1].id ) || var_0[var_1].id != var_12 )
            {
                var_0[var_1].id = var_12;
                self setclientomnvar( "_encstr_AFCB11ABD2D7477BB5FAE6072CBBB9EB4B8CEB" + var_1, var_12 );
            }

            var_1++;
        }

        waitframe();
    }
}

_id_12ACB( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_1 ) )
        return;

    waitframe();
    var_2 = level.squaddata[var_0][var_1].players;
}

isobjectiveindanger( var_0, var_1 )
{
    return level.objectives[var_0].ownerteam != var_1 || level.objectives[var_0].stalemate || level.objectives[var_0].captureblocked || istrue( level.objectives[var_0]._id_13686 ) || level.objectives[var_0].claimteam != "_encstr_AABA05236DC831" && level.objectives[var_0].claimteam != var_1;
}

vault_gate_cut( var_0 )
{
    var_1 = gettime();
    var_2 = isdefined( var_0 ) && ( isdefined( var_0.lasttimedamaged ) && var_0.lasttimedamaged + 5000 > var_1 );
    var_3 = isdefined( var_0 ) && var_0 scripts\mp\outofbounds::istouchingoobtrigger();
    var_4 = 0;

    if ( isdefined( var_0.team ) )
    {
        var_5 = scripts\common\utility::playersnear( var_0.origin, 384 );

        foreach ( var_7 in var_5 )
        {
            if ( isdefined( var_7 ) && var_7.team != var_0.team && isalive( var_7 ) && !isdefined( var_7.fauxdead ) )
            {
                if ( abs( var_0.origin[2] - var_7.origin[2] ) < 100 )
                {
                    var_4 = 1;
                    break;
                }
            }
        }
    }

    return var_2 || var_3 || var_4;
}

_id_1424C( var_0 )
{
    var_0 endon( "_encstr_A3750609A5E61883" );
    var_0.start_reach_icbm_launch = 0;
    var_1 = getdvarfloat( "_encstr_8C462453E632B9F43B2F9B81E781CBB0F67DFB69018CF0B932A79BD723CA07B08414C643B6E4", 0.15 );

    for (;;)
    {
        var_2 = gettime();
        var_3 = istrue( var_0.flarecooldown );
        var_4 = scripts\cp_mp\utility\weapon_utility::islockedonto( var_0 );
        var_5 = scripts\cp_mp\vehicles\vehicle_occupancy::_id_141C7( var_0 );
        var_6 = isdefined( var_0 ) && ( isdefined( var_0.lasttimedamaged ) && var_0.lasttimedamaged + 5000 > var_2 );

        if ( var_0.vehiclename == "_encstr_AB510CB03836AF93ABCD6ED21673" )
        {
            var_7 = var_0.health / var_0.maxhealth;

            if ( var_7 > var_1 )
                var_6 = 0;
        }

        var_8 = isdefined( var_0 ) && var_0 scripts\mp\outofbounds::istouchingoobtrigger();
        var_9 = 0;

        if ( isdefined( var_0.team ) )
        {
            var_10 = scripts\common\utility::playersnear( var_0.origin, 384 );

            foreach ( var_12 in var_10 )
            {
                if ( isdefined( var_12 ) && var_12.team != var_0.team && isalive( var_12 ) && !isdefined( var_12.fauxdead ) )
                {
                    if ( abs( var_0.origin[2] - var_12.origin[2] ) < 100 )
                    {
                        var_9 = 1;
                        break;
                    }
                }
            }
        }

        var_14 = var_0.start_reach_icbm_launch;

        if ( var_6 || var_8 || var_9 || var_3 || var_4 || !var_5 )
            var_0.start_reach_icbm_launch = 1;
        else
            var_0.start_reach_icbm_launch = 0;

        waitframe();
    }
}

shouldmodelognotify( var_0, var_1 )
{
    var_2 = level.squaddata[self.team][self.squadindex].players;

    foreach ( var_4 in var_0.occupants )
    {
        foreach ( var_6 in var_2 )
        {
            if ( var_6 == var_4 )
                return 1;
        }
    }

    return 0;
}

setspawnselectionorder()
{
    var_0 = scripts\engine\utility::getstructarray( "_encstr_A263156FC04A3F5CB553604137C41043D2AA4EE39FB2C9", "_encstr_B8CE0BE43FC317DF690862BA48" );

    if ( isdefined( scripts\cp_mp\utility\game_utility::getlocaleid() ) )
    {
        var_1 = undefined;

        foreach ( var_3 in var_0 )
        {
            if ( var_3.script_noteworthy == level.localeid )
                var_1 = var_3;
        }
    }
    else
        var_1 = scripts\engine\utility::getstruct( "_encstr_A263156FC04A3F5CB553604137C41043D2AA4EE39FB2C9", "_encstr_B8CE0BE43FC317DF690862BA48" );

    var_5 = [];

    foreach ( var_7 in level.spawnselectionlocations )
    {
        foreach ( var_10, var_9 in var_7 )
        {
            if ( var_10 != self.team )
                continue;
            else
                var_5[var_5.size] = var_9;
        }
    }

    if ( self.team == "_encstr_BA840579D3F7F6" )
        var_12 = var_1 scripts\engine\utility::array_sort_with_func( var_5, ::sortlocationsbydistance_closestfirst );
    else
        var_12 = var_1 scripts\engine\utility::array_sort_with_func( var_5, ::sortlocationsbydistance_farthestfirst );

    foreach ( var_10, var_14 in var_12 )
    {
        self setclientomnvar( "_encstr_B436152344410B45EB913F19F14C4DA85DDDDC375983CF" + var_10, var_14.anchorentity );
        self setclientomnvar( "_encstr_AFCB11ABD2D7477BB5FAE6072CBBB9EB4B8CEB" + var_10, var_14.labelid );
    }
}

sortlocationsbydistance_closestfirst( var_0, var_1 )
{
    return distancesquared( var_0.origin, self.origin ) < distancesquared( var_1.origin, self.origin );
}

sortlocationsbydistance_farthestfirst( var_0, var_1 )
{
    return distancesquared( var_0.origin, self.origin ) > distancesquared( var_1.origin, self.origin );
}

picklane( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.availablespawnlocations[self.team] )
    {
        if ( issubstr( var_3, var_0 ) )
        {
            var_1 = var_3;
            break;
        }
    }

    if ( !isdefined( var_1 ) )
        return;

    if ( !isdefined( level.spawnselectionlocations[var_1] ) )
        return;

    var_5 = level.spawnselectionlocations[var_1][self.team];

    if ( !isdefined( var_5 ) )
        return;

    var_6 = self.team == "_encstr_BC850785638DA59537";
    var_7 = 0;

    switch ( var_0 )
    {
        case "_encstr_8CA512E64FA807C0F17B5B182B862463D7A067CE":
        case "_encstr_982A088DC2CD950C66AF":
        case "_encstr_B1AD05C65666E8":
            var_7 = scripts\engine\utility::ter_op( var_6, 0, 2 );
            break;
        case "_encstr_9DA512FB8AF920A851677B6157FAEDA89F65E651":
        case "_encstr_9B2A08B4671847C2AD39":
        case "_encstr_A31904C0FAFB":
            var_7 = 1;
            break;
        case "_encstr_98A512DC0E58DD73AFB9ACD82B6C3AD2B737BE8D":
        case "_encstr_8C2A082497DEAFDAAF4F":
        case "_encstr_9353062E718710C9":
            var_7 = scripts\engine\utility::ter_op( var_6, 2, 0 );
            break;
    }

    self setclientomnvar( "_encstr_B436152344410B45EB913F19F14C4DA85DDDDC375983CF" + var_7, var_5.anchorentity );
    self setclientomnvar( "_encstr_AFCB11ABD2D7477BB5FAE6072CBBB9EB4B8CEB" + var_7, var_5.labelid );
}

refreshsquadspawns()
{
    var_0 = 3;

    foreach ( var_2 in level.availablespawnlocations[self.team] )
    {
        if ( issubstr( var_2, "_encstr_BA9B07DB4BABF62318" ) )
        {
            var_3 = level.spawnselectionlocations[var_2][self.team];
            self setclientomnvar( "_encstr_B436152344410B45EB913F19F14C4DA85DDDDC375983CF" + var_0, var_3.anchorentity );
            self setclientomnvar( "_encstr_AFCB11ABD2D7477BB5FAE6072CBBB9EB4B8CEB" + var_0, var_3.labelid );
            var_0++;
        }
    }
}

refreshdynamicspawns()
{
    var_0 = 6;

    foreach ( var_2 in level.availablespawnlocations[self.team] )
    {
        if ( issubstr( var_2, "_encstr_B87309C8502561AA27A65F" ) )
        {
            if ( !isdefined( level.spawnselectionlocations[var_2][self.team] ) )
                continue;

            var_3 = level.spawnselectionlocations[var_2][self.team];

            if ( !isdefined( var_3 ) )
                continue;

            self setclientomnvar( "_encstr_B436152344410B45EB913F19F14C4DA85DDDDC375983CF" + var_0, var_3.anchorentity );
            self setclientomnvar( "_encstr_AFCB11ABD2D7477BB5FAE6072CBBB9EB4B8CEB" + var_0, var_3.labelid );
            var_0++;
        }
    }
}

waitforspawnselection( var_0, var_1 )
{
    if ( istrue( level.gameended ) || istrue( level.nukedetonated ) )
    {
        pickrandomnonvehiclespawn();
        return;
    }

    if ( isdefined( self.setspawnpoint ) )
        return;

    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self.selectedspawnarea = undefined;
    refreshplayerspawnareaomnvars();
    getclosestavailablespawnlocation();

    if ( istrue( level.forcetopickafob ) )
    {
        timeuntilspawnmessaging( 1, 9 );
        pickrandomnonvehiclespawn();
        return;
    }

    if ( isai( self ) || istrue( var_1 ) || issubstr( self.name, "_encstr_A24305F5D063BE" ) )
    {
        timeuntilspawnmessaging( var_0, 9 );

        if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
            return;

        pickrandomnonvehiclespawn();
        return;
    }

    while ( !scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) )
        waitframe();

    self lerpfovscalefactor( 0.0, 0.2 );
    spawnselectionthink( var_0 );
    self lerpfovscalefactor( 1.0, 0.2 );
}

pickrandomnonvehiclespawn()
{
    var_0 = scripts\engine\utility::array_randomize( level.availablespawnlocations[self.team] );

    foreach ( var_2 in var_0 )
    {
        if ( issubstr( var_2, "_encstr_BA1804D39776" ) || issubstr( var_2, "_encstr_BA0703A843" ) )
        {
            self.selectedspawnarea = var_2;
            return;
        }
    }
}

_id_1234C( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = "_encstr_BC5008F4B573F81FC5B2";

    var_1 = scripts\engine\utility::array_randomize( level.availablespawnlocations[self.team] );

    foreach ( var_3 in var_1 )
    {
        if ( issubstr( var_3, "_encstr_BC5008F4B573F81FC5B2" ) )
        {
            self.selectedspawnarea = var_3;
            return;
        }
    }
}

_id_1234B()
{
    var_0 = scripts\engine\utility::array_randomize( level.availablespawnlocations[self.team] );
    self.selectedspawnarea = var_0[0];
    return;
}

spawnselectionthink( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    thread getinitialwinningteam();

    if ( istrue( level.gameended ) )
        return;

    if ( scripts\mp\utility\game::isteamreviveenabled() )
        return;

    if ( istrue( level.nukedetonated ) )
        return;

    scripts\mp\class::loadout_clearperks();
    thread scripts\mp\spawncamera::startspawncamera( 0.0, 1.5, 0.5 );
    self.inspawnselection = 1;
    self setclientomnvar( "_encstr_BCC413ED98B753A841D8978FD628670B83D8802F57", 1 );
    thread selectiondelaymessaging( var_0 );

    if ( istrue( level.spawnselectionshowfriendly ) || istrue( level.spawnselectionshowenemy ) )
        thread scripts\mp\flashpoint::flashpoint_spawnselectionvfx();

    if ( istrue( level._id_13377 ) )
        thread _encstr_8CD91D80976A38F14BDA6841F21617E1AD27A358431533172282B1F80F8B67::_id_1420E();

    if ( istrue( level._id_13375 ) )
        thread _encstr_8CD91D80976A38F14BDA6841F21617E1AD27A358431533172282B1F80F8B67::_id_1420F();

    wait 0.5;

    if ( !istrue( level.hideenemyhq ) )
        thread _encstr_8CD91D80976A38F14BDA6841F21617E1AD27A358431533172282B1F80F8B67::spawnselection_showenemyhq();

    self setclientomnvar( "_encstr_BCC413ED98B753A841D8978FD628670B83D8802F57", 0 );
    self setclientomnvar( "_encstr_889A14CBF03F2BC03FD91F177BE19B9108710D300AEA", 1 );
    timeuntilspawnmessaging( var_0, 9 );
    thread selectionmade();

    if ( istrue( level.checkspawnselectionafk ) )
        thread watchforafk();

    for (;;)
    {
        var_1 = watchendconditions();
        var_2 = 1;

        switch ( var_1 )
        {
            case "_encstr_A4B31C8EB06CAF7B38E6D7AD2C07D7CD563656C63A96B773EBEC2C8DD232":
                var_2 = 1;
                break;
            case "_encstr_BE6614470B6CF5BD83DCFADA2CC17DB1865873B3B246":
                var_2 = 0;
                refreshplayerspawnareaomnvars();
                break;
            case "_encstr_A89C1414A378B1D7571B8952A1AFDF76D803B99A3328":
                var_2 = 1;
                scripts\mp\spawncamera::deletespawncamera();
                break;
            case "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C":
                var_2 = 1;
                scripts\mp\spawncamera::deletespawncamera();
                break;
            case "_encstr_AA4D17ED8EE26F20B80F41D82FD07E476A35EDE067CAD1A994":
                var_2 = 1;
                scripts\mp\spawncamera::deletespawncamera();
                break;
            case "_encstr_9BEE1C9911B691D0A36BBE2343BF9450C16E272FAD1A492E2B6290A97A83":
                var_2 = 0;
                break;
            case "_encstr_9BA811F5B15F3E07C2D31198EA1AAFD0FF53F5":
                var_2 = 0;
                self setclientomnvar( "_encstr_BCC413ED98B753A841D8978FD628670B83D8802F57", 1 );
                self setclientomnvar( "_encstr_889A14CBF03F2BC03FD91F177BE19B9108710D300AEA", 0 );
                thread spawnselectionshutdown_nuke();
                break;
            default:
                break;
        }

        if ( var_2 )
        {
            self notify( "_encstr_973318B6739FD986F83317933A4302910FE2235F9725B88A2EFA" );
            self setclientomnvar( "_encstr_889A14CBF03F2BC03FD91F177BE19B9108710D300AEA", 0 );
            self.inspawnselection = 0;
            return;
        }
    }
}

getinitialwinningteam()
{
    self endon( "_encstr_973318B6739FD986F83317933A4302910FE2235F9725B88A2EFA" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    while ( !istrue( level.gameended ) )
        waitframe();

    self setclientomnvar( "_encstr_889A14CBF03F2BC03FD91F177BE19B9108710D300AEA", 0 );
}

watchforafk()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_973318B6739FD986F83317933A4302910FE2235F9725B88A2EFA" );

    if ( isdefined( level._id_1369C ) )
        wait( level._id_1369C );
    else
        wait 60.0;

    self notify( "_encstr_B2E51B392B8880B033F317285B6A459FA5C3A0B6C72322E018204D6D7B" );
    wait 1;
    kick( self getentitynumber(), "_encstr_A8CC1A3866CDCE621903D1D53DF9FCB7627DA0012C302FEEF1FBD6DD", 1 );
}

selectiondelaymessaging( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self.canprocessselection = 0;

    if ( scripts\mp\utility\game::getgametype() == "_encstr_BD19047616EB" )
        self setclientomnvar( "_encstr_A6101AF388082F32D807B2AD3758BE2FC8878AFA917667AE2873CEB5", 1 );

    if ( var_0 > 0 )
        wait( var_0 );

    if ( scripts\mp\utility\game::getgametype() == "_encstr_BD19047616EB" )
        self setclientomnvar( "_encstr_A6101AF388082F32D807B2AD3758BE2FC8878AFA917667AE2873CEB5", 0 );

    scripts\mp\utility\lower_message::setlowermessageomnvar( 16 );
    self.canprocessselection = 1;

    if ( isdefined( self.selectedspawnarea ) )
        validateselectedspawnarea();
}

validateselectedspawnarea()
{
    foreach ( var_1 in level.availablespawnlocations[self.team] )
    {
        if ( var_1 == self.selectedspawnarea )
        {
            self notify( "_encstr_9DA11B0BA7DFE94F2BB04F8F48430753BB49D746951322861678AFD370" );
            return;
        }
    }

    self.selectedspawnarea = undefined;
}

selectionmade()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A4B31C8EB06CAF7B38E6D7AD2C07D7CD563656C63A96B773EBEC2C8DD232" );

    for (;;)
    {
        self waittill( "_encstr_8AEB10D3C848069A99C3E7D8365383C61158", var_0, var_1 );

        if ( var_0 == "_encstr_BE081C0D59B7D69F5A7BA9C063369748EFC1960DB19F9BC3056250C02A8F" )
        {
            var_1 = _id_1400A( var_1 );
            var_2 = undefined;

            foreach ( var_4 in level.spawnselectionlocations )
            {
                if ( isdefined( var_4[self.team] ) && isdefined( var_4[self.team].anchorentity ) && var_4[self.team].anchorentity getentitynumber() == var_1 )
                {
                    _id_1401D( var_4[self.team].typeref, self, self.team );

                    if ( isdefined( var_4[self.team].objectivekey ) && isobjectiveindanger( var_4[self.team].objectivekey, self.team ) )
                        break;

                    if ( isdefined( var_4[self.team].typeref ) && issubstr( var_4[self.team].typeref, "_encstr_BC5008F4B573F81FC5B2" ) && istrue( var_4[self.team].dynamicent.start_reach_icbm_launch ) )
                        break;

                    var_2 = var_4[self.team].typeref;
                    break;
                }
            }

            if ( !isdefined( var_2 ) )
            {
                var_6 = round_get_vehicles( self.team, self.squadindex );

                foreach ( var_4 in var_6 )
                {
                    if ( isdefined( var_4.dynamicent ) && var_4.dynamicent getentitynumber() == var_1 )
                    {
                        if ( var_4.dynamicent.team != self.team || var_4.dynamicent.squadindex != self.squadindex )
                        {
                            thread refreshplayerspawnareaomnvars();
                            break;
                        }

                        if ( issquadmateindanger( var_4.dynamicent ) )
                            break;

                        var_8 = var_4.dynamicent.vehicle;

                        if ( isdefined( var_8 ) )
                        {
                            if ( scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getavailablevehicleseats( var_8 ).size == 0 || !istrue( scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_vehiclecanbeused( var_8 ) ) )
                                break;
                        }

                        var_9 = spawnstruct();
                        var_9 = scripts\mp\spawnscoring::get_cumulative_damage_expire_time( var_9, var_4.dynamicent );

                        if ( !isdefined( var_9._id_1368A ) )
                        {
                            var_4.dynamicent._id_11EAC = gettime();
                            break;
                        }

                        var_2 = var_4.typeref;
                        break;
                    }
                }
            }

            if ( !isdefined( var_2 ) )
                continue;

            self.selectedspawnarea = var_2;

            if ( istrue( self.canprocessselection ) )
            {
                self notify( "_encstr_9DA11B0BA7DFE94F2BB04F8F48430753BB49D746951322861678AFD370" );
                return;
            }
        }
    }
}

_id_1400A( var_0 )
{
    if ( !isdefined( self.setaardata ) )
        self.setaardata = [];

    var_1 = 65536;
    var_2 = 131072;
    var_3 = 262144;
    var_4 = 524288;
    self.setaardata["_encstr_B84E0DE45A761AA3B6DBAB37595DC1"] = istrue( self.setaardata["_encstr_B84E0DE45A761AA3B6DBAB37595DC1"] ) || ( var_0 & var_1 ) > 0;
    self.setaardata["_encstr_A2380C3659CCE8B5B7D56E2BD5C1"] = istrue( self.setaardata["_encstr_A2380C3659CCE8B5B7D56E2BD5C1"] ) || ( var_0 & var_2 ) > 0;
    self.setaardata["_encstr_B6AD09FB5B2B7814AF63B1"] = istrue( self.setaardata["_encstr_B6AD09FB5B2B7814AF63B1"] ) || ( var_0 & var_3 ) > 0;
    self.setaardata["_encstr_BA5608B780F01C726891"] = istrue( self.setaardata["_encstr_BA5608B780F01C726891"] ) || ( var_0 & var_4 ) > 0;
    return var_0 & ~( var_1 | var_2 | var_3 | var_4 );
}

watchendconditions()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    thread endconditionwatcher_gameended();
    thread endconditionwatcher_selectionmade();
    thread endconditionwatcher_mapcleared();
    thread endconditionwatcher_mapchanged();
    thread endconditionwatcher_nuke();
    var_0 = scripts\engine\utility::_id_143B8( "_encstr_A4B31C8EB06CAF7B38E6D7AD2C07D7CD563656C63A96B773EBEC2C8DD232", "_encstr_BE6614470B6CF5BD83DCFADA2CC17DB1865873B3B246", "_encstr_A89C1414A378B1D7571B8952A1AFDF76D803B99A3328", "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C", "_encstr_AA4D17ED8EE26F20B80F41D82FD07E476A35EDE067CAD1A994", "_encstr_9BA811F5B15F3E07C2D31198EA1AAFD0FF53F5" );
    self notify( "_encstr_B7711A0B920FD07B6A03D7AB3657B98697FA81D0AB7F70C049E5BBB1" );
    return var_0;
}

endconditionwatcher_selectionmade()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_B7711A0B920FD07B6A03D7AB3657B98697FA81D0AB7F70C049E5BBB1" );
    self notify( "_encstr_A49C241DDE23DD67258280704A3D2D178F6C96032D938627CF6AE8C0B354F78857E1AD0DC8A6" );
    self endon( "_encstr_A49C241DDE23DD67258280704A3D2D178F6C96032D938627CF6AE8C0B354F78857E1AD0DC8A6" );

    for (;;)
    {
        self waittill( "_encstr_9DA11B0BA7DFE94F2BB04F8F48430753BB49D746951322861678AFD370" );

        if ( istrue( self.canprocessselection ) )
        {
            self notify( "_encstr_A4B31C8EB06CAF7B38E6D7AD2C07D7CD563656C63A96B773EBEC2C8DD232" );
            break;
        }
    }
}

endcondition_focuschanged( var_0 )
{
    if ( isdefined( self.selectedspawnarea ) )
        return;

    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self notify( "_encstr_9705232FB850339A50A9FF839B88D27F108326F47158E7C038BFB787B723EA8EF8099F6C60" );
    self endon( "_encstr_9705232FB850339A50A9FF839B88D27F108326F47158E7C038BFB787B723EA8EF8099F6C60" );
    self notify( "_encstr_9BEE1C9911B691D0A36BBE2343BF9450C16E272FAD1A492E2B6290A97A83" );
    var_1 = undefined;

    foreach ( var_3 in level.spawnselectionlocations )
    {
        if ( isdefined( var_3[self.team] ) && isdefined( var_3[self.team].anchorentity ) && var_3[self.team].anchorentity getentitynumber() == var_0 )
        {
            thread vehicle_registerturret( var_3[self.team].anchorentity.origin );
            var_1 = var_3[self.team].typeref;
            break;
        }
    }

    if ( !isdefined( var_1 ) )
    {
        var_5 = round_get_vehicles( self.team, self.squadindex );

        foreach ( var_3 in var_5 )
        {
            if ( isdefined( var_3.dynamicent ) && var_3.dynamicent getentitynumber() == var_0 )
            {
                thread vehicle_registerturret( var_3.dynamicent.origin );
                var_1 = var_3.typeref;
                break;
            }
        }
    }

    if ( !isdefined( var_1 ) )
        return;

    self setclientomnvar( "_encstr_87FF1AD54BBEE8DBDAF5B35943AF34950BC6A3347DC12BC93656DCE8", 0 );

    if ( issubstr( var_1, "_encstr_A295063B80E35E93" ) )
    {
        thread managesquadcameraposition( var_1 );
        var_8 = tablelookuprownum( "_encstr_A4731DB8D31D3FD3679FD85E65BBB9E733AA3028B826712D3FA457E87BFF83", 0, var_1 );
        self setclientomnvar( "_encstr_8AB41ABB4C47B8A8F257D1DDD72BE31805A266F3F7ACF856BBB7F79D", var_8 );
        return;
    }

    if ( issubstr( var_1, "_encstr_BC5008F4B573F81FC5B2" ) )
    {
        thread managevehiclecameraposition( var_1 );
        thread _id_11AB3( var_1 );
        var_8 = tablelookuprownum( "_encstr_A4731DB8D31D3FD3679FD85E65BBB9E733AA3028B826712D3FA457E87BFF83", 0, var_1 );
        self setclientomnvar( "_encstr_8AB41ABB4C47B8A8F257D1DDD72BE31805A266F3F7ACF856BBB7F79D", var_8 );
        return;
    }

    var_8 = tablelookuprownum( "_encstr_A4731DB8D31D3FD3679FD85E65BBB9E733AA3028B826712D3FA457E87BFF83", 0, var_1 + "_encstr_984C028E" + level.localeid );
    self setclientomnvar( "_encstr_8AB41ABB4C47B8A8F257D1DDD72BE31805A266F3F7ACF856BBB7F79D", var_8 );

    if ( isdefined( level.spawncameras[var_1] ) && isdefined( level.spawncameras[var_1][self.team] ) )
    {
        self.forcedspawncameraref = var_1;

        while ( !scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) )
            waitframe();

        thread scripts\mp\spawncamera::movetospawncamera( 0 );
    }
}

vehicle_registerturret( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A4B31C8EB06CAF7B38E6D7AD2C07D7CD563656C63A96B773EBEC2C8DD232" );
    self endon( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    self notify( "_encstr_BA8E13E75577A88EF33BB921D2BB587847BA734FF0" );
    self endon( "_encstr_BA8E13E75577A88EF33BB921D2BB587847BA734FF0" );

    if ( !isdefined( level._id_145DF ) )
        level._id_145DF = max( getdvarint( "_encstr_B7F30B9C3D89059A9E159E49A0", 20000 ) * 0.5 / 1000, 1.0 );

    for (;;)
    {
        self predictstreampos( var_0, 1 );
        wait( level._id_145DF );
    }
}

endconditionwatcher_gameended()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_B7711A0B920FD07B6A03D7AB3657B98697FA81D0AB7F70C049E5BBB1" );
    self notify( "_encstr_B4532013639A7E9886F7D8735C7F688C229397B1E7A33891A18D41AD855C785D0E0E" );
    self endon( "_encstr_B4532013639A7E9886F7D8735C7F688C229397B1E7A33891A18D41AD855C785D0E0E" );
    level waittill( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_AA4D17ED8EE26F20B80F41D82FD07E476A35EDE067CAD1A994" );
}

endconditionwatcher_mapcleared()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_B7711A0B920FD07B6A03D7AB3657B98697FA81D0AB7F70C049E5BBB1" );
    self notify( "_encstr_B1CA2133A8B413F0DDA1A069F9673B79095D4810C7B3A18960809144AFB1A612FDF1EE" );
    self endon( "_encstr_B1CA2133A8B413F0DDA1A069F9673B79095D4810C7B3A18960809144AFB1A612FDF1EE" );
    level waittill( "_encstr_A89C1414A378B1D7571B8952A1AFDF76D803B99A3328" );
    self notify( "_encstr_A89C1414A378B1D7571B8952A1AFDF76D803B99A3328" );
}

endconditionwatcher_mapchanged()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_B7711A0B920FD07B6A03D7AB3657B98697FA81D0AB7F70C049E5BBB1" );
    self notify( "_encstr_9B992137F86C0338104B805B3330A003B9F8B80DA5B50FF7078336A827C5B1050AF8C1" );
    self endon( "_encstr_9B992137F86C0338104B805B3330A003B9F8B80DA5B50FF7078336A827C5B1050AF8C1" );
    level waittill( "_encstr_BE6614470B6CF5BD83DCFADA2CC17DB1865873B3B246" );
    self notify( "_encstr_BE6614470B6CF5BD83DCFADA2CC17DB1865873B3B246" );
}

endconditionwatcher_nuke()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_B7711A0B920FD07B6A03D7AB3657B98697FA81D0AB7F70C049E5BBB1" );
    self notify( "_encstr_A9511B959B1986EDDC23D2D1967B9BBAC28E3686599CD7935DADCA4149" );
    self endon( "_encstr_A9511B959B1986EDDC23D2D1967B9BBAC28E3686599CD7935DADCA4149" );
    level waittill( "_encstr_BE250F8D87E2E5A1043FE398E5E9302DEA" );
    self notify( "_encstr_9BA811F5B15F3E07C2D31198EA1AAFD0FF53F5" );
}

spawnselectionshutdown_nuke()
{
    if ( !istrue( self.inspawnselection ) )
        return;

    self visionsetnakedforplayer( "_encstr_811D1698D8E82D0E7FE83F737061370992B3ED1260C820B0", 0.05 );
    wait 2.0;

    if ( !istrue( self.inspawnselection ) )
        return;

    self visionsetnakedforplayer( "_encstr_9F7A23CCC6A527F503FA131B58D85BF58EDBBEBBD05A8EB2BE1A592C9DE5EB46B0D6C2CEB2", 0.05 );
}

adddynamicspawnarea( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( level.spawnselectionlocations[var_2] ) && isdefined( level.spawnselectionlocations[var_2][var_0] ) )
    {
        var_4 = level.spawnselectionlocations[var_2][var_0];
        var_4.origin = var_1.origin + scripts\engine\utility::ter_op( isdefined( var_3 ), var_3, ( 0, 0, 0 ) );
        var_4.angles = var_1.angles;
    }
    else
    {
        var_4 = spawnstruct();
        var_4.origin = var_1.origin + scripts\engine\utility::ter_op( isdefined( var_3 ), var_3, ( 0, 0, 0 ) );
        var_4.angles = var_1.angles;
        var_4.dynamicent = var_1;
        var_4.script_noteworthy = var_2;
        initspawnarea( var_0, var_4, var_2 );
        updatespawnareas();
    }
}

removedynamicspawnarea( var_0, var_1 )
{
    if ( isdefined( level.spawnselectionlocations[var_1] ) && isdefined( level.spawnselectionlocations[var_1][var_0] ) )
    {
        level.spawnselectionlocations[var_1][var_0] = undefined;

        if ( level.spawnselectionlocations[var_1].size == 0 )
            level.spawnselectionlocations[var_1] = undefined;
    }

    updatespawnareas();
}

round_get_vehicles( var_0, var_1 )
{
    var_2 = [];

    if ( isdefined( level.squadspawnselectionlocations ) && isdefined( level.squadspawnselectionlocations[var_0] ) && isdefined( level.squadspawnselectionlocations[var_0][var_1] ) )
        var_2 = level.squadspawnselectionlocations[var_0][var_1];

    return var_2;
}

updatesquadspawn( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( level.squadspawnselectionlocations ) )
        level.squadspawnselectionlocations = [];

    if ( !isdefined( level.squadspawnselectionlocations[var_0] ) )
        level.squadspawnselectionlocations[var_0] = [];

    if ( !isdefined( level.squadspawnselectionlocations[var_0][var_1] ) )
        level.squadspawnselectionlocations[var_0][var_1] = [];

    if ( isdefined( level.squadspawnselectionlocations[var_0][var_1][var_2] ) )
    {
        if ( !isdefined( var_3 ) )
        {
            level.squadspawnselectionlocations[var_0][var_1][var_2] = undefined;
            return;
        }

        var_4 = level.squadspawnselectionlocations[var_0][var_1][var_2];
        var_4.typeref = var_2;
        var_4.origin = var_3.origin;
        var_4.angles = var_3.angles;
        var_4.dynamicent = var_3;
    }
    else
    {
        if ( !isdefined( var_3 ) )
            return;

        var_4 = spawnstruct();
        var_4.typeref = var_2;
        var_4.origin = var_3.origin;
        var_4.angles = var_3.angles;
        var_4.dynamicent = var_3;
        level.squadspawnselectionlocations[var_0][var_1][var_2] = var_4;
    }
}

removespawnareaondeathdisconnect( var_0, var_1 )
{
    self endon( "_encstr_B7711A0B920FD07B6A03D7AB3657B98697FA81D0AB7F70C049E5BBB1" );
    adddynamicspawnarea( var_0, self, var_1 );
    self waittill( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    thread addspawnareaonspawn( var_0, var_1 );
}

addspawnareaonspawn( var_0, var_1 )
{
    self endon( "_encstr_B7711A0B920FD07B6A03D7AB3657B98697FA81D0AB7F70C049E5BBB1" );
    removedynamicspawnarea( var_0, var_1 );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self waittill( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    thread removespawnareaondeathdisconnect( var_0, var_1 );
}

evaluatesquadspawn()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A2BF0CF1C504995E3ABF99435772" );
    self notify( "_encstr_B75B1309C327A930CEE4432709336865073B01F3EA" );
    self endon( "_encstr_B75B1309C327A930CEE4432709336865073B01F3EA" );
    var_0 = level.availablespawnlocations[self.team].size;
    var_1 = [];
    var_1[0] = tablelookuprownum( "_encstr_A4731DB8D31D3FD3679FD85E65BBB9E733AA3028B826712D3FA457E87BFF83", 0, "_encstr_B275082F0365CABC29CB" );
    var_1[1] = tablelookuprownum( "_encstr_A4731DB8D31D3FD3679FD85E65BBB9E733AA3028B826712D3FA457E87BFF83", 0, "_encstr_8075085B43D5F76F81E3" );
    var_1[2] = tablelookuprownum( "_encstr_A4731DB8D31D3FD3679FD85E65BBB9E733AA3028B826712D3FA457E87BFF83", 0, "_encstr_8875086EB8D58523FA19" );
    var_1[3] = tablelookuprownum( "_encstr_A4731DB8D31D3FD3679FD85E65BBB9E733AA3028B826712D3FA457E87BFF83", 0, "_encstr_87750820ABE30349B7E3" );
    var_2 = tablelookuprownum( "_encstr_A4731DB8D31D3FD3679FD85E65BBB9E733AA3028B826712D3FA457E87BFF83", 0, "_encstr_97460D037BBFD74089349B8B246FB8" );
    var_3 = [];

    for ( var_4 = 0; var_4 < 4; var_4++ )
    {
        var_5 = spawnstruct();
        var_5.guid = undefined;
        var_5.entity = undefined;
        var_5.stack_patch_thread_leaf = undefined;
        var_3[var_4] = var_5;
    }

    var_6 = [];

    for ( var_4 = 0; var_4 < 4; var_4++ )
        var_6[var_4] = "_encstr_BA9B07DB4BABF62318" + var_4;

    for (;;)
    {
        var_7 = scripts\mp\menus::getsquadleader( self.team, self.squadindex );
        var_8 = level.squaddata[self.team][self.squadindex].players;

        for ( var_4 = 0; var_4 < 4; var_4++ )
        {
            if ( !isdefined( var_3[var_4].guid ) )
                continue;

            if ( !isdefined( var_8[var_4] ) || var_8[var_4].guid != var_3[var_4].guid )
            {
                thread refreshplayerspawnareaomnvars();
                return;
            }
        }

        for ( var_4 = 0; var_4 < 4; var_4++ )
        {
            if ( var_4 < var_8.size )
                var_9 = var_8[var_4];
            else
                var_9 = undefined;

            var_10 = var_6[var_4];
            updatesquadspawn( self.team, self.squadindex, var_10, var_9 );
        }

        var_11 = round_get_vehicles( self.team, self.squadindex );

        for ( var_4 = 0; var_4 < 4; var_4++ )
        {
            if ( var_4 < var_8.size )
                var_9 = var_8[var_4];
            else
                var_9 = undefined;

            var_12 = isdefined( var_9 ) && isdefined( var_7 ) && var_9 == var_7;

            if ( !var_12 && istrue( level.spawnsquadleaderonly ) )
                continue;

            var_10 = var_6[var_4];
            var_13 = var_11[var_10];
            var_14 = isdefined( var_9 ) && isdefined( var_9.vehicle ) && istrue( var_9.vehicle.israllypointvehicle );

            if ( isdefined( var_9 ) && self != var_9 && issquadspawnable( var_9 ) && !istrue( var_14 ) )
            {
                var_15 = istrue( var_9.start_reach_icbm_launch );
                var_16 = var_1[var_4];

                if ( var_15 )
                    var_16 = var_16 + 128;

                if ( var_12 )
                    var_16 = var_16 + 256;

                if ( isdefined( var_9.vehicle ) )
                {
                    var_16 = var_16 + 512;

                    if ( scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getavailablevehicleseats( var_9.vehicle ).size == 0 || !istrue( scripts\cp_mp\vehicles\vehicle_interact::vehicle_interact_vehiclecanbeused( var_9.vehicle ) ) )
                        var_16 = var_16 + 1024;

                    if ( var_9.vehicle.vehiclename == "_encstr_BC8F0CED4311BB6CA9F19BBFB0A1" || var_9.vehicle.vehiclename == "_encstr_A4E90F635A473A63B2BEC4D2E48CBEAD9D" )
                        var_16 = var_16 + 4096;
                }

                var_16 = var_16 + ( var_9.pers["_encstr_9B3E1132C34089A2791367430B8E38CEB02968"] << 13 );

                if ( !isdefined( var_3[var_4].guid ) )
                    var_3[var_4].guid = var_9.guid;

                if ( !isdefined( var_3[var_4].entity ) && isdefined( var_13 ) && isdefined( var_13.dynamicent ) )
                {
                    var_3[var_4].entity = var_13.dynamicent;
                    self setclientomnvar( "_encstr_B436152344410B45EB913F19F14C4DA85DDDDC375983CF" + ( var_0 + var_4 ), var_13.dynamicent );
                }

                if ( !isdefined( var_3[var_4].stack_patch_thread_leaf ) || var_3[var_4].stack_patch_thread_leaf != var_16 )
                {
                    var_3[var_4].stack_patch_thread_leaf = var_16;
                    self setclientomnvar( "_encstr_AFCB11ABD2D7477BB5FAE6072CBBB9EB4B8CEB" + ( var_0 + var_4 ), var_16 );
                }

                continue;
            }

            if ( isdefined( var_3[var_4].entity ) )
            {
                var_3[var_4].entity = undefined;
                self setclientomnvar( "_encstr_B436152344410B45EB913F19F14C4DA85DDDDC375983CF" + ( var_0 + var_4 ), undefined );
            }

            if ( isdefined( var_3[var_4].stack_patch_thread_leaf ) && var_3[var_4].stack_patch_thread_leaf != -1 )
            {
                var_3[var_4].stack_patch_thread_leaf = -1;
                self setclientomnvar( "_encstr_AFCB11ABD2D7477BB5FAE6072CBBB9EB4B8CEB" + ( var_0 + var_4 ), -1 );
            }
        }

        waitframe();
    }
}

handlerespawnselection( var_0, var_1 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_2 = undefined;

    if ( !isdefined( var_2 ) )
    {
        if ( istrue( level.usec130spawnfirstonly ) && istrue( level.usec130spawn ) && !istrue( self.spawnedusingc130 ) && isdefined( level.spawnc130[self.team] ) )
            var_2 = 1;
        else if ( istrue( level.usesquadspawn ) )
            var_2 = 0;
        else if ( istrue( level.usespawnselection ) )
            var_2 = 2;
        else if ( istrue( level.usec130spawn ) )
            var_2 = 1;
        else
            var_2 = 3;
    }

    var_3 = gettime();
    var_4 = 0;

    while ( !var_4 )
    {
        var_5 = gettime();
        var_6 = ( var_3 + var_1 * 1000 - var_5 ) / 1000;

        switch ( var_2 )
        {
            case 0:
                self.squadspawnconfirmed = 0;
                self.squadspawnaborted = 0;

                if ( !isai( self ) )
                    thread handlesquadspawnabort();

                if ( !var_0 )
                    thread scripts\mp\playerlogic::respawn_asspectator( self.origin + ( 0, 0, 60 ), self.angles );

                var_0 = 1;
                var_7 = scripts\engine\utility::ter_op( isdefined( self.spawnselectedsquadmate ), self.spawnselectedsquadmate, 0 );

                if ( thread cyclevalidsquadspectate( var_7, 1 ) )
                {
                    if ( !isai( self ) )
                    {
                        var_8 = handlesquadspawnconfirm( var_6 );

                        if ( !istrue( var_8 ) )
                            self.squadspawnaborted = 1;
                        else
                            self.squadspawnconfirmed = 1;
                    }
                    else
                    {
                        timeuntilspawnmessaging( var_1, 5 );

                        if ( scripts\engine\utility::cointoss() )
                            self.squadspawnconfirmed = 1;
                        else
                            self.squadspawnaborted = 1;
                    }
                }
                else
                    self.squadspawnaborted = 1;

                if ( self.squadspawnaborted )
                {
                    self.forcespectatorclient = -1;

                    if ( istrue( level.usec130spawn ) )
                        var_2 = 1;
                    else if ( istrue( level.usespawnselection ) )
                        var_2 = 2;
                    else
                        var_2 = 3;
                }
                else
                    var_4 = 1;

                break;
            case 1:
                thread scripts\mp\spawncamera::startspawncamera();
                var_9 = thread scripts\mp\spawncamera::getspawncamerawaittime();

                if ( !isdefined( var_9 ) )
                    var_9 = 0;

                if ( level.usec130spawnfirstonly )
                    self.spawnedusingc130 = 1;

                spawntoc130();
                var_4 = 1;
                break;
            case 2:
                var_10 = scripts\mp\flags::gameflag( "_encstr_B87F0F4428EDB244C6889FF328BE123BA5" ) && !istrue( scripts\mp\flags::gameflag( "_encstr_A20D0EF9B8412F9D3FE0337AF0B117D3" ) );

                if ( scripts\mp\utility\game::getgametype() == "_encstr_BD19047616EB" && !var_10 && !scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) )
                {
                    var_11 = _encstr_8CD91D80976A38F14BDA6841F21617E1AD27A358431533172282B1F80F8B67::getmissedinfilcamerapositions( self.team );
                    var_12 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_11.startorigin );
                    var_12 setmodel( "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
                    var_12.angles = var_11.startangles;
                    self cameralinkto( var_12, "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
                    var_12 moveto( var_11.endorigin, 18 );
                    var_12 rotateto( var_11.endangles, 18 );
                    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );
                    self cameraunlink();
                    self.spawncameratime = 0.5;
                    thread scripts\mp\spawncamera::startspawncamera( 0.0, 0.5, 0.5 );
                }
                else
                {
                    self.spawncameratime = 0.5;
                    thread scripts\mp\spawncamera::startspawncamera( 0.0, 0.5, 0.5 );
                }

                var_9 = thread scripts\mp\spawncamera::getspawncamerawaittime();

                if ( !isdefined( var_9 ) )
                    var_9 = 0;

                waitforspawnselection( var_6 + var_9 );

                if ( isdefined( self.selectedspawnarea ) )
                    var_4 = 1;

                break;
            case 3:
                thread scripts\mp\spawncamera::startspawncamera();
                var_9 = thread scripts\mp\spawncamera::getspawncamerawaittime();

                if ( !isdefined( var_9 ) )
                    var_9 = 0;

                timeuntilspawnmessaging( var_6 + var_9, 9 );
                var_4 = 1;
                break;
        }
    }

    if ( needsbuttontorespawn() )
    {
        if ( !istrue( self.waitingtoselectclass ) )
            scripts\mp\utility\lower_message::setlowermessageomnvar( 1 );

        if ( !var_0 )
            thread scripts\mp\playerlogic::respawn_asspectator( self.origin + ( 0, 0, 60 ), self.angles );

        var_0 = 1;
        waitrespawnbutton();
    }

    thread scripts\mp\spawncamera::endspawncamera();
}

handlesquadspawnabort()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self notify( "_encstr_8F0916B8EA65C9889F43AFA549A357A90E137389B27D5D43" );
    self endon( "_encstr_8F0916B8EA65C9889F43AFA549A357A90E137389B27D5D43" );
    self notifyonplayercommand( "_encstr_A9151253CF683BA71B5F3B52A3605737D859F7CC", "_encstr_A8E308ACE6E82C73B1CA" );
    self waittill( "_encstr_A9151253CF683BA71B5F3B52A3605737D859F7CC" );
    self.forcespectatorclient = -1;
    self.squadspawnaborted = 1;
    self notify( "_encstr_B4CD1250170332E2384B13A1D4BDF9E9A6389621" );
}

handlesquadspawncycle()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A2BF0CF1C504995E3ABF99435772" );
    self endon( "_encstr_B4CD1250170332E2384B13A1D4BDF9E9A6389621" );
    self notify( "_encstr_874216C8D27B8DD8EFE34B4BF997194FEF2B8055BB9731D8" );
    self endon( "_encstr_874216C8D27B8DD8EFE34B4BF997194FEF2B8055BB9731D8" );
    self notifyonplayercommand( "_encstr_97A709E759C678A553FA6B", "_encstr_A44609F657CA42130156DF" );

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_143AD( "_encstr_97A709E759C678A553FA6B", "_encstr_B8A709C697C6C6599359EC" );

        if ( isdefined( var_0 ) )
        {
            var_1 = self getspectatingplayer();

            if ( var_0 == "_encstr_97A709E759C678A553FA6B" )
                thread cyclevalidsquadspectate( var_1.pers["_encstr_9B3E1132C34089A2791367430B8E38CEB02968"], 1 );
            else if ( var_0 == "_encstr_B8A709C697C6C6599359EC" )
                thread cyclevalidsquadspectate( var_1.pers["_encstr_9B3E1132C34089A2791367430B8E38CEB02968"], 0 );
        }
    }
}

handlesquadspawnconfirm( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A2BF0CF1C504995E3ABF99435772" );
    self endon( "_encstr_B4CD1250170332E2384B13A1D4BDF9E9A6389621" );
    timeuntilspawnmessaging( var_0, 9 );
    scripts\mp\utility\lower_message::setlowermessageomnvar( 35 );
    self notifyonplayercommand( "_encstr_87BC10DD5DEAB09FF7C2F679FABBC4A042BD", "_encstr_88410B02AB0E5F15AFB8A883DC" );
    self waittill( "_encstr_87BC10DD5DEAB09FF7C2F679FABBC4A042BD" );
    return 1;
}

cyclevalidsquadspectate( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A2BF0CF1C504995E3ABF99435772" );
    self endon( "_encstr_B4CD1250170332E2384B13A1D4BDF9E9A6389621" );
    self notify( "_encstr_A8AE18726AF6FB17E19B0C01B9E1DA472F2189CB715ED34E888B" );
    self endon( "_encstr_A8AE18726AF6FB17E19B0C01B9E1DA472F2189CB715ED34E888B" );
    var_2 = level.squaddata[self.team][self.squadindex].players;
    var_3 = var_0;
    var_4 = scripts\engine\utility::ter_op( var_1, 1, -1 );

    for ( var_5 = 0; var_5 < var_2.size; var_5++ )
    {
        if ( iscurrentspectatetarget( var_2[var_3] ) || !issquadspawnable( var_2[var_3] ) )
        {
            var_3 = var_3 + var_4;

            if ( var_3 == var_2.size )
                var_3 = 0;

            if ( var_3 == -1 )
                var_3 = var_2.size - 1;

            continue;
        }

        thread monitorsquadspectator( var_2[var_3] );
        return 1;
    }

    return 0;
}

iscurrentspectatetarget( var_0 )
{
    if ( !isdefined( self.forcespectatorclient ) )
        return 0;

    var_1 = self getspectatingplayer();

    if ( !isdefined( var_1 ) )
        return 0;

    return var_0 == var_1;
}

issquadspawnable( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !scripts\mp\utility\player::isreallyalive( var_0 ) )
        return 0;

    if ( istrue( var_0.inspawncamera ) )
        return 0;

    if ( var_0 isskydiving() )
        return 0;

    if ( var_0 scripts\mp\utility\player::isusingremote() )
        return 0;

    return 1;
}

updatefobspawnsindanger()
{
    thread trial_patch_finished();

    if ( getdvarint( "_encstr_94681637C6E4BEE68B5D0B237DE60E85DDE6EB235989BAEC", 0 ) == 1 )
        thread scripts\mp\spawnscoring::_id_13747();
}

trial_patch_finished()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        if ( issquadspawnable( self ) )
            self.start_reach_icbm_launch = issquadmateindanger( self );

        waitframe();
    }
}

issquadmateindanger( var_0 )
{
    var_1 = gettime();

    if ( isdefined( var_0 ) && ( isdefined( var_0.lastdamagetime ) && var_0.lastdamagetime + 5000 > var_1 ) || isdefined( var_0.lasttimedamaged ) && var_0.lasttimedamaged + 5000 > var_1 )
        return 1;

    if ( var_0 isonladder() )
        return 1;

    var_0 scripts\mp\battlechatter_mp::validaterecentattackers();

    if ( isdefined( var_0.recentattackers ) && var_0.recentattackers.size > 0 )
        return 1;

    if ( isdefined( var_0.watch_for_players_touching_ground ) && var_0.watch_for_players_touching_ground + 3000 > var_1 )
        return 1;

    if ( isdefined( var_0.watch_for_players_touching_ground ) && isdefined( var_0.watch_for_players_regrouping_to_plane ) && var_0.watch_for_players_touching_ground > var_0.watch_for_players_regrouping_to_plane || isdefined( var_0.watch_for_players_touching_ground ) && !isdefined( var_0.watch_for_players_regrouping_to_plane ) )
        return 1;

    var_2 = var_0 getcurrentusereloadconfig( 384, 100, 1 );

    if ( isdefined( var_2 ) )
        return 1;

    if ( isdefined( var_0.vehicle ) )
    {
        if ( istrue( var_0.vehicle.flarecooldown ) )
            return 1;

        if ( istrue( scripts\cp_mp\utility\weapon_utility::islockedonto( var_0.vehicle ) ) )
            return 1;
    }

    if ( isdefined( var_0 ) && var_0 scripts\mp\outofbounds::istouchingoobtrigger() )
        return 1;

    if ( getdvarint( "_encstr_B25C17373FCE0183604B86CF2658C8BA244DFFFB8BFE8A4DB0", 0 ) == 1 )
    {
        var_3 = var_0 ismlgfreecamenabled( 1, var_0.origin );
        var_3 = scripts\mp\spawnlogic::getspawnbucketfromstring( var_3 );

        if ( var_3 >= 2 )
            return 1;
    }

    if ( isdefined( var_0 ) && isdefined( var_0._id_11EAC ) && var_0._id_11EAC + 1000 > var_1 )
        return 1;

    return 0;
}

monitorsquadspectator( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A2BF0CF1C504995E3ABF99435772" );
    self endon( "_encstr_B4CD1250170332E2384B13A1D4BDF9E9A6389621" );
    self notify( "_encstr_80D8164A70A807BBD055EBB123D8C7A7CFA92263197DE7F2" );
    self endon( "_encstr_80D8164A70A807BBD055EBB123D8C7A7CFA92263197DE7F2" );
    var_1 = var_0.pers["_encstr_9B3E1132C34089A2791367430B8E38CEB02968"];
    self.forcespectatorclient = var_0 getentitynumber();
    self forcethirdpersonwhenspectating();
    thread handlesquadspawncycle();

    while ( issquadspawnable( var_0 ) )
    {
        if ( issquadmateindanger( var_0 ) )
            self setclientomnvar( "_encstr_A43016EFEB980341800907C16380999BE86F4F0F7BBE6A1C", 1 );
        else
            self setclientomnvar( "_encstr_A43016EFEB980341800907C16380999BE86F4F0F7BBE6A1C", 0 );

        self.squadspectatepos = var_0.origin + anglestoforward( var_0.angles ) * -80 + ( 0, 0, 64 );
        self.squadspectateang = var_0.angles;
        waitframe();
    }

    if ( !thread cyclevalidsquadspectate( var_1, 1 ) )
    {
        self.squadspawnaborted = 0;
        self notify( "_encstr_B4CD1250170332E2384B13A1D4BDF9E9A6389621" );
    }
}

spawntoc130()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    while ( istrue( level.usec130spawn ) && !isdefined( level.spawnc130 ) )
        waitframe();

    if ( !istrue( level.usec130spawn ) || !isdefined( level.spawnc130[self.team] ) )
    {
        wait 1.5;
        return;
    }

    if ( !istrue( level.usec130spawnfirstonly ) && isdefined( level.timeuntilnextc130 ) && level.timeuntilnextc130[self.team] - gettime() <= ( level.flighttime + level.timebetweenc130passes ) * 1000 )
        scripts\mp\utility\lower_message::setlowermessageomnvar( 29, int( level.timeuntilnextc130[self.team] ) );
    else
        scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );

    thread _encstr_8CD91D80976A38F14BDA6841F21617E1AD27A358431533172282B1F80F8B67::spawnplayertoc130();

    if ( isdefined( level.spawnc130[self.team] ) )
        self waittill( "_encstr_B8210BE349F33AE983C1617DEB" );
}

needsbuttontorespawn()
{
    if ( scripts\mp\tweakables::gettweakablevalue( "_encstr_AAB0079B102F47FF38", "_encstr_BD6B0D67EFF3E67770BD6280530775" ) != 0 )
        return 0;

    if ( !self.hasspawned )
        return 0;

    var_0 = getdvarint( "_encstr_A61805573F9318" + scripts\mp\utility\game::getgametype() + "_encstr_939F12F5BB58EC5927566E07C2EE9B46951BC2CB" ) > 0;

    if ( var_0 )
        return 0;

    if ( self.wantsafespawn )
        return 0;

    return 1;
}

waitrespawnbutton()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A2BF0CF1C504995E3ABF99435772" );

    for (;;)
    {
        if ( self usebuttonpressed() )
            break;

        wait 0.05;
    }
}

timeuntilspawnmessaging( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    if ( var_0 > 0 )
    {
        if ( !isdefined( var_1 ) )
            var_1 = 9;

        scripts\mp\utility\lower_message::setlowermessageomnvar( var_1, int( gettime() + var_0 * 1000 ) );
        scripts\engine\utility::_id_143BF( var_0, "_encstr_AFD50C2238A5E6AFDE965841ACC0" );
    }
}

managesquadcameraposition( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A2BF0CF1C504995E3ABF99435772" );
    self endon( "_encstr_9BEE1C9911B691D0A36BBE2343BF9450C16E272FAD1A492E2B6290A97A83" );
    self notify( "_encstr_A3781AB802ABBF305F531B1B89C7C9770FFAD3A179D7EE083371DF35" );
    self endon( "_encstr_A3781AB802ABBF305F531B1B89C7C9770FFAD3A179D7EE083371DF35" );
    var_1 = undefined;

    if ( var_0 == "_encstr_97460D037BBFD74089349B8B246FB8" )
        var_1 = level.squaddata[self.team][self.squadindex].squadleaderindex;
    else
        var_1 = int( getsubstr( var_0, var_0.size - 1, var_0.size ) );

    var_2 = undefined;

    if ( isdefined( level.squaddata[self.team] ) && isdefined( level.squaddata[self.team][self.squadindex] ) && isdefined( level.squaddata[self.team][self.squadindex].players[var_1] ) )
        var_2 = level.squaddata[self.team][self.squadindex].players[var_1];

    var_3 = level.spawnselectionteamforward[self.team];

    while ( isdefined( self.spawncameraent ) && isdefined( var_2 ) )
    {
        var_4 = [];
        var_5 = [];

        if ( istrue( level.usestaticspawnselectioncamera ) )
        {
            var_6 = getstaticcameraposition( self.team );
            var_4 = var_6.origin;
            var_5 = var_6.angles;
        }
        else
        {
            var_4 = var_2.origin + var_3 * -8500 + ( 0, 0, 7000 );
            var_7 = vectornormalize( var_2.origin - var_4 );
            var_5 = scripts\mp\utility\script::vectortoanglessafe( var_7, ( 0, 0, 1 ) );

            if ( istrue( level.useunifiedspawnselectioncameraheight ) )
            {
                var_8 = getunifedspawnselectioncameraheight();
                var_4 = ( var_4[0], var_4[1], var_8 );
            }

            var_4 = var_4 + _encstr_8CD91D80976A38F14BDA6841F21617E1AD27A358431533172282B1F80F8B67::calculatecameraoffset( self.team, var_2.origin );
        }

        self.spawncameratargetpos = var_4;
        self.spawncameratargetang = var_5;
        self.spawncameraent moveto( var_4, 0.25, 0.05, 0.2 );
        self.spawncameraent rotateto( var_5, 0.25, 0.05, 0.2 );
        waitframe();
    }
}

managevehiclecameraposition( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A2BF0CF1C504995E3ABF99435772" );
    self endon( "_encstr_9BEE1C9911B691D0A36BBE2343BF9450C16E272FAD1A492E2B6290A97A83" );
    self notify( "_encstr_B8A91C5B16B916B32BB2ACA15AB1D895D0B0DA2BC95814B7E65A3A5AEDB9" );
    self endon( "_encstr_B8A91C5B16B916B32BB2ACA15AB1D895D0B0DA2BC95814B7E65A3A5AEDB9" );
    var_1 = int( getsubstr( var_0, var_0.size - 1, var_0.size ) );
    var_2 = level.spawnselectionlocations[var_0][self.team].dynamicent;
    var_3 = level.spawnselectionteamforward[self.team];
    var_4 = 0;

    while ( isdefined( self.spawncameraent ) && isdefined( var_2 ) && !istrue( var_2.isdestroyed ) )
    {
        var_5 = [];
        var_6 = [];

        if ( istrue( level.usestaticspawnselectioncamera ) )
        {
            var_7 = getstaticcameraposition( self.team );
            var_5 = var_7.origin;
            var_6 = var_7.angles;
        }
        else
        {
            var_5 = var_2.origin + var_3 * -8500 + ( 0, 0, 7000 );

            if ( istrue( level.useunifiedspawnselectioncameraheight ) )
            {
                var_8 = getunifedspawnselectioncameraheight();
                var_5 = ( var_5[0], var_5[1], var_8 );
            }

            var_9 = level.spawnselectionlocations[var_0][self.team].anchorentity.origin;
            var_10 = var_9 + var_3 * -8500 + ( 0, 0, 7000 );
            var_11 = vectornormalize( var_9 - var_10 );
            var_6 = scripts\mp\utility\script::vectortoanglessafe( var_11, ( 0, 0, 1 ) );
            var_5 = var_5 + _encstr_8CD91D80976A38F14BDA6841F21617E1AD27A358431533172282B1F80F8B67::calculatecameraoffset( self.team, var_9 );
        }

        self.spawncameratargetpos = var_5;
        self.spawncameratargetang = var_6;

        if ( !isdefined( self.spawncameraendtime ) || gettime() > self.spawncameraendtime )
        {
            self.spawncameraent moveto( var_5, 0.25, 0.05, 0.2 );
            self.spawncameraent rotateto( var_6, 0.25, 0.05, 0.2 );
        }
        else if ( !var_4 )
        {
            var_4 = 1;
            self.spawncameraent moveto( var_5, self.spawncameratime, self.spawncameratime * 0.3, self.spawncameratime * 0.4 );
            self.spawncameraent rotateto( var_6, self.spawncameratime, self.spawncameratime * 0.3, self.spawncameratime * 0.4 );
        }

        waitframe();
    }
}

_id_11AB3( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A2BF0CF1C504995E3ABF99435772" );
    self endon( "_encstr_9BEE1C9911B691D0A36BBE2343BF9450C16E272FAD1A492E2B6290A97A83" );
    self notify( "_encstr_B22616F2CFD5E7DF6F3D8528C789F40DF425A8C03C1003EC" );
    self endon( "_encstr_B22616F2CFD5E7DF6F3D8528C789F40DF425A8C03C1003EC" );
    var_1 = level.spawnselectionlocations[var_0][self.team].dynamicent;
    self setclientomnvar( "_encstr_87FF1AD54BBEE8DBDAF5B35943AF34950BC6A3347DC12BC93656DCE8", 0 );
    waitframe();
    var_2 = undefined;

    while ( isdefined( var_1 ) )
    {
        var_3 = int( clamp( var_1.health / var_1.maxhealth * 100, 0, 100 ) );

        if ( var_3 < 0 )
        {

        }

        if ( !isdefined( var_2 ) || var_2 != var_3 )
        {
            self setclientomnvar( "_encstr_87FF1AD54BBEE8DBDAF5B35943AF34950BC6A3347DC12BC93656DCE8", int( var_3 ) );
            var_2 = var_3;
        }

        waitframe();
    }
}

getclosestavailablespawnlocation()
{
    var_0 = undefined;
    var_1 = undefined;

    if ( !scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) && scripts\mp\utility\game::getgametype() == "_encstr_BD19047616EB" || !isdefined( self.hasvisitedgwspawnselection ) )
    {
        if ( self.team == "_encstr_BA840579D3F7F6" )
            var_1 = "_encstr_9C6B0EAF178968E0DBB96932A2E73B99";
        else
            var_1 = "_encstr_A4B9109F170167BF36E602DAA89BAF9A11C3";

        self.hasvisitedgwspawnselection = 1;
    }
    else
    {
        var_2 = 0;

        foreach ( var_4 in level.availablespawnlocations[self.team] )
        {
            var_5 = distancesquared( self.origin, level.spawnselectionlocations[var_4][self.team].anchorentity.origin );

            if ( var_4 == "_encstr_A90D0850B737A9BF7A81" + self.team + "_encstr_BA0703A843" )
            {
                if ( var_5 < 4194304 )
                {
                    var_0 = var_5;
                    var_1 = var_4;
                    break;
                }
            }

            if ( !isdefined( var_0 ) || var_5 < var_0 )
            {
                var_0 = var_5;
                var_1 = var_4;
            }
        }

        if ( isdefined( level.squadspawnselectionlocations ) && isdefined( level.squadspawnselectionlocations[self.team][self.squadindex] ) )
        {
            var_7 = round_get_vehicles( self.team, self.squadindex );

            foreach ( var_9 in var_7 )
            {
                if ( var_9.dynamicent == self )
                    continue;

                var_5 = distancesquared( self.origin, var_9.dynamicent.origin );

                if ( var_5 < var_0 )
                {
                    var_0 = var_5;
                    var_1 = var_9.typeref;
                }
            }
        }
    }

    if ( issubstr( var_1, "_encstr_BC5008F4B573F81FC5B2" ) )
    {

    }

    if ( isdefined( var_1 ) )
    {
        if ( !issubstr( var_1, "_encstr_A295063B80E35E93" ) && !issubstr( var_1, "_encstr_BC5008F4B573F81FC5B2" ) && !issubstr( var_1, "_encstr_BA0703A843" ) )
            var_11 = var_1 + "_encstr_984C028E" + level.localeid;
        else
            var_11 = var_1;

        var_12 = tablelookuprownum( "_encstr_A4731DB8D31D3FD3679FD85E65BBB9E733AA3028B826712D3FA457E87BFF83", 0, var_11 );
        self setclientomnvar( "_encstr_8AB41ABB4C47B8A8F257D1DDD72BE31805A266F3F7ACF856BBB7F79D", var_12 );
        self.forcedspawncameraref = var_1;
    }
    else
    {
        self setclientomnvar( "_encstr_8AB41ABB4C47B8A8F257D1DDD72BE31805A266F3F7ACF856BBB7F79D", -1 );
        self.forcedspawncameraref = undefined;
    }
}

getstaticcameraposition( var_0 )
{
    var_1 = spawnstruct();

    if ( level.mapname == "_encstr_B3A80F976B315198DBB2A37FE6B508EB5B" )
    {
        switch ( level.localeid )
        {
            case "_encstr_8934097830FBB305B537B2":
                if ( var_0 == "_encstr_BA840579D3F7F6" )
                {
                    var_1.origin = ( 2094, -1804, 2763 );
                    var_1.angles = ( 54, 40, 0 );
                }
                else
                {
                    var_1.origin = ( 2315, 1956, 2763 );
                    var_1.angles = ( 54, 296, 0 );
                }

                break;
            case "_encstr_B63409D8DBB1588DB2AFE6":
                if ( var_0 == "_encstr_BA840579D3F7F6" )
                {
                    var_1.origin = ( 5556, -1368, 2464 );
                    var_1.angles = ( 56, 42, 0 );
                }
                else
                {
                    var_1.origin = ( 5636, 1630, 2446 );
                    var_1.angles = ( 56, 307, 0 );
                }

                break;
            default:
                if ( var_0 == "_encstr_BA840579D3F7F6" )
                {
                    var_1.origin = ( 0, 0, 0 );
                    var_1.angles = ( 0, 0, 0 );
                }
                else
                {
                    var_1.origin = ( 0, 0, 0 );
                    var_1.angles = ( 0, 0, 0 );
                }

                break;
        }
    }
    else
    {
        switch ( level.localeid )
        {
            case "_encstr_8134093DC83841DAA5AFDE":
                if ( var_0 == "_encstr_BA840579D3F7F6" )
                {
                    var_1.origin = ( 30965, 28984, 12785 );
                    var_1.angles = ( 53, 82, 0 );
                }
                else
                {
                    var_1.origin = ( 35294, 53430, 12785 );
                    var_1.angles = ( 50, 260, 0 );
                }

                break;
            case "_encstr_8934097830FBB305B537B2":
                if ( var_0 == "_encstr_BA840579D3F7F6" )
                {
                    var_1.origin = ( 35294, 53430, 12785 );
                    var_1.angles = ( 50, 260, 0 );
                }
                else
                {
                    var_1.origin = ( 30965, 28984, 12785 );
                    var_1.angles = ( 53, 82, 0 );
                }

                break;
            case "_encstr_B63409D8DBB1588DB2AFE6":
                if ( var_0 == "_encstr_BA840579D3F7F6" )
                {
                    var_1.origin = ( 0, 0, 0 );
                    var_1.angles = ( 0, 0, 0 );
                }
                else
                {
                    var_1.origin = ( 0, 0, 0 );
                    var_1.angles = ( 0, 0, 0 );
                }

                break;
            default:
                if ( var_0 == "_encstr_BA840579D3F7F6" )
                {
                    var_1.origin = ( 0, 0, 0 );
                    var_1.angles = ( 0, 0, 0 );
                }
                else
                {
                    var_1.origin = ( 0, 0, 0 );
                    var_1.angles = ( 0, 0, 0 );
                }

                break;
        }
    }

    return var_1;
}

getunifedspawnselectioncameraheight()
{
    if ( level.mapname == "_encstr_B3A80F976B315198DBB2A37FE6B508EB5B" )
    {
        switch ( level.localeid )
        {
            case "_encstr_8934097830FBB305B537B2":
                return 7000;
            case "_encstr_B63409D8DBB1588DB2AFE6":
                return 7000;
            case "_encstr_8A3409C6F6D82C36B2F5C1":
                return 7000;
            case "_encstr_A6340973B8A9A90A1B7890":
                return 7000;
            default:
                return 7000;
        }
    }
    else
    {
        switch ( level.localeid )
        {
            case "_encstr_8134093DC83841DAA5AFDE":
                return 7000;
            case "_encstr_8934097830FBB305B537B2":
                return 8000;
            case "_encstr_B63409D8DBB1588DB2AFE6":
                return 8000;
            case "_encstr_8A3409C6F6D82C36B2F5C1":
                return 8000;
            case "_encstr_A6340973B8A9A90A1B7890":
                return 8000;
            case "_encstr_A19F0AB9DF52D70815A15B43":
                return 7000;
            case "_encstr_B99F0A1045C3A891FACFDBAF":
                return 5000;
            default:
                return 7000;
        }
    }
}

_id_13FD9()
{
    level thread _id_13FDA();

    for (;;)
    {
        foreach ( var_1 in level.teamnamelist )
        {
            foreach ( var_3 in level.availablespawnlocations[var_1] )
            {
                var_4 = level.spawnselectionlocations[var_3][var_1];

                if ( isdefined( var_4.objectivekey ) )
                    var_4.start_reach_icbm_launch = isobjectiveindanger( var_4.objectivekey, var_1 );
            }
        }

        waitframe();
    }
}

_id_13FDA()
{
    for (;;)
    {
        foreach ( var_1 in level.teamnamelist )
        {
            var_2 = scripts\mp\utility\teams::getteamdata( var_1, "_encstr_8875080E3685E52B93B9" )[0];

            foreach ( var_4 in level.availablespawnlocations[var_1] )
            {
                if ( !issubstr( var_4, "_encstr_BA0703A843" ) && issubstr( var_4, "_encstr_BA1804D39776" ) )
                {
                    var_5 = 1;
                    var_6 = isdefined( level.spawnglobals.spawnsets[var_4 + "_encstr_8C1107F73B1E708D47" + var_1] );
                    var_7 = var_4 + "_encstr_984C028E" + var_1;
                    var_8 = undefined;

                    if ( var_6 )
                        var_8 = var_4 + "_encstr_8C1107F73B1E708D47" + var_1;

                    if ( isdefined( level.spawninfluencezones ) )
                    {
                        var_9 = undefined;
                        var_10 = getarraykeys( level.spawninfluencezones );

                        foreach ( var_12 in var_10 )
                        {
                            if ( var_12 == var_4 )
                            {
                                var_9 = level.spawninfluencezones[var_12];
                                break;
                            }
                        }

                        if ( isdefined( var_9 ) && var_9 isteamtouching( scripts\mp\utility\game::getotherteam( var_1 )[0] ) )
                            var_5 = 0;
                    }

                    var_14 = 0;

                    if ( isdefined( var_2 ) )
                    {
                        var_15 = undefined;
                        var_16 = undefined;

                        if ( var_5 )
                        {
                            scripts\mp\spawnlogic::activatespawnset( var_7, 1 );
                            var_15 = var_2 ismlgfreecamenabled();
                            var_15 = scripts\mp\spawnlogic::getspawnbucketfromstring( var_15 );
                        }

                        if ( var_6 )
                        {
                            scripts\mp\spawnlogic::activatespawnset( var_8, 1 );
                            var_16 = var_2 ismlgfreecamenabled();
                            var_16 = scripts\mp\spawnlogic::getspawnbucketfromstring( var_16 );
                        }

                        if ( var_5 && var_6 )
                            var_14 = var_15 >= 2 && var_16 >= 2;
                        else if ( var_5 && !var_6 )
                            var_14 = var_15 >= 2;
                        else if ( var_6 )
                            var_14 = var_16 >= 2;
                    }

                    var_17 = level.spawnselectionlocations[var_4][var_1].objectivekey;
                    level.objectives[var_17]._id_13686 = var_14;
                    level.objectives[var_17]._id_13687 = gettime();
                }
            }
        }

        wait 1.0;
    }
}

_id_1401D( var_0, var_1, var_2 )
{
    var_3 = level.spawnselectionlocations[var_0][var_2].objectivekey;

    if ( !isdefined( var_3 ) || !isdefined( level.objectives[var_3] ) || !isdefined( level.objectives[var_3]._id_13687 ) || level.objectives[var_3]._id_13687 == gettime() )
        return;

    var_4 = 1;
    var_5 = isdefined( level.spawnglobals.spawnsets[var_0 + "_encstr_8C1107F73B1E708D47" + var_2] );
    var_6 = var_0 + "_encstr_984C028E" + var_2;
    var_7 = undefined;

    if ( var_5 )
        var_7 = var_0 + "_encstr_8C1107F73B1E708D47" + var_2;

    if ( isdefined( level.spawninfluencezones ) )
    {
        var_8 = undefined;
        var_9 = getarraykeys( level.spawninfluencezones );

        foreach ( var_11 in var_9 )
        {
            if ( var_11 == var_0 )
            {
                var_8 = level.spawninfluencezones[var_11];
                break;
            }
        }

        if ( isdefined( var_8 ) && isdefined( var_8.numplayers ) && var_8.numplayers[scripts\mp\utility\game::getotherteam( var_2 )[0]] > 0 )
            var_4 = 0;
    }

    var_13 = 0;

    if ( isdefined( var_1 ) )
    {
        var_14 = undefined;
        var_15 = undefined;

        if ( var_4 )
        {
            scripts\mp\spawnlogic::activatespawnset( var_6, 1 );
            var_14 = var_1 ismlgfreecamenabled();
            var_14 = scripts\mp\spawnlogic::getspawnbucketfromstring( var_14 );
        }

        if ( var_5 )
        {
            scripts\mp\spawnlogic::activatespawnset( var_7, 1 );
            var_15 = var_1 ismlgfreecamenabled();
            var_15 = scripts\mp\spawnlogic::getspawnbucketfromstring( var_15 );
        }

        if ( var_4 && var_5 )
            var_13 = var_14 >= 2 && var_15 >= 2;
        else if ( var_4 && !var_5 )
            var_13 = var_14 >= 2;
        else if ( var_5 )
            var_13 = var_15 >= 2;
    }

    level.objectives[var_3]._id_13686 = var_13;
    level.objectives[var_3]._id_13687 = gettime();
}
