// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

shouldlogcodcasterclientmatchdata()
{
    return level.codcasterenabled;
}

canlogclient( var_0 )
{
    if ( isagent( var_0 ) )
        return 0;

    return var_0.clientid < level.maxlogclients;
}

createcodcastermatchdataforplayer( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level.codcastermatchdata.playerfields )
        var_1[var_3[0]] = var_3[1];

    return var_1;
}

removeplayerdataafterleavinggame( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 waittill( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    if ( !isdefined( level.codcastermatchdata.players[var_0.clientid] ) )
        return;

    level.codcastermatchdata.players[var_0.clientid] = undefined;
}

checkcodcasterplayerdataexists( var_0 )
{
    if ( !isdefined( level.codcastermatchdata.players[var_0.clientid] ) )
    {
        var_1 = createcodcastermatchdataforplayer( var_0 );
        level.codcastermatchdata.players[var_0.clientid] = var_1;
        thread removeplayerdataafterleavinggame( var_0 );
    }
}

init()
{
    setcodcasterclientmatchdata( "_encstr_971904B5B038", level.script );
    var_0 = spawnstruct();
    var_0.playerfields = [ [ "_encstr_94F30B19C2D6B0765988DE7356", 0 ], [ "_encstr_AD4F120B6780C2D5302B4CCC8DE00B2B669BC79F", 0 ], [ "_encstr_9FC90AB678C79BD1C55358A8", 0 ], [ "_encstr_80A90FB385DA95A35E072BA0DE96371DDC", 0 ] ];
    var_0.players = [];
    level.codcastermatchdata = var_0;
}

setddlfieldsforplayer( var_0 )
{
    foreach ( var_2 in level.codcastermatchdata.playerfields )
        setcodcasterclientmatchdata( "_encstr_8875080E3685E52B93B9", var_0.codcastermatchdataid, var_2[0], level.codcastermatchdata.players[var_0.clientid][var_2[0]] );

    setcodcasterclientmatchdata( "_encstr_8875080E3685E52B93B9", var_0.codcastermatchdataid, "_encstr_ADB5096317133E70F17585", var_0.name );
}

sendcodcastermatchdata()
{
    var_0 = 0;

    foreach ( var_2 in level.players )
    {
        checkcodcasterplayerdataexists( var_2 );
        var_2.codcastermatchdataid = var_0;
        setddlfieldsforplayer( var_2 );
        var_0++;
    }

    sendcodcasterclientmatchdata();
}

setcodcasterplayervalue( var_0, var_1, var_2 )
{
    if ( !canlogclient( var_0 ) )
        return;

    checkcodcasterplayerdataexists( var_0 );
    var_3 = level.codcastermatchdata.players[var_0.clientid];

    if ( !isdefined( var_3 ) || !isdefined( var_3[var_1] ) )
        return;

    level.codcastermatchdata.players[var_0.clientid][var_1] = var_2;

    if ( var_1 == "_encstr_94F30B19C2D6B0765988DE7356" )
        var_0 setcorpsemodel( var_2 );
}

getcodcasterplayervalue( var_0, var_1 )
{
    if ( !canlogclient( var_0 ) )
        return 0;

    checkcodcasterplayerdataexists( var_0 );
    var_2 = level.codcastermatchdata.players[var_0.clientid];

    if ( !isdefined( var_2 ) || !isdefined( var_2[var_1] ) )
        return 0;

    return var_2[var_1];
}
