// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

get_skill_from_index( var_0 )
{
    if ( scripts\common\utility::issp() )
        var_0 = var_0 + 1;

    return level.difficultytype[var_0];
}

apply_difficulty_settings_shared( var_0 )
{
    self.gs.misstimeconstant = get_difficultysetting_frac( "_encstr_8F9611B6B437B92AB46B59D07B37E68E58E68E", var_0 );
    self.gs.misstimedistancefactor = get_difficultysetting_frac( "_encstr_AD9517BD63BBF3CD707D657573684BC9F8B68AE567E7087A1E", var_0 );
    self.gs.double_grenades_allowed = get_difficultysetting_frac( "_encstr_BAA718F1876B0E202D99B9133F1E70B5C26F0F03632240B0452F", var_0 );
}

get_difficultysetting_frac( var_0, var_1 )
{
    return get_difficultysetting( var_0 ) * var_1;
}

get_difficultysetting( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = self.gameskill;

    return level.difficultysettings[var_0][get_skill_from_index( var_1 )];
}

get_difficultysetting_global( var_0 )
{
    return level.difficultysettings[var_0][get_skill_from_index( level.gameskill )];
}

always_pain()
{
    return 0;
}

pain_protection()
{
    if ( !pain_protection_check() )
        return 0;

    return randomint( 100 ) > 25;
}

pain_protection_check()
{
    if ( !isalive( self.enemy ) )
        return 0;

    if ( !isplayer( self.enemy ) )
        return 0;

    if ( !isalive( level.painai ) || level.painai.script != "_encstr_950D05F8FF11B8" )
        level.painai = self;

    if ( self == level.painai )
        return 0;

    var_0 = self.damageweapon;

    if ( !nullweapon( var_0 ) && var_0.isbolt )
        return 0;

    return 1;
}

set_accuracy_based_on_situation()
{
    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isasniper() && isalive( self.enemy ) )
    {
        setsniperaccuracy();
        return;
    }

    if ( isplayer( self.enemy ) )
    {
        resetmissdebouncetime();

        if ( self.a.misstime > gettime() )
        {
            self.accuracy = 0;
            return;
        }
    }

    if ( isdefined( self.script ) && self.script == "_encstr_B9A2058748FB5D" )
    {
        if ( scripts\engine\utility::actor_is3d() && isdefined( self._blackboard.lastusednode ) && ( self._blackboard.lastusednode.type == "_encstr_8F820B47A177BA3B68B13EE2AD" || self._blackboard.lastusednode.type == "_encstr_9F6B0802BF91511FFF74" ) )
            self.accuracy = self.baseaccuracy;
        else if ( _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::iscqbwalkingorfacingenemy() )
            self.accuracy = anim.walk_accuracy * self.baseaccuracy;
        else
            self.accuracy = anim.run_accuracy * self.baseaccuracy;

        return;
    }

    self.accuracy = self.baseaccuracy;

    if ( isdefined( self.isrambo ) && isdefined( self.ramboaccuracymult ) )
        self.accuracy = self.accuracy * self.ramboaccuracymult;
}

setsniperaccuracy()
{
    if ( !isdefined( self.snipershotcount ) )
    {
        self.snipershotcount = 0;
        self.sniperhitcount = 0;
    }

    if ( !isdefined( self.sniperaccuracyset ) )
    {
        self.sniperaccuracyset = 1;
        var_0 = get_skill_from_index( level.gameskill );
        var_1 = level.difficultysettings["_encstr_82941443182DEB7FC511223AA871B47B196EDBC9A129"][var_0];
        self.baseaccuracy = self.accuracy * var_1;
    }

    self.snipershotcount++;
    var_2 = level.gameskill;

    if ( isplayer( self.enemy ) )
        var_2 = self.enemy.gameskill;

    if ( shouldforcesnipermissshot() )
    {
        self.accuracy = 0;

        if ( var_2 > 0 || self.snipershotcount > 1 )
            self.lastmissedenemy = self.enemy;

        return;
    }

    if ( self.accuracy <= 10 )
        self.accuracy = ( 1 + 1 * self.sniperhitcount ) * self.baseaccuracy;

    self.sniperhitcount++;

    if ( var_2 < 1 && self.sniperhitcount == 1 )
        self.lastmissedenemy = undefined;
}

shouldforcesnipermissshot()
{
    if ( isdefined( self.neverforcesnipermissenemy ) && self.neverforcesnipermissenemy )
        return 0;

    if ( self.team == "_encstr_BC850785638DA59537" )
        return 0;

    if ( isdefined( self.lastmissedenemy ) && self.enemy == self.lastmissedenemy )
        return 0;

    if ( distancesquared( self.origin, self.enemy.origin ) > 250000 )
        return 0;

    return 1;
}

didsomethingotherthanshooting()
{
    self.a.misstimedebounce = 0;
}

resetmisstime()
{
    if ( !self isbadguy() )
        return;

    if ( nullweapon( self.weapon ) )
        return;

    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isasniper() )
        return;

    if ( istrue( self.loadout_giveweaponobj ) )
        return;

    if ( !_encstr_AA451C0AB940B9CBFD270637752B42A7C0C10652D058749256317A3777C6::usingautomaticweapon() && !_encstr_AA451C0AB940B9CBFD270637752B42A7C0C10652D058749256317A3777C6::usingsemiautoweapon() )
    {
        self.a.misstime = 0;
        return;
    }

    if ( !isalive( self.enemy ) )
        return;

    if ( !isplayer( self.enemy ) )
    {
        self.accuracy = self.baseaccuracy;
        return;
    }

    var_0 = distance( self.enemy.origin, self.origin );
    setmisstime( self.enemy.gs.misstimeconstant + var_0 * self.enemy.gs.misstimedistancefactor );
}

resetmissdebouncetime()
{
    self.a.misstimedebounce = gettime() + 3000;
}

setmisstime( var_0 )
{
    if ( self.a.misstimedebounce > gettime() )
        return;

    if ( var_0 > 0 )
        self.accuracy = 0;

    var_0 = var_0 * 1000;
    self.a.misstime = gettime() + var_0;
    self.a.accuracygrowthmultiplier = 1;
}

default_door_node_flashbang_frequency()
{
    if ( self.team == "_encstr_BC850785638DA59537" )
        self.doorflashchance = 0.6;

    if ( self isbadguy() )
    {
        if ( level.gameskill >= 2 )
            self.doorflashchance = 0.8;
        else
            self.doorflashchance = 0.6;
    }
}

grenadeawareness()
{
    if ( self.team == "_encstr_BC850785638DA59537" )
    {
        self.grenadeawareness = 0.9;
        self.grenadereturnthrowchance = 0.9;
        return;
    }

    if ( self isbadguy() )
    {
        self.grenadeawareness = 1;
        self.grenadereturnthrowchance = 0.2;
    }
}

map_is_early_in_the_game()
{
    if ( !isdefined( level.early_level ) )
        return 1;

    if ( isdefined( level.early_level[level.script] ) )
        return level.early_level[level.script];

    return 0;
}

set_early_level()
{
    level.early_level = [];
}
