// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.activetargetmarkergroups = [];

    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "_encstr_A47205E8C28D13", "_encstr_AD511E73730422C3080902454001147AE39B8B7FC1BF8B86C991BD9539502392" ) )
        [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "_encstr_A47205E8C28D13", "_encstr_AD511E73730422C3080902454001147AE39B8B7FC1BF8B86C991BD9539502392" ) ]]( ::_id_13A7C );
}

targetmarkergroup_on( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( level.activetargetmarkergroups.size >= 50 )
        return;

    if ( targetmarkergroup_getownedgroups( var_3 ) >= 2 )
        return;

    var_7 = deletetargetmarkergroup( var_0 );

    if ( targetmarkergroupexists( var_7 ) )
        return;

    addtargetmarkergroup( var_7, var_1, var_2, var_3, var_4, var_5, var_6 );
    return var_7;
}

targetmarkergroup_off( var_0 )
{
    if ( !targetmarkergroupexists( var_0 ) )
        return;

    removetargetmarkergroup( var_0 );
    targetmarkergroupaddentity( var_0 );
}

addtargetmarkergroup( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = spawnstruct();
    var_7.markerid = var_0;
    var_7.markerowner = var_3;
    var_7.friendlymarker = var_4;
    var_7.showntoents = [];
    var_7.showntoteams = [];
    var_7.markedents = [];
    var_7.markedentsinqueue = [];
    level.activetargetmarkergroups[level.activetargetmarkergroups.size] = var_7;
    level thread targetmarkergroup_handlemarkingfromqueue( var_7, var_0 );

    if ( isdefined( var_1 ) )
    {
        if ( isarray( var_1 ) )
        {
            foreach ( var_9 in var_1 )
            {
                if ( isplayer( var_9 ) )
                {
                    var_7.showntoents[var_7.showntoents.size] = var_9;
                    addteamtotargetmarkergroupmask( var_0, var_9 );
                    continue;
                }

                if ( isteam( var_9 ) )
                {
                    var_7.showntoteams[var_7.showntoteams.size] = var_9;
                    removeclientfromtargetmarkergroupmask( var_0, var_9 );
                }
            }
        }
        else if ( isplayer( var_1 ) )
        {
            var_7.showntoents[var_7.showntoents.size] = var_1;
            addteamtotargetmarkergroupmask( var_0, var_1 );
        }
        else if ( isteam( var_1 ) )
        {
            var_7.showntoteams[var_7.showntoteams.size] = var_1;
            removeclientfromtargetmarkergroupmask( var_0, var_1 );
        }
    }

    if ( isdefined( var_2 ) )
    {
        if ( isarray( var_2 ) )
        {
            foreach ( var_12 in var_2 )
                targetmarkergroup_markentity( var_12, var_0, var_6 );
        }
        else
            targetmarkergroup_markentity( var_2, var_0, var_6 );
    }

    if ( istrue( var_5 ) )
        level thread _id_13A7D( var_0, var_6 );

    if ( istrue( var_6 ) )
    {
        level thread targetmarkergroup_watchfornoscopeoutlineperkset( var_0 );
        level thread targetmarkergroup_watchfornoscopeoutlineperkunset( var_0 );
    }
}

removetargetmarkergroup( var_0 )
{
    var_1 = undefined;
    var_2 = [];

    foreach ( var_4 in level.activetargetmarkergroups )
    {
        if ( var_4.markerid == var_0 )
        {
            var_1 = var_4;
            continue;
        }

        var_2[var_2.size] = var_4;
    }

    if ( isdefined( var_1 ) )
        var_1 = undefined;

    level.activetargetmarkergroups = var_2;
    level notify( "_encstr_A8E91B4D3F7A18B3DDA72E438E92D0454327E3D5EF025E41E27D13DB39" + var_0 );
}

targetmarkergroupexists( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in level.activetargetmarkergroups )
    {
        if ( var_3.markerid == var_0 )
        {
            var_1 = 1;
            break;
        }
    }

    return var_1;
}

gettargetmarkergroup( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.activetargetmarkergroups )
    {
        if ( var_3.markerid == var_0 )
        {
            var_1 = var_3;
            break;
        }
    }

    return var_1;
}

_id_13A7D( var_0, var_1 )
{
    level endon( "_encstr_B7710C699237CD812F1EA1AB3C46" );
    level endon( "_encstr_A8E91B4D3F7A18B3DDA72E438E92D0454327E3D5EF025E41E27D13DB39" + var_0 );

    for (;;)
    {
        level waittill( "_encstr_9E7F0F83E0068BA8D3374EA2490F65E339", var_2 );

        if ( canbemarkedingroup( var_0, var_2 ) )
            targetmarkergroup_markentity( var_2, var_0, var_1 );
    }
}

targetmarkergroup_watchfornoscopeoutlineperkunset( var_0 )
{
    level endon( "_encstr_B7710C699237CD812F1EA1AB3C46" );
    level endon( "_encstr_A8E91B4D3F7A18B3DDA72E438E92D0454327E3D5EF025E41E27D13DB39" + var_0 );

    for (;;)
    {
        level waittill( "_encstr_BEF215BA9BCDB247BE37EDB9D8BDE0CAB75DE8D85AE62B", var_1 );

        if ( canbemarkedingroup( var_0, var_1 ) )
            targetmarkergroup_markentity( var_1, var_0 );
    }
}

targetmarkergroup_watchfornoscopeoutlineperkset( var_0 )
{
    level endon( "_encstr_B7710C699237CD812F1EA1AB3C46" );
    level endon( "_encstr_A8E91B4D3F7A18B3DDA72E438E92D0454327E3D5EF025E41E27D13DB39" + var_0 );

    for (;;)
    {
        level waittill( "_encstr_89EC13D36BA3711318DB8A32C3655FB358D17146F3", var_1 );

        if ( canbemarkedingroup( var_0, var_1 ) )
        {
            var_2 = var_1 getentitynumber();
            targetmarkergroup_unmarkentity( var_1, var_2, var_0 );
        }
    }
}

targetmarkergroup_markentity( var_0, var_1, var_2 )
{
    var_3 = gettargetmarkergroup( var_1 );
    var_4 = var_0 getentitynumber();

    if ( var_3.markedents.size >= 20 )
    {
        var_0 targetmarkergroup_addtomarkingqueue( var_3, var_1 );
        return;
    }

    if ( isdefined( var_0 ) && isplayer( var_0 ) )
    {
        if ( istrue( var_2 ) )
        {
            var_5 = var_3.markerowner;
            var_6 = isdefined( var_3.friendlymarker );
            var_7 = istrue( var_3.friendlymarker );

            if ( var_6 )
            {
                if ( !var_7 )
                {
                    if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "_encstr_B40D05E05627D6", "_encstr_80C90886B0370A95E4D6" ) )
                    {
                        if ( var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "_encstr_B40D05E05627D6", "_encstr_80C90886B0370A95E4D6" ) ]]( "_encstr_A636199B38CA8DA5851B47977D73F637C6BD8395BDEAA3639637CA" ) )
                            return;
                    }
                }
            }
            else if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "_encstr_B40D05E05627D6", "_encstr_80C90886B0370A95E4D6" ) )
            {
                if ( var_0 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "_encstr_B40D05E05627D6", "_encstr_80C90886B0370A95E4D6" ) ]]( "_encstr_A636199B38CA8DA5851B47977D73F637C6BD8395BDEAA3639637CA" ) )
                    return;
            }
        }
    }

    if ( !isdefined( var_3.markedents[var_4] ) )
    {
        var_3.markedents[var_4] = 1;
        targetmarkergroupremoveentity( var_1, var_0 );

        if ( isplayer( var_0 ) )
        {
            var_0 thread targetmarkergroup_removefromgroupaction( "_encstr_A3750609A5E61883", var_3 );
            var_0 thread targetmarkergroup_removefromgroupaction( "_encstr_8A820B4696CDB1ED3737AC1B3A", var_3 );
            var_0 thread targetmarkergroup_removefromgroupaction( "_encstr_B2170C4AD884CDC823B9DB9D9F42", var_3 );
        }
        else
            var_0 thread targetmarkergroup_removefromgroupaction( "_encstr_A3750609A5E61883", var_3 );
    }
}

targetmarkergroup_removefromgroupaction( var_0, var_1 )
{
    var_2 = self getentitynumber();
    var_1 endon( "_encstr_B4310DB29B47F539956BB7ECB223F5" + var_2 );
    level endon( "_encstr_A8E91B4D3F7A18B3DDA72E438E92D0454327E3D5EF025E41E27D13DB39" + var_1.markerid );
    self waittill( var_0 );
    targetmarkergroup_unmarkentity( self, var_2, var_1.markerid );
}

targetmarkergroup_addtomarkingqueue( var_0, var_1 )
{
    if ( !targetmarkergroupexists( var_1 ) )
        return;

    var_0.markedentsinqueue[var_0.markedentsinqueue.size] = self;
    thread targetmarkergroup_handleremovequeueondisconnect( var_0, var_1 );
}

targetmarkergroup_handleremovequeueondisconnect( var_0, var_1 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level endon( "_encstr_A8E91B4D3F7A18B3DDA72E438E92D0454327E3D5EF025E41E27D13DB39" + var_1 );
    self waittill( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    targetmarkergroup_removefrommarkingqueue( var_0, var_1 );
}

targetmarkergroup_removefrommarkingqueue( var_0, var_1 )
{
    if ( !targetmarkergroupexists( var_1 ) )
        return;

    var_2 = [];

    foreach ( var_4 in var_0.markedentsinqueue )
    {
        if ( var_4 == self )
            continue;

        var_2[var_2.size] = var_4;
    }

    var_0.markedentsinqueue = var_2;
}

targetmarkergroup_handlemarkingfromqueue( var_0, var_1 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level endon( "_encstr_A8E91B4D3F7A18B3DDA72E438E92D0454327E3D5EF025E41E27D13DB39" + var_1 );

    while ( targetmarkergroupexists( var_1 ) )
    {
        level waittill( "_encstr_98261E6FF8906F0B95FBA7CBC3CD018E4820E57930800AD2FDDD5F971560EBD0", var_2 );

        if ( var_2 != var_0 )
            continue;

        if ( var_0.markedentsinqueue.size == 0 )
            continue;

        var_3 = undefined;

        if ( !isdefined( var_0.markedentsinqueue[0] ) )
            continue;
        else
            var_3 = var_0.markedentsinqueue[0];

        var_4 = var_3 getentitynumber();

        if ( !isdefined( var_0.markedents[var_4] ) )
        {
            var_0.markedents[var_4] = 1;
            var_3 targetmarkergroup_removefrommarkingqueue( var_0, var_1 );
            targetmarkergroup_markentity( var_3, var_1 );
        }
    }
}

targetmarkergroup_unmarkentity( var_0, var_1, var_2 )
{
    var_3 = gettargetmarkergroup( var_2 );

    if ( isdefined( var_3 ) && isdefined( var_3.markedents[var_1] ) )
    {
        var_3.markedents[var_1] = undefined;

        if ( isdefined( var_0 ) )
            targetmarkergroupsetentitystate( var_2, var_0 );

        var_3 notify( "_encstr_B4310DB29B47F539956BB7ECB223F5" + var_1 );
        level notify( "_encstr_98261E6FF8906F0B95FBA7CBC3CD018E4820E57930800AD2FDDD5F971560EBD0", var_3 );
    }
}

targetmarkergroup_getownedgroups( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in level.activetargetmarkergroups )
    {
        if ( var_3.markerowner == var_0 )
            var_1++;
    }

    return var_1;
}

_id_13A7C()
{
    self setclientomnvar( "_encstr_957818956B3657CD1BC0E349106B020F294D3735F77B8F571D78", gettime() );
}

isteam( var_0 )
{
    if ( var_0 == "_encstr_A68C0A5803A5D151A2B310A6" )
        return 1;

    foreach ( var_2 in level.teamnamelist )
    {
        if ( var_0 == var_2 )
            return 1;
    }

    return 0;
}

canbemarkedingroup( var_0, var_1 )
{
    var_2 = 0;
    var_3 = gettargetmarkergroup( var_0 );
    var_4 = var_3.markerowner;
    var_5 = istrue( level.teambased ) && isdefined( var_3.friendlymarker );
    var_6 = istrue( var_3.friendlymarker );

    if ( !isdefined( var_4 ) )
        return var_2;

    if ( var_5 )
    {
        if ( var_6 )
        {
            if ( var_1.team == var_4.team )
                var_2 = 1;
        }
        else if ( var_1.team != var_4.team )
            var_2 = 1;
    }
    else if ( var_6 )
    {
        if ( isplayer( var_1 ) && var_1 == var_4 )
            var_2 = 1;
    }
    else
        var_2 = 1;

    return var_2;
}
