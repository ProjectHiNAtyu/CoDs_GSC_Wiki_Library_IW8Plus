// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

issp()
{
    if ( !isdefined( level.issp ) )
    {
        var_0 = getdvar( "_encstr_9E700851BEE33DF1B547" );
        var_1 = "_encstr_A40101";

        for ( var_2 = 0; var_2 < min( var_0.size, 3 ); var_2++ )
            var_1 = var_1 + var_0[var_2];

        level.issp = var_1 != "_encstr_9D1904F84941" && var_1 != "_encstr_8919048D1CBE";
    }

    return level.issp;
}

iscp()
{
    return scripts\engine\utility::string_starts_with( getdvar( "_encstr_9E700851BEE33DF1B547" ), "_encstr_8919048D1CBE" );
}

ismp()
{
    return scripts\engine\utility::string_starts_with( getdvar( "_encstr_9E700851BEE33DF1B547" ), "_encstr_9D1904F84941" );
}

make_weapon_model( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_1 ) )
        var_1 = [];

    if ( !isdefined( var_2 ) )
        var_2 = 0;

    if ( isdefined( level.fnbuildweaponspecial ) && isdefined( [[ level.fnbuildweaponspecial ]]( var_0 ) ) )
        var_4 = [[ level.fnbuildweaponspecial ]]( var_0 );
    else
        var_4 = [[ level.fnbuildweapon ]]( var_0, var_1 );

    if ( isent( self ) && !isdefined( var_3 ) )
        self setmodel( getweaponmodel( var_4 ) );

    var_5 = getweaponattachmentworldmodels( var_4 );

    foreach ( var_7 in var_5 )
    {
        if ( istrue( var_2 ) )
        {
            var_8 = strtok( var_7, "_encstr_984C028E" );

            foreach ( var_11, var_10 in var_8 )
            {
                if ( var_11 == 0 )
                {
                    var_7 = var_10;
                    continue;
                }

                if ( var_10 == "_encstr_8B0703A445" )
                {
                    var_7 = var_7 + "_encstr_A21A0437D3D8";
                    continue;
                }

                var_7 = var_7 + "_encstr_984C028E" + var_10;
            }
        }

        if ( istrue( var_3 ) )
        {
            precachemodel( var_7 );
            continue;
        }

        self attach( var_7 );
    }

    if ( !istrue( var_3 ) )
    {
        switch ( var_0 )
        {
            case "_encstr_8A900D2DEEE0EB83A5AF6CE0C238B0":
                self hidepart( "_encstr_93B60B2831C6C1E93748993825" );
                self hidepart( "_encstr_B7590EFAAF70B98CF849D0EFA5E6D292" );
                self hidepart( "_encstr_BE590ED4F5267DD8BDB0C85993D76064" );
                self hidepart( "_encstr_9F590E3A4F9BFEC1C53208181B91313B" );
                self hidepart( "_encstr_BD590EB226BA3F781751A0CDFB48F195" );
                self hidepart( "_encstr_BA590EF4867837A2E89BC3DFA5982F15" );
                self hidepart( "_encstr_A1590E5298794F35F7285A4298BFFA32" );
                break;
            case "_encstr_9D631003CB205F0333263A1759AF62A8DA92":
                self hidepart( "_encstr_B44008BD979B713865E2" );
                self hidepart( "_encstr_B3B30EFAB753713DABB4BF76285D9775" );
                break;
        }

        foreach ( var_7 in var_5 )
        {
            if ( issubstr( var_7, "_encstr_871C07E56567984513" ) )
            {
                self hidepart( "_encstr_A8A00D14A358B1A7DB99FAC366201B" );
                continue;
            }

            if ( issubstr( var_7, "_encstr_98CC058C20416A" ) )
            {
                self hidepart( "_encstr_A8A00D14A358B1A7DB99FAC366201B" );
                continue;
            }

            if ( issubstr( var_7, "_encstr_8C830551F748EF" ) )
            {
                self hidepart( "_encstr_A8A00D14A358B1A7DB99FAC366201B" );
                continue;
            }

            if ( issubstr( var_7, "_encstr_8F950A4AA079BBD3C9D0732F" ) )
                self hidepart( "_encstr_A8A00D14A358B1A7DB99FAC366201B" );
        }
    }
}

make_weapon_and_attach( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !istrue( var_4 ) )
    {
        var_5 = 0;

        if ( isent( self ) || isai( self ) )
            var_5 = 1;
    }

    if ( !isdefined( var_1 ) )
        var_1 = [];

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    if ( isdefined( level.fnbuildweaponspecial ) && isdefined( [[ level.fnbuildweaponspecial ]]( var_0 ) ) )
        var_6 = [[ level.fnbuildweaponspecial ]]( var_0 );
    else
        var_6 = [[ level.fnbuildweapon ]]( var_0, var_1 );

    if ( !istrue( var_4 ) )
    {
        if ( isdefined( var_2 ) )
            self attach( getweaponmodel( var_0 ), var_2 );
        else
            self attach( getweaponmodel( var_0 ) );
    }

    self.attachedweaponmodels[0] = var_0;
    var_7 = getweaponattachmentworldmodels( var_6 );

    foreach ( var_9 in var_7 )
    {
        if ( istrue( var_3 ) )
        {
            var_10 = strtok( var_9, "_encstr_984C028E" );

            foreach ( var_13, var_12 in var_10 )
            {
                if ( var_13 == 0 )
                {
                    var_9 = var_12;
                    continue;
                }

                if ( var_12 == "_encstr_8B0703A445" )
                {
                    var_9 = var_9 + "_encstr_A21A0437D3D8";
                    continue;
                }

                var_9 = var_9 + "_encstr_984C028E" + var_12;
            }
        }

        if ( istrue( var_4 ) )
        {
            precachemodel( var_9 );
            continue;
        }

        self attach( var_9 );
        self.attachedweaponmodels = scripts\engine\utility::array_add( self.attachedweaponmodels, var_9 );
    }

    if ( !istrue( var_4 ) )
    {
        switch ( var_0 )
        {
            case "_encstr_8A900D2DEEE0EB83A5AF6CE0C238B0":
                self hidepart( "_encstr_93B60B2831C6C1E93748993825" );
                self hidepart( "_encstr_B7590EFAAF70B98CF849D0EFA5E6D292" );
                self hidepart( "_encstr_BE590ED4F5267DD8BDB0C85993D76064" );
                self hidepart( "_encstr_9F590E3A4F9BFEC1C53208181B91313B" );
                self hidepart( "_encstr_BD590EB226BA3F781751A0CDFB48F195" );
                self hidepart( "_encstr_BA590EF4867837A2E89BC3DFA5982F15" );
                self hidepart( "_encstr_A1590E5298794F35F7285A4298BFFA32" );
                break;
            case "_encstr_9D631003CB205F0333263A1759AF62A8DA92":
                self hidepart( "_encstr_B44008BD979B713865E2" );
                self hidepart( "_encstr_B3B30EFAB753713DABB4BF76285D9775" );
                break;
        }

        foreach ( var_9 in var_7 )
        {
            if ( issubstr( var_9, "_encstr_871C07E56567984513" ) )
            {
                self hidepart( "_encstr_A8A00D14A358B1A7DB99FAC366201B" );
                continue;
            }

            if ( issubstr( var_9, "_encstr_98CC058C20416A" ) )
            {
                self hidepart( "_encstr_A8A00D14A358B1A7DB99FAC366201B" );
                continue;
            }

            if ( issubstr( var_9, "_encstr_8C830551F748EF" ) )
                self hidepart( "_encstr_A8A00D14A358B1A7DB99FAC366201B" );
        }
    }
}

make_weapon_random( var_0, var_1, var_2 )
{
    var_3 = get_random_attachments( var_1, var_2 );
    var_4 = [[ level.fnbuildweapon ]]( var_0, var_3 );
    return var_4;
}

get_random_attachments( var_0, var_1 )
{
    if ( isdefined( var_1 ) && var_1.size > 0 )
    {
        if ( var_0.size < 1 )
            return var_1[randomint( var_1.size )];

        if ( randomint( 4 ) )
            return var_1[randomint( var_1.size )];
    }

    var_2 = [];

    if ( var_0.size < 1 )
        return var_2;

    foreach ( var_5, var_4 in var_0 )
    {
        if ( isint( var_0[var_5][0] ) )
        {
            if ( randomint( 100 ) < var_0[var_5][0] )
                var_2 = scripts\engine\utility::array_add( var_2, var_4[randomint( var_4.size - 1 ) + 1] );

            continue;
        }

        return var_2;
    }

    var_6 = undefined;
    var_7 = undefined;

    foreach ( var_5, var_9 in var_2 )
    {
        if ( issubstr( var_9, "_encstr_A372050FB2E438" ) )
        {
            var_7 = var_5;
            continue;
        }

        if ( issubstr( var_9, "_encstr_801904D598BE" ) )
            var_6 = var_5;
    }

    if ( isdefined( var_6 ) && isdefined( var_7 ) )
    {
        if ( randomint( 3 ) == 0 )
            var_2 = scripts\engine\utility::array_remove_index( var_2, var_6 );
        else
            var_2 = scripts\engine\utility::array_remove_index( var_2, var_7 );
    }

    return var_2;
}

get_weapon_weighted( var_0, var_1 )
{
    var_2 = [];
    var_3 = getarraykeys( var_1 );

    foreach ( var_7, var_5 in var_0 )
    {
        var_6 = scripts\engine\utility::array_find( var_3, var_5 );

        if ( isdefined( var_6 ) )
        {
            var_2[var_2.size] = var_1[var_3[var_6]];
            continue;
        }

        var_2[var_2.size] = 0;
    }

    var_8 = 0;

    foreach ( var_10 in var_2 )
        var_8 = var_8 + var_10;

    if ( var_8 > 100 )
    {

    }

    if ( var_8 < 100 )
    {
        var_12 = 100 - var_8;
        var_13 = 0;

        foreach ( var_10 in var_2 )
        {
            if ( var_10 == 0 )
                var_13 = var_13 + 1;
        }

        if ( var_13 > 0 )
        {
            var_16 = var_12 / var_13;

            foreach ( var_7, var_10 in var_2 )
            {
                if ( var_10 == 0 )
                    var_2[var_7] = var_16;
            }
        }
    }

    var_18 = randomint( 100 );

    foreach ( var_7, var_10 in var_2 )
    {
        if ( var_7 > 0 )
            var_2[var_7] = var_10 + var_2[var_7 - 1];

        if ( var_18 < var_2[var_7] )
            return var_0[var_7];
    }

    if ( getdvarint( "_encstr_9D4A176E8D27AFC958E68CDEADBBCA85E0F673D7C85989AE9D" ) )
    {
        if ( var_0.size > 1 )
        {

        }
    }

    return var_0[0];
}

lookatentity( var_0, var_1 )
{
    var_2 = 1;

    if ( isdefined( var_1 ) )
        var_2 = var_1;

    self.entitylookingat = var_0;

    if ( isdefined( var_0 ) )
    {
        self.lookingatent = 1;
        self setlookatentity( var_0, var_2 );
    }
    else
    {
        self.lookingatent = 0;
        self setlookatentity();
    }
}

lookatstateoverride( var_0 )
{
    self.lookatstateoverride = var_0;

    if ( isdefined( var_0 ) )
        self setlookatstateoverride( var_0 );
    else
        self setlookatstateoverride();
}

civ_glancedownpath( var_0 )
{
    if ( !isdefined( self.pathgoalpos ) )
        return;

    self.internal_entitytolookat = self.entitylookingat;
    lookatentity();
    internal_civglancedownpath( gettime(), var_0 );
    lookatentity( self.internal_entitytolookat );
    self.internal_entitytolookat = undefined;
    self notify( "_encstr_B69F10F78B2A08582D999970FD19E0B3C233" );
}

internal_civglancedownpath( var_0, var_1 )
{
    var_2 = 2500;
    var_3 = scripts\engine\utility::ter_op( isdefined( self.lookdownpathdist ), self.lookdownpathdist, 75 );

    while ( var_0 + var_1 > gettime() )
    {
        var_4 = self getposonpath( var_3 );
        var_4 = var_4 + ( 0, 0, 60 );

        if ( distancesquared( self.origin, var_4 ) < var_2 )
            break;

        self setlookat( var_4 );
        waitframe();
    }

    self stoplookat();
}

glancestop()
{
    self stoplookat();
}

lookatpos( var_0, var_1 )
{
    self notify( "_encstr_B8A30ADC56EEC4DBDBDA281D" );

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    if ( !isdefined( var_0 ) )
        self stoplookat();
    else
        self setlookat( var_0, var_1 );
}

isweaponepic( var_0 )
{
    var_1 = getweaponattachments( var_0 );

    if ( !isdefined( var_1 ) )
        return 0;

    foreach ( var_3 in var_1 )
    {
        if ( issubstr( var_3, "_encstr_B160058A580B0E" ) )
            return 1;
    }

    return 0;
}

isdamageweapon( var_0 )
{
    var_1 = self.damageweapon;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( nullweapon( var_1 ) )
        return 0;

    if ( var_1.basename != getweaponbasename( var_0 ) )
        return 0;

    return 1;
}

meleegrab_ksweapon_used()
{
    var_0 = [ "_encstr_8ABE10D862BBD691BC0981893B23A0959FBA", "_encstr_8B2A1EB82FC7063DF206627FDD49570BE84B7BF88B17B9EB3BAC6CF0F6D3A713" ];
    var_1 = self getcurrentweapon();

    if ( scripts\engine\utility::array_contains( var_0, var_1.basename ) )
        return 1;

    if ( self isdroppingweapon() )
        return 1;

    if ( self israisingweapon() )
    {
        if ( scripts\engine\utility::array_contains( var_0, var_1.basename ) )
            return 1;
    }

    return 0;
}

wasdamagedbyoffhandshield()
{
    if ( !isdefined( self.damagemod ) || self.damagemod != "_encstr_8AED0A5719ED37B8FB512FD7" )
        return 0;

    var_0 = self.damageweapon;

    if ( !isdefined( var_0 ) || var_0.type != "_encstr_AF2D07F8E23CA3E0E3" )
        return 0;

    return 1;
}

_id_132EC( var_0 )
{
    if ( var_0.basename == "_encstr_8ACB0862588107A3B825" || var_0.basename == "_encstr_98730B19756A772BCF4369E043" || istrue( var_0.unlockableindex ) )
        return 1;

    return 0;
}

wasdamagedbyexplosive()
{
    if ( isdefined( self.damagemod ) )
    {
        if ( isexplosivedamagemod( self.damagemod ) )
            return 1;

        if ( isdefined( self.damageweapon ) && _id_132EC( self.damageweapon ) )
            return 1;

        if ( wasdamagedbyoffhandshield() )
            return 1;

        if ( self.damagemod == "_encstr_8AED0A5719ED37B8FB512FD7" && isdefined( self.attacker ) && isdefined( self.attacker.unittype ) && self.attacker.unittype == "_encstr_A6070326A0" )
            return 1;
    }

    if ( gettime() - anim.lastcarexplosiontime <= 50 )
    {
        var_0 = anim.lastcarexplosionrange * anim.lastcarexplosionrange * 1.2 * 1.2;

        if ( distancesquared( self.origin, anim.lastcarexplosiondamagelocation ) < var_0 )
        {
            var_1 = var_0 * 0.5 * 0.5;
            self.maydoupwardsdeath = distancesquared( self.origin, anim.lastcarexplosionlocation ) < var_1;
            return 1;
        }
    }

    return 0;
}

getdamagetype( var_0 )
{
    if ( !isdefined( var_0 ) )
        return "_encstr_8AC708E3780203657815";

    var_0 = tolower( var_0 );

    switch ( var_0 )
    {
        case "_encstr_A8C706AFD3214275":
        case "_encstr_8A4E0A51877B06376AAB9848":
        case "_encstr_8AED0AD718E937BABB4127DF":
            return "_encstr_A8C706AFD3214275";
        case "_encstr_A82607DEEB202C6A0D":
        case "_encstr_A88211D928236732E331E482B966C594343248":
        case "_encstr_9E0A12AA7BB1A1B340DE143779AEB373F97052B3":
            return "_encstr_A82607DEEB202C6A0D";
        case "_encstr_89C9076E38B1B06E34":
        case "_encstr_A45C0E0BBFD7317523BB3840933FB4A8":
        case "_encstr_BA391608927FD763BB174A35F34B8869E73940683A56C738":
        case "_encstr_81670F626FAB4953663835AD3AD37F4C7B":
        case "_encstr_9E0B13AA7BB1A1EF23D50E397DE947F2C17012C3A0":
        case "_encstr_A11B0CB5EDC8B792E6136B4F0905":
            return "_encstr_89C9076E38B1B06E34";
        case "_encstr_A9ED0BB5F6C8AF96ADE0B08D8E":
            return "_encstr_8F880751B3A741AFDB";
        case "_encstr_87230EF52019EFD779A84A23C8B38DF3":
            return "_encstr_8AC708E3780203657815";
        case "_encstr_8AC708E3780203657815":
            return "_encstr_8AC708E3780203657815";
        default:
            return "_encstr_8AC708E3780203657815";
    }
}

isprotectedbyriotshield( var_0 )
{
    if ( isdefined( var_0.hasriotshield ) && var_0.hasriotshield )
    {
        var_1 = self.origin - var_0.origin;
        var_2 = vectornormalize( ( var_1[0], var_1[1], 0 ) );
        var_3 = anglestoforward( var_0.angles );
        var_4 = vectordot( var_3, var_1 );

        if ( istrue( var_0.hasriotshieldequipped ) )
        {
            if ( var_4 > 0.766 )
                return 1;
        }
        else if ( var_4 < -0.766 )
            return 1;
    }

    return 0;
}

isprotectedbyaxeblock( var_0 )
{
    var_1 = 0;
    var_2 = self getcurrentweapon();
    var_3 = self adsbuttonpressed();
    var_4 = 0;
    var_5 = 0;
    var_6 = 0;
    var_7 = anglestoforward( self.angles );
    var_8 = vectornormalize( var_0.origin - self.origin );
    var_9 = vectordot( var_8, var_7 );

    if ( var_9 > 0.5 )
        var_4 = 1;

    if ( var_2.basename == "_encstr_983D0B96EE6CEB2C0F59BEB638" || var_2.basename == "_encstr_AA060B5AEE9BAF2CC395F59E5B" )
    {
        var_6 = self getcurrentweaponclipammo();
        var_5 = 1;
    }

    if ( var_5 && var_3 && var_4 && var_6 > 0 )
    {
        self setweaponammoclip( var_2, var_6 - 1 );
        self playsound( "_encstr_9B340DFA580BDB575603DDD82FF95B" );
        earthquake( 0.75, 0.5, self.origin, 100 );
        var_1 = 1;
    }

    return var_1;
}

isairdropmarker( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_89F4175B3FBBAD30C7B25E339EBE80482287F5F7A763F86BF0":
        case "_encstr_953A190BA52723C9BDC1F5CDB29BE89C5EBE5B58E4D6B2C97D5B1C":
        case "_encstr_9EAE17C793067A4A4823F145B9306101511B031763AE711DD8":
        case "_encstr_BDC21AD63B75D2EA7020D707B08BBB8A0D58DA4B1FD9BA12FB71177B":
        case "_encstr_BC451AE84792513D22D26809EE8B7739FA0760C087598BC9BB31798F":
        case "_encstr_941712A001F25ADA50B2C950D76897551BD06DE9":
            return 1;
        default:
            return 0;
    }
}

isdestructibleweapon( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    switch ( var_0 )
    {
        case "_encstr_B1410A9218D048CFC83132D0":
        case "_encstr_AD9311FF7BBB13DE90FEEDD065905AF7F5B54B":
        case "_encstr_AA9211814983F37A8B605D572AC4CD7947116B":
        case "_encstr_A8460D91CA6EA3C957C6D1A5981BB2":
            return 1;
    }

    return 0;
}

enable_teamflashbangimmunity()
{
    thread enable_teamflashbangimmunity_proc();
}

enable_teamflashbangimmunity_proc()
{
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        self.teamflashbangimmunity = 1;
        wait 0.05;
    }
}

disable_teamflashbangimmunity()
{
    self.teamflashbangimmunity = undefined;
}

setflashbangimmunity( var_0 )
{
    self.flashbangimmunity = var_0;
}

getcamotablecolumnindex( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_A48F06A5B991CA0F":
            return 0;
        case "_encstr_A9B40AD816DA7BB0E66E9547":
            return 1;
        case "_encstr_87B20A7E481C6F5BAFF3E3A1":
            return 2;
        case "_encstr_B3FF090EF970B5BA70255F":
            return 3;
        default:
            return undefined;
    }
}

getdifficulty()
{
    var_0 = isdefined( level.difficultytype ) && isdefined( level.difficultytype[level.gameskill] ) && level.difficultytype[level.gameskill] == "_encstr_A20703C962";

    if ( var_0 )
        return "_encstr_A20703C962";

    if ( level.gameskill < 1 )
        return "_encstr_8C6005CAC2CDBC";

    if ( level.gameskill < 2 )
        return "_encstr_975E0745B1387143B9";

    if ( level.gameskill < 3 )
        return "_encstr_82CC05C99F3B2D";

    return "_encstr_93070336BB";
}

clear_movement_speed()
{
    self aiclearscriptdesiredspeed();
}

flashbangstop()
{
    self.flashendtime = undefined;
}

enable_cqbwalk( var_0 )
{
    if ( self.type == "_encstr_871804C96F27" )
        return;

    if ( !isdefined( var_0 ) )
        self.cqbenabled = 1;

    self.turnrate = 0.2;
    demeanor_override( "_encstr_B31904476BAA" );
}

disable_cqbwalk()
{
    if ( self.type == "_encstr_871804C96F27" )
        return;

    self.cqbenabled = undefined;
    self.turnrate = 0.3;
    self.cqb_point_of_interest = undefined;
    clear_demeanor_override();
}

demeanor_override( var_0 )
{
    if ( isdefined( self.basearchetype ) && ( self.basearchetype == "_encstr_9E8C08F63FE3D98B0743" || self.basearchetype == "_encstr_8AF306B339A60F85" ) )
    {
        switch ( var_0 )
        {
            case "_encstr_8A3F0C799113A5EFFD60F3513452":
            case "_encstr_B6BB065A6143CD41":
            case "_encstr_B408071CB04739BDC6":
            case "_encstr_B9F60EA837C3036B6249223B9DBABB2B":
            case "_encstr_89EE0BC36338FB2F995ECA93CD":
                self.allowstrafe = 0;
                break;
            default:
                self.allowstrafe = 1;
        }
    }

    if ( self.asmname == "_encstr_9E8C08F63FE3D98B0743" || self.asmname == "_encstr_B9F80B280FDC217BF202383E9A" )
    {
        switch ( var_0 )
        {
            case "_encstr_8A3F0C799113A5EFFD60F3513452":
            case "_encstr_B408071CB04739BDC6":
            case "_encstr_B9F60EA837C3036B6249223B9DBABB2B":
            case "_encstr_89EE0BC36338FB2F995ECA93CD":
            case "_encstr_A14B07D8E29E1D29A9":
                self.turnrate = 0.1;
                break;
            case "_encstr_B6BB065A6143CD41":
            case "_encstr_B31904476BAA":
                self.turnrate = 0.2;
                break;
            default:
                self.turnrate = 0.3;
                break;
        }

        switch ( var_0 )
        {
            case "_encstr_B31904476BAA":
                scripts\engine\utility::set_movement_speed( 120 * self.speedscalemult );
                var_0 = "_encstr_877C076CED5B1316D1";
                break;
            case "_encstr_877C076CED5B1316D1":
                clear_movement_speed();
                break;
            case "_encstr_9F100737E04EA5738E":
                scripts\engine\utility::set_movement_speed( 225 * self.speedscalemult );
                var_0 = "_encstr_877C076CED5B1316D1";
                break;
            case "_encstr_B6BB065A6143CD41":
            case "_encstr_B408071CB04739BDC6":
                scripts\engine\utility::set_movement_speed( 56 );
                break;
        }
    }

    self.demeanoroverride = var_0;
}

clear_demeanor_override()
{
    if ( isdefined( self.basearchetype ) && ( self.basearchetype == "_encstr_9E8C08F63FE3D98B0743" || self.basearchetype == "_encstr_8AF306B339A60F85" ) )
    {
        if ( isdefined( self.demeanoroverride ) )
        {
            switch ( self.demeanoroverride )
            {
                case "_encstr_8A3F0C799113A5EFFD60F3513452":
                case "_encstr_B6BB065A6143CD41":
                case "_encstr_B408071CB04739BDC6":
                case "_encstr_B9F60EA837C3036B6249223B9DBABB2B":
                case "_encstr_89EE0BC36338FB2F995ECA93CD":
                    self.allowstrafe = 1;
                    break;
            }
        }
    }

    self.demeanoroverride = undefined;

    if ( self.asmname == "_encstr_9E8C08F63FE3D98B0743" )
    {
        self.turnrate = 0.3;
        clear_movement_speed();
    }
}

isweaponinitialized( var_0 )
{
    var_1 = createheadicon( var_0 );
    return isdefined( self.weaponinfo[var_1] );
}

initweapon( var_0 )
{
    var_1 = createheadicon( var_0 );
    self.weaponinfo[var_1] = spawnstruct();
    self.weaponinfo[var_1].position = "_encstr_AABA05236DC831";
    self.weaponinfo[var_1].hasclip = 1;
    var_2 = getweaponclipmodel( var_0 );

    if ( issp() && isdefined( var_2 ) && var_2 != "_encstr_A40101" && ( issubstr( var_2, "_encstr_AA66050485C83D" ) || issubstr( var_2, "_encstr_951904804921" ) ) )
        self.weaponinfo[var_1].useclip = 1;
    else
        self.weaponinfo[var_1].useclip = 0;
}

allow_init()
{
    allow_add( "_encstr_ADE40AEADCC2312D1B2DD12F", ::allow_usability );
    allow_add( "_encstr_B770132BB3074E306D1981930716E80D97E9A393BA", ::brjugg_watchheatreduction );
    allow_add( "_encstr_B92007DDCA2C0EF6DC", ::allow_weapon );
    allow_add( "_encstr_A80F0EAFBBDF6B0710B68A93689853A2", ::allow_weapon_switch );
    allow_add( "_encstr_892F138FF7725F101EA1136BD4ECB89B4947013B3B", ::allow_weapon_switch_clip );
    allow_add( "_encstr_BA5915B201F8016365E78FDF830FDA4EE96B2BBC5BD8D8", ::allow_script_weapon_switch );
    allow_add( "_encstr_A14C0E78A29718E8A8C95FF78F273DB8", ::allow_weapon_pickup );
    allow_add( "_encstr_A9AF10E0F285CA19B35C28B0BD4FC89D8822", ::allow_offhand_weapons );
    allow_add( "_encstr_80071802C03DF46F28ED87A0FE9007FE7D40891B708B2A9FC04E", ::allow_offhand_primary_weapons );
    allow_add( "_encstr_B6DF1A40EE158459DB3F6F6655E3F0530BB750A3D803BD59A010D6DF", ::allow_offhand_secondary_weapons );
    allow_add( "_encstr_B7F517DE99CC860BDC19BECDD0B459C623FA77CA85387BE66E", ::allow_offhand_shield_weapons );
    allow_add( "_encstr_89861220E407316238CA17636C9B821309AF81E0", ::brjugg_onplayerkilled );
    allow_add( "_encstr_9F24062875D5FD98", ::allow_prone );
    allow_add( "_encstr_9C3D071B63023B26C3", ::allow_crouch );
    allow_add( "_encstr_B1AD06374716DC8C", ::allow_stand );
    allow_add( "_encstr_9F100737E04EA5738E", ::allow_sprint );
    allow_add( "_encstr_A19007A5D1888C325D", ::allow_mantle );
    allow_add( "_encstr_807805775B15A2", ::allow_fire );
    allow_add( "_encstr_A31904412AA7", ::allow_ads );
    allow_add( "_encstr_81DD05A65DB683", ::allow_jump );
    allow_add( "_encstr_81B508C41F98F8A520CB", ::allow_wallrun );
    allow_add( "_encstr_82750B32DED5C4D895A9ABB638", ::allow_doublejump );
    allow_add( "_encstr_A8C706AFD3214275", ::allow_melee );
    allow_add( "_encstr_B76B069BB196C856", ::allow_slide );
    allow_add( "_encstr_A64D0743C1D1370153", ::allow_reload );
    allow_add( "_encstr_ADAD0562091713", ::allow_lean );
    allow_add( "_encstr_82230A15C0DBCB73D7C0AA53", ::allow_mount_top );
    allow_add( "_encstr_ABA00B4DA8B3A30BAF9092BAD8", ::allow_mount_side );
    allow_add( "_encstr_B4EB0BE03F9C08058ACD7877A7", ::allow_autoreload );
    allow_add( "_encstr_9C8F094DA8D38F4DDB7843", ::allow_movement );
    allow_add( "_encstr_800811A2303B363F6B6BB7BE689163BB5B90CA", ::allow_execution_attack );
    allow_add( "_encstr_B84E11CA1E56D8AB3A5A7BE6D79DA56CD12D6B", ::allow_execution_victim );
    allow_add( "_encstr_B42F0C4317C37B67037D287092A3", ::allow_vehicle_use );
    allow_add( "_encstr_81B60ACE5339388B71A7B24B", ::allow_crate_use );
    allow_add( "_encstr_9D1E0EAE4FF7C9F9F94210D80B0B85C1", ::allow_cough_gesture );
    allow_add( "_encstr_8F2F11D8C28C32CA27F5071B2C6C56D6AC37A3", ::allow_ladder_placement );
    allow_add( "_encstr_B6190C6DB4C68DB9A327CA0B6DDC", ::allow_killstreaks );
    allow_add( "_encstr_A9760D63E1F95DDF38385BB2C0378F", ::brjugg_initdroplocations );
    allow_add( "_encstr_B91904F675A0", ::brjugg_oncrateuse );
    allow_add( "_encstr_B8050DC29BB12B73239593BEBACDB2", ::brjugg_droponplayerdeath );
}

allow_add( var_0, var_1 )
{
    level.allow_funcs[tolower( var_0 )] = var_1;
}

allow_register_set( var_0, var_1 )
{
    level.allow_sets[tolower( var_0 )] = var_1;
}

allow_set( var_0, var_1, var_2 )
{
    var_0 = tolower( var_0 );
    allow_array( level.allow_sets[var_0], var_1, var_2 );
}

allow_array( var_0, var_1, var_2 )
{
    foreach ( var_4 in var_0 )
    {
        var_4 = tolower( var_4 );
        self thread [[ level.allow_funcs[var_4] ]]( var_1, var_2 );
    }
}

allow_weapon_switch_clip( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_943711A7422E728060177F934326C9E7D9EAC2", var_0, var_1 );
    self disableemptyclipweaponswitch( !istrue( var_2 ) );
}

is_weapon_switch_clip_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_943711A7422E728060177F934326C9E7D9EAC2" );
}

allow_usability( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_ADE40AEADCC2312D1B2DD12F", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
            self enableusability();
        else
            self disableusability();
    }
}

brjugg_watchheatreduction( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_ADE40AEADCC2312D1B2DD12F", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
            self enableusability();
        else
            self disableusability( 1 );
    }
}

is_usability_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_ADE40AEADCC2312D1B2DD12F" );
}

allow_weapon( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_B92007DDCA2C0EF6DC", var_0, var_1 );

    if ( isdefined( var_2 ) && var_2 )
    {
        self enableweapons();

        if ( isdefined( level.allow_weapon_mp ) )
            self [[ level.allow_weapon_mp ]]( 1 );
    }
    else if ( isdefined( var_2 ) && !var_2 )
    {
        if ( isdefined( level.allow_weapon_mp ) )
            self [[ level.allow_weapon_mp ]]( 0 );

        self disableweapons();
    }
}

is_weapon_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_B92007DDCA2C0EF6DC" );
}

allow_weapon_switch( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_BA170DEE56C283F6B9A9BBB447D8A1", var_0, var_1 );

    if ( isdefined( var_2 ) && var_2 )
        self enableweaponswitch();
    else if ( isdefined( var_2 ) && !var_2 )
        self disableweaponswitch();
}

is_weapon_switch_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_BA170DEE56C283F6B9A9BBB447D8A1" );
}

allow_script_weapon_switch( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_878013373639B41C1DEAAC2C837B73A9DDB41DB186", var_0, var_1 );
}

is_script_weapon_switch_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_878013373639B41C1DEAAC2C837B73A9DDB41DB186" );
}

allow_weapon_pickup( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_88240D779585077BCD28B41BB65783", var_0, var_1 );

    if ( isdefined( var_2 ) && var_2 )
        self enableweaponpickup();
    else if ( isdefined( var_2 ) && !var_2 )
        self disableweaponpickup();
}

is_weapon_pickup_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_88240D779585077BCD28B41BB65783" );
}

allow_offhand_weapons( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_AF760DCF8B7223104E3FC7996638C8", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
        {
            self enableoffhandweapons();

            if ( !isdefined( level.ismp ) || level.ismp == 0 )
                allow_offhand_shield_weapons( 1, "_encstr_9C7B160B7B0A786887052921EC617825D1EF8B93A382B09B" );
        }
        else
        {
            self disableoffhandweapons();

            if ( !isdefined( level.ismp ) || level.ismp == 0 )
                allow_offhand_shield_weapons( 0, "_encstr_9C7B160B7B0A786887052921EC617825D1EF8B93A382B09B" );
        }
    }
}

is_offhand_weapons_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_AF760DCF8B7223104E3FC7996638C8" );
}

allow_offhand_primary_weapons( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_818714BD996634C2DC8C41C9B45B0BC9F2752B580EB9", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
            self enableoffhandprimaryweapons();
        else
            self disableoffhandprimaryweapons();
    }
}

is_offhand_primary_weapons_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_818714BD996634C2DC8C41C9B45B0BC9F2752B580EB9" );
}

allow_offhand_secondary_weapons( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_BCE3160733D1D0EEC80D39752EA062773A33E957FFA19BA3", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
        {
            self enableoffhandsecondaryweapons();
            allow_offhand_shield_weapons( 1, "_encstr_A627209BEB9AE8D837B5B9B19CF1E895410F1B274FE225203208866BC7D95058EAE7" );
        }
        else
        {
            self disableoffhandsecondaryweapons();
            allow_offhand_shield_weapons( 0, "_encstr_A627209BEB9AE8D837B5B9B19CF1E895410F1B274FE225203208866BC7D95058EAE7" );
        }
    }
}

is_offhand_secondary_weapons_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_BCE3160733D1D0EEC80D39752EA062773A33E957FFA19BA3" );
}

allow_offhand_shield_weapons( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_948D13DBCC99860BB98C6A1A2D563632AE59C2E06E", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowoffhandshieldweapons( var_2 );
}

is_offhand_shield_weapons_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_948D13DBCC99860BB98C6A1A2D563632AE59C2E06E" );
}

allow_prone( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_9F24062875D5FD98", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowprone( var_2 );
}

is_prone_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_9F24062875D5FD98" );
}

allow_crouch( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_9C3D071B63023B26C3", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowcrouch( var_2 );
}

is_crouch_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_9C3D071B63023B26C3" );
}

allow_stand( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_B1AD06374716DC8C", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowstand( var_2 );
}

is_stand_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_B1AD06374716DC8C" );
}

allow_sprint( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_9F100737E04EA5738E", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowsprint( var_2 );
}

allow_jog( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_A419043882EF", var_0, var_1 );

    if ( isdefined( var_2 ) )
        setsaveddvar( "_encstr_B3280B6CBF39E9474103A971C0", var_2 );
}

is_sprint_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_9F100737E04EA5738E" );
}

allow_mantle( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_A19007A5D1888C325D", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowmantle( var_2 );
}

is_mantle_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_A19007A5D1888C325D" );
}

allow_fire( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_807805775B15A2", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowfire( var_2 );
}

is_fire_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_807805775B15A2" );
}

allow_ads( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_A31904412AA7", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowads( var_2 );
}

is_ads_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_A31904412AA7" );
}

allow_jump( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_81DD05A65DB683", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowjump( var_2 );
}

is_jump_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_81DD05A65DB683" );
}

allow_wallrun( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_81B508C41F98F8A520CB", var_0, var_1 );

    if ( isdefined( var_2 ) && var_2 )
        self allowwallrun( 1 );
    else if ( isdefined( var_2 ) && !var_2 )
        self allowwallrun( 0 );
}

is_wallrun_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_81B508C41F98F8A520CB" );
}

allow_doublejump( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_82750B32DED5C4D89529ABB638", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
        {
            self energy_setenergy( 0, self.doublejumpenergy );
            self energy_setrestorerate( 0, self.doublejumpenergyrestorerate );
            self.doublejumpenergy = undefined;
            self.doublejumpenergyrestorerate = undefined;
            self allowdoublejump( 1 );
        }
        else
        {
            self.doublejumpenergy = self energy_getenergy( 0 );
            self.doublejumpenergyrestorerate = self energy_getrestorerate( 0 );
            self energy_setenergy( 0, 0 );
            self energy_setrestorerate( 0, 0 );
            self allowdoublejump( 0 );
        }
    }
}

is_doublejump_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_82750B32DED5C4D89529ABB638" );
}

brjugg_onplayerkilled( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_89861220E407316238CA17636C9B821309AF81E0", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
            self enableoffhandthrowback();
        else
            self disableoffhandthrowback();
    }
}

allow_melee( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_A8C706AFD3214275", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowmelee( var_2 );
}

is_melee_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_A8C706AFD3214275" );
}

allow_slide( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_B76B069BB196C856", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowslide( var_2 );
}

is_slide_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_B76B069BB196C856" );
}

allow_execution_attack( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_800811A2303B363F6B6BB7BE689163BB5B90CA", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
            self [[ level.enableexecutionattackfunc ]]();
        else
            self [[ level.disableexecutionattackfunc ]]();
    }
}

allow_execution_victim( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_B84E11CA1E56D8AB3A5A7BE6D79DA56CD12D6B", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
            self [[ level.enableexecutionvictimfunc ]]();
        else
            self [[ level.disableexecutionvictimfunc ]]();
    }
}

can_execute()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_800811A2303B363F6B6BB7BE689163BB5B90CA" );
}

can_be_executed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_B84E11CA1E56D8AB3A5A7BE6D79DA56CD12D6B" );
}

allow_killstreaks( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_B6190C6DB4C68DB9A327CA0B6DDC", var_0, var_1 );
}

brjugg_initdroplocations( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_A9760D63E1F95DDF38385BB2C0378F", var_0, var_1 );
}

is_killstreaks_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_B6190C6DB4C68DB9A327CA0B6DDC" );
}

allow_supers( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_BEF407B95DC1B227E6", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        var_3 = !var_0;

        if ( isdefined( level.setsuperweapondisabled ) )
            self [[ level.setsuperweapondisabled ]]( var_3 );
    }
}

is_supers_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_BEF407B95DC1B227E6" );
}

allow_shellshock( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_A2F40B7F9B329A401770EDA6BF", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
        {
            if ( isdefined( level.enableshellshockfunc ) )
                self [[ level.enableshellshockfunc ]]();
        }
        else if ( isdefined( level.disableshellshockfunc ) )
            self [[ level.disableshellshockfunc ]]();
    }
}

is_shellshock_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_A2F40B7F9B329A401770EDA6BF" );
}

get_doublejumpenergy()
{
    if ( !isdefined( self.doublejumpenergy ) )
        return self energy_getenergy( 0 );

    return self.doublejumpenergy;
}

set_doublejumpenergy( var_0 )
{
    if ( !isdefined( self.doublejumpenergy ) )
        self energy_setenergy( 0, var_0 );
    else
        self.doublejumpenergy = var_0;
}

get_doublejumpenergyrestorerate()
{
    if ( !isdefined( self.doublejumpenergyrestorerate ) )
        return self energy_getrestorerate( 0 );

    return self.doublejumpenergyrestorerate;
}

set_doublejumpenergyrestorerate( var_0 )
{
    if ( !isdefined( self.doublejumpenergyrestorerate ) )
        self energy_setrestorerate( 0, var_0 );
    else
        self.doublejumpenergyrestorerate = var_0;
}

allow_lean( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_ADAD0562091713", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowlean( var_2 );
}

is_lean_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_ADAD0562091713" );
}

allow_mount_top( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_82230A15C0DBCB73D7C0AA53", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowmounttop( var_2 );
}

is_mount_top_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_82230A15C0DBCB73D7C0AA53" );
}

allow_mount_side( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_ABA00B4DA8B3A30BAF9092BAD8", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowmountside( var_2 );
}

is_mount_side_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_ABA00B4DA8B3A30BAF9092BAD8" );
}

allow_cinematic_motion( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_A43211B7EB37625D20AB44CEE66897AB6B0F7B", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
        {
            if ( isdefined( level.player.cinematicmotionoverride ) )
                level.player setcinematicmotionoverride( level.player.cinematicmotionoverride );
            else
                level.player clearcinematicmotionoverride();
        }
        else
            self setcinematicmotionoverride( "_encstr_9F1D0909124FCF686D15A1" );
    }
}

is_cinematic_motion_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_A43211B7EB37625D20AB44CEE66897AB6B0F7B" );
}

allow_death( var_0, var_1 )
{
    if ( !isdefined( self.deathshieldfunc ) )
    {

    }

    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_A3750609A5E61883", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
            self [[ self.deathshieldfunc ]]( 0 );
        else
            self [[ self.deathshieldfunc ]]( 1 );
    }
    else
        self [[ self.deathshieldfunc ]]( 1 );
}

is_death_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_A3750609A5E61883" );
}

allow_reload( var_0, var_1, var_2 )
{
    var_3 = scripts\common\input_allow::allow_input_internal( "_encstr_A64D0743C1D1370153", var_0, var_1 );

    if ( isdefined( var_3 ) )
    {
        if ( var_3 )
            self allowreload( 1 );
        else
        {
            self allowreload( 0 );

            if ( !isdefined( var_2 ) || !var_2 )
                self cancelreload();
        }
    }
}

is_reload_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_A64D0743C1D1370153" );
}

allow_autoreload( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_B4EB0BE03F9C08058ACD7877A7", var_0, var_1 );

    if ( isdefined( var_2 ) )
    {
        if ( var_2 )
            self enableautoreload();
        else
            self disableautoreload();
    }
}

is_autoreload_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_B4EB0BE03F9C08058ACD7877A7" );
}

allow_movement( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_9C8F094DA8D38F4DDB7843", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self allowmovement( var_2 );
}

allow_armor( var_0, var_1 )
{
    if ( !playerarmorenabled() )
        return;

    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_9BB6062FDE751D33", var_0, var_1 );

    if ( isdefined( self.armor ) && isdefined( self.armor.toggleuifunc ) )
        self [[ self.armor.toggleuifunc ]]();
}

is_armor_allowed()
{
    if ( !playerarmorenabled() )
        return 0;

    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_9BB6062FDE751D33" );
}

brjugg_oncrateuse( var_0, var_1, var_2 )
{
    var_3 = 2;
    var_4 = scripts\common\input_allow::allow_input_internal( "_encstr_B91904D635A1", var_0, var_1, var_2 );

    if ( isdefined( var_4 ) )
    {
        if ( var_4 )
        {
            if ( !isai( self ) )
                self setactionslot( var_3, "_encstr_97C00CCDB43B863AB32DDCD2EDB9" );
        }
        else if ( !isai( self ) )
            self setactionslot( var_3, "_encstr_A40101" );
    }
}

is_nvg_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_B91904D635A1" );
}

allow_crate_use( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_938C09DB8E9963F70338CA", var_0, var_1 );
}

is_crate_use_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_938C09DB8E9963F70338CA" );
}

allow_vehicle_use( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_B42F0C4317C37B67037D287092A3", var_0, var_1 );

    if ( isdefined( var_2 ) )
        vehicle_allowplayeruse( self, var_0 );
}

is_vehicle_use_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_B42F0C4317C37B67037D287092A3" );
}

allow_cough_gesture( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_9D1E0EAE4FF7C9F9F94210D80B0B85C1", var_0, var_1 );
}

is_cough_gesture_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_9D1E0EAE4FF7C9F9F94210D80B0B85C1" );
}

allow_ladder_placement( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_8F2F11D8C28C32CA27F5071B2C6C56D6AC37A3", var_0, var_1 );
}

is_ladder_placement_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_8F2F11D8C28C32CA27F5071B2C6C56D6AC37A3" );
}

brjugg_droponplayerdeath( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_A4180C5943FFDD187F05BDFB3B67", var_0, var_1 );
}

trial_ui_retry_disabled()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_A4180C5943FFDD187F05BDFB3B67" );
}

playerarmorenabled()
{
    return getdvarint( "_encstr_BC94194BDEC5D14BC8C9B38502C7E08BF2EDCE415BE0A9A0323AE0" );
}

playerhelmetenabled()
{
    return getdvarint( "_encstr_A9A71A37D839F5E08DC2BC2BC9FA342B8DDA591DAF2B9B58891B2B19" );
}

spawn_vehicle()
{
    return scripts\common\vehicle::vehicle_spawn( self );
}

groundpos( var_0, var_1 )
{
    return scripts\engine\utility::drop_to_ground( var_0, 0, -100000, var_1 );
}

vehicle_detachfrompath()
{
    scripts\common\vehicle_code::vehicle_pathdetach();
}

vehicle_resumepath()
{
    thread scripts\common\vehicle_paths::vehicle_resumepathvehicle();
}

vehicle_land( var_0 )
{
    scripts\common\vehicle_code::vehicle_landvehicle( var_0 );
}

vehicle_liftoff( var_0 )
{
    scripts\common\vehicle_code::vehicle_liftoffvehicle( var_0 );
}

vehicle_dynamicpath( var_0, var_1 )
{
    scripts\common\vehicle::vehicle_paths( var_0, var_1 );
}

getvehiclespawner( var_0, var_1 )
{
    var_2 = getvehiclespawnerarray( var_0, var_1 );
    return var_2[0];
}

getvehiclespawnerarray( var_0, var_1 )
{
    return scripts\common\vehicle_code::_getvehiclespawnerarray( var_0, var_1 );
}

is_map_using_locales_only()
{
    var_0 = getdvar( "_encstr_9E700851BEE33DF1B547" );

    if ( var_0 == "_encstr_B30E0A08A3DFADE00DF56F57" || var_0 == "_encstr_B3A80F976B315198DBB2A37FE6B508EB5B" )
        return 1;

    return 0;
}

iswegameplatform()
{
    return getdvarint( "_encstr_A16B0BA9946AA89845D2725AA0", 0 ) == 1;
}

playersnear( var_0, var_1 )
{
    var_2 = physics_createcontents( [ "_encstr_9F57173778F77BCBC6133048DA5B9B90BB0B28AFC43FE22B6A" ] );
    var_3 = ( var_1, var_1, var_1 );
    var_4 = var_0 - var_3;
    var_5 = var_0 + var_3;
    var_6 = physics_aabbbroadphasequery( var_4, var_5, var_2, [] );
    return var_6;
}

playersincylinder( var_0, var_1, var_2, var_3 )
{
    var_4 = physics_createcontents( [ "_encstr_9F57173778F77BCBC6133048DA5B9B90BB0B28AFC43FE22B6A" ] );
    var_5 = 1000;

    if ( isdefined( var_3 ) )
        var_5 = var_3;

    var_6 = ( var_1, var_1, var_5 );
    var_7 = var_0 - var_6;
    var_8 = var_0 + var_6;

    if ( !isdefined( var_2 ) )
        var_2 = [];

    var_9 = physics_aabbbroadphasequery( var_7, var_8, var_4, var_2 );
    var_10 = [];
    var_11 = var_1 * var_1;

    foreach ( var_13 in var_9 )
    {
        var_15 = distance2dsquared( var_13.origin, var_0 );

        if ( var_15 < var_11 )
            var_10[var_10.size] = var_13;
    }

    return var_10;
}

playersinsphere( var_0, var_1 )
{
    var_2 = playersnear( var_0, var_1 );
    var_3 = [];
    var_4 = var_1 * var_1;

    foreach ( var_6 in var_2 )
    {
        var_7 = distancesquared( var_6.origin, var_0 );

        if ( var_7 < var_4 )
            var_3[var_3.size] = var_6;
    }

    return var_3;
}

_id_13E0A( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_10 ) )
        return [[ var_0 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 );
    else if ( isdefined( var_9 ) )
        return [[ var_0 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
    else if ( isdefined( var_8 ) )
        return [[ var_0 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
    else if ( isdefined( var_7 ) )
        return [[ var_0 ]]( var_1, var_2, var_3, var_4, var_5, var_6, var_7 );
    else if ( isdefined( var_6 ) )
        return [[ var_0 ]]( var_1, var_2, var_3, var_4, var_5, var_6 );
    else if ( isdefined( var_5 ) )
        return [[ var_0 ]]( var_1, var_2, var_3, var_4, var_5 );
    else if ( isdefined( var_4 ) )
        return [[ var_0 ]]( var_1, var_2, var_3, var_4 );
    else if ( isdefined( var_3 ) )
        return [[ var_0 ]]( var_1, var_2, var_3 );
    else if ( isdefined( var_2 ) )
        return [[ var_0 ]]( var_1, var_2 );
    else if ( isdefined( var_1 ) )
        return [[ var_0 ]]( var_1 );
    else
        return [[ var_0 ]]();
}

_id_13629()
{
    if ( !iswegameplatform() )
        return;

    var_0 = 0;
    var_1 = 1;
    var_2 = 2;
    var_3 = 3;
    var_4 = 4;
    var_5 = 5;
    var_6 = "_encstr_AB741797B9C0D23968E9EEED63A06B5AD5336B630BB8AAFBC0";
    var_7 = tolower( getdvar( "_encstr_9E700851BEE33DF1B547" ) );
    var_8 = tablelookupgetnumrows( var_6 );

    for ( var_9 = 0; var_9 < var_8; var_9++ )
    {
        if ( var_7 == tolower( tablelookupbyrow( var_6, var_9, var_1 ) ) )
        {
            var_10 = tablelookupbyrow( var_6, var_9, var_2 );
            var_11 = strtok( tablelookupbyrow( var_6, var_9, var_3 ), "_encstr_984C028E" );
            var_12 = strtok( tablelookupbyrow( var_6, var_9, var_4 ), "_encstr_984C028E" );
            var_13 = int( tablelookupbyrow( var_6, var_9, var_5 ) );
            var_14 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", ( float( var_11[0] ), float( var_11[1] ), float( var_11[2] ) ) );
            var_14 setmodel( var_10 );
            var_14.angles = ( float( var_12[0] ), float( var_12[1] ), float( var_12[2] ) );

            if ( var_13 > 0 )
                var_14 solid();
            else
                var_14 notsolid();
        }
    }
}
