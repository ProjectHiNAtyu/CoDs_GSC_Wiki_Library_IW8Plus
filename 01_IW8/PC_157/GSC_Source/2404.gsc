// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

hasplayerdiedwhileusingkillstreak( var_0 )
{
    return var_0.lifeid != scripts\cp_mp\utility\killstreak_utility::getcurrentplayerlifeidforkillstreak();
}

addtoactivekillstreaklist( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = self getentitynumber();
    self.activeid = var_2 getactivekillstreakid();

    if ( isdefined( var_0 ) )
    {
        if ( isremotekillstreak( var_0 ) )
        {
            addtoremotekillstreaklist( var_7 );
            thread removefromremotekillstreaklistondeath( var_7 );
        }

        if ( isuavkillstreak( var_0 ) )
        {
            addtouavlist( var_7, var_2 );
            thread removefromuavlistondeath( var_7, var_2 );
        }
        else if ( isairstrikekillstreak( var_0 ) )
        {
            addtoairstrikelist( var_7 );
            thread removefromairstrikelistondeath( var_7 );
        }
        else if ( islittlebirdkillstreak( var_0 ) )
        {
            addtolittlebirdlist( var_7 );
            thread removefromlittlebirdlistondeath( var_7 );
        }
        else if ( ishelikillstreak( var_0 ) )
        {
            addtohelilist( var_7 );
            thread removefromhelilistondeath( var_7 );
        }
        else if ( isturretkillstreak( var_0 ) )
        {
            addtoturretlist( var_7 );
            thread removefromturretlistondeathorcarry( var_7 );
        }
        else if ( iscarrykillstreak( var_0 ) )
        {
            addtocarrylist( var_7 );
            thread removefromcarrylistondeathorcarry( var_7 );
        }
        else if ( isprojectilekillstreak( var_0 ) )
        {
            addtoprojectilelist( var_7 );
            thread removefromprojectilelistondeath( var_7 );
        }
        else if ( issupportdronekillstreak( var_0 ) )
        {
            addtosupportdronelist( var_7 );
            thread removefromsupportdronelistondeath( var_7 );
        }
        else if ( isassaultdronekillstreak( var_0 ) )
        {
            addtoassaultdronelist( var_7 );
            thread removefromassaultdronelistondeath( var_7 );
        }
        else
        {
            addtoplayerkillstreaklist( var_7 );
            thread removefromplayerkillstreaklistondeath( var_7 );
        }

        if ( iskillstreaklockonable( var_0 ) )
            self.affectedbylockon = 1;
    }

    level.activekillstreaks[var_7] = self;
    level.activekillstreaks[var_7].streakname = var_0;

    if ( var_1 == "_encstr_B2860FEF13897ACB10E3FFC6F871C1E25E" )
    {
        self.isairkillstreak = 1;

        if ( !isdefined( var_0 ) || var_0 != "_encstr_8BFA1059C1A8717A6058B8E5FAB037E3D628" && var_0 != "_encstr_B2CC0571600D60" )
            self enableplayermarks( "_encstr_A9940F6733E629B39840DD623B38C58232" );
    }
    else
    {
        self.isairkillstreak = 0;
        self enableplayermarks( "_encstr_B6CE0B0BB00A031B7B88355740" );
    }

    if ( level.teambased )
        self filteroutplayermarks( var_2.team );
    else
        self filteroutplayermarks( var_2 );

    if ( istrue( var_3 ) )
    {
        var_8 = undefined;
        var_9 = undefined;

        if ( level.teambased )
        {
            if ( scripts\cp_mp\utility\killstreak_utility::isridekillstreak( var_0 ) )
            {
                foreach ( var_11 in level.players )
                {
                    if ( var_11.team == self.team && var_11 != self.owner )
                        var_8 = scripts\mp\utility\outline::outlineenableforplayer( self, var_11, "_encstr_BCBD15F0DB9349B823C50898D7536139FB72F908B36E95", "_encstr_9B4407C817DF0947DB" );

                    if ( isdefined( var_8 ) )
                        thread removeoutlineonnotify( var_8, var_6 );
                }

                var_9 = 1;
            }
            else
                var_8 = scripts\mp\utility\outline::outlineenableforteam( self, var_2.team, "_encstr_BCBD15F0DB9349B823C50898D7536139FB72F908B36E95", "_encstr_9B4407C817DF0947DB" );
        }
        else
            var_8 = scripts\mp\utility\outline::outlineenableforplayer( self, var_2, "_encstr_BCBD15F0DB9349B823C50898D7536139FB72F908B36E95", "_encstr_9B4407C817DF0947DB" );

        if ( !istrue( var_9 ) )
            thread removeoutlineonnotify( var_8, var_6 );
    }

    if ( istrue( var_4 ) )
    {
        var_13 = 0;

        if ( var_2 scripts\mp\utility\player::isusingremote() )
            var_13 = 1;

        var_14 = undefined;

        if ( level.teambased )
            var_14 = thread scripts\cp_mp\entityheadicons::setheadicon_factionimage( 0, var_5, 1, 10000, undefined, undefined, 1, var_13 );
        else
        {
            if ( istrue( var_13 ) )
                return;

            var_14 = thread scripts\cp_mp\entityheadicons::setheadicon_singleimage( var_2, "_encstr_A82C21B8ABE7BF28877F20B040A711818132F82802BA63615B8CA01432FFD94DB70A20", var_5, 1, 10000, undefined, undefined, 1 );
        }

        thread removeteamheadicononnotify( var_14, var_6 );
    }
}

getactivekillstreakid()
{
    if ( !isdefined( self.pers["_encstr_9E010DCDCA878E14C68EB49D955288"] ) )
        self.pers["_encstr_9E010DCDCA878E14C68EB49D955288"] = 0;

    var_0 = self.pers["_encstr_9E010DCDCA878E14C68EB49D955288"];
    self.pers["_encstr_9E010DCDCA878E14C68EB49D955288"]++;
    return var_0;
}

removeoutlineonnotify( var_0, var_1 )
{
    var_2 = [ "_encstr_A3750609A5E61883" ];

    if ( isdefined( var_1 ) )
        var_2[var_2.size] = var_1;

    scripts\engine\utility::waittill_any_in_array_return_no_endon_death( var_2 );
    scripts\mp\utility\outline::outlinedisable( var_0, self );
}

removeteamheadicononnotify( var_0, var_1 )
{
    var_2 = [ "_encstr_A3750609A5E61883" ];

    if ( isdefined( var_1 ) )
        var_2[var_2.size] = var_1;

    scripts\engine\utility::waittill_any_in_array_return_no_endon_death( var_2 );
    scripts\cp_mp\entityheadicons::setheadicon_deleteicon( var_0 );
}

removefromactivekillstreaklist( var_0 )
{
    level.activekillstreaks[var_0] = undefined;
}

activekillstreaklistcontains( var_0 )
{
    if ( !isdefined( level.activekillstreaks ) )
        return 0;

    return isdefined( level.activekillstreaks[var_0] );
}

addtoremotekillstreaklist( var_0 )
{
    if ( !isdefined( level.remotekillstreaks ) )
        level.remotekillstreaks = [];

    level.remotekillstreaks[var_0] = self;
}

removefromremotekillstreaklistondeath( var_0 )
{
    self waittill( "_encstr_A3750609A5E61883" );
    level.remotekillstreaks[var_0] = undefined;
}

addtouavlist( var_0, var_1 )
{
    if ( !isdefined( level.uavmodels ) )
        level.uavmodels = [];

    if ( level.teambased )
    {
        var_2 = undefined;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "_encstr_A47205E8C28D13", "_encstr_B45B139B0B40B6635793415A39A93FAD48950C1549" ) )
            var_2 = level [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "_encstr_A47205E8C28D13", "_encstr_B45B139B0B40B6635793415A39A93FAD48950C1549" ) ]]();

        if ( istrue( var_2 ) && getdvarint( "_encstr_B8D817B673DBFEF34643D133CADAEF33AF0D37A5F707CD39A8", 1 ) )
        {
            var_3 = var_1.team + var_1.squadindex;
            level.uavmodels[var_3][level.uavmodels[var_3].size] = self;
            return;
        }

        level.uavmodels[self.team][level.uavmodels[self.team].size] = self;
        return;
    }
    else
        level.uavmodels[self.owner.guid + "_encstr_984C028E" + gettime()] = self;
}

removefromuavlistondeath( var_0, var_1 )
{
    self waittill( "_encstr_A3750609A5E61883" );

    if ( isdefined( self.uavrig ) )
        self.uavrig delete();

    if ( level.teambased )
    {
        var_2 = undefined;

        if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "_encstr_A47205E8C28D13", "_encstr_B45B139B0B40B6635793415A39A93FAD48950C1549" ) )
            var_2 = level [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "_encstr_A47205E8C28D13", "_encstr_B45B139B0B40B6635793415A39A93FAD48950C1549" ) ]]();

        if ( istrue( var_2 ) && getdvarint( "_encstr_B8D817B673DBFEF34643D133CADAEF33AF0D37A5F707CD39A8", 1 ) )
        {
            var_3 = var_1.team + var_1.squadindex;
            level.uavmodels[var_3] = scripts\engine\utility::array_removeundefined( level.uavmodels[var_3] );
        }
        else
            level.uavmodels[self.team] = scripts\engine\utility::array_removeundefined( level.uavmodels[self.team] );
    }
    else
        level.uavmodels = scripts\engine\utility::array_removeundefined( level.uavmodels );

    if ( isdefined( self ) )
        self delete();

    removefromactivekillstreaklist( var_0 );
}

addtoairstrikelist( var_0 )
{
    if ( !isdefined( level.airstrikemodels ) )
        level.airstrikemodels = [];

    level.airstrikemodels[var_0] = self;
}

removefromairstrikelistondeath( var_0 )
{
    self waittill( "_encstr_A3750609A5E61883" );
    level.airstrikemodels[var_0] = undefined;
    removefromactivekillstreaklist( var_0 );
}

addtolittlebirdlist( var_0 )
{
    if ( !isdefined( level.littlebirds ) )
        level.littlebirds = [];

    level.littlebirds[var_0] = self;
}

removefromlittlebirdlistondeath( var_0 )
{
    self waittill( "_encstr_A3750609A5E61883" );
    level.littlebirds[var_0] = undefined;
    removefromactivekillstreaklist( var_0 );
}

addtohelilist( var_0 )
{
    if ( !isdefined( level.helis ) )
        level.helis = [];

    level.helis[var_0] = self;
}

removefromhelilist( var_0 )
{
    level.helis[var_0] = undefined;
    removefromactivekillstreaklist( var_0 );
}

removefromhelilistondeath( var_0 )
{
    self waittill( "_encstr_A3750609A5E61883" );
    level.helis[var_0] = undefined;
    removefromactivekillstreaklist( var_0 );
}

addtoturretlist( var_0 )
{
    if ( !isdefined( level.turrets ) )
        level.turrets = [];

    level.turrets[var_0] = self;
}

removefromturretlistondeathorcarry( var_0 )
{
    scripts\engine\utility::_id_143A5( "_encstr_A3750609A5E61883", "_encstr_9D3B0803A3F0FACFDDF9" );
    level.turrets[var_0] = undefined;
    removefromactivekillstreaklist( var_0 );
}

addtocarrylist( var_0 )
{
    if ( !isdefined( level.deployables ) )
        level.deployables = [];

    level.deployables[var_0] = self;
}

removefromcarrylistondeathorcarry( var_0 )
{
    scripts\engine\utility::_id_143A5( "_encstr_A3750609A5E61883", "_encstr_9D3B0803A3F0FACFDDF9" );
    level.deployables[var_0] = undefined;
    removefromactivekillstreaklist( var_0 );
}

addtosupportdronelist( var_0 )
{
    if ( !isdefined( level.supportdrones ) )
        level.supportdrones = [];

    level.supportdrones[var_0] = self;
}

removefromsupportdronelistondeath( var_0 )
{
    self waittill( "_encstr_A3750609A5E61883" );
    level.supportdrones[var_0] = undefined;
    removefromactivekillstreaklist( var_0 );
}

addtoassaultdronelist( var_0 )
{
    if ( !isdefined( level.assaultdrones ) )
        level.assaultdrones = [];

    level.assaultdrones[var_0] = self;
}

removefromassaultdronelistondeath( var_0 )
{
    self waittill( "_encstr_A3750609A5E61883" );
    level.assaultdrones[var_0] = undefined;
    removefromactivekillstreaklist( var_0 );
}

addtoprojectilelist( var_0 )
{
    if ( !isdefined( level.projectilekillstreaks ) )
        level.projectilekillstreaks = [];

    level.projectilekillstreaks[var_0] = self;
}

removefromprojectilelistondeath( var_0 )
{
    self waittill( "_encstr_A3750609A5E61883" );
    level.projectilekillstreaks[var_0] = undefined;
    removefromactivekillstreaklist( var_0 );
}

addtoplayerkillstreaklist( var_0 )
{
    if ( !isdefined( level.playerkillstreaks ) )
        level.playerkillstreaks = [];

    level.playerkillstreaks[var_0] = self;
}

removefromplayerkillstreaklistondeath( var_0 )
{
    self waittill( "_encstr_A3750609A5E61883" );
    level.playerkillstreaks[var_0] = undefined;
    removefromactivekillstreaklist( var_0 );
}

setkillstreakcontrolpriority( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    self makeusable();
    self setcursorhint( "_encstr_939A0CEC70DBF521459F5B47F73D" );
    self sethintonobstruction( "_encstr_B7180526C81F4B" );
    self sethintstring( var_1 );
    self sethintdisplayfov( var_2 );
    self setusefov( var_3 );
    self sethintdisplayrange( var_4 );
    self setuserange( var_5 );
    self setusepriority( 1 );
    level thread applyplayercontrolonconnect( self );

    foreach ( var_9 in level.players )
    {
        if ( var_9 == var_0 && !istrue( var_7 ) )
        {
            self enableplayeruse( var_9 );
            continue;
        }

        self disableplayeruse( var_9 );
    }
}

applyplayercontrolonconnect( var_0 )
{
    var_0 endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        level waittill( "_encstr_87940A7F075A88E8ABD37951", var_1 );
        var_0 disableplayeruse( var_1 );
    }
}

applykillstreakplayeroutline( var_0, var_1 )
{
    var_2 = self.team;
    var_3 = self.owner;
    var_4 = undefined;
    var_5 = undefined;

    if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() || var_0.team == "_encstr_A68C0A5803A5D151A2B310A6" || var_0.team == "_encstr_B33E0979A77828123F58A2" )
        return;

    if ( var_0 == var_3 )
        var_4 = "_encstr_8BCA17A72368D577E071827A78C9770F08D13438DF68D81F98";
    else if ( var_0 != var_3 )
    {
        if ( level.teambased && var_0.team != var_2 || !level.teambased )
        {
            var_4 = "_encstr_AB5D19C23D33F9F8B0D2215A4883999147F96BC867A7D673E3B4ED";
            var_5 = 1;
        }
        else
            return;
    }

    if ( isdefined( var_4 ) )
    {
        if ( istrue( var_5 ) )
        {
            if ( var_0 scripts\mp\utility\perk::_hasperk( "_encstr_9C4C199BE059C6D22C1B1D2FF537BDC1D8C2CBACE447859CCE591D" ) )
                return;
        }

        var_6 = scripts\mp\utility\outline::outlineenableforplayer( var_0, self.owner, var_4, "_encstr_B6CE0B0BB00A031B7B88355740" );
        thread watchoutlineremoveonkillstreakend( var_6, var_0, var_1 );
        thread watchoutlineremoveonplayerend( var_6, var_0, var_1 );
    }
}

watchoutlineremoveonkillstreakend( var_0, var_1, var_2 )
{
    var_1 endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self waittill( var_2 );
    scripts\mp\utility\outline::outlinedisable( var_0, var_1 );
}

watchoutlineremoveonplayerend( var_0, var_1, var_2 )
{
    self endon( var_2 );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_1 waittill( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    scripts\mp\utility\outline::outlinedisable( var_0, var_1 );
}

getmodifiedantikillstreakdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10 )
{
    var_3 = scripts\mp\damage::handleshotgundamage( var_1, var_2, var_3 );
    var_3 = scripts\mp\damage::handleapdamage( var_1, var_2, var_3, var_0 );
    var_11 = var_1.isalternatemode;
    var_12 = 0;

    if ( istrue( var_11 ) )
    {
        var_13 = scripts\mp\utility\weapon::getweaponattachmentsbasenames( var_1 );

        foreach ( var_15 in var_13 )
        {
            if ( var_15 == "_encstr_89070358A2" )
            {
                var_12 = 1;
                break;
            }
        }
    }

    var_17 = undefined;

    if ( var_2 != "_encstr_8AED0A5719ED37B8FB512FD7" )
    {
        switch ( var_1.basename )
        {
            case "_encstr_8C9408280B84AB8EDF70":
            case "_encstr_8ACB0F82FB0D1F62E877A0AA3FB821B737":
                self.largeprojectiledamage = 1;
                self.killoneshot = 1;
                var_17 = 1;
                break;
            case "_encstr_B80A13CC57CA36B9A3395AB62B7D07E4ED9AD75BC1":
            case "_encstr_9D0D1F7248C1C98B5BB8666558205F4D77386A8A40B3FA2FB193629D6E4BD7D591":
            case "_encstr_97641895ADC1F52339B773CAFACDBDDCAF073616F2AC9CD7DA1C":
            case "_encstr_9B3C11B6837089B3E931AF5B25B74AC569286A":
            case "_encstr_8FDF12C87A135BDBE7CA1595E70383077C016890":
            case "_encstr_9BBC0FD39F078E9A7F6A2B936525A9E96B":
            case "_encstr_B9740F0B070B36D02BAF0EC9BDA6FADA83":
            case "_encstr_B2430B07CCC710135D9A29B0E3":
            case "_encstr_89BB137823B2E0281E1FF7D5474538B057DB3660BB":
            case "_encstr_A623119954EA97FD2321729BA06BF7737E3108":
            case "_encstr_A96D112BD7424E71F6412840DACA230B87652F":
            case "_encstr_A3521050A3B879B19AEF4F6F17728C31B5FA":
            case "_encstr_AD69112DF308C9012A3F87B5E7B2DD7BD7CDAB":
            case "_encstr_BE3E15324BBBD7B5B807B4F11D48BF67CC203B7AD6F9A3":
            case "_encstr_AAD0152DEE0EEB3685D7A3C9CDE80BDC8CC2278C7DB683":
            case "_encstr_87C517CA9E893385535879C37B9FB19B03885A7FBA93978D21":
            case "_encstr_955F1426E4C2C8D82B977D477BDDD7C14EB753D7DA1C":
                self.largeprojectiledamage = 1;
                var_17 = var_5;
                break;
            case "_encstr_8CCF0CCA8FEFD6752BB37026C2CB":
            case "_encstr_93C50EF08514185E5A97BF591F612928":
            case "_encstr_A9FA12D4E32DA1231577D1A3D3D9767AFF4E9BFB":
            case "_encstr_94E107C86AE53F284B":
            case "_encstr_A6301177E849978B3567453AD7272364F640FB":
            case "_encstr_896C10382DD8D6D5E0F5E8C95D1BDABEDA38":
            case "_encstr_8FBF13AC9940470187E3D333EE0FA0B2A2282683C0":
            case "_encstr_9BAA0DF5B15F3E3D0583C060095DF1":
            case "_encstr_9F8912D3D9033FF09113430D0EAB013FF70FEFE7":
            case "_encstr_8A7B0DCD9D77F0DD5C3A1878D175D9":
            case "_encstr_BE261081EFA26FF819B1E33B23EBC8307A7B":
            case "_encstr_A2BA0A50850FE05DFB0FA361":
            case "_encstr_B8F60B30F7A8565631B0108250":
            case "_encstr_9FB90B3F590641C2ABCB49CD83":
            case "_encstr_8BC20F870B4377E2A725BA738697B9356B":
            case "_encstr_9BA707CE1BC39E9D3F":
            case "_encstr_937E0D942BC0E4D33D21F2AACE99FB":
            case "_encstr_9EDB195BB8D8784731B31367338BC37F23EDCBE9674807CA777DF3":
            case "_encstr_9CD20F566B38D79DE4CA730B2356F55B83":
            case "_encstr_80710E6E59BA032F8849DAA7D3502298":
            case "_encstr_9EE70DD1EDD62CAF0739B735EBDAE0":
            case "_encstr_80E90F362DE8A3D8CAD726969391FA6B83":
            case "_encstr_9C0714B33209A4637C0E1298498B170876C22FCEBF23":
            case "_encstr_B2D91198828F3BA81B612527B7C378FEC77A93":
                self.largeprojectiledamage = 1;
                var_17 = var_6;
                break;
            case "_encstr_80F90E9B3B1ACA5737679B98FA5FA188":
            case "_encstr_8C950D507B43B3E8DB154EC3D72793":
            case "_encstr_A90B13C38210FBDF596792D180BB50C7EF3B9FBAF0":
            case "_encstr_AA9E139F78F82C0A91C8702DCB5FC291AB72B76F68":
            case "_encstr_808E0F48828D317103B7DE406CDBFEFB32":
            case "_encstr_B9C40C1EFA1EBBB22FC305A93AF3":
            case "_encstr_A1730ED1DBB801200B0219525A878B43":
            case "_encstr_BCAE08D8D0F5B607F538":
            case "_encstr_9FA70ADF38B86C4AD188752A":
            case "_encstr_A24A10B6DA889F713C522A18E8157A0F7580":
            case "_encstr_B8C015E3F7CF776B6DD38B0391D6551D4ACE31CB3932F0":
                self.largeprojectiledamage = 0;
                var_17 = var_7;
                break;
            case "_encstr_809F1CACDABD23B53B63E7D6D9BAC830D7F371A63725693728F092DE7769":
            case "_encstr_959C18471AAC9CDA964759D713DEB13A7DE4B0C8B45D6EF55B83":
            case "_encstr_A45E1539B897587167FB1946232F3BD82F59393B677D90":
            case "_encstr_BA3B11C0E23F8DC0D70CCD28F2272859691A58":
            case "_encstr_B89B0FB411E85A7F7B5B8A11C1CC7F5598":
                self.largeprojectiledamage = 0;
                var_17 = var_9;
                break;
        }
    }
    else
    {
        self.largeprojectiledamage = 0;
        var_17 = var_8;
    }

    if ( isdefined( var_10 ) )
        self.largeprojectiledamage = var_10;

    if ( isdefined( var_17 ) && isdefined( var_2 ) && ( var_2 == "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9" || var_2 == "_encstr_9BE3150DAD1C47870999C0F8AF5C37E55EDEC7E1CD5543" || var_2 == "_encstr_AD0D0935D0FD0FFFFBF108" || var_2 == "_encstr_81670F602F2B4957763C758D38D1FF6C3B" || var_2 == "_encstr_BA3916099077D7673B375A25D3CB8C29EF394169385E873C" || var_2 == "_encstr_A11B0CBD04C9B790F653EBCF4915" || var_2 == "_encstr_9E0B13A801F1A16F27C52E196DED47FA817110C1A1" || var_2 == "_encstr_8AED0A5719ED37B8FB512FD7" ) )
        var_3 = ceil( var_4 / var_17 );

    var_18 = 0;

    if ( isdefined( var_0 ) && isdefined( self.owner ) && !var_18 )
    {
        if ( isdefined( var_0.owner ) )
            var_0 = var_0.owner;

        if ( var_0 == self.owner && !istrue( self.killoneshot ) )
            var_3 = ceil( var_3 / 2 );
    }

    return int( var_3 );
}

isexplosiveantikillstreakweapon( var_0 )
{
    var_1 = 0;
    var_2 = 0;

    if ( isstring( var_0 ) )
        var_2 = issubstr( var_0, "_encstr_AD830589BDDC51" );
    else if ( issameweapon( var_0 ) )
        var_2 = var_0.isalternate;

    var_3 = 0;

    if ( istrue( var_2 ) )
    {
        var_4 = scripts\mp\utility\weapon::getweaponattachmentsbasenames( var_0 );

        foreach ( var_6 in var_4 )
        {
            if ( var_6 == "_encstr_89070358A2" )
            {
                var_3 = 1;
                break;
            }
        }
    }

    var_8 = scripts\mp\utility\weapon::getweaponbasenamescript( var_0 );

    switch ( var_8 )
    {
        case "_encstr_B843199068334F4A6FE043BBD077873748C4373C7ED89B574788CB":
        case "_encstr_948D18DCAC9B4793E5EB6E1AED36B5AFDA5AE6E62D8D2BEBD638":
        case "_encstr_95B3140AE45A733BD927203023FBD1CF320D7F987D13":
        case "_encstr_B35E16DCEE2DD1B134BE98632C232BAFC6D02D1B46F5AD07":
        case "_encstr_A6BB1188A378EFAF7341C35918C527A249AD7B":
        case "_encstr_BE5419C827F6B9CA7D34D29D2BD7E0E4DBD4591B8ED21BCA7DB61C":
        case "_encstr_9CD20F566B38D79DE4CA730B2356F55B83":
        case "_encstr_970F0EE3A041D9E66F48B47B63E1A071":
        case "_encstr_8C950D507B43B3E8DB154EC3D72793":
        case "_encstr_BCAE08D8D0F5B607F538":
        case "_encstr_A623119954EA97FD2321729BA06BF7737E3108":
        case "_encstr_A96D112BD7424E71F6412840DACA230B87652F":
        case "_encstr_BE3E15324BBBD7B5B807B4F11D48BF67CC203B7AD6F9A3":
        case "_encstr_8F39108B1387575A3139AA8F09B0A077A12B":
            var_1 = 1;
            break;
    }

    return var_1;
}

nulldamagecheck( var_0 )
{
    return isdefined( var_0 ) && var_0 == self.owner;
}

dodamagetokillstreak( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = ( 0, 0, 0 );
    var_8 = ( 0, 0, 0 );
    var_9 = ( 0, 0, 0 );
    var_10 = ( 0, 0, 0 );
    var_11 = "_encstr_A40101";
    var_12 = "_encstr_A40101";
    var_13 = "_encstr_A40101";
    var_14 = undefined;

    if ( isdefined( var_3 ) )
    {
        if ( level.teambased )
        {
            if ( !scripts\mp\utility\entity::isvalidteamtarget( var_1, var_3, self ) )
                return;
        }
        else if ( !scripts\mp\utility\entity::isvalidffatarget( var_1, var_3, self ) )
            return;
    }

    if ( isagent( self ) )
        self dodamage( var_0, var_4, var_1, var_2, var_5, var_6 );
    else if ( scripts\cp_mp\vehicles\vehicle::isvehicle() )
        self dodamage( var_0, var_4, var_1, var_2, var_5, var_6 );
    else
    {
        var_15 = asmdevgetallstates( var_6 );
        self notify( "_encstr_B8BE07320B5B16ECAC", var_0, var_1, var_7, var_8, var_5, var_11, var_12, var_13, var_14, var_15, var_4, var_9, var_10, var_2 );
    }
}

playdlightfx( var_0, var_1 )
{
    self endon( "_encstr_A3750609A5E61883" );

    if ( !isdefined( var_0 ) )
        var_0 = ( 0, 0, 0 );

    if ( !isdefined( var_1 ) )
        var_1 = ( 0, 0, 0 );

    var_2 = scripts\engine\utility::getfx( "_encstr_A3EE0DDD9C571929E3F168183BFFFB" );

    if ( istrue( self.isairdrop ) )
        var_2 = scripts\engine\utility::getfx( "_encstr_9C770D918DB4EC0D47F5CD6B581B36" );

    self.fxdlightent = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", self.origin );
    self.fxdlightent setmodel( "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
    self.fxdlightent linkto( self, "_encstr_8CB40B4BB398B1C0A81FDF6BEA", var_0, var_1 );
    self.fxdlightent thread deleteonparentdeath( self );
    wait 0.1;
    playfxontag( var_2, self.fxdlightent, "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
}

deleteonparentdeath( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    var_0 waittill( "_encstr_A3750609A5E61883" );

    if ( isdefined( self ) )
        self delete();
}

isaffectedbyblindeye( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_BD86075D3FD0DF78B5":
        case "_encstr_AB470D9B59738E275EAF9BD07BD8B6":
            return 1;
    }

    return 0;
}

getplayerkillstreakcombatmode( var_0 )
{
    var_1 = "_encstr_AABA05A365D835";

    if ( isdefined( var_0.owner ) && isdefined( var_0.owner.currentcombatmode ) )
        var_1 = var_0.owner.currentcombatmode;

    return var_1;
}

watchsupertrophynotify( var_0 )
{
    var_0 endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_AB0808DFB97F822F1899" );

    for (;;)
    {
        var_0 waittill( "_encstr_BAF614C8AC9B1D4EDECB2B19F526CBFAA339BDC1A1F2", var_1, var_2, var_3, var_4, var_5 );

        if ( var_3 != self.weapon_name )
            continue;

        var_0 scripts\mp\damagefeedback::updatedamagefeedback( "_encstr_A40101" );
        break;
    }
}

watchhostmigrationlifetime( var_0, var_1, var_2 )
{
    if ( var_0 != "_encstr_A3750609A5E61883" )
        self endon( "_encstr_A3750609A5E61883" );

    self endon( var_0 );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_3 = gettime() + int( var_1 * 1000 );
    level waittill( "_encstr_A33F15D07BB93AEBB6B43B9C2C472D7BDC7D4C59765ADC" );
    self notify( "_encstr_87ED1FB80A22E9EEBF79A42649E31097CD9110C8F2FF51E0579DA09D30CB5979F7" );
    var_4 = gettime();
    var_5 = var_3 - var_4;
    level waittill( "_encstr_B6A51386ED9B1DF5DA9676938547D2B7DCD756DCC8" );
    var_6 = gettime();
    var_7 = var_6 + var_5;
    var_5 = var_5 / 1000;

    if ( isdefined( self.streakname ) && scripts\cp_mp\utility\killstreak_utility::isridekillstreak( self.streakname ) )
        self.owner setclientomnvar( "_encstr_A42D18CD082E5CE1F178A2E9364DE7A24FDF78C8B250272DC450", var_7 );

    self [[ var_2 ]]( var_5 );
}

getenemytargets( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( var_0 scripts\mp\utility\player::isenemy( var_3 ) )
            var_1[var_1.size] = var_3;
    }

    return var_1;
}

_beginlocationselection( var_0, var_1, var_2, var_3 )
{
    self beginlocationselection( var_1, var_2, 0, var_3 );
    self.selectinglocation = 1;
    self setblurforplayer( 10.3, 0.3 );
    thread endselectiononaction( "_encstr_A1A210401148579102D7E10FBFA1C19C97F5" );
    thread endselectiononaction( "_encstr_A3750609A5E61883" );
    thread endselectiononaction( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    thread endselectiononaction( "_encstr_9EE405D56E568C" );
    thread endselectiononaction( "_encstr_89390E4C39FEB818C099781C19966AEB" );
    self endon( "_encstr_807F187F394A41D165F502F118D4478020C207C897D3E521F780" );
    thread endselectiononendgame();

    if ( isdefined( var_0 ) && self.team != "_encstr_A68C0A5803A5D151A2B310A6" && self.team != "_encstr_B33E0979A77828123F58A2" )
    {
        if ( isdefined( self.streakmsg ) )
            self.streakmsg destroy();

        if ( self issplitscreenplayer() )
        {
            self.streakmsg = scripts\mp\hud_util::createfontstring( "_encstr_AA1608C07786F13312D3", 1.3 );
            self.streakmsg scripts\mp\hud_util::setpoint( "_encstr_B1C4073FFD25110DE3", "_encstr_B1C4073FFD25110DE3", 0, -98 );
        }
        else
        {
            self.streakmsg = scripts\mp\hud_util::createfontstring( "_encstr_AA1608C07786F13312D3", 1.6 );
            self.streakmsg scripts\mp\hud_util::setpoint( "_encstr_B1C4073FFD25110DE3", "_encstr_B1C4073FFD25110DE3", 0, -190 );
        }
    }
}

stoplocationselection( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = "_encstr_889608EF71FB09582BD6";

    if ( !var_0 )
    {
        self setblurforplayer( 0, 0.3 );
        self endlocationselection();
        self.selectinglocation = undefined;

        if ( isdefined( self.streakmsg ) )
            self.streakmsg destroy();
    }

    self notify( "_encstr_807F187F394A41D165F502F118D4478020C207C897D3E521F780", var_1 );
}

endselectiononaction( var_0 )
{
    self endon( "_encstr_807F187F394A41D165F502F118D4478020C207C897D3E521F780" );
    self waittill( var_0 );
    thread stoplocationselection( var_0 == "_encstr_8A820B4696CDB1ED3737AC1B3A", var_0 );
}

endselectiononendgame()
{
    self endon( "_encstr_807F187F394A41D165F502F118D4478020C207C897D3E521F780" );
    level waittill( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    thread stoplocationselection( 0, "_encstr_AFAF0901C55BB78F17ED72" );
}

streakshouldchain( var_0 )
{
    var_1 = scripts\mp\killstreaks\killstreaks::calcstreakcost( var_0 );
    var_2 = scripts\mp\killstreaks\killstreaks::getnextstreakname();
    var_3 = scripts\mp\killstreaks\killstreaks::calcstreakcost( var_2 );
    return var_1 < var_3;
}

streakcheckistargetindoors( var_0, var_1 )
{
    var_2 = 0;
    var_3 = scripts\engine\trace::create_contents( 0, 1, 0, 1, 1, 0 );

    if ( !scripts\engine\trace::ray_trace_passed( var_0, var_0 + ( 0, 0, 10000 ), var_1, var_3 ) )
        var_2 = 1;

    return var_2;
}

validateusestreak( var_0, var_1 )
{
    if ( ( !self isonground() || self iswallrunning() ) && scripts\cp_mp\utility\killstreak_utility::isridekillstreak( var_0 ) )
    {
        scripts\mp\hud_message::showerrormessage( "_encstr_80DC1828B4B993720915FD815F4915BFD02D71301C615FFEE113" );
        return 0;
    }

    if ( isdefined( self.selectinglocation ) )
        return 0;

    if ( scripts\mp\utility\game::isairdenied() )
    {
        if ( isflyingkillstreak( var_0 ) )
        {
            if ( !( isdefined( var_1 ) && var_1 ) )
                scripts\mp\hud_message::showerrormessage( "_encstr_9FCE209C490304F703297FF78C0EB11DDBF041670FB3D6389CB5B9F7C91DB5675507" );

            return 0;
        }
    }

    if ( self isusingturret() && ( scripts\cp_mp\utility\killstreak_utility::isridekillstreak( var_0 ) || iscarrykillstreak( var_0 ) || isturretkillstreak( var_0 ) ) )
    {
        if ( !( isdefined( var_1 ) && var_1 ) )
            scripts\mp\hud_message::showerrormessage( "_encstr_A4C02544A98B2D5F4959CD59F39FF7DBBD693E0E2BA50EDD99D3D7E791A9997FD153F353D9E753" );

        return 0;
    }

    if ( !scripts\common\utility::is_weapon_allowed() )
        return 0;

    if ( isdefined( level.civilianjetflyby ) && isflyingkillstreak( var_0 ) )
    {
        if ( !( isdefined( var_1 ) && var_1 ) )
        {

        }

        return 0;
    }

    if ( isdefined( var_0 ) && var_0 == "_encstr_AB470D9B59738E275EAF9BD07BD8B6" && scripts\mp\arbitrary_up::isinarbitraryup() )
    {
        if ( !( isdefined( var_1 ) && var_1 ) )
            scripts\mp\hud_message::showerrormessage( "_encstr_80DC1828B4B993720915FD815F4915BFD02D71301C615FFEE113" );

        return 0;
    }

    return 1;
}

isplayerkillstreak( var_0 )
{
    if ( !isdefined( var_0.activeplayerstreak ) )
        return 0;

    switch ( var_0.activeplayerstreak )
    {
        default:
            return 0;
    }
}

iscarrykillstreak( var_0 )
{
    switch ( var_0 )
    {
        default:
            return 0;
    }
}

isremotekillstreak( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_95B612AB8041DE4B9645020768F937A2FB38E2E2":
        case "_encstr_A2950E1A90EF5ED770CDAF8CE63873E7":
        case "_encstr_ABFD089D57CD370DD21C":
        case "_encstr_AF330F47C0F793D23B32CF4A6D0E7592DA":
        case "_encstr_B87010AA3BE80F83CFA7075A6D614F65EDBB":
        case "_encstr_9CB30B0EC28DFACD2BCD8E9CE5":
            var_1 = 1;
            break;
    }

    return var_1;
}

isuavkillstreak( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_B2CC0571600D60":
        case "_encstr_A29D0C52188BC58BF976173587E3":
        case "_encstr_8BFA1059C1A8717A6058B8E5FAB037E3D628":
        case "_encstr_B61904AEB067":
            var_1 = 1;
            break;
    }

    return var_1;
}

isairstrikekillstreak( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_B48810D6EA631D2DF5855AE4E61D932D5B95":
        case "_encstr_B26111DBB297152BF150C9CF7BE2B050139BD3":
        case "_encstr_A2980A513FE33518CF0C312B":
        case "_encstr_ABFD089D57CD370DD21C":
        case "_encstr_98910FC415453B3FE8B4DB0F03A3C25052":
        case "_encstr_8CE60CA3DE5BC2AFB98EC94B6D59":
        case "_encstr_B7F514E0C9AC364BE65ADEB9BEB05A279BA327D2ADB2":
            var_1 = 1;
            break;
    }

    return var_1;
}

islittlebirdkillstreak( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_9867080A50FD0FDBE03F":
            var_1 = 1;
            break;
    }

    return var_1;
}

ishelikillstreak( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_A9D7101B9AC5C12BBF4298863D9353B7EAC3":
        case "_encstr_AF330F47C0F793D23B32CF4A6D0E7592DA":
            var_1 = 1;
            break;
    }

    return var_1;
}

isballdronekillstreak( var_0 )
{
    var_1 = 0;
    return var_1;
}

isturretkillstreak( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_8BD90EB62CB9EAC28DFAD1EAE49C56D1":
            var_1 = 1;
            break;
    }

    return var_1;
}

isprojectilekillstreak( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_B87010AA3BE80F83CFA7075A6D614F65EDBB":
            var_1 = 1;
            break;
    }

    return var_1;
}

issupportdronekillstreak( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_8BBC170EDB73911B5E0AF84811F71DE8AB45808D23EF986D83":
        case "_encstr_B2E0135047A4915D41B79E280DDA3FD91BD730A8FB":
        case "_encstr_95B612AB8041DE4B9645020768F937A2FB38E2E2":
        case "_encstr_A2950E1A90EF5ED770CDAF8CE63873E7":
        case "_encstr_8262160BC849A9EB6FE5423DD833F17FD32BF39750E3E312":
        case "_encstr_970316AA19E011BA56B9CF9BF70D134768A1293773C0CAE2":
            var_1 = 1;
            break;
    }

    return var_1;
}

isassaultdronekillstreak( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_9CB30B0EC28DFACD2BCD8E9CE5":
            var_1 = 1;
            break;
    }

    return var_1;
}

iscarepackage( var_0 )
{
    return isdefined( var_0 ) && isdefined( var_0.id ) && var_0.id == "_encstr_98E50D36B03956BE1C851BDAC2D9CA";
}

isjuggernaut()
{
    return istrue( self.isjuggernaut );
}

isremotekillstreakweapon( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_9B3F143483119AB26907035F7F865ACD8029EAB1F8C0":
        case "_encstr_A4CB12ADB9FA9CCA6BDB3A2BBE1AC21BD67DB61C":
        case "_encstr_8291145B96C6AFFAC71043CAA047F72B38F0DDF7218B":
        case "_encstr_89EA13CB47593A3F1958FB9226E52B3588C34745D9":
        case "_encstr_B1E612B66EEBC92B6BF6E8AC7D37D5DACAD7B60E":
        case "_encstr_A420110F1729E6C885357B51D17D101FC1F7B1":
        case "_encstr_A983156DB9EB4EAC5B7B47B2EBB35D9B9B0D2D0EFADA0E":
        case "_encstr_889914F7B33FEBE023D5739DB9528B86C07E8F498A0B":
            var_1 = 1;
            break;
    }

    return var_1;
}

iskillstreaklockonable( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_B2CC0571600D60":
        case "_encstr_8BFA1059C1A8717A6058B8E5FAB037E3D628":
        case "_encstr_B87010AA3BE80F83CFA7075A6D614F65EDBB":
            return 0;
        default:
            return 1;
    }
}

isflyingkillstreak( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_87FC0B9193DEDC59BE864B9D2B":
        case "_encstr_AD100B10C5F8D7B989289AA2E8":
        case "_encstr_A4BE170BB493C89CBDE07DB959CDA3C9BC7DDAB4E64B76BA37":
        case "_encstr_8B010BD0951B5AC6BD83A3CAC9":
        case "_encstr_B6B5108F298BC9AD9553A1685BAA43232BDC":
        case "_encstr_9867080A50FD0FDBE03F":
        case "_encstr_ABFD089D57CD370DD21C":
        case "_encstr_B7F514E0C9AC364BE65ADEB9BEB05A279BA327D2ADB2":
            return 1;
        default:
            return 0;
    }
}

getkillstreakindex( var_0 )
{
    return level.killstreakglobals.streaktable.tabledatabyref[var_0]["_encstr_A48F06A5B991CA0F"];
}

getkillstreakkills( var_0 )
{
    var_1 = "_encstr_BA8D06E75935489E";

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_B4F424AE0A42D72069B35838978BF8117A72A5B6277A8FAE44A7F9705FD7D34B535B1EB5BE72" ) && var_0 != "_encstr_BDBA05D35D0C2D" )
        var_1 = "_encstr_93F50A6B31E8AB3F71AF0BF4";
    else if ( scripts\mp\utility\perk::_hasperk( "_encstr_8C9E1ED237DB22713140FBD7C12B255B89C01A8B086F5A8C7890F3F37841E393" ) )
        var_1 = "_encstr_9DBD0CA0EF483BEF0B3BBEA0D243";

    return level.killstreakglobals.streaktable.tabledatabyref[var_0][var_1];
}

getkillstreakenemyusedialogue( var_0 )
{
    return level.killstreakglobals.streaktable.tabledatabyref[var_0]["_encstr_93A50F2BDC59B52F556ECA88A50BC6B7EC"];
}

getkillstreakaudioref( var_0 )
{
    var_1 = getkillstreakaudiorefoverride( var_0 );

    if ( var_1 != "_encstr_A40101" )
        return var_1;

    var_2 = strtok( var_0, "_encstr_984C028E" );

    foreach ( var_4 in var_2 )
    {
        if ( var_1 == "_encstr_A40101" )
        {
            var_1 = var_4;
            continue;
        }

        var_1 = var_1 + var_4;
    }

    return var_1;
}

getkillstreakaudiorefoverride( var_0 )
{
    var_1 = "_encstr_A40101";

    switch ( var_0 )
    {
        case "_encstr_A67F106007B3C1ED0AAD07B2182A5305704F":
            var_1 = "_encstr_A4570A5B708D3ED71161353A";
            break;
        case "_encstr_B87010AA3BE80F83CFA7075A6D614F65EDBB":
            var_1 = "_encstr_8C3D0938395991581DDB4E";
            break;
        case "_encstr_8CE60CA3DE5BC2AFB98EC94B6D59":
            var_1 = "_encstr_80020E63D9A8DADBBD5B2B636383EF17";
            break;
        case "_encstr_B7F514E0C9AC364BE65ADEB9BEB05A279BA327D2ADB2":
            var_1 = "_encstr_9BFF0AF63FF8E773F5606707";
            break;
    }

    return var_1;
}

getkillstreakoverheadicon( var_0 )
{
    return level.killstreakglobals.streaktable.tabledatabyref[var_0]["_encstr_8BAE0D72137DFBFBB8AABBC957B7AA"];
}

currentactivevehiclecount( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    var_1 = var_0;

    if ( isdefined( level.helis ) )
        var_1 = var_1 + level.helis.size;

    if ( isdefined( level.littlebirds ) )
        var_1 = var_1 + level.littlebirds.size;

    if ( isdefined( level.ugvs ) )
        var_1 = var_1 + level.ugvs.size;

    if ( isdefined( level.bradley ) && isdefined( level.bradley.vehicles ) )
        var_1 = var_1 + level.bradley.size;

    if ( isdefined( level.supportdrones ) )
        var_1 = var_1 + level.supportdrones.size;

    if ( isdefined( level.assaultdrones ) )
        var_1 = var_1 + level.assaultdrones.size;

    return var_1;
}

maxvehiclesallowed()
{
    return 8;
}

fauxvehiclecount()
{
    return level.fauxvehiclecount;
}

incrementfauxvehiclecount( var_0 )
{
    if ( !isdefined( var_0 ) )
        level.fauxvehiclecount++;
    else
        level.fauxvehiclecount = level.fauxvehiclecount + var_0;
}

decrementfauxvehiclecount( var_0 )
{
    if ( !isdefined( var_0 ) )
        level.fauxvehiclecount--;
    else
        level.fauxvehiclecount = level.fauxvehiclecount - var_0;

    if ( level.fauxvehiclecount < 0 )
        level.fauxvehiclecount = 0;
}

isassaultkillstreak( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_87FC0B9193DEDC59BE864B9D2B":
        case "_encstr_B2CC0571600D60":
        case "_encstr_8BFA1059C1A8717A6058B8E5FAB037E3D628":
        case "_encstr_B61904AEB067":
            return 1;
        default:
            return 0;
    }
}

isresourcekillstreak( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_AFE61074BD03BBDDF3F0D22AC86796771810":
        case "_encstr_A96E0B25C17B4ECFB7B3F0B0BA":
        case "_encstr_B81E0CE1199F2D6663A0217BD316":
        case "_encstr_A8EE0C1A4F01B7E3196938C81DAD":
        case "_encstr_B42C0B130741603B676ABEF053":
        case "_encstr_95391023950763BDE58526B1B2D7EC59DCE8":
            return 1;
        default:
            return 0;
    }
}

issupportkillstreak( var_0 )
{
    switch ( var_0 )
    {
        default:
            return 0;
    }
}

isspecialistkillstreak( var_0 )
{
    switch ( var_0 )
    {
        default:
            return 0;
    }
}

gethelipilotmeshoffset()
{
    return ( 0, 0, 5000 );
}

gethelipilottraceoffset()
{
    return ( 0, 0, 2500 );
}

isnavmeshkillstreak( var_0 )
{
    var_1 = 0;
    return var_1;
}

iscontrollingproxyagent()
{
    var_0 = 0;

    if ( isdefined( self.playerproxyagent ) && isalive( self.playerproxyagent ) )
        var_0 = 1;

    return var_0;
}

killshouldaddtokillstreak( var_0 )
{
    if ( scripts\mp\utility\perk::_hasperk( "_encstr_A4371BE6E0B28D9685B1D1977DB28783C6DECDD2D9594CABC6D859E86E" ) )
        return 0;

    return !scripts\mp\utility\weapon::iskillstreakweapon( var_0.basename ) && !scripts\mp\utility\points::update_objective_setmlgbackground( var_0 );
}

iskillstreak( var_0 )
{
    return getkillstreakindex( var_0 ) != -1;
}

getairdropcrates()
{
    if ( isdefined( level.cratedata ) )
        return level.cratedata.crates;

    return [];
}

getnumairdropcrates()
{
    if ( isdefined( level.cratedata ) )
        return level.cratedata.crates.size;

    return 0;
}

attackerinremotekillstreak()
{
    if ( !isdefined( self ) )
        return 0;

    if ( isdefined( level.gunshipplayer ) && self == level.gunshipplayer )
        return 1;

    if ( isdefined( level.chopper ) && isdefined( level.chopper.gunner ) && self == level.chopper.gunner )
        return 1;

    if ( isdefined( self.using_remote_tank ) && self.using_remote_tank )
        return 1;

    return 0;
}

killstreak_make_vehicle( var_0, var_1, var_2, var_3, var_4 )
{
    self.vehiclename = var_0;
    self.scorepopup = var_1;
    self.vodestroyed = var_2;
    self.votimeout = var_3;
    self.destroyedsplash = var_4;
    self enableplayermarks( "_encstr_B6CE0B0BB00A031B7B88355740" );

    if ( level.teambased )
        self filteroutplayermarks( self.team );
    else
        self filteroutplayermarks( self.owner );

    scripts\cp_mp\vehicles\vehicle_damage::vehicle_damage_enableownerdamage( self );
    scripts\mp\vehicles\damage::get_vehicle_mod_damage_data( var_0, 1 );
}

killstreak_vehicle_callback_init()
{
    if ( !istrue( level.kscallbackinitcomplete ) )
    {
        level.kscallbackinitcomplete = 1;
        level.kspremoddamagecallback = ::killstreak_pre_mod_damage_callback;
        level.kspostmoddamagecallback = ::killstreak_post_mod_damage_callback;
        level.ksdeathcallback = ::killstreak_death_callback;
    }
}

killstreak_pre_mod_damage_callback( var_0 )
{
    var_1 = var_0.damage;
    var_2 = var_0.attacker;

    if ( !istrue( self.killoneshot ) )
    {
        if ( isdefined( var_2 ) && isdefined( self.owner ) && var_2 == self.owner )
            var_1 = int( ceil( var_1 * 0.5 ) );

        var_0.damage = var_1;
    }

    var_3 = 1;
    var_4 = self.kspremoddamagecallback;

    if ( isdefined( var_4 ) )
        var_3 = self [[ var_4 ]]( var_0 );

    return var_3;
}

killstreak_post_mod_damage_callback( var_0 )
{
    scripts\mp\killstreaks\killstreaks::killstreakhit( var_0.attacker, var_0.objweapon, self, var_0.meansofdeath, var_0.damage );
    var_1 = 1;
    var_2 = self.kspostmoddamagecallback;

    if ( isdefined( var_2 ) )
        var_1 = self [[ var_2 ]]( var_0 );

    return var_1;
}

killstreak_death_callback( var_0 )
{
    scripts\mp\damage::onkillstreakkilled( self.streakname, var_0.attacker, var_0.objweapon, var_0.meansofdeath, var_0.damage, self.scorepopup, self.vodestroyed, self.destroyedsplash );
    var_1 = 1;
    var_2 = self.ksdeathcallback;

    if ( isdefined( var_2 ) )
        var_1 = self [[ var_2 ]]( var_0 );

    return var_1;
}

killstreak_set_pre_mod_damage_callback( var_0, var_1 )
{
    killstreak_vehicle_callback_init();
    scripts\mp\vehicles\damage::set_pre_mod_damage_callback( var_0, level.kspremoddamagecallback );
    self.kspremoddamagecallback = var_1;
}

killstreak_set_post_mod_damage_callback( var_0, var_1 )
{
    killstreak_vehicle_callback_init();
    scripts\mp\vehicles\damage::set_post_mod_damage_callback( var_0, level.kspostmoddamagecallback );
    self.kspostmoddamagecallback = var_1;
}

killstreak_set_death_callback( var_0, var_1 )
{
    killstreak_vehicle_callback_init();
    scripts\mp\vehicles\damage::set_death_callback( var_0, level.ksdeathcallback );
    self.ksdeathcallback = var_1;
}

getkillstreaknamefromweapon( var_0 )
{
    var_1 = var_0.basename;

    if ( isdefined( level.killstreakweaponmap[var_1] ) )
        return level.killstreakweaponmap[var_1];

    return undefined;
}
