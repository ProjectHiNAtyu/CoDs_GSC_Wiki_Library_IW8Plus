// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

setmodelfromarray( var_0 )
{
    if ( !scripts\common\utility::issp() )
        self setmodel( var_0[randomint( var_0.size )] );
    else
    {
        if ( !isdefined( level.character_model_cache ) )
            level.character_model_cache = [];

        var_1 = get_least_used_model( var_0 );

        if ( !isdefined( var_1 ) )
            var_1 = var_0[randomint( var_0.size )];

        level.character_model_cache["_encstr_A3B90A14C71BA3B983F80A12"] = var_1;
        level.character_model_cache[var_1]++;
        self setmodel( var_1 );
    }
}

get_least_used_model( var_0 )
{
    var_1 = [];
    var_2 = 999999;
    var_1[0] = 0;

    for ( var_3 = 0; var_3 < var_0.size; var_3++ )
    {
        if ( !isdefined( level.character_model_cache[var_0[var_3]] ) )
            level.character_model_cache[var_0[var_3]] = 0;

        var_4 = level.character_model_cache[var_0[var_3]];

        if ( var_4 > var_2 )
            continue;

        if ( var_4 < var_2 )
        {
            var_1 = [];
            var_2 = var_4;
        }

        var_1[var_1.size] = var_3;
    }

    var_5 = random( var_1 );
    return var_0[var_5];
}

precachemodelarray( var_0 )
{
    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
        precachemodel( var_0[var_1] );
}

attachhead( var_0, var_1 )
{
    if ( !isdefined( level.character_head_index ) )
        level.character_head_index = [];

    if ( !isdefined( level.character_head_index[var_0] ) )
        level.character_head_index[var_0] = randomint( var_1.size );

    var_2 = ( level.character_head_index[var_0] + 1 ) % var_1.size;

    if ( isdefined( self.script_char_index ) )
        var_2 = self.script_char_index % var_1.size;

    level.character_head_index[var_0] = var_2;
    self attach( var_1[var_2], "_encstr_A40101", 1 );
    self.headmodel = var_1[var_2];
}

attachhat( var_0, var_1 )
{
    if ( !isdefined( level.character_hat_index ) )
        level.character_hat_index = [];

    if ( !isdefined( level.character_hat_index[var_0] ) )
        level.character_hat_index[var_0] = randomint( var_1.size );

    var_2 = ( level.character_hat_index[var_0] + 1 ) % var_1.size;
    level.character_hat_index[var_0] = var_2;
    self attach( var_1[var_2] );
    self.hatmodel = var_1[var_2];
}

new()
{
    self detachall();
    var_0 = self.anim_gunhand;

    if ( !isdefined( var_0 ) )
        return;

    self.anim_gunhand = "_encstr_AABA05236DC831";
    self [[ anim.putguninhand ]]( var_0 );
}

save()
{
    var_0["_encstr_A8B10832EB706B162091"] = self.anim_gunhand;
    var_0["_encstr_B1800AEF63F8DC2BB3B142EA"] = self.anim_guninhand;
    var_0["_encstr_B193064B48286D1C"] = self.model;
    var_0["_encstr_ADD4091A9AE005603398A4"] = self.hatmodel;

    if ( isdefined( self.name ) )
        var_0["_encstr_81BA051A9AA88B"] = self.name;
    else
    {

    }

    var_1 = self getattachsize();

    for ( var_2 = 0; var_2 < var_1; var_2++ )
    {
        var_0["_encstr_A99A0766F0F0390F7C"][var_2]["_encstr_B193064B48286D1C"] = self getattachmodelname( var_2 );
        var_0["_encstr_A99A0766F0F0390F7C"][var_2]["_encstr_A619045937C2"] = self getattachtagname( var_2 );
    }

    return var_0;
}

load( var_0 )
{
    self detachall();
    self.anim_gunhand = var_0["_encstr_A8B10832EB706B162091"];
    self.anim_guninhand = var_0["_encstr_B1800AEF63F8DC2BB3B142EA"];
    self setmodel( var_0["_encstr_B193064B48286D1C"] );
    self.hatmodel = var_0["_encstr_ADD4091A9AE005603398A4"];

    if ( isdefined( var_0["_encstr_81BA051A9AA88B"] ) )
        self.name = var_0["_encstr_81BA051A9AA88B"];
    else
    {

    }

    var_1 = var_0["_encstr_A99A0766F0F0390F7C"];
    var_2 = var_1.size;

    for ( var_3 = 0; var_3 < var_2; var_3++ )
        self attach( var_1[var_3]["_encstr_B193064B48286D1C"], var_1[var_3]["_encstr_A619045937C2"] );
}

precache( var_0 )
{
    if ( isdefined( var_0["_encstr_81BA051A9AA88B"] ) )
    {

    }
    else
    {

    }

    precachemodel( var_0["_encstr_B193064B48286D1C"] );
    var_1 = var_0["_encstr_A99A0766F0F0390F7C"];
    var_2 = var_1.size;

    for ( var_3 = 0; var_3 < var_2; var_3++ )
        precachemodel( var_1[var_3]["_encstr_B193064B48286D1C"] );
}

get_random_character( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;

    if ( isdefined( var_3 ) )
        var_5 = strtok( var_3, "_encstr_984C028E" );
    else
        var_5 = strtok( self.classname, "_encstr_984C028E" );

    if ( !scripts\common\utility::issp() )
    {
        if ( isdefined( self.pers["_encstr_8C670B53DAA39D410973716F60"] ) && self.pers["_encstr_8C670B53DAA39D410973716F60"] < var_0 )
            return self.pers["_encstr_8C670B53DAA39D410973716F60"];

        var_4 = randomint( var_0 );
        self.pers["_encstr_8C670B53DAA39D410973716F60"] = var_4;
        return var_4;
    }
    else if ( var_5.size <= 2 )
        return randomint( var_0 );

    var_6 = "_encstr_A384058B9F0BF8";

    if ( isdefined( self.script_char_index ) )
        var_4 = self.script_char_index;
    else if ( isdefined( var_1 ) )
        var_4 = get_randomly_weighted_character( var_1 );

    if ( isdefined( self.script_char_group ) )
        var_6 = "_encstr_A923071AF8B73BA3B6" + self.script_char_group;

    if ( !isdefined( level.character_index_cache ) )
        level.character_index_cache = [];

    if ( !isdefined( level.character_index_cache[var_6] ) )
        level.character_index_cache[var_6] = [];

    if ( !isdefined( var_4 ) )
    {
        var_4 = get_least_used_index( var_2, var_6 );

        if ( !isdefined( var_4 ) )
            var_4 = randomint( var_2.size );
    }

    if ( !isdefined( level.character_index_cache[var_6][var_2[var_4]] ) )
        level.character_index_cache[var_6][var_2[var_4]] = 0;

    level.character_index_cache[var_6][var_2[var_4]]++;
    return var_4;
}

get_least_used_index( var_0, var_1 )
{
    var_2 = [];
    var_3 = 999999;
    var_2[0] = 0;

    for ( var_4 = 0; var_4 < var_0.size; var_4++ )
    {
        if ( !isdefined( level.character_index_cache[var_1][var_0[var_4]] ) )
            level.character_index_cache[var_1][var_0[var_4]] = 0;

        var_5 = level.character_index_cache[var_1][var_0[var_4]];

        if ( var_5 > var_3 )
            continue;

        if ( var_5 < var_3 )
        {
            var_2 = [];
            var_3 = var_5;
        }

        var_2[var_2.size] = var_4;
    }

    return random( var_2 );
}

initialize_character_group( var_0, var_1, var_2 )
{
    for ( var_3 = 0; var_3 < var_2; var_3++ )
        level.character_index_cache[var_0][var_1][var_3] = 0;
}

get_random_weapon( var_0 )
{
    return randomint( var_0 );
}

random( var_0 )
{
    return var_0[randomint( var_0.size )];
}

get_randomly_weighted_character( var_0 )
{
    var_1 = randomfloat( 1 );

    for ( var_2 = 0; var_2 < var_0.size; var_2++ )
    {
        if ( var_1 < var_0[var_2] )
            return var_2;
    }

    return 0;
}
