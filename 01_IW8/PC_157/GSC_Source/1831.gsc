// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

registercrankedtimerdvar( var_0, var_1 )
{
    scripts\mp\utility\dvars::registerwatchdvarint( "_encstr_B166110693D0B6627D01CB076B96D9F9E8D9FA", var_1 );
}

setcrankeddvarfordev()
{

}

makeplayercranked( var_0 )
{
    scripts\mp\utility\dialog::leaderdialogonplayer( var_0 );
    setcrankedplayerbombtimer( "_encstr_97D70583536853" );
    self.cranked = 1;
    scripts\mp\utility\perk::giveperk( "_encstr_B9FE151A83CF7E72792BC5D85FBB632B045BEBE0AF06AA" );
    scripts\mp\utility\perk::giveperk( "_encstr_9E29141ED83FC163EE7A60CB218203D88F7B2D16218F" );
    scripts\mp\utility\perk::giveperk( "_encstr_A14F1612C3E0AB520F61634F1FA49AF3D088CFDF38287EBA" );
    scripts\mp\utility\perk::giveperk( "_encstr_9F891DC3FB723B306010230B10A6F047D1239BE654E3A0BE9DF798061FE263" );
    scripts\mp\utility\perk::giveperk( "_encstr_821213B263400BF2EF8183AFFF813A52188BEC3D18" );
    scripts\mp\utility\perk::giveperk( "_encstr_B1AC14370756C62D581B1D97FA5CD5A5366DB9EEB007" );
    scripts\mp\utility\perk::giveperk( "_encstr_976D1292779B62317163BB9781EBE48A71029F4A" );
    scripts\mp\utility\perk::giveperk( "_encstr_A3BE15437B034F5BD6310C70E113D3F0305DA471793B65" );
    self.movespeedscaler = 1.2;
    scripts\mp\weapons::updatemovespeedscale();
}

oncranked( var_0, var_1, var_2 )
{
    if ( isdefined( var_0 ) )
        var_0 thread cleanupcrankedplayertimer();

    if ( isdefined( var_1.cranked ) )
    {
        var_3 = "_encstr_B66A0D30CAEB61A9963A83E55B7F38";
        var_1 thread scripts\mp\rank::scoreeventpopup( "_encstr_876F0B29A9E5901837EA2931D2" );
        var_1 thread oncrankedkill( var_3 );

        if ( !istrue( scripts\cp_mp\utility\game_utility::isrealismenabled() ) )
            var_1 playsoundtoplayer( "_encstr_A31D12C06B17D6F00636878324E1B027A3129BE8", var_1 );
    }
    else if ( scripts\mp\utility\player::isreallyalive( var_1 ) )
    {
        var_1 makeplayercranked( "_encstr_9D800E9895D94B37AFD89C58DCD6958C" );
        var_1 thread scripts\mp\rank::scoreeventpopup( "_encstr_9D800E9895D94B37AFD89C58DCD6958C" );

        if ( !istrue( scripts\cp_mp\utility\game_utility::isrealismenabled() ) )
            var_1 playsoundtoplayer( "_encstr_8B29180553A13B73FF95EFAFF9882B6408BBFB01AB30CC9ACEB1", var_1 );
    }

    if ( isdefined( var_0 ) && isdefined( var_0.attackers ) && !isdefined( level.assists_disabled ) )
    {
        foreach ( var_5 in var_0.attackers )
        {
            if ( !isdefined( scripts\mp\utility\damage::_validateattacker( var_5 ) ) )
                continue;

            if ( var_5 == var_1 )
                continue;

            if ( var_0 == var_5 )
                continue;

            if ( !isdefined( var_5.cranked ) )
                continue;

            var_5 thread oncrankedassist( "_encstr_AD300F52D8A764F7BB804B52A7C0AFAF21" );
            var_5 thread scripts\mp\rank::scoreeventpopup( "_encstr_AD300F52D8A764F7BB804B52A7C0AFAF21" );
            var_5 thread scripts\mp\rank::scoreeventpopup( "_encstr_876F0B29A9E5901837EA2931D2" );

            if ( !istrue( scripts\cp_mp\utility\game_utility::isrealismenabled() ) )
                var_5 playsoundtoplayer( "_encstr_A31D12C06B17D6F00636878324E1B027A3129BE8", var_5 );
        }
    }
}

_id_1200C( var_0 )
{
    if ( self == var_0 )
        return;

    setcrankedplayerbombtimer( "_encstr_B71904ABC973" );
}

cleanupcrankedplayertimer()
{
    self setclientomnvar( "_encstr_9B4C27CD7BCFFE9A58FB8FA004CE693508FEC7ABB120B205DEF81D0B97C0FB80434F12156B689505E0", 0 );
    self.cranked = undefined;
    self.cranked_end_time = undefined;
    thread waitthenstopcrankedbombtimer();
}

waitthenstopcrankedbombtimer()
{
    waitframe();
    self notify( "_encstr_AD8E0DC01B85818EE702C748E30711" );
}

oncrankedkill( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    while ( !isdefined( self.pers ) )
        waitframe();

    setcrankedplayerbombtimer( "_encstr_97D70583536853" );
}

oncrankedassist( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    setcrankedplayerbombtimer( "_encstr_A9BD0716B96E4BCDE8" );
}

setcrankedplayerbombtimer( var_0 )
{
    var_1 = level.crankedbombtimer;
    var_2 = 0;

    if ( scripts\mp\utility\game::getgametype() == "_encstr_9E91056EB77B0E" || scripts\mp\utility\game::getgametype() == "_encstr_9B290667C6D043EF" )
        var_2 = 1;

    if ( var_0 == "_encstr_B71904ABC973" )
    {
        var_1 = int( ( self.cranked_end_time - gettime() ) / 1000 + 1 );

        if ( var_1 > level.crankedbombtimer )
            var_1 = level.crankedbombtimer;
    }
    else if ( var_0 == "_encstr_A9BD0716B96E4BCDE8" )
    {
        if ( var_2 )
            var_1 = int( min( ( self.cranked_end_time - gettime() ) / 1000 + level.crankedbombtimer * 0.25, level.crankedbombtimer ) );
        else
            var_1 = int( min( ( self.cranked_end_time - gettime() ) / 1000 + level.crankedbombtimer * 0.5, level.crankedbombtimer ) );
    }
    else if ( var_0 == "_encstr_88840D8AA35B676DD8D9714FF128F7" )
        var_1 = int( min( ( self.cranked_end_time - gettime() ) / 1000 + level.crankedbombtimer * 0.25, level.crankedbombtimer ) );
    else if ( var_2 )
    {
        if ( isdefined( self.cranked ) && self.cranked && isdefined( self.cranked_end_time ) )
            var_1 = int( min( ( self.cranked_end_time - gettime() ) / 1000 + level.crankedbombtimer * 0.5, level.crankedbombtimer ) );
        else
            var_1 = int( var_1 * 0.5 );
    }
    else
        var_1 = level.crankedbombtimer;

    var_3 = var_1 * 1000 + gettime();
    self setclientomnvar( "_encstr_9B4C27CD7BCFFE9A58FB8FA004CE693508FEC7ABB120B205DEF81D0B97C0FB80434F12156B689505E0", var_3 );
    self.cranked_end_time = var_3;
    thread watchcrankedplayerhostmigration();
    thread watchcrankedbombtimer( var_1 );
    thread watchcrankedendgame();
}

watchcrankedplayerhostmigration()
{
    self notify( "_encstr_A6911A3F1FD91B634726F0DB9349D073F8036C73994F7A02E97B4805" );
    self endon( "_encstr_A6911A3F1FD91B634726F0DB9349D073F8036C73994F7A02E97B4805" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_AD8E0DC01B85818EE702C748E30711" );
    level waittill( "_encstr_A33F15D07BB93AEBB6B43B9C2C472D7BDC7D4C59765ADC" );
    var_0 = scripts\mp\hostmigration::waittillhostmigrationdone();

    if ( var_0 > 0 )
        self setclientomnvar( "_encstr_9B4C27CD7BCFFE9A58FB8FA004CE693508FEC7ABB120B205DEF81D0B97C0FB80434F12156B689505E0", self.cranked_end_time + var_0 );
    else
        self setclientomnvar( "_encstr_9B4C27CD7BCFFE9A58FB8FA004CE693508FEC7ABB120B205DEF81D0B97C0FB80434F12156B689505E0", self.cranked_end_time );
}

watchcrankedendgame()
{
    self notify( "_encstr_87470D2BD2130EF8E7DE612FF9D5A8" );
    self endon( "_encstr_87470D2BD2130EF8E7DE612FF9D5A8" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_AD8E0DC01B85818EE702C748E30711" );

    for (;;)
    {
        if ( game["_encstr_A9AD064B0D19E377"] == "_encstr_B9E70983DEE6D1760BB5CA" || level.gameended )
        {
            self setclientomnvar( "_encstr_9B4C27CD7BCFFE9A58FB8FA004CE693508FEC7ABB120B205DEF81D0B97C0FB80434F12156B689505E0", 0 );
            break;
        }

        wait 0.1;
    }
}

watchcrankedbombtimer( var_0 )
{
    self notify( "_encstr_88CE0FDDB08E361A24DBD6314596B5B2C9" );
    self endon( "_encstr_88CE0FDDB08E361A24DBD6314596B5B2C9" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_AD8E0DC01B85818EE702C748E30711" );
    thread infectparachuteheightoffset( var_0 );
    var_1 = 5;
    var_2 = var_0 - var_1 - 1;

    if ( var_2 > 0 )
    {
        scripts\mp\hostmigration::waitlongdurationwithgameendtimeupdate( var_2 );
        scripts\mp\hostmigration::waitlongdurationwithgameendtimeupdate( 1.0 );
    }

    while ( var_1 > 0 )
    {
        self playsoundtoplayer( "_encstr_94B8141F1B6812B041D932FE50C8ED3AC089F7F7FB26", self );
        scripts\mp\hostmigration::waitlongdurationwithgameendtimeupdate( 1.0 );
        var_1--;
    }

    if ( isdefined( self ) && scripts\mp\utility\player::isreallyalive( self ) && scripts\mp\utility\game::getgametype() != "_encstr_B6EF0559D4F798" )
    {
        self playsound( "_encstr_8CD710B356CDA3EBCA0F381BEB8E93169BB9" );
        var_3 = self.origin + ( 0, 0, 32 );
        playfx( level._effect["_encstr_BAF310F90AB04DB7370331AF3A29182025E5"], var_3 );
        scripts\mp\utility\damage::_suicide();
        self radiusdamage( var_3, 256, 200, 100, self, "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9", "_encstr_9DF00DF37BD0E2716F3B8BC7086BBB" );
        self setclientomnvar( "_encstr_9B4C27CD7BCFFE9A58FB8FA004CE693508FEC7ABB120B205DEF81D0B97C0FB80434F12156B689505E0", 0 );

        if ( scripts\cp_mp\utility\player_utility::_isalive() )
            self dodamage( self.maxhealth, var_3, self, undefined, "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9", "_encstr_9DF00DF37BD0E2716F3B8BC7086BBB" );
    }
}

infectparachuteheightoffset( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self notify( "_encstr_9848192B3F0EF8DD43DB076D177A1298A49BF4E7627F180E1AAF9F" );
    self endon( "_encstr_9848192B3F0EF8DD43DB076D177A1298A49BF4E7627F180E1AAF9F" );
    var_1 = 0;
    var_2 = 0;

    if ( var_0 != level.crankedbombtimer )
        var_1 = level.crankedbombtimer - var_0;

    while ( isalive( self ) )
    {
        var_1 = var_1 + 0.05;
        var_3 = clamp( 1.0 - var_1 / level.crankedbombtimer, 0.0, 1.0 );
        self setclientomnvar( "_encstr_824C165FC066F3B35BA87CF7857FEAB748E07FC368982D7B", var_3 );
        wait 0.05;
    }
}
