// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

get_damageable_player( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.isplayer = 1;
    var_2.isadestructable = 0;
    var_2.entity = var_0;
    var_2.damagecenter = var_1;
    return var_2;
}

get_damageable_sentry( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.isplayer = 0;
    var_2.isadestructable = 0;
    var_2.issentry = 1;
    var_2.entity = var_0;
    var_2.damagecenter = var_1;
    return var_2;
}

get_damageable_grenade( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.isplayer = 0;
    var_2.isadestructable = 0;
    var_2.entity = var_0;
    var_2.damagecenter = var_1;
    return var_2;
}

get_damageable_mine( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.isplayer = 0;
    var_2.isadestructable = 0;
    var_2.entity = var_0;
    var_2.damagecenter = var_1;
    return var_2;
}

get_damageable_player_pos( var_0 )
{
    return var_0.origin + ( 0, 0, 32 );
}

get_damageable_grenade_pos( var_0 )
{
    return var_0.origin;
}

istacticaldamage( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !isdefined( var_1 ) || var_1 == "_encstr_A9ED0B35F488AF94A9A0A00D8A" )
        return 0;

    switch ( var_0.basename )
    {
        case "_encstr_B7C91462C8F7C79428B31437BFE8DF2B2F21EA3970D7":
        case "_encstr_802311433F5F07C5494F1BE12DA911CD999558":
        case "_encstr_87830D3627BCB7D75B2DCDACFA6B83":
        case "_encstr_B94516A690081B23D68FC7E78DE84A4208D85EEF4929ADAB":
            return 1;
        case "_encstr_816614F27BFBD0B0E3F925A45A61574F5D55600F714B":
        case "_encstr_9FEA0A4BD5D8EB085A26CB99":
            return 0;
        default:
            return 0;
    }
}

isfmjdamage( var_0, var_1, var_2 )
{
    if ( istrue( var_2 ) && unset_relic_dfa( var_0, var_1 ) )
        return 1;

    var_3 = 0;

    if ( isdefined( var_1 ) && scripts\engine\utility::isbulletdamage( var_1 ) )
    {
        var_4 = scripts\mp\utility\weapon::getweaponattachmentsbasenames( var_0 );

        foreach ( var_6 in var_4 )
        {
            if ( var_6 == "_encstr_811804D818E0" || var_6 == "_encstr_972C0842FB332DAF8ECB" )
            {
                var_3 = 1;
                break;
            }
        }
    }

    return var_3;
}

unset_relic_dfa( var_0, var_1 )
{
    return var_0 _meth_87B5();
}

isheadshot( var_0, var_1, var_2 )
{
    if ( !validshotcheck( var_1, var_2 ) )
        return 0;

    return var_0 == "_encstr_B2CC0571402BC0" || var_0 == "_encstr_A8CC07EAC159C72FD8";
}

istorsoshot( var_0, var_1, var_2 )
{
    if ( !validshotcheck( var_1, var_2 ) )
        return 0;

    return var_0 == "_encstr_BCBA05F8DA5647" || var_0 == "_encstr_9E2B0C1BF05A500737C7E0B29D62" || var_0 == "_encstr_AD7A0C3ABD939BDBF536B7DDCA93";
}

istorsouppershot( var_0, var_1, var_2 )
{
    if ( !validshotcheck( var_1, var_2 ) )
        return 0;

    return var_0 == "_encstr_BCBA05F8DA5647" || var_0 == "_encstr_9E2B0C1BF05A500737C7E0B29D62";
}

isupperbodyshot( var_0, var_1, var_2 )
{
    if ( !validshotcheck( var_1, var_2 ) )
        return 0;

    switch ( var_0 )
    {
        case "_encstr_AA970F8D59CCE8BE1639DA7D1BEDDDCA39":
        case "_encstr_88011052ABF1BB0BAF0B232A0931050F698E":
        case "_encstr_9DC30F4BF77A996F200AC867ABC87B5BD3":
        case "_encstr_8A9A109CD29D1A47BE164EADEBEA0E83954E":
        case "_encstr_BCBA05F8DA5647":
        case "_encstr_9E2B0C1BF05A500737C7E0B29D62":
        case "_encstr_AA1D10ABBC8FA8D5014BCBC76F4B1FB025D2":
        case "_encstr_B7F80F9A70954B2FC0F52767952BDB57E5":
        case "_encstr_AD7A0C3ABD939BDBF536B7DDCA93":
            return 1;
    }

    return 0;
}

islowerbodyshot( var_0, var_1, var_2 )
{
    if ( !validshotcheck( var_1, var_2 ) )
        return 0;

    switch ( var_0 )
    {
        case "_encstr_BACF0BF0C70750B1A1D7F0882B":
        case "_encstr_9EE80AB1AC668EAF66B7B73A":
        case "_encstr_9D1A101B7B4F48A3783DC8578FF88813FD10":
        case "_encstr_AA1D10ABBC8FA8D5014BCBC76F4B1FB025D2":
        case "_encstr_98CF0F8D2555DBFF28802FC7A020AFB215":
        case "_encstr_B7F80F9A70954B2FC0F52767952BDB57E5":
            return 1;
    }

    return 0;
}

validshotcheck( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
    {
        if ( isdefined( var_1.owner ) )
        {
            switch ( var_1.code_classname )
            {
                case "_encstr_88710C0763169AF7A3330A1229D8":
                case "_encstr_93DC0DCD1B272D3847AF5BED23B2C6":
                case "_encstr_AB440F9BD8932D071DAFB3CA435A3663B2":
                    return 0;
            }
        }
    }

    switch ( var_0 )
    {
        case "_encstr_8A4E0A41A7FB067762A99949":
        case "_encstr_AD0D0935D0FD0FFFFBF108":
        case "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9":
        case "_encstr_A9ED0B35F488AF94A9A0A00D8A":
        case "_encstr_8AED0A5719ED37B8FB512FD7":
            return 0;
    }

    return 1;
}

islethalmeleeweapon( var_0, var_1, var_2, var_3 )
{
    if ( var_3 != "_encstr_8AED0A5719ED37B8FB512FD7" )
        return 0;

    if ( !isdefined( var_1 ) || !isplayer( var_1 ) )
        return 0;

    if ( var_1 scripts\mp\heavyarmor::hasheavyarmor() )
        return 0;

    if ( !scripts\mp\utility\player::is_one_hit_melee_victim_allowed() )
        return 0;

    if ( scripts\mp\utility\weapon::isfistsonly( var_2.basename ) )
        return 0;

    if ( scripts\mp\utility\weapon::update_health_bar_to_player( var_2 ) )
        return 1;

    if ( scripts\mp\utility\weapon::isknifeonly( var_2.basename ) )
        return 1;

    if ( scripts\mp\utility\weapon::isballweapon( var_2 ) )
        return 1;

    if ( var_2.basename == "_encstr_BAFF15D2DD1CBE462BCC4B98E45A631B8547BD4EFA6B07" )
        return 1;

    if ( scripts\mp\utility\weapon::isaxeweapon( var_2.basename ) && var_0 getweaponammoclip( var_2 ) > 0 )
        return 1;

    foreach ( var_5 in var_2.attachments )
    {
        if ( scripts\engine\utility::string_starts_with( var_5, "_encstr_B8820886AFD3D2468190" ) || scripts\engine\utility::string_starts_with( var_5, "_encstr_89DE0945E10FE855D4F2B0" ) )
            return 1;
    }

    return 0;
}

attackerishittingteam( var_0, var_1 )
{
    if ( isdefined( var_1 ) && isdefined( var_1.owner ) )
        var_1 = var_1.owner;

    if ( !level.teambased )
        return 0;
    else if ( !isdefined( var_1 ) || !isdefined( var_0 ) )
        return 0;
    else if ( !isdefined( var_0.team ) || !isdefined( var_1.team ) )
        return 0;
    else if ( var_0 == var_1 )
        return 0;
    else if ( scripts\mp\utility\game::getgametype() == "_encstr_87E507D23766566CD1" && var_0.pers["_encstr_89EF05D46BA8FD"] == var_1.team && isdefined( var_1.teamchangedthisframe ) )
        return 0;
    else if ( scripts\mp\utility\game::getgametype() == "_encstr_87E507D23766566CD1" && var_0.pers["_encstr_89EF05D46BA8FD"] != var_1.team && isdefined( var_1.teamchangedthisframe ) )
        return 1;
    else if ( isdefined( var_1.scrambled ) && var_1.scrambled )
        return 0;
    else if ( scripts\mp\utility\player::isplayerproxyagent( var_0, var_1 ) )
        return 0;
    else if ( isagent( var_0 ) && istrue( var_0._id_133D2 ) )
        return 0;
    else if ( isagent( var_0 ) && isdefined( var_0.owner ) && var_0.owner == var_1 )
        return 0;
    else if ( var_0.team == var_1.team )
        return 1;
    else
        return 0;
}

_validateattacker( var_0 )
{
    if ( isagent( var_0 ) && ( !isdefined( var_0.isactive ) || !var_0.isactive ) )
        return undefined;

    if ( isagent( var_0 ) && !isdefined( var_0.classname ) )
        return undefined;

    return var_0;
}

_validatevictim( var_0 )
{
    if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
        return undefined;

    return var_0;
}

damage_should_ignore_blast_shield( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = scripts\cp_mp\utility\damage_utility::packdamagedata( var_0, var_1, undefined, var_2, var_3, var_4 );

    if ( !isexplosivedamagemod( var_3 ) && var_3 != "_encstr_AD0D0935D0FD0FFFFBF108" )
        return 1;

    if ( var_3 == "_encstr_A11B0CBD04C9B790F653EBCF4915" )
        return 1;

    if ( var_3 == "_encstr_81670F602F2B4957763C758D38D1FF6C3B" )
        return 1;

    if ( isdefined( var_0 ) && var_0 == var_1 )
        return 1;

    if ( var_1 scripts\cp_mp\utility\damage_utility::isstuckdamage( var_6 ) )
        return 1;

    if ( scripts\mp\utility\weapon::weaponignoresblastshield( var_2, var_5 ) )
        return 1;

    if ( level.gametype == "_encstr_9507034B25" && isdefined( var_1 ) && istrue( var_1.isjuggernaut ) && isdefined( var_4 ) && isdefined( var_4.vehiclename ) )
        return 1;

    return 0;
}

_radiusdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    self radiusdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6 );
}

radiusplayerdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( !isdefined( var_9 ) )
        var_9 = 0;

    var_10 = scripts\engine\trace::create_character_contents();
    var_11 = scripts\engine\trace::create_contents( 0, 1, 1, 0, 1, 0 );
    var_12 = [];

    foreach ( var_14 in level.characters )
    {
        if ( !isdefined( var_14 ) )
            continue;

        if ( !var_14 scripts\cp_mp\utility\player_utility::_isalive() )
        {
            var_12[var_12.size] = var_14;
            continue;
        }

        if ( var_9 && var_14 == var_5 )
        {
            var_12[var_12.size] = var_14;
            continue;
        }

        if ( level.teambased && var_14.team == var_5.team )
            var_12[var_12.size] = var_14;
    }

    var_16 = physics_querypoint( var_5.origin, var_2, var_10, var_12, "_encstr_A9C4110E43F2DCA58D9B2EBA5927BCFA853636" );

    if ( isdefined( var_16 ) && var_16.size > 0 )
    {
        for ( var_17 = 0; var_17 < var_16.size; var_17++ )
        {
            var_18 = var_16[var_17]["_encstr_B60E07C9FD1C2055E3"];
            var_19 = var_16[var_17]["_encstr_A138092CF32B9366E5287A"];
            var_20 = var_16[var_17]["_encstr_B7260923C89E8F3378E72E"];

            if ( !isdefined( var_18 ) )
                continue;

            var_21 = physics_raycast( var_0, var_20, var_11, undefined, 0, "_encstr_828C15A7C847CB7B768330689A4A13067764A09E5D87D3" );

            if ( isdefined( var_21 ) && var_21.size > 0 )
                continue;

            var_22 = max( var_19, var_1 ) / var_2;
            var_23 = var_3 + ( var_4 - var_3 ) * var_22;
            var_18 dodamage( var_23, var_0, var_5, var_6, var_7, var_8 );
        }
    }
}

hashealthshield( var_0 )
{
    return isdefined( var_0 ) && isdefined( var_0.healthshield );
}

gethealthshielddamage( var_0 )
{
    return int( var_0 * self.healthshieldmod );
}

sethealthshield( var_0 )
{
    self.healthshield = 1;

    if ( !isdefined( self.healthshieldmod ) )
        self.healthshieldmod = 1;

    var_0 = int( clamp( var_0, 0, 100 ) );
    var_1 = ( 100 - var_0 ) / 100;

    if ( var_1 < self.healthshieldmod )
        self.healthshieldmod = var_1;
}

clearhealthshield()
{
    self.healthshield = undefined;
    self.healthshieldmod = undefined;
}

_suicide( var_0 )
{
    if ( self.sessionstate != "_encstr_8F7508BB18675378EBC7" )
        return;

    if ( playershoulddofauxdeath( var_0 ) && !isdefined( self.fauxdead ) )
        thread scripts\mp\damage::playerkilled_internal( self, self, self, 10000, 0, "_encstr_97590CFD0825D7720BD1A018A1F3", isundefinedweapon(), ( 0, 0, 0 ), "_encstr_AABA05236DC831", 0, 1116, 1 );
    else if ( !playershoulddofauxdeath( var_0 ) && !isdefined( self.fauxdead ) && !isdefined( self.vehicle ) )
        self suicide();
}

_id_13966()
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self waittill( "_encstr_B1D215D3FB078F30F7CC1F73E3DC08DC1F73E998D2C34D" );
    thread _id_13965();
}

_id_13965()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_9F6711CAB5AB47BB8A556988407F19915BDB8F" );
    self endon( "_encstr_9F6711CAB5AB47BB8A556988407F19915BDB8F" );

    while ( !scripts\mp\utility\player::isreallyalive( self ) || self.sessionstate != "_encstr_8F7508BB18675378EBC7" )
        waitframe();

    _suicide();
}

playershoulddofauxdeath( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 1;

    if ( istrue( var_0 ) && scripts\mp\utility\player::isusingremote() )
        return 1;

    if ( isdefined( level.modeshoulddofauxdeathfunc ) && self [[ level.modeshoulddofauxdeathfunc ]]() )
        return 1;

    return 0;
}

isprojectiledamage( var_0 )
{
    var_1 = "_encstr_8F8D3449D03797277B771AE5130B4CE92F8EF1D1F819735C4B61966548B7743101808119B026111562458875DF8B7D833FA911F9180B";

    if ( issubstr( var_1, var_0 ) )
        return 1;

    return 0;
}

non_player_log_attacker_data( var_0, var_1 )
{
    if ( var_0.damage == 0 )
        return;

    if ( !isdefined( var_1 ) )
        var_1 = var_0.attacker;

    if ( !isdefined( var_1 ) || !isplayer( var_1 ) )
    {
        var_2 = var_0.inflictor;

        if ( isdefined( var_2 ) )
        {
            if ( isplayer( var_2 ) )
                var_1 = var_2;
            else
                var_1 = var_2.owner;
        }
        else
            var_1 = undefined;
    }

    if ( !isdefined( var_1 ) || !isplayer( var_1 ) )
        return;

    if ( isdefined( self.owner ) )
    {
        if ( !scripts\cp_mp\utility\player_utility::playersareenemies( self.owner, var_1 ) )
            return;
    }
    else if ( level.teambased && isdefined( self.team ) && self.team == var_1.team )
        return;

    non_player_add_attacker_data( var_0, var_1 );
}

non_player_add_attacker_data( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = var_0.attacker;

    var_2 = undefined;
    var_3 = non_player_get_attacker_data( var_1 );

    if ( !isdefined( var_3 ) )
    {
        var_3 = non_player_get_attacker_data( var_1, 1 );
        var_2 = gettime();
    }

    var_3.damage = var_3.damage + var_0.damage;
    var_3.objweapon = var_0.objweapon;
    var_3.point = var_0.point;
    var_3.direction = var_0.direction_vec;
    var_3.partname = var_0.partname;
    var_3.meansofdeath = var_0.meansofdeath;
    var_3.lasttimedamaged = gettime();
    var_3.firsttimedamaged = scripts\engine\utility::ter_op( isdefined( var_2 ), var_2, var_3.firsttimedamaged );

    if ( isdefined( var_1 ) && isplayer( var_1 ) && !nullweapon( var_1 getcurrentprimaryweapon() ) )
        var_3.sprimaryweapon = createheadicon( var_1 getcurrentprimaryweapon() );
    else
        var_3.sprimaryweapon = undefined;
}

non_player_get_attacker_data( var_0, var_1 )
{
    var_2 = undefined;

    if ( !isdefined( self.attackerdata ) && istrue( var_1 ) )
        self.attackerdata = [];

    if ( isdefined( self.attackerdata ) )
    {
        var_3 = var_0.guid;

        if ( isdefined( var_3 ) )
        {
            var_2 = self.attackerdata[var_3];

            if ( isdefined( var_2 ) )
            {
                if ( var_2.isvalid || level.teambased && var_0.team != var_2.team )
                {
                    var_2 = undefined;
                    self.attackerdata[var_3] = undefined;
                }
            }

            if ( !isdefined( var_2 ) && istrue( var_1 ) )
            {
                var_2 = spawnstruct();
                var_2.attacker = var_0;
                var_2.team = var_0.team;
                var_2.guid = var_3;
                var_2.isvalid = 1;
                var_2.damage = 0;
                var_2.hitcount = 0;
                var_2.firsttimehit = gettime();
                self.attackerdata[var_3] = var_2;
            }
        }
    }

    return var_2;
}

non_player_clear_attacker_data()
{
    self.attackerdata = undefined;
}

non_player_should_ignore_damage( var_0, var_1, var_2, var_3 )
{
    if ( non_player_should_ignore_damage_signature( var_0, var_1, var_2, var_3 ) )
        return 1;

    if ( isdefined( var_1.basename ) )
    {
        if ( var_3 != "_encstr_8AED0A5719ED37B8FB512FD7" )
        {
            switch ( var_1.basename )
            {
                case "_encstr_9ED715A92F021107F7389BA341CE7FD21BF7482DE76B62":
                case "_encstr_9EC419D2DD0EEBE60EEDD18EACE47DB9C67B0E95BE5B0EEBB1D099":
                case "_encstr_8C28124BBB83F5B3C9CA95DCF5C4CA58ADEB5B07":
                    return 1;
            }
        }

        if ( var_3 == "_encstr_A9ED0B35F488AF94A9A0A00D8A" )
        {
            switch ( var_1.basename )
            {
                case "_encstr_B9C40C1EFA1EBBB22FC305A93AF3":
                case "_encstr_B2430B07CCC710135D9A29B0E3":
                case "_encstr_BCAE08D8D0F5B607F538":
                case "_encstr_9FA70ADF38B86C4AD188752A":
                case "_encstr_94410C2B9B052323CB8D7A561F82":
                    return 1;
            }
        }
        else
        {
            switch ( var_1.basename )
            {
                case "_encstr_BDD3079D0BB9FAB6C1":
                case "_encstr_A31414205AE621AB6BBFED708F3B51D54E6218B9827A":
                case "_encstr_874513A9024703D06DC2631FEAD6A0C3EF9AA6902B":
                case "_encstr_B2931468F730D6F113F510ADC10BD9D9914F58411FE8":
                case "_encstr_B94516A690081B23D68FC7E78DE84A4208D85EEF4929ADAB":
                case "_encstr_970B114D33923EC8CF4FD30935D9E07D295F19":
                case "_encstr_9D8D0F1D34CAC9ADA51D597D16837DB5E0":
                    return 1;
            }
        }
    }

    return 0;
}

non_player_add_ignore_damage_signature( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self.ignoredamageid ) )
        self.ignoredamageid = 0;

    if ( !isdefined( self.ignoredamagesignatures ) )
        self.ignoredamagesignatures = [];

    var_4 = self.ignoredamageid;
    self.ignoredamageid++;

    if ( isdefined( var_1 ) && isstring( var_1 ) )
        var_1 = getcompleteweaponname( var_1 );

    var_5 = spawnstruct();
    var_5.id = var_4;
    var_5.attacker = var_0;
    var_5.objweapon = var_1;
    var_5.inflictor = var_2;
    var_5.meansofdeath = var_3;
    var_5.checkattacker = isdefined( var_0 );
    var_5.checkobjweapon = isdefined( var_1 ) && !nullweapon( var_1 );
    var_5.checkinflictor = isdefined( var_2 );
    var_5.checkmeansofdeath = isdefined( var_3 );
    self.ignoredamagesignatures[var_4] = var_5;
    return var_4;
}

non_player_remove_ignore_damage_signature( var_0 )
{
    if ( !isdefined( self.ignoredamagesignatures ) )
        return;

    self.ignoredamagesignatures[var_0] = undefined;
}

non_player_clear_ignore_damage_signatures()
{
    self.ignoredamagesignatures = undefined;
}

non_player_should_ignore_damage_signature( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self.ignoredamagesignatures ) )
        return 0;

    if ( isdefined( var_1 ) && isstring( var_1 ) )
        var_1 = getcompleteweaponname( var_1 );

    foreach ( var_5 in self.ignoredamagesignatures )
    {
        if ( !isdefined( var_5 ) )
            return 0;

        if ( var_5.checkattacker )
        {
            if ( !isdefined( var_5.attacker ) )
            {
                non_player_remove_ignore_damage_signature( var_5.id );
                continue;
            }
            else if ( !isdefined( var_0 ) )
                continue;
            else if ( var_0 != var_5.attacker )
                continue;
        }

        if ( var_5.checkobjweapon )
        {
            if ( !isdefined( var_1 ) || nullweapon( var_1 ) )
                continue;
            else if ( var_1 != var_5.objweapon )
                continue;
        }

        if ( var_5.checkinflictor )
        {
            if ( !isdefined( var_5.inflictor ) )
            {
                non_player_remove_ignore_damage_signature( var_5.id );
                continue;
            }
            else if ( !isdefined( var_2 ) )
                continue;
            else if ( var_2 != var_5.inflictor )
                continue;
        }

        if ( var_5.checkmeansofdeath )
        {
            if ( !isdefined( var_3 ) )
                continue;
            else if ( var_3 != var_5.meansofdeath )
                continue;
        }

        return 1;
    }

    return 0;
}

islauncherdirectimpactdamage( var_0, var_1, var_2 )
{
    if ( scripts\mp\utility\weapon::isaxeweapon( var_0 ) )
        return 0;

    if ( var_0.type != "_encstr_B4390B6282428CC7F75B572171" )
        return 0;

    if ( istrue( var_2 ) && var_0.isalternate && isdefined( var_0.underbarrel ) )
        return 0;

    return var_1 == "_encstr_A9ED0B35F488AF94A9A0A00D8A" || var_1 == "_encstr_81670F602F2B4957763C758D38D1FF6C3B" || var_1 == "_encstr_A11B0CBD04C9B790F653EBCF4915";
}
