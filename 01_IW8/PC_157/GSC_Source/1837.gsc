// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{

}

script_model_anims()
{

}

#using_animtree("_encstr_93DC0DCD1B272D3847AF5BED23B2C6");

create_player_rig( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) || isdefined( var_0.player_rig ) )
        return;

    var_0.animname = var_1;

    if ( !isdefined( var_2 ) )
        var_2 = "_encstr_9BC813A0B775E3D91265C55631FA13ABDDD7D0309A";

    var_0.player_rig = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_0.origin );
    var_0.player_rig setmodel( var_2 );
    var_0.player_rig hide();
    var_0.player_rig.animname = var_1;
    var_0.player_rig useanimtree( #animtree );
    var_0 playerlinktodelta( var_0.player_rig, "_encstr_BA010BA012DFB703A379A39542", 1, 0, 0, 0, 0, 0, 0 );
    var_0 watch_remove_rig();
    remove_player_rig( var_0 );
}

remove_player_rig( var_0 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_0.player_rig ) )
        return;

    var_0 unlink();
    var_1 = var_0 getdroptofloorposition( var_0.origin );

    if ( isdefined( var_1 ) )
        var_0 setorigin( var_1 );
    else
        var_0 setorigin( var_0.origin + ( 0, 0, 100 ) );

    var_0.player_rig delete();
    var_0.player_rig = undefined;
}

watch_remove_rig( var_0 )
{
    scripts\engine\utility::_id_143A5( "_encstr_BE840B5637BAB7AB0527C04BDF", "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
}

add_destructible_array( var_0, var_1 )
{
    var_2 = getentarray( var_0, var_1 );

    foreach ( var_4 in var_2 )
    {
        var_5 = spawnstruct();
        add_destructible( var_5, var_4 );
        var_5 assigninteractteam( level.teamnamelist );

        if ( !isdefined( level.destructibles[var_0] ) )
            level.destructibles[var_0] = [];

        level.destructibles[var_0][level.destructibles[var_0].size] = var_5;
        var_5 process_action( "_encstr_80C50550FA44C9" );
    }
}

add_destructible( var_0, var_1 )
{
    if ( !isdefined( var_0.ents ) )
        var_0.ents = [];

    var_0 read_properties( var_1 );
    var_0 read_actions( var_1 );
    var_0.ents[var_0.ents.size] = var_1;
    var_1.parent = var_0;

    if ( isdefined( var_1.target ) )
    {
        var_2 = getentarray( var_1.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        if ( isdefined( var_2 ) && var_2.size > 0 )
        {
            foreach ( var_4 in var_2 )
                add_destructible( var_0, var_4 );
        }
    }
}

read_properties( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    switch ( var_0.classname )
    {
        case "_encstr_AF8E1203C0C30F6ADAFD3753C00A3931079B50BB":
            self.use_trigger = var_0;
            break;
        case "_encstr_A3050EDF6FF5DC081CC1AFA37097B80B":
            var_1 = var_0.script_label;

            if ( isdefined( var_1 ) )
            {
                switch ( var_1 )
                {
                    case "_encstr_9F6B104BB6B321363A5D1005669B0A97555B":
                        if ( !isdefined( self.useobjects ) )
                            self.useobjects = [];

                        self.useobjects["_encstr_875606482B58E505"] = setup_bomb_object( var_0.origin );
                        self.useobjects["_encstr_875606482B58E505"].scenenodekey = "_encstr_875606482B58E505";
                        break;
                    case "_encstr_9728109B62A5F8EB6E0A23C556A33B9FD02D":
                        if ( !isdefined( self.scenenodes ) )
                            self.scenenodes = [];

                        self.scenenodes["_encstr_875606482B58E505"] = var_0;
                        break;
                    case "_encstr_B1250F5D372BA04EF66B07A3EB980BC6DA":
                        if ( !isdefined( self.useobjects ) )
                            self.useobjects = [];

                        self.useobjects["_encstr_959B05982C8DDA"] = setup_bomb_object( var_0.origin );
                        self.useobjects["_encstr_959B05982C8DDA"].scenenodekey = "_encstr_959B05982C8DDA";
                        break;
                    case "_encstr_A9730F73C7289D9F28F85A72C606C7965B":
                        if ( !isdefined( self.scenenodes ) )
                            self.scenenodes = [];

                        self.scenenodes["_encstr_959B05982C8DDA"] = var_0;
                        break;
                }
            }

            break;
        case "_encstr_B4010B8B3E9AA0D7B37FC5D187":
            self.scriptable = var_0;
            break;
    }
}

read_actions( var_0 )
{
    if ( !isdefined( var_0.script_noteworthy ) )
        return;

    var_1 = strtok( var_0.script_noteworthy, "_encstr_B44C02C9" );

    foreach ( var_3 in var_1 )
    {
        var_4 = strtok( var_3, "_encstr_B64C02F0" );

        if ( !isdefined( var_4 ) )
            return;

        if ( var_4.size < 2 )
            return;

        var_3 = var_4[0];

        if ( !isdefined( var_0.actions ) )
            var_0.actions = [];

        if ( !isdefined( var_0.actions[var_3] ) )
            var_0.actions[var_3] = [];

        for ( var_5 = 1; var_5 < var_4.size; var_5++ )
            var_0.actions[var_3][var_0.actions[var_3].size] = var_4[var_5];
    }
}

waittime_process_action( var_0, var_1 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    wait( var_1 );
    process_action( var_0 );
}

waitmsg_process_action( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self waittill( var_0 );
    process_action( var_0 );
}

process_action( var_0 )
{
    if ( !isdefined( self.ents ) )
        return;

    foreach ( var_2 in self.ents )
    {
        if ( isdefined( var_2.actions ) && isdefined( var_2.actions[var_0] ) )
        {
            foreach ( var_4 in var_2.actions[var_0] )
                var_2 actionmap( var_4 );
        }
    }

    self.state = var_0;
}

actionmap( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_B7180526C81F4B":
            self show();
            break;
        case "_encstr_BECC05FC5321BA":
            self hide();
            break;
        case "_encstr_976106CDEDB19623":
            self solid();
            break;
        case "_encstr_B91C09F64738421F9180F2":
            self notsolid();
            break;
        case "_encstr_A41C10F9E2BFDE10FD0E93973C22381DBB3B":
            self disconnectpaths();
            break;
        case "_encstr_A4A50D1B7BCD372BD8E81C85E834DC":
            self connectpaths();
            break;
        case "_encstr_BC8C0F6E4023DA5FA9C8D3AB584351B28D":
            var_1 = self.origin;
            var_2 = self.angles;
            var_3 = spawnfx( level._effect["_encstr_9E0D0F26C9952C360D7DB2F083367BC895"], var_1, anglestoforward( var_2 ) * -1.0, ( 0, 0, 1 ) );
            triggerfx( var_3 );
            physicsexplosionsphere( var_1, 200, 100, 3 );
            playrumbleonposition( "_encstr_B6D30F3B39CACDC24659EBE4EAAD263695", var_1 );
            earthquake( 0.5, 1.0, var_1, 1500 );
            self.parent.plantedbomb setscriptablepartstate( "_encstr_949B05C9604246", "_encstr_A6CB08A5FD5713457D3B" );
            break;
    }
}

setup_bomb_object( var_0 )
{
    var_1 = scripts\mp\gameobjects::createhintobject( var_0, "_encstr_98110C0B790BBF87AE11E9F1A8F5", "_encstr_80FF121AABC8D75A1BBD37FA1B0DBEC16358B91D", &"_encstr_A3FC0A04A9168631CFD91719", undefined, undefined, undefined, 800, 120, 72, 120 );

    if ( !isdefined( level.breachusetriggers ) )
        level.breachusetriggers = [];

    level.breachusetriggers[level.breachusetriggers.size] = var_1;
    self.defused = 0;
    thread usetriggerthink( var_1 );
    return var_1;
}

bomb_planted_think( var_0, var_1 )
{
    var_2 = var_1.team;
    self.defused = 0;

    if ( !isdefined( self.breachindex ) )
    {
        if ( !isdefined( level.breachindex ) )
            level.breachindex = 0;
        else
            level.breachindex++;

        self.breachindex = level.breachindex;
    }

    bomb_fuse_think( var_2 );

    if ( !self.defused )
    {
        process_action( "_encstr_82320A46ACE68EC9DBE5CA32" );
        var_3 = self.useobjects[var_0].origin;

        if ( isdefined( self.scriptable ) )
        {
            if ( var_0 == "_encstr_875606482B58E505" )
                self.scriptable setscriptablepartstate( "_encstr_8C9B05C458B959", "_encstr_BE870D5D375B812B0FBF61D8FF56A3" );
            else
                self.scriptable setscriptablepartstate( "_encstr_8C9B05C458B959", "_encstr_BA240C23B26E1D27ED97122C366D" );
        }
        else
        {
            var_4 = self.useobjects[var_0].angles;
            var_5 = spawnfx( level._effect["_encstr_9E0D0F26C9952C360D7DB2F083367BC895"], var_3, anglestoforward( var_4 ) * -1.0, ( 0, 0, 1 ) );
            triggerfx( var_5 );
            self.plantedbomb setscriptablepartstate( "_encstr_949B05C9604246", "_encstr_A6CB08A5FD5713457D3B" );
        }

        physicsexplosionsphere( var_3, 200, 100, 3 );
        playrumbleonposition( "_encstr_B6D30F3B39CACDC24659EBE4EAAD263695", var_3 );
        earthquake( 0.5, 1.0, var_3, 1500 );

        foreach ( var_7 in self.useobjects )
        {
            var_7 delete();
            level.breachusetriggers = scripts\engine\utility::array_remove( level.breachusetriggers, var_7 );
        }

        wait 0.1;

        if ( isdefined( var_1 ) )
            self.plantedbomb radiusdamage( self.plantedbomb.origin, 300, 120, 10, var_1, "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9", "_encstr_9DF00DF37BD0E2716F3B8BC7086BBB" );
        else
            self.plantedbomb radiusdamage( self.plantedbomb.origin, 300, 120, 10, undefined, "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9", "_encstr_9DF00DF37BD0E2716F3B8BC7086BBB" );

        if ( isdefined( level.hostages ) )
            thread playhostagehelp( self.plantedbomb.origin );
    }

    self.plantedbomb delete();
    self.plantedbomb = undefined;
    self.plantedkey = undefined;
    setomnvar( "_encstr_8BB611D55A7DB49B3B16B6ACAF475AD6AC9CEB" + self.breachindex, 0 );
    setomnvar( "_encstr_87B815D748EE61EADFA7457F80D1D23DF1F8071FE8239F" + self.breachindex, undefined );

    if ( self.defused )
    {
        foreach ( var_7 in self.useobjects )
            var_7 sethintstring( &"_encstr_A3FC0A04A9168631CFD91719" );

        assigninteractteam( level.teamnamelist );
        process_action( "_encstr_80C50550FA44C9" );
    }
}

playhostagehelp( var_0 )
{
    wait 1;

    if ( distance2d( level.hostages[0].origin, var_0 ) < 500 )
        level.hostages[0] playsound( "_encstr_A93A12C83CEBDA074C7D57CDCCAF0DCE3AEBABE0" );
}

bomb_fuse_think( var_0 )
{
    self endon( "_encstr_BC7B08812DDFE886AF72" );

    foreach ( var_2 in self.useobjects )
        var_2 sethintstring( &"_encstr_A9321129418DCD074719FE432F6B2D1DCB9991" );

    self.timerobject = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", self.plantedbomb.origin );
    self.timerobject makeusable();
    assigninteractteam( scripts\mp\utility\teams::getenemyteams( var_0 ) );
    var_4 = gettime();
    var_5 = int( var_4 + 5000 );
    setomnvar( "_encstr_8BB611D55A7DB49B3B16B6ACAF475AD6AC9CEB" + self.breachindex, var_5 );
    setomnvar( "_encstr_87B815D748EE61EADFA7457F80D1D23DF1F8071FE8239F" + self.breachindex, self.timerobject );
    var_6 = var_5 - var_4;

    while ( !self.defused && var_6 > 0 )
    {
        var_4 = gettime();
        var_6 = var_5 - var_4;

        if ( var_6 < 1500 )
        {
            if ( var_6 <= 250 )
                self.plantedbomb playsound( "_encstr_930317353BA247E068D1E339824678083A27ADB31F9BAF42ED" );
            else if ( var_6 < 500 )
                self.plantedbomb playsound( "_encstr_9F03176B056DCABB90261BE6FBD8C97234C7E3CF830FD1205A" );
            else if ( var_6 < 1500 )
                self.plantedbomb playsound( "_encstr_8703171A9EAA232341016F817A42E388900736ADB5236F03D2" );
            else
                self.plantedbomb playsound( "_encstr_B2031798272BB0C6D0EBDD2CC9B9D273CED7C4B29507EB608C" );

            wait 0.25;
        }
        else if ( var_6 < 3500 )
        {
            self.plantedbomb playsound( "_encstr_B2031798272BB0C6D0EBDD2CC9B9D273CED7C4B29507EB608C" );
            wait 0.5;
        }
        else
        {
            self.plantedbomb playsound( "_encstr_80031762E5285E873BFE6B326337E7D560D71AED532869127F" );
            wait 1.0;
        }

        if ( var_6 < 0 )
            break;
    }
}

usetriggerthink( var_0 )
{
    for (;;)
    {
        var_0 waittill( "_encstr_8B5C081B58E0B7A213E6", var_1 );

        if ( !scripts\engine\utility::array_contains( self.interactteams, var_1.team ) )
            continue;

        if ( var_1 scripts\mp\utility\weapon::grenadeinpullback() )
            return 0;

        if ( var_1 meleebuttonpressed() )
            return 0;

        if ( var_1 scripts\mp\utility\player::isusingremote() )
            continue;

        if ( !isdefined( self.plantedbomb ) )
        {
            plantbreachc4( var_0, var_1 );
            continue;
        }

        defusec4( var_1 );
    }
}

#using_animtree("_encstr_A40101");

plantbreachc4( var_0, var_1 )
{
    thread watchplayerdeath( var_1 );
    var_1.linktoent = var_1 scripts\engine\utility::spawn_tag_origin();
    var_1 playerlinktodelta( var_1.linktoent, "_encstr_8CB40B4BB398B1C0A81FDF6BEA", 1, 0, 0, 0, 0, 0 );
    var_1.linktoent moveto( self.scenenodes[var_0.scenenodekey].origin, 0.25, 0.1, 0.1 );
    var_1.linktoent rotateto( self.scenenodes[var_0.scenenodekey].angles, 0.25, 0.1, 0.1 );
    var_1 setstance( "_encstr_B1AD06374716DC8C" );

    if ( !var_1 givegunless() )
    {
        var_1 unlink();
        var_1.linktoent delete();
        var_1.linktoent = undefined;
        return 0;
    }

    if ( istrue( self.cancelplant ) )
        return 0;

    var_1 unlink();
    var_1.linktoent delete();
    var_1.linktoent = undefined;
    var_1 setorigin( self.scenenodes[var_0.scenenodekey].origin );
    var_1 setplayerangles( self.scenenodes[var_0.scenenodekey].angles );

    foreach ( var_3 in self.useobjects )
        var_3 hide();

    level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_1, "_encstr_874509A987BF87D8EEDE41" );
    var_5 = scripts\engine\utility::ter_op( var_1.team == "_encstr_BC850785638DA59537", "_encstr_AAE4054D8E3BF6", "_encstr_A183050B668313" );

    if ( level.mapname == "_encstr_944B10ED4796DB2EB730820A98F760B76B25" )
        var_5 = scripts\engine\utility::ter_op( var_1.team == "_encstr_BC850785638DA59537", "_encstr_B8E405EAB60789", "_encstr_87830516263898" );

    var_1 queuedialogforplayer( "_encstr_816908F24147D853673E" + var_5 + "_encstr_A3500E96E6F2A837BA3327411BA28868", "_encstr_892C11A7DF63C878022F51E994C72099AA7331", 2 );
    thread create_player_rig( var_1, "_encstr_B11B080E8DC2E6475627" );
    var_1 thread scripts\mp\anim::anim_player_solo( var_1, var_1.player_rig, "_encstr_8C4E06E38023450B" );
    var_6 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", self.scenenodes[var_0.scenenodekey].origin );
    var_6 setmodel( "_encstr_AFB30E40C753D98390E4D113533F28B9" );
    var_6.animname = "_encstr_AA0703D868";
    var_6 useanimtree( #animtree );
    self.plantedbomb = var_6;
    self.plantedkey = var_0.scenenodekey;
    self.scenenodes[var_0.scenenodekey] thread scripts\common\anim::anim_single_solo( var_6, "_encstr_8C4E06E38023450B" );
    var_7 = getanimlength( level.scr_anim["_encstr_B11B080E8DC2E6475627"]["_encstr_8C4E06E38023450B"] );
    var_8 = 0.5;
    wait( var_7 - var_8 );

    if ( istrue( self.cancelplant ) )
        return 0;

    thread bomb_planted_think( var_0.scenenodekey, var_1 );
    givebreachscore( var_1 );
    wait( var_8 - 0.1 );
    var_1 thread takegunless();
    remove_player_rig( var_1 );
    process_action( "_encstr_8C910620BA0387C9" );
    self notify( "_encstr_8F4010DE8267D93FE4F11068CA3AE9919B3D" );
    return 1;
}

watchplayerdeath( var_0 )
{
    self endon( "_encstr_8F4010DE8267D93FE4F11068CA3AE9919B3D" );
    self.cancelplant = 0;

    for (;;)
    {
        if ( !isdefined( var_0 ) || !scripts\mp\utility\player::isreallyalive( var_0 ) )
        {
            foreach ( var_2 in self.useobjects )
                var_2 show();

            if ( isdefined( self.plantedbomb ) )
            {
                self.plantedbomb delete();
                self.plantedbomb = undefined;
                self.plantedkey = undefined;
            }

            self.cancelplant = 1;
            break;
        }

        waitframe();
    }
}

allowplayertobreach( var_0 )
{
    if ( isdefined( level.breachusetriggers ) )
    {
        foreach ( var_2 in level.breachusetriggers )
            var_2 enableplayeruse( var_0 );
    }
}

disallowplayertobreach( var_0 )
{
    if ( isdefined( level.breachusetriggers ) )
    {
        foreach ( var_2 in level.breachusetriggers )
            var_2 disableplayeruse( var_0 );
    }
}

defusec4( var_0 )
{
    self.defused = 1;
    self notify( "_encstr_BC7B08812DDFE886AF72" );
    givedefusescore( var_0 );
}

onplayerjoinedteam( var_0 )
{
    foreach ( var_2 in level.destructibles )
    {
        foreach ( var_4 in var_2 )
            var_4 applyinteractteam( var_0 );
    }
}

assigninteractteam( var_0 )
{
    self.interactteams = var_0;

    foreach ( var_2 in level.players )
        applyinteractteam( var_2 );
}

applyinteractteam( var_0 )
{
    if ( self.state == "_encstr_82320A46ACE68EC9DBE5CA32" )
        return;

    if ( !isdefined( self.useobjects ) )
        return;

    if ( scripts\engine\utility::array_contains( self.interactteams, var_0.team ) )
    {
        if ( isdefined( self.plantedbomb ) )
        {
            self.timerobject hidefromplayer( var_0 );

            foreach ( var_3, var_2 in self.useobjects )
            {
                if ( var_3 == self.plantedkey )
                {
                    var_2 setuseholdduration( "_encstr_9876109DF38B6B2BC927E071371DE1B3031D" );
                    var_2 enableplayeruse( var_0 );
                    var_2 showtoplayer( var_0 );
                    continue;
                }

                var_2 disableplayeruse( var_0 );
                var_2 hidefromplayer( var_0 );
            }

            return;
        }

        foreach ( var_3, var_2 in self.useobjects )
        {
            var_2 setuseholdduration( "_encstr_93370F8CAE27588ED27BB9FADC0DDB4EA3" );
            var_2 enableplayeruse( var_0 );
            var_2 showtoplayer( var_0 );
        }

        return;
    }
    else
    {
        if ( isdefined( self.plantedbomb ) )
            self.timerobject showtoplayer( var_0 );

        foreach ( var_2 in self.useobjects )
        {
            var_2 disableplayeruse( var_0 );
            var_2 hidefromplayer( var_0 );
        }
    }
}

givebreachscore( var_0 )
{
    var_1 = "_encstr_98D707B69BBF4AC7B0";
    var_2 = scripts\mp\rank::getscoreinfovalue( var_1 );
    var_0 thread scripts\mp\rank::giverankxp( var_1, var_2 );
    var_0 thread scripts\mp\rank::scoreeventpopup( var_1 );
}

givedefusescore( var_0 )
{
    var_1 = "_encstr_A8530E31E456166CA17D8C2B335DB92B";
    var_2 = scripts\mp\rank::getscoreinfovalue( var_1 );
    var_0 thread scripts\mp\rank::giverankxp( var_1, var_2 );
    var_0 thread scripts\mp\rank::scoreeventpopup( var_1 );
}

givegunless()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    var_0 = getcompleteweaponname( "_encstr_BC0D0C2DBB0E7D9DAE9BC6AC6EB9" );
    scripts\cp_mp\utility\inventory_utility::_giveweapon( var_0, undefined, undefined, 1 );
    var_1 = scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_0, 0 );

    if ( var_1 )
    {
        self.gunnlessweapon = var_0;
        scripts\common\utility::allow_weapon_switch( 0 );
        scripts\common\utility::allow_offhand_weapons( 0 );
        scripts\common\utility::allow_melee( 0 );
    }
    else
    {
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_0 );
        scripts\cp_mp\utility\inventory_utility::forcevalidweapon();
    }

    return var_1;
}

takegunless()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    if ( !isdefined( self.gunnlessweapon ) || !self hasweapon( self.gunnlessweapon ) )
        return;

    self.takinggunless = 1;
    scripts\common\utility::allow_weapon_switch( 1 );

    while ( self hasweapon( self.gunnlessweapon ) )
    {
        if ( !scripts\cp_mp\utility\inventory_utility::iscurrentweapon( self.gunnlessweapon ) )
            scripts\cp_mp\utility\inventory_utility::abortmonitoredweaponswitch( self.gunnlessweapon );
        else
        {
            scripts\cp_mp\utility\inventory_utility::_takeweapon( self.gunnlessweapon );
            scripts\cp_mp\utility\inventory_utility::forcevalidweapon();
        }

        waitframe();
    }

    self.takinggunless = 0;
    self.gunnlessweapon = undefined;
    scripts\common\utility::allow_offhand_weapons( 1 );
    scripts\common\utility::allow_melee( 1 );
}

rockable_cars_init()
{
    waitframe();
    scripts\common\rockable_vehicles::rockable_cars_init();
    scripts\engine\utility::array_thread( level.rockablecars.cars, ::rockable_cars_watch_players );
}

rockable_cars_watch_players()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        foreach ( var_1 in level.rockablecars.cars )
        {
            if ( !isdefined( var_1 ) )
                continue;

            var_2 = [];

            foreach ( var_4 in level.players )
            {
                if ( !scripts\mp\utility\player::isreallyalive( var_4 ) )
                    continue;

                var_5 = var_4 getentitynumber();

                if ( isdefined( var_1.players[var_5] ) )
                    continue;

                if ( var_4 ismantling() )
                    continue;

                var_6 = var_4 getmovingplatformparent();

                if ( !isdefined( var_6 ) || var_6 != var_1 )
                    continue;

                var_7 = var_4.origin - var_1.toppoint;

                if ( vectordot( var_7, var_1.up ) < 0 )
                    continue;

                var_8 = vectordot( var_7, var_1.forward );
                var_9 = abs( var_8 );
                var_10 = var_9 / var_1.halflength;

                if ( var_10 > 1 )
                    continue;

                var_11 = vectordot( var_7, var_1.right );
                var_12 = abs( var_11 );
                var_13 = var_12 / var_1.halfwidth;

                if ( var_13 > 1 )
                    continue;

                var_5 = var_4 getentitynumber();
                var_2[var_5] = var_4;
                var_1 rockable_car_rock( var_4, var_10, var_13, var_8, var_11 );
            }

            foreach ( var_5, var_4 in var_1.players )
            {
                var_16 = gettime() - var_1.touchtimes[var_5];

                if ( !isdefined( var_4 ) || !scripts\mp\utility\player::isreallyalive( var_4 ) )
                {
                    var_1 rockable_car_remove_player( var_5, undefined, 0 );
                    continue;
                }

                if ( var_4 ismantling() )
                {
                    var_1 rockable_car_remove_player( var_5, var_16, 1 );
                    continue;
                }

                var_6 = var_4 getmovingplatformparent();

                if ( !isdefined( var_6 ) || var_6 != var_1 )
                {
                    var_1 rockable_car_remove_player( var_5, var_16, 1 );
                    continue;
                }

                var_7 = var_4.origin - var_1.toppoint;

                if ( vectordot( var_7, var_1.up ) < 0 )
                {
                    var_1 rockable_car_remove_player( var_5, var_16, 1 );
                    continue;
                }

                var_8 = vectordot( var_7, var_1.forward );
                var_9 = abs( var_8 );
                var_10 = var_9 / var_1.halflength;

                if ( var_10 > 1 )
                {
                    var_1 rockable_car_remove_player( var_5, var_16, 1 );
                    continue;
                }

                var_11 = vectordot( var_7, var_1.right );
                var_12 = abs( var_11 );
                var_13 = var_12 / var_1.halfwidth;

                if ( var_13 > 1 )
                {
                    var_1 rockable_car_remove_player( var_5, var_16, 1 );
                    continue;
                }

                var_1.touchtimes[var_5] = gettime();
            }

            foreach ( var_5, var_4 in var_2 )
                var_1 rockable_car_add_player( var_4 );
        }

        waitframe();
    }
}

rockable_car_add_player( var_0 )
{
    var_1 = var_0 getentitynumber();
    self.players[var_1] = var_0;
    self.touchtimes[var_1] = gettime();
}

rockable_car_remove_player( var_0, var_1, var_2 )
{
    if ( var_2 )
    {
        if ( isdefined( var_1 ) && var_1 >= 200 )
        {
            self.players[var_0] = undefined;
            self.touchtimes[var_0] = undefined;
            self.rocktimes[var_0] = undefined;
            self.rockstrings[var_0] = undefined;
        }
    }
    else
    {
        self.players[var_0] = undefined;
        self.touchtimes[var_0] = undefined;
        self.rocktimes[var_0] = undefined;
        self.rockstrings[var_0] = undefined;
    }
}

rockable_car_rock( var_0, var_1, var_2, var_3, var_4 )
{
    if ( var_1 > 0.3 && var_2 > 0 )
    {
        var_5 = scripts\engine\utility::ter_op( var_3 >= 0, "_encstr_875606482B58E505", "_encstr_959B05982C8DDA" );
        var_6 = scripts\engine\utility::ter_op( var_4 >= 0, "_encstr_9353062E718710C9", "_encstr_B1AD05C65666E8" );
        self setscriptablepartstate( "_encstr_A2ED15AFD880DD4119899E906505D98C2960B37B383903", var_5 + "_encstr_984C028E" + var_6, 0 );
        var_7 = var_0 getentitynumber();
        self.rocktimes[var_7] = gettime();
        self.rockstrings[var_7] = var_5 + var_6;
    }
}
