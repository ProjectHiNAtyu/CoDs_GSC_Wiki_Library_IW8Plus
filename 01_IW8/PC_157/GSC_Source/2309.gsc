// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

gas_used( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_0 endon( "_encstr_A3750609A5E61883" );
    scripts\mp\utility\print::printgameaction( "_encstr_9FA6118F187B5F3BEB10762F8D09631041C033", var_0.owner );
    thread scripts\mp\weapons::monitordisownedgrenade( self, var_0 );
    var_0 waittill( "_encstr_8AE90E7D08B8538A21DB77CF1155D2B3", var_1 );
    thread gas_watchexplode( var_0 );
    var_0 detonate();
}

gas_watchexplode( var_0 )
{
    var_0 thread scripts\mp\utility\script::notifyafterframeend( "_encstr_A3750609A5E61883", "_encstr_B7F90C0A289181C7427F2C571D89" );
    var_0 endon( "_encstr_B7F90C0A289181C7427F2C571D89" );
    var_1 = var_0.owner;
    var_0 waittill( "_encstr_AB0808DFB97F822F1899", var_2 );
    thread gas_createtrigger( var_2, var_1 );
}

gas_onplayerdamaged( var_0 )
{
    if ( var_0.meansofdeath == "_encstr_A9ED0B35F488AF94A9A0A00D8A" )
        return 1;

    if ( var_0.attacker == var_0.victim )
    {
        if ( distancesquared( var_0.point, var_0.victim.origin ) > 30625 )
            return 0;
    }
    else
    {
        var_0.attacker scripts\mp\damage::combatrecordtacticalstat( "_encstr_B84B129FEB68A9BB187F2F6F273CA31D18715767" );
        var_0.attacker scripts\mp\utility\stats::incpersstat( "_encstr_B2C0081FBBE06C27BDE3", 1 );

        if ( var_0.victim scripts\mp\utility\perk::_hasperk( "_encstr_A8C41D4763F216E0D1AD33EA19BFE8560997FDE3835A6D58D70219A3BC73B8" ) )
            var_0.attacker scripts\mp\damagefeedback::updatedamagefeedback( "_encstr_8A760D43963AE8168D9356CD4BB93A", undefined, undefined, undefined, 1 );
    }

    var_0.victim thread gas_applycough( var_0.attacker, 1 );
    return 1;
}

gas_clear( var_0 )
{
    gas_clearspeedredux( var_0 );
    gas_clearblur( var_0 );
    gas_clearcough( var_0 );

    if ( isdefined( self.gastriggerstouching ) )
    {
        foreach ( var_2 in self.gastriggerstouching )
        {
            if ( !isdefined( var_2 ) )
                continue;

            var_2.playersintrigger[self getentitynumber()] = undefined;
        }
    }

    self.gastriggerstouching = undefined;
}

gas_createtrigger( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_2 ) )
        var_2 = 7;

    if ( !isdefined( var_3 ) )
        var_3 = 1;

    var_4 = spawn( "_encstr_9E6B0FE8274B9DD92BC9D7278591B4D5E6", var_0 + ( 0, 0, int( -57.75 * var_3 ) ), 0, int( 256 * var_3 ), int( 175 * var_3 ) );
    var_4 scripts\cp_mp\ent_manager::registerspawn( 1, ::sweepgas );
    var_5 = plunder_fiftypercent_music( var_0, var_3 );

    if ( isdefined( var_5 ) )
        var_4 thread plunder_allowrepositoryuse( var_5, var_2 );

    var_4 endon( "_encstr_A3750609A5E61883" );
    var_4.owner = var_1;

    if ( isdefined( var_1 ) )
        var_4.team = var_1.team;

    var_4.playersintrigger = [];
    var_4 thread gas_watchtriggerenter();
    var_4 thread gas_watchtriggerexit();
    wait( var_2 );
    var_4 thread gas_destroytrigger();
}

plunder_fiftypercent_music( var_0, var_1 )
{
    if ( !scripts\mp\bots\bots_util::bot_bots_enabled_or_added() && !scripts\mp\utility\game::deposit_from_compromised_convoy_delayed_failsafe() )
        return;

    var_2 = createnavbadplacebybounds( var_0, ( 256 * var_1, 256 * var_1, 175 * var_1 ), ( 0, 0, 0 ) );
    return var_2;
}

plunder_allowrepositoryuse( var_0, var_1 )
{
    scripts\engine\utility::waittill_notify_or_timeout( "_encstr_89490EEB739DFBCBC35A8B606DB31119", var_1 );
    destroynavobstacle( var_0 );
}

sweepgas()
{
    thread gas_destroytrigger();
}

gas_destroytrigger()
{
    foreach ( var_1 in self.playersintrigger )
    {
        if ( !isdefined( var_1 ) )
            continue;

        self.playersintrigger[var_1 getentitynumber()] = undefined;
        var_1 thread gas_onexittrigger( self getentitynumber() );
    }

    scripts\cp_mp\ent_manager::deregisterspawn();
    self delete();
}

gas_onentertrigger( var_0 )
{
    if ( !isdefined( self.gastriggerstouching ) )
        self.gastriggerstouching = [];

    var_1 = var_0 getentitynumber();
    self.gastriggerstouching[var_1] = var_0;
    self.lastgastouchtime = gettime();

    if ( istrue( self.start_death_from_above_sequence ) )
        return var_1;

    if ( self.gastriggerstouching.size >= 1 )
    {
        thread gas_applyspeedredux();
        thread gas_applyblur();
    }

    if ( self.gastriggerstouching.size == 1 )
    {
        thread gas_applycough( var_0.owner, 0 );
        scripts\cp_mp\killstreaks\white_phosphorus::enableloopingcoughaudio();
    }

    return var_1;
}

gas_onexittrigger( var_0 )
{
    if ( !isdefined( self.gastriggerstouching ) )
        return;

    self.gastriggerstouching[var_0] = undefined;
    self.lastgastouchtime = gettime();

    if ( self.gastriggerstouching.size == 0 )
    {
        thread gas_removespeedredux();
        thread gas_removeblur();
        scripts\cp_mp\killstreaks\white_phosphorus::disableloopingcoughaudio();
        self notify( "_encstr_82C20BD96E4BC18DC3EFB993F3" );
    }
}

gas_watchtriggerenter()
{
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_0 );

        if ( !isplayer( var_0 ) )
            continue;

        if ( istrue( var_0.plunderlimit ) )
            continue;

        if ( var_0 scripts\mp\utility\killstreak::isjuggernaut() )
            continue;

        if ( !var_0 scripts\cp_mp\utility\player_utility::_isalive() )
            continue;

        if ( isdefined( self.playersintrigger[var_0 getentitynumber()] ) )
            continue;

        if ( level.teambased )
        {
            if ( isdefined( self.owner ) )
            {
                if ( var_0 != self.owner && !scripts\cp_mp\utility\player_utility::playersareenemies( var_0, self.owner ) )
                    continue;
            }
            else if ( isdefined( self.team ) && scripts\mp\utility\player::isfriendly( self.team, var_0 ) )
                continue;
        }

        self.playersintrigger[var_0 getentitynumber()] = var_0;
        var_0 thread gas_onentertrigger( self );
    }
}

gas_watchtriggerexit()
{
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        foreach ( var_2, var_1 in self.playersintrigger )
        {
            if ( !isdefined( var_1 ) )
            {
                self.playersintrigger[var_2] = undefined;
                continue;
            }

            if ( !var_1 scripts\cp_mp\utility\player_utility::_isalive() )
                continue;

            if ( var_1 istouching( self ) )
                continue;

            self.playersintrigger[var_1 getentitynumber()] = undefined;
            var_1 thread gas_onexittrigger( self getentitynumber() );
        }

        waitframe();
    }
}

gas_applycough( var_0, var_1 )
{
    var_2 = scripts\mp\utility\perk::_hasperk( "_encstr_A8C41D4763F216E0D1AD33EA19BFE8560997FDE3835A6D58D70219A3BC73B8" );
    var_3 = isdefined( var_0 ) && self == var_0;

    if ( !var_3 && var_2 )
        return;

    if ( istrue( self.plunderlimit ) )
        return;

    var_4 = 0;

    if ( istrue( var_1 ) )
    {
        var_4 = 1;

        if ( var_3 )
            var_4 = 0;
    }

    if ( !istrue( self.gascoughinprogress ) || istrue( var_1 ) )
        thread gas_queuecough( var_4 );
}

gas_queuecough( var_0 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_AD6D108FC773E8503C0F712BB91BF835EA0B" );
    self endon( "_encstr_82C20BD96E4BC18DC3EFB993F3" );
    self notify( "_encstr_B60310D9586E7DC5EA56BA2BD7C67BAB9D1A" );
    self endon( "_encstr_B60310D9586E7DC5EA56BA2BD7C67BAB9D1A" );
    var_1 = gettime() + 1000;

    while ( gas_coughisblocked() )
        waitframe();

    if ( var_0 && gettime() > var_1 )
        var_0 = 0;

    var_2 = getdvarint( "_encstr_A2191C6F713BA8B8336DB253C7283357393CFD20BF128BDBB22BB0778501", 1 ) == 1;

    if ( var_2 )
        thread gas_begincoughing( var_0 );
    else
    {
        self endon( "_encstr_B97913D7894EB71E6B1A6146DF3BA023A02BEC2D87" );
        self.gascoughinprogress = 1;

        if ( var_0 )
        {
            self playgestureviewmodel( "_encstr_AB581609E45A278F9BD0B17B18EB828F294EB7BB701B3F94" );
            wait 3.33;
        }
        else
        {
            self playgestureviewmodel( "_encstr_ABAE1B63685F38D9F71B1150C72733C71F53B16BA86579C090DCDF2671" );
            wait 1.833;
        }

        self.gascoughinprogress = undefined;
    }
}

gas_begincoughing( var_0 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_AD6D108FC773E8503C0F712BB91BF835EA0B" );
    self notify( "_encstr_B97913D7894EB71E6B1A6146DF3BA023A02BEC2D87" );
    self endon( "_encstr_B97913D7894EB71E6B1A6146DF3BA023A02BEC2D87" );

    if ( !nullweapon( self getheldoffhand() ) )
        childthread gas_takeheldoffhand();

    self.gascoughinprogress = 1;

    if ( self hasweapon( getcompleteweaponname( "_encstr_9DDF130797EB413917B08FB327A9B427CCFD697358" ) ) )
        scripts\cp_mp\utility\inventory_utility::_takeweapon( "_encstr_9DDF130797EB413917B08FB327A9B427CCFD697358" );

    if ( self hasweapon( getcompleteweaponname( "_encstr_9C3313813146F802986DC711017CAAC81BC73F83B3" ) ) )
        scripts\cp_mp\utility\inventory_utility::_takeweapon( "_encstr_9C3313813146F802986DC711017CAAC81BC73F83B3" );

    var_1 = scripts\engine\utility::ter_op( istrue( var_0 ), getcompleteweaponname( "_encstr_9C3313813146F802986DC711017CAAC81BC73F83B3" ), getcompleteweaponname( "_encstr_9DDF130797EB413917B08FB327A9B427CCFD697358" ) );
    var_2 = scripts\engine\utility::ter_op( istrue( var_0 ), 3.33, 1.833 );
    self giveandfireoffhand( var_1 );
    childthread gas_monitorcoughweaponfired( var_1 );
    childthread gas_monitorcoughweapontaken( var_1 );
    childthread gas_monitorcoughduration( var_2 );
    scripts\engine\utility::_id_143A6( "_encstr_BAB815CEB06EBE6CEDBA9D0D75CA581CF69B32B4C9B223", "_encstr_8F7F15CF93F6B92B3893EF34CF30710340358B4F6F1572", "_encstr_A61212ECC26ED78DEDABB33422EA4E58E896DEE6" );

    if ( self hasweapon( var_1 ) )
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_1 );

    self.gascoughinprogress = undefined;
}

gas_removecough( var_0 )
{
    self notify( "_encstr_B60310D9586E7DC5EA56BA2BD7C67BAB9D1A" );
    self notify( "_encstr_B97913D7894EB71E6B1A6146DF3BA023A02BEC2D87" );
    self.gascoughinprogress = undefined;

    if ( !istrue( var_0 ) )
    {
        if ( isdefined( self.gastakenweaponobj ) )
            gas_restoreheldoffhand();
    }
}

gas_clearcough( var_0 )
{
    self notify( "_encstr_B60310D9586E7DC5EA56BA2BD7C67BAB9D1A" );
    self notify( "_encstr_B97913D7894EB71E6B1A6146DF3BA023A02BEC2D87" );
    self.gascoughinprogress = undefined;

    if ( !istrue( var_0 ) )
    {
        var_1 = getdvarint( "_encstr_A2191C6F713BA8B8336DB253C7283357393CFD20BF128BDBB22BB0778501", 1 ) == 1;

        if ( var_1 )
        {
            if ( self hasweapon( getcompleteweaponname( "_encstr_9DDF130797EB413917B08FB327A9B427CCFD697358" ) ) )
                scripts\cp_mp\utility\inventory_utility::_takeweapon( "_encstr_9DDF130797EB413917B08FB327A9B427CCFD697358" );

            if ( self hasweapon( getcompleteweaponname( "_encstr_9C3313813146F802986DC711017CAAC81BC73F83B3" ) ) )
                scripts\cp_mp\utility\inventory_utility::_takeweapon( "_encstr_9C3313813146F802986DC711017CAAC81BC73F83B3" );

            if ( isdefined( self.gastakenweaponobj ) )
                gas_restoreheldoffhand();
        }
        else
        {
            self stopgestureviewmodel( "_encstr_AB581609E45A278F9BD0B17B18EB828F294EB7BB701B3F94" );
            self stopgestureviewmodel( "_encstr_ABAE1B63685F38D9F71B1150C72733C71F53B16BA86579C090DCDF2671" );
        }
    }
}

gas_monitorcoughweaponfired( var_0 )
{
    self endon( "_encstr_8F7F15CF93F6B92B3893EF34CF30710340358B4F6F1572" );
    self endon( "_encstr_A61212ECC26ED78DEDABB33422EA4E58E896DEE6" );

    for (;;)
    {
        self waittill( "_encstr_8C600EDECC9934C2E623EB665AC9CA46", var_1 );

        if ( isnullweapon( var_1, var_0 ) )
            break;
    }

    self notify( "_encstr_BAB815CEB06EBE6CEDBA9D0D75CA581CF69B32B4C9B223" );
}

gas_monitorcoughweapontaken( var_0 )
{
    self endon( "_encstr_BAB815CEB06EBE6CEDBA9D0D75CA581CF69B32B4C9B223" );
    self endon( "_encstr_A61212ECC26ED78DEDABB33422EA4E58E896DEE6" );

    while ( self hasweapon( var_0 ) )
        waitframe();

    self notify( "_encstr_8F7F15CF93F6B92B3893EF34CF30710340358B4F6F1572" );
}

gas_monitorcoughduration( var_0 )
{
    self endon( "_encstr_8F7F15CF93F6B92B3893EF34CF30710340358B4F6F1572" );
    self endon( "_encstr_BAB815CEB06EBE6CEDBA9D0D75CA581CF69B32B4C9B223" );
    wait( var_0 );
    self notify( "_encstr_A61212ECC26ED78DEDABB33422EA4E58E896DEE6" );
}

gas_takeheldoffhand()
{
    if ( isdefined( self.gastakenweaponobj ) )
        gas_restoreheldoffhand();

    self endon( "_encstr_97DB1779CEEB61A6F26759670B9AF3C89CE7E4D1B72858503A" );
    self.gastakenweaponobj = self getheldoffhand();
    var_0 = scripts\mp\equipment::getequipmentreffromweapon( self.gastakenweaponobj );

    if ( isdefined( var_0 ) && scripts\mp\equipment::hasequipment( var_0 ) )
    {
        self.gastakenweaponammo = scripts\mp\equipment::getequipmentammo( var_0 );
        scripts\cp_mp\utility\inventory_utility::_takeweapon( self.gastakenweaponobj );
        waitframe();
        thread gas_restoreheldoffhand();
    }

    var_1 = scripts\mp\supers::getsuperrefforsuperoffhand( self.gastakenweaponobj );

    if ( isdefined( var_1 ) )
    {
        var_2 = scripts\mp\supers::getcurrentsuperref();

        if ( isdefined( var_2 ) && var_2 == var_1 )
        {
            self.gastakenweaponammo = self getammocount( self.gastakenweaponobj );
            scripts\cp_mp\utility\inventory_utility::_takeweapon( self.gastakenweaponobj );
            waitframe();
            thread gas_restoreheldoffhand();
        }
    }

    var_3 = scripts\mp\utility\weapon::isgesture( self.gastakenweaponobj );

    if ( var_3 )
    {
        scripts\cp_mp\utility\inventory_utility::_takeweapon( self.gastakenweaponobj );
        waitframe();
        thread gas_restoreheldoffhand();
    }

    self.gastakenweaponammo = self getammocount( self.gastakenweaponobj );
    scripts\cp_mp\utility\inventory_utility::_takeweapon( self.gastakenweaponobj );
    waitframe();
    thread gas_restoreheldoffhand();
}

gas_restoreheldoffhand()
{
    self notify( "_encstr_97DB1779CEEB61A6F26759670B9AF3C89CE7E4D1B72858503A" );
    var_0 = scripts\mp\equipment::getequipmentreffromweapon( self.gastakenweaponobj );

    if ( isdefined( var_0 ) && scripts\mp\equipment::hasequipment( var_0 ) )
    {
        if ( scripts\mp\equipment::hasequipment( var_0 ) )
        {
            scripts\cp_mp\utility\inventory_utility::_giveweapon( self.gastakenweaponobj );
            var_1 = scripts\mp\equipment::findequipmentslot( var_0 );

            if ( var_1 == "_encstr_987F080E394BDAC2E45E" )
                self assignweaponoffhandprimary( self.gastakenweaponobj );
            else if ( var_1 == "_encstr_B98F0AC7D5B99F4DDBA8353B" )
                self assignweaponoffhandsecondary( self.gastakenweaponobj );

            scripts\mp\equipment::setequipmentammo( var_0, self.gastakenweaponammo );
            self.gastakenweaponobj = undefined;
            self.gastakenweaponammo = undefined;
        }

        return;
    }

    var_2 = scripts\mp\supers::getsuperrefforsuperoffhand( self.gastakenweaponobj );

    if ( isdefined( var_2 ) )
    {
        var_3 = scripts\mp\supers::getcurrentsuperref();

        if ( isdefined( var_3 ) && var_3 == var_2 )
        {
            scripts\cp_mp\utility\inventory_utility::_giveweapon( self.gastakenweaponobj );
            self assignweaponoffhandspecial( self.gastakenweaponobj );
            self setweaponammoclip( self.gastakenweaponobj, self.gastakenweaponammo );
            self.gastakenweaponobj = undefined;
            self.gastakenweaponammo = undefined;
        }

        return;
    }

    var_4 = scripts\mp\utility\weapon::isgesture( self.gastakenweaponobj );

    if ( var_4 )
    {
        if ( isdefined( self.gestureweapon ) && self.gestureweapon == self.gastakenweaponobj.basename )
        {
            scripts\cp_mp\utility\inventory_utility::_giveweapon( self.gastakenweaponobj );
            self.gastakenweaponobj = undefined;
        }

        return;
    }

    scripts\cp_mp\utility\inventory_utility::_giveweapon( self.gastakenweaponobj );
    self setweaponammoclip( self.gastakenweaponobj, self.gastakenweaponammo );
    self.gastakenweaponobj = undefined;
    self.gastakenweaponammo = undefined;
}

gas_applyspeedredux()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self notify( "_encstr_B2AF1151AA7718D875CC7355E951E057F702C9" );
    self endon( "_encstr_B2AF1151AA7718D875CC7355E951E057F702C9" );

    if ( isdefined( self.gasspeedmod ) )
    {
        if ( self.gasspeedmod < -0.15 )
        {
            if ( scripts\mp\utility\perk::_hasperk( "_encstr_A8C41D4763F216E0D1AD33EA19BFE8560997FDE3835A6D58D70219A3BC73B8" ) )
            {
                self.gasspeedmod = -0.15;
                scripts\mp\weapons::updatemovespeedscale();
                return;
            }

            if ( isdefined( self.gastriggerstouching ) )
            {
                foreach ( var_1 in self.gastriggerstouching )
                {
                    if ( isdefined( var_1 ) && isdefined( var_1.owner ) && var_1.owner == self )
                    {
                        self.gasspeedmod = -0.15;
                        scripts\mp\weapons::updatemovespeedscale();
                        return;
                    }
                }
            }
        }
    }
    else
        self.gasspeedmod = 0;

    var_3 = -0.35;

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_A8C41D4763F216E0D1AD33EA19BFE8560997FDE3835A6D58D70219A3BC73B8" ) )
        var_3 = -0.15;
    else if ( isdefined( self.gastriggerstouching ) )
    {
        foreach ( var_1 in self.gastriggerstouching )
        {
            if ( isdefined( var_1 ) && isdefined( var_1.owner ) && var_1.owner == self )
                var_3 = -0.15;
        }
    }

    gas_modifyspeed( var_3 );
    self.gasspeedmod = var_3;
    scripts\mp\weapons::updatemovespeedscale();
}

gas_removespeedredux()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self notify( "_encstr_B2AF1151AA7718D875CC7355E951E057F702C9" );
    self endon( "_encstr_B2AF1151AA7718D875CC7355E951E057F702C9" );

    if ( !isdefined( self.gasspeedmod ) )
        return;

    gas_modifyspeed( 0 );
    self.gasspeedmod = undefined;
    scripts\mp\weapons::updatemovespeedscale();
}

gas_modifyspeed( var_0 )
{
    var_1 = 0;

    while ( var_1 <= 0.65 )
    {
        var_1 = var_1 + 0.05;
        self.gasspeedmod = scripts\engine\math::lerp( self.gasspeedmod, var_0, min( 1, var_1 / 0.65 ) );
        scripts\mp\weapons::updatemovespeedscale();
        wait 0.05;
    }
}

gas_clearspeedredux( var_0 )
{
    self notify( "_encstr_B2AF1151AA7718D875CC7355E951E057F702C9" );
    self.gasspeedmod = undefined;

    if ( !istrue( var_0 ) )
        scripts\mp\weapons::updatemovespeedscale();
}

gas_applyblur()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self notify( "_encstr_B82810B316E6D7D6B78C2D335ED713D8EA39" );
    self endon( "_encstr_B82810B316E6D7D6B78C2D335ED713D8EA39" );
    var_0 = "_encstr_9B9B153F807B1F39934F600F296086CCBD5010229F8B20";

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_A8C41D4763F216E0D1AD33EA19BFE8560997FDE3835A6D58D70219A3BC73B8" ) )
        var_0 = "_encstr_9C1215B1061399D44BE7A5431BC230C8D11FD86B216598";
    else if ( isdefined( self.gastriggerstouching ) )
    {
        foreach ( var_2 in self.gastriggerstouching )
        {
            if ( isdefined( var_2 ) && isdefined( var_2.owner ) && var_2.owner == self )
                var_0 = "_encstr_9C1215B1061399D44BE7A5431BC230C8D11FD86B216598";
        }
    }

    for (;;)
    {
        scripts\cp_mp\utility\shellshock_utility::_shellshock( var_0, "_encstr_AD1804EF916E", 0.5, 0 );
        wait 0.2;
    }
}

gas_removeblur()
{
    self notify( "_encstr_B82810B316E6D7D6B78C2D335ED713D8EA39" );
}

gas_clearblur( var_0 )
{
    self notify( "_encstr_B82810B316E6D7D6B78C2D335ED713D8EA39" );

    if ( !istrue( var_0 ) )
        scripts\cp_mp\utility\shellshock_utility::_stopshellshock();
}

gas_shouldtakeheldoffhand()
{
    switch ( self getheldoffhand().basename )
    {
        case "_encstr_89A60F636F10D563CFA9F209EFE09F0397":
            return 0;
        default:
            return 1;
    }

    return 0;
}

gas_coughisblocked()
{
    if ( !scripts\common\utility::is_cough_gesture_allowed() )
        return 1;

    if ( !scripts\common\utility::is_offhand_weapons_allowed() )
        return 1;

    if ( !nullweapon( self getheldoffhand() ) && !gas_shouldtakeheldoffhand() )
        return 1;

    return 0;
}

gas_isintrigger()
{
    if ( !isdefined( self.gastriggerstouching ) )
        return 0;

    if ( self.gastriggerstouching.size == 0 )
        return 0;

    return 1;
}

gas_updateplayereffects()
{
    if ( scripts\mp\utility\killstreak::isjuggernaut() )
    {
        gas_clear();
        return;
    }

    if ( gas_isintrigger() )
    {
        thread gas_applyspeedredux();
        thread gas_applyblur();
    }
}

gas_getblurinterruptdelayms( var_0 )
{
    return 200.0;
}

plunder_playerspawnedcallback( var_0, var_1 )
{
    if ( isdefined( var_1.gastriggerstouching ) && var_1.gastriggerstouching.size > 0 )
    {
        foreach ( var_3 in var_1.gastriggerstouching )
        {
            if ( isdefined( var_3.owner ) && var_3.owner == var_0 )
                return 1;
        }
    }

    return 0;
}
