// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

initmissilelauncherusage()
{
    _id_12C74();
}

_id_12C74()
{
    self.missilelauncherstage = undefined;
    self.missilelaunchertarget = undefined;
    self.missilelauncherlockstarttime = undefined;
    self.missilelauncherlostsightlinetime = undefined;
}

resetmissilelauncherlocking()
{
    if ( !isdefined( self.missilelauncheruseentered ) )
        return;

    self.missilelauncheruseentered = undefined;
    self notify( "_encstr_A16C1E9B1DB70EAF532CCE2B1B2D9B7DC67BD8D6B49B76D733B2AC3289856CB5" );
    self notify( "_encstr_BA571DB2E31018916A9B8BDF9983CA7F70E82E3C79E0EFFA35BBCBCBEBBE42" );
    self notify( "_encstr_A4CF1A08326F26D08DF511430DF57863DF1BC690FA775229A5C77791" );
    self weaponlockfree();
    self stoplocalsound( "_encstr_94DE17106A266FEBF7E225A5C13F300301A3600822FCEB80FF" );
    self stoplocalsound( "_encstr_B22F1568AB8FC3EF670B10C3880EF0E9B1C8382F041369" );

    if ( isdefined( self.missilelaunchertarget ) )
        scripts\cp_mp\utility\weapon_utility::removelockedon( self.missilelaunchertarget, self );

    _id_12C74();
}

resetmissilelauncherlockingondeath()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self notify( "_encstr_95C62325CA37ACA36AA5B9CD4BC695132CD5E66CD0CA39317BD8B6A5B9CEF437222B163AD0" );
    self endon( "_encstr_95C62325CA37ACA36AA5B9CD4BC695132CD5E66CD0CA39317BD8B6A5B9CEF437222B163AD0" );
    self endon( "_encstr_9CC80D7A58296FC46F8375C931A3F0" );

    for (;;)
    {
        self waittill( "_encstr_A3750609A5E61883" );
        resetmissilelauncherlocking();
    }
}

loopmissilelauncherlockingfeedback()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_A16C1E9B1DB70EAF532CCE2B1B2D9B7DC67BD8D6B49B76D733B2AC3289856CB5" );

    for (;;)
    {
        if ( isdefined( level.chopper ) && isdefined( level.chopper.gunner ) && isdefined( self.missilelaunchertarget ) && self.missilelaunchertarget == level.chopper.gunner )
            level.gunshipplayer playlocalsound( "_encstr_B95012DD27883F07E1FB722BD5729030C0C9E933" );

        if ( isdefined( level.gunshipplayer ) && isdefined( self.missilelaunchertarget ) && self.missilelaunchertarget == level.gunship.planemodel )
            level.gunshipplayer playlocalsound( "_encstr_B95012DD27883F07E1FB722BD5729030C0C9E933" );

        self playlocalsound( "_encstr_94DE17106A266FEBF7E225A5C13F300301A3600822FCEB80FF" );
        self playrumbleonentity( "_encstr_BEE1100B6C269960AFC89AAD5B7D334B392B" );
        wait 0.6;
    }
}

loopmissilelauncherlockedfeedback()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_BA571DB2E31018916A9B8BDF9983CA7F70E82E3C79E0EFFA35BBCBCBEBBE42" );
    self playlocalsound( "_encstr_B22F1568AB8FC3EF670B10C3880EF0E9B1C8382F041369" );

    for (;;)
    {
        if ( isdefined( level.chopper ) && isdefined( level.chopper.gunner ) && isdefined( self.missilelaunchertarget ) && self.missilelaunchertarget == level.chopper.gunner )
            level.gunshipplayer playlocalsound( "_encstr_B95012DD27883F07E1FB722BD5729030C0C9E933" );

        if ( isdefined( level.gunshipplayer ) && isdefined( self.missilelaunchertarget ) && self.missilelaunchertarget == level.gunship.planemodel )
            level.gunshipplayer playlocalsound( "_encstr_B95012DD27883F07E1FB722BD5729030C0C9E933" );

        self playrumbleonentity( "_encstr_BEE1100B6C269960AFC89AAD5B7D334B392B" );
        wait 0.25;
    }
}

softsighttest( var_0 )
{
    var_1 = 500;

    if ( var_0 stingtargstruct_isinlos() )
    {
        self.missilelauncherlostsightlinetime = 0;
        return 1;
    }

    if ( self.missilelauncherlostsightlinetime == 0 )
        self.missilelauncherlostsightlinetime = gettime();

    var_2 = gettime() - self.missilelauncherlostsightlinetime;

    if ( var_2 >= var_1 )
    {
        resetmissilelauncherlocking();
        return 0;
    }

    return 1;
}

missilelauncherusage()
{
    var_0 = getdvarint( "_encstr_93E71A177FD358906118A438C25B78091A6BB7BF27689851B975E9B1", 625000000 );
    var_1 = 0;

    if ( self playerads() < 0.95 )
    {
        resetmissilelauncherlocking();
        return;
    }

    self.missilelauncheruseentered = 1;

    if ( !isdefined( self.missilelauncherstage ) )
        self.missilelauncherstage = 0;

    if ( self.missilelauncherstage == 0 )
    {
        var_2 = scripts\mp\weapons::lockonlaunchers_gettargetarray( 0 );

        if ( var_2.size == 0 )
            return;

        var_2 = sortbydistance( var_2, self.origin );
        var_3 = undefined;
        var_4 = 0;

        foreach ( var_6 in var_2 )
        {
            if ( !isdefined( var_6 ) )
                continue;

            var_3 = stingtargstruct_create( self, var_6 );
            var_3 stingtargstruct_getoffsets();
            var_3 stingtargstruct_getorigins();
            var_3 stingtargstruct_getinreticle();

            if ( var_3 stingtargstruct_isinreticle() )
            {
                if ( distancesquared( var_6.origin, self.origin ) > var_0 )
                    break;

                var_4 = 1;
                break;
            }
        }

        if ( !var_4 )
            return;

        var_3 stingtargstruct_getinlos();

        if ( !var_3 stingtargstruct_isinlos() )
            return;

        self.missilelaunchertarget = var_3.target;
        self.missilelauncherlockstarttime = gettime();
        self.missilelauncherstage = 1;
        self.missilelauncherlostsightlinetime = 0;

        if ( isdefined( self.missilelaunchertarget ) )
            scripts\cp_mp\utility\weapon_utility::addlockedon( self.missilelaunchertarget, self );

        thread loopmissilelauncherlockingfeedback();
    }

    if ( self.missilelauncherstage == 1 )
    {
        if ( !isdefined( self.missilelaunchertarget ) )
        {
            resetmissilelauncherlocking();
            return;
        }

        if ( !var_1 && ( self.missilelaunchertarget scripts\cp_mp\vehicles\vehicle::isvehicle() && scripts\cp_mp\vehicles\vehicle::_id_141B9( self.missilelaunchertarget, self ) ) )
        {
            resetmissilelauncherlocking();
            return;
        }

        var_3 = stingtargstruct_create( self, self.missilelaunchertarget );
        var_3 stingtargstruct_getoffsets();
        var_3 stingtargstruct_getorigins();
        var_3 stingtargstruct_getinreticle();

        if ( !var_3 stingtargstruct_isinreticle() )
        {
            resetmissilelauncherlocking();
            return;
        }

        var_3 stingtargstruct_getinlos();

        if ( !softsighttest( var_3 ) )
            return;

        var_8 = gettime() - self.missilelauncherlockstarttime;

        if ( scripts\mp\utility\perk::_hasperk( "_encstr_97ED1733F8F09E3BC7D0DBBF18CF73DBB34916D9A5EE6FAFFD" ) )
        {
            if ( var_8 < 250.0 )
                return;
        }
        else if ( var_8 < 500 )
            return;

        self notify( "_encstr_A16C1E9B1DB70EAF532CCE2B1B2D9B7DC67BD8D6B49B76D733B2AC3289856CB5" );
        thread loopmissilelauncherlockedfeedback();
        var_9 = undefined;
        missilelauncher_finalizelock( var_3 );

        if ( isdefined( level.activekillstreaks ) )
        {
            if ( scripts\engine\utility::array_contains( level.activekillstreaks, self.missilelaunchertarget ) )
                thread scripts\mp\battlechatter_mp::killstreaklockedon( self.missilelaunchertarget.streakname );
        }

        self.missilelauncherstage = 2;
    }

    if ( self.missilelauncherstage == 2 )
    {
        if ( !isdefined( self.missilelaunchertarget ) )
        {
            resetmissilelauncherlocking();
            return;
        }

        if ( !var_1 && ( self.missilelaunchertarget scripts\cp_mp\vehicles\vehicle::isvehicle() && scripts\cp_mp\vehicles\vehicle::_id_141B9( self.missilelaunchertarget, self ) ) )
        {
            resetmissilelauncherlocking();
            return;
        }

        var_3 = stingtargstruct_create( self, self.missilelaunchertarget );
        var_3 stingtargstruct_getoffsets();
        var_3 stingtargstruct_getorigins();
        var_3 stingtargstruct_getinreticle();
        var_3 stingtargstruct_getinlos();

        if ( !softsighttest( var_3 ) )
            return;
        else
            missilelauncher_finalizelock( var_3 );

        if ( !var_3 stingtargstruct_isinreticle() )
        {
            resetmissilelauncherlocking();
            return;
        }
    }
}

missilelauncherusageloop()
{
    if ( !isplayer( self ) )
        return;

    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_A1D70BDE071B53794F208AE3F8" );
    self endon( "_encstr_9CC80D7A58296FC46F8375C931A3F0" );
    thread resetmissilelauncherlockingondeath();

    for (;;)
    {
        wait 0.05;
        missilelauncherusage();
    }
}

missilelauncher_finalizelock( var_0 )
{
    var_1 = undefined;

    if ( isdefined( var_0.target ) && isdefined( var_0.target.vehiclename ) && var_0.target.vehiclename == "_encstr_A6390B63B4CEA1D17D1D16E6AD" )
        var_1 = ( 0, 0, 75 );
    else if ( isdefined( var_0.inlosid ) )
    {
        var_1 = var_0.offsets[var_0.inlosid];
        var_1 = ( var_1[1], -1 * var_1[0], var_1[2] );
    }
    else
        var_1 = ( 0, 0, 0 );

    self weaponlockfinalize( self.missilelaunchertarget, var_1 );
}

addhudincoming_attacker( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    var_1 = var_0;

    if ( isdefined( var_0.owner ) && !scripts\mp\utility\killstreak::isplayerkillstreak( var_0 ) )
        var_1 = var_0.owner;

    if ( !isdefined( var_1 ) || !isplayer( var_1 ) )
        return;
}

removehudincoming_attacker( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    var_1 = var_0;

    if ( !scripts\mp\utility\killstreak::isplayerkillstreak( var_0 ) )
    {
        if ( !isdefined( var_0.owner ) )
            return;

        var_1 = var_0.owner;
    }

    if ( !isdefined( var_1 ) || !isplayer( var_1 ) )
        return;
}

stingtargstruct_create( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.player = var_0;
    var_2.target = var_1;
    var_2.offsets = [];
    var_2.origins = [];
    var_2.inreticledistssqr = [];
    var_2.inreticlesortedids = [];
    var_2.inlosid = undefined;
    var_2.useoldlosverification = 1;
    return var_2;
}

stingtargstruct_getoffsets()
{
    self.offsets = [];

    if ( scripts\mp\utility\entity::ischoppergunner( self.target ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, -50 );
        self.useoldlosverification = 0;
    }
    else if ( scripts\mp\utility\entity::issupporthelo( self.target ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, -100 );
        self.useoldlosverification = 0;
    }
    else if ( scripts\mp\utility\entity::isgunship( self.target ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 50 );
        self.useoldlosverification = 0;
    }
    else if ( scripts\mp\utility\entity::isclusterstrike( self.target ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 40 );
        self.useoldlosverification = 0;
    }
    else if ( scripts\mp\utility\entity::isturret( self.target ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 42 );
        self.offsets[self.offsets.size] = ( 0, 0, 5 );
        self.useoldlosverification = 0;
    }
    else if ( scripts\mp\utility\entity::isradardrone( self.target ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 10 );
        self.useoldlosverification = 0;
    }
    else if ( scripts\mp\utility\entity::turret_op( self.target ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 10 );
        self.useoldlosverification = 0;
    }
    else if ( scripts\mp\utility\entity::isscramblerdrone( self.target ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 15 );
        self.useoldlosverification = 0;
    }
    else if ( scripts\mp\utility\entity::isradarhelicopter( self.target ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, -30 );
        self.useoldlosverification = 0;
    }
    else if ( isdefined( self.target.vehiclename ) && self.target.vehiclename == "_encstr_A6390B63B4CEA1D17D1D16E6AD" )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 72 );
        self.useoldlosverification = 0;
    }
    else if ( isdefined( self.target.vehiclename ) && self.target.vehiclename == "_encstr_AB510CB03836AF93ABCD6ED21673" )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 60 );
        self.useoldlosverification = 0;
    }
    else if ( isdefined( self.target.vehiclename ) && ( self.target.vehiclename == "_encstr_93120C26CEB35F60D753E8D8E70B" || self.target.vehiclename == "_encstr_98C20F6C169CCEDEEB1D27EA1B5BFA6BCE" ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 60 );
        self.useoldlosverification = 0;
    }
    else if ( isdefined( self.target.vehiclename ) && self.target.vehiclename == "_encstr_ADDA105BE0A397A247C59A5620C72B570BF0" )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 65 );
        self.useoldlosverification = 0;
    }
    else if ( isdefined( self.target.vehiclename ) && self.target.vehiclename == "_encstr_9C60118D79F0B99B717F6B7B6BA8A3F87B2343" )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 60 );
        self.useoldlosverification = 0;
    }
    else if ( isdefined( self.target.vehiclename ) && ( self.target.vehiclename == "_encstr_8BD60D9FC127C05BAA49605883063F" || self.target.vehiclename == "_encstr_81D70A1B037642AEF0D9F6BD" ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 55 );
        self.useoldlosverification = 0;
    }
    else if ( isdefined( self.target.vehiclename ) && self.target.vehiclename == "_encstr_A219044B93BB" )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 30 );
        self.useoldlosverification = 0;
    }
    else if ( isdefined( self.target.vehiclename ) && self.target.vehiclename == "_encstr_94C20B50BFCB3F037BF93BA34D" )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 30 );
        self.useoldlosverification = 0;
    }
    else if ( isdefined( self.target.vehiclename ) && ( self.target.vehiclename == "_encstr_B6DE05E0ED1382" || self.target.vehiclename == "_encstr_BC120A09810621EE6FAB69F3" || self.target.vehiclename == "_encstr_A1F51125F3D09601DA23771B6F76AAC220785E" ) )
    {
        self.offsets[self.offsets.size] = ( 0, 0, 50 );
        self.useoldlosverification = 0;
    }
    else if ( isdefined( self.target.vehiclename ) && self.target.vehiclename == "_encstr_9BB30DCA70D71B7F91C39F98E77903" )
    {
        self.offsets[self.offsets.size] = ( 0, 0, -100 );
        self.useoldlosverification = 0;
    }
    else
        self.offsets[self.offsets.size] = ( 0, 0, 0 );
}

stingtargstruct_getorigins()
{
    var_0 = self.target.origin;
    var_1 = self.target.angles;
    var_2 = anglestoforward( var_1 );
    var_3 = anglestoright( var_1 );
    var_4 = anglestoup( var_1 );

    for ( var_5 = 0; var_5 < self.offsets.size; var_5++ )
    {
        var_6 = self.offsets[var_5];
        self.origins[var_5] = var_0 + var_3 * var_6[0] + var_2 * var_6[1] + var_4 * var_6[2];
    }
}

stingtargstruct_getinreticle()
{
    foreach ( var_5, var_1 in self.origins )
    {
        for ( var_2 = 0; var_2 < self.origins.size; var_2++ )
        {
            var_3 = self.player worldpointtoscreenpos( self.origins[var_2], 65 );

            if ( isdefined( var_3 ) )
            {
                var_4 = length2dsquared( var_3 );

                if ( var_4 <= 2916 )
                {
                    self.inreticlesortedids[self.inreticlesortedids.size] = var_2;
                    self.inreticledistssqr[var_2] = var_4;
                }
            }
        }
    }

    if ( self.inreticlesortedids.size > 1 )
    {
        for ( var_2 = 0; var_2 < self.inreticlesortedids.size; var_2++ )
        {
            for ( var_6 = var_2 + 1; var_6 < self.inreticlesortedids.size; var_6++ )
            {
                var_7 = self.inreticlesortedids[var_2];
                var_8 = self.inreticlesortedids[var_6];
                var_9 = self.inreticledistssqr[var_7];
                var_10 = self.inreticledistssqr[var_8];

                if ( var_10 < var_9 )
                {
                    var_11 = var_7;
                    self.inreticlesortedids[var_2] = var_8;
                    self.inreticlesortedids[var_6] = var_11;
                }
            }
        }
    }
}

stingtargstruct_getinlos()
{
    var_0 = self.player geteye();
    var_1 = physics_createcontents( [ "_encstr_9E9C1638865EB95A6CE68DDEE64795B98E6EAF9BF6B1968C", "_encstr_941116D7F47B0FC88317C8B07BCC017DD35AD8D44D52D773", "_encstr_B7F9145B18AB8AF721FE235718AB8F95E96811E39843", "_encstr_A18816F8C3E1EFFCFF5A92BF8363BBF55BCBD9C3538DF74D", "_encstr_B7D018B89C4B13AC473342305523920D607E50E3571038A69138", "_encstr_9DD6156A78B803FAD687D7EF95056246B86329B453E0D5", "_encstr_A4241EFBEC81604B32C7D7C79B6B85302482867395C17875FB4BD7C79F225B28" ] );
    var_2 = [ self.player, self.target ];
    var_3 = self.target getlinkedchildren();

    if ( isdefined( var_3 ) && var_3.size > 0 )
        var_2 = scripts\engine\utility::array_combine( var_2, var_3 );

    if ( !self.useoldlosverification )
    {
        for ( var_4 = 0; var_4 < self.inreticlesortedids.size; var_4++ )
        {
            var_5 = self.inreticlesortedids[var_4];
            var_6 = self.origins[var_5];
            var_7 = physics_raycast( var_0, var_6, var_1, var_2, 0, "_encstr_828C15A7C847CB7B768330689A4A13067764A09E5D87D3", 1 );

            if ( !isdefined( var_7 ) || var_7.size == 0 )
            {
                self.inlosid = var_5;
                return;
            }
        }
    }
    else
    {
        var_8 = self.target getpointinbounds( 0, 0, 1 );
        var_9 = scripts\engine\trace::ray_trace( var_0, var_8, var_2, var_1, 0 );

        if ( var_9["_encstr_B130095358E1B3930B687D"] == 1 )
        {
            self.inlosid = 0;
            return;
        }

        var_18 = self.target getpointinbounds( 1, 0, 0 );
        var_9 = scripts\engine\trace::ray_trace( var_0, var_18, var_2, var_1, 0 );

        if ( var_9["_encstr_B130095358E1B3930B687D"] == 1 )
        {
            self.inlosid = 0;
            return;
        }

        var_19 = self.target getpointinbounds( -1, 0, 0 );
        var_9 = scripts\engine\trace::ray_trace( var_0, var_19, var_2, var_1, 0 );

        if ( var_9["_encstr_B130095358E1B3930B687D"] == 1 )
        {
            self.inlosid = 0;
            return;
        }
    }
}

stingtargstruct_isinreticle()
{
    return self.inreticlesortedids.size > 0;
}

stingtargstruct_isinlos()
{
    return isdefined( self.inlosid );
}
