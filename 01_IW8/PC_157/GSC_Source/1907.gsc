// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    createthreatbiasgroup( "_encstr_B42E10610746F54F3F79B1219A812B9DC34E" );
    createthreatbiasgroup( "_encstr_8F96102AB0363AB4B10B1BD76AB7EC2D9B76" );
    createthreatbiasgroup( "_encstr_819C0E798F6C18D3CAD156CDB6A30BA1" );
    createthreatbiasgroup( "_encstr_BA830EE5595098FAD15FEF6F250B52CF" );
    createthreatbiasgroup( "_encstr_BE230E855D3B187159B74DB9BB1B4481" );
    createthreatbiasgroup( "_encstr_9CB01269D2B163CDA34EAC58ADFAA9A3B0E8D28D" );
    createthreatbiasgroup( "_encstr_B2860FEF13897ACB10E3FFC6F871C1E25E" );
    createthreatbiasgroup( "_encstr_A129125A5AC636B9A3C9B258DAF51D93B7EAB9C8" );
    setignoremegroup( "_encstr_A129125A5AC636B9A3C9B258DAF51D93B7EAB9C8", "_encstr_A129125A5AC636B9A3C9B258DAF51D93B7EAB9C8" );
    setignoremegroup( "_encstr_B2860FEF13897ACB10E3FFC6F871C1E25E", "_encstr_A129125A5AC636B9A3C9B258DAF51D93B7EAB9C8" );
    setignoremegroup( "_encstr_B2860FEF13897ACB10E3FFC6F871C1E25E", "_encstr_B2860FEF13897ACB10E3FFC6F871C1E25E" );
    setignoremegroup( "_encstr_A129125A5AC636B9A3C9B258DAF51D93B7EAB9C8", "_encstr_B2860FEF13897ACB10E3FFC6F871C1E25E" );
    level.sentientpools = [];
    level.sentientpools[level.sentientpools.size] = "_encstr_B42E10610746F54F3F79B1219A812B9DC34E";
    level.sentientpools[level.sentientpools.size] = "_encstr_8F96102AB0363AB4B10B1BD76AB7EC2D9B76";
    level.sentientpools[level.sentientpools.size] = "_encstr_819C0E798F6C18D3CAD156CDB6A30BA1";
    level.sentientpools[level.sentientpools.size] = "_encstr_BA830EE5595098FAD15FEF6F250B52CF";
    level.sentientpools[level.sentientpools.size] = "_encstr_BE230E855D3B187159B74DB9BB1B4481";
    level.sentientpools[level.sentientpools.size] = "_encstr_9CB01269D2B163CDA34EAC58ADFAA9A3B0E8D28D";
    level.sentientpools[level.sentientpools.size] = "_encstr_B2860FEF13897ACB10E3FFC6F871C1E25E";
    level.sentientpools[level.sentientpools.size] = "_encstr_A129125A5AC636B9A3C9B258DAF51D93B7EAB9C8";
    level.activesentients = [];

    for ( var_0 = 0; var_0 < level.sentientpools.size; var_0++ )
        level.activesentients[level.sentientpools[var_0]] = [];
}

registersentient( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = -1;

    for ( var_7 = 0; var_7 < level.sentientpools.size; var_7++ )
    {
        if ( level.sentientpools[var_7] == var_0 )
        {
            var_6 = var_7;
            break;
        }
    }

    if ( var_6 == -1 )
        return;

    if ( isdefined( self.sentientpool ) )
        return;

    var_8 = getsentientlimits();
    var_9 = nvidiaanselisenabled();

    if ( var_8["_encstr_93610627DB28CDDB"] + var_8["_encstr_BD150BCA1E0E56B9320B31B159"] >= var_9["_encstr_93610627DB28CDDB"] )
    {
        var_10 = level removebestsentient( var_6 );

        if ( !var_10 )
            return;
    }

    self.sentientpool = var_0;
    self.sentientaddedtime = gettime();
    self.sentientpoolindex = self getentitynumber();
    var_11 = undefined;

    if ( isstring( var_1 ) )
        var_11 = var_1;
    else if ( isplayer( var_1 ) )
        var_11 = var_1.team;

    var_12 = undefined;

    if ( isdefined( var_11 ) && !isagent( self ) )
        var_12 = self makeentitysentient( var_11, undefined, var_4, var_5 );

    if ( istrue( var_12 ) )
    {
        self setthreatbiasgroup( var_0 );

        if ( istrue( var_2 ) )
            self makeentitynomeleetarget();

        level.activesentients[var_0][self.sentientpoolindex] = self;
        thread monitorsentient( var_3 );
    }
}

monitorsentient( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_1 = self.sentientpool;
    var_2 = self.sentientpoolindex;

    if ( isdefined( var_0 ) )
        scripts\engine\utility::_id_143A6( "_encstr_A3750609A5E61883", "_encstr_A87B1062E1030FD35FD706A2B8338197030B", var_0 );
    else
        scripts\engine\utility::waittill_either( "_encstr_A3750609A5E61883", "_encstr_A87B1062E1030FD35FD706A2B8338197030B" );

    unregistersentient( var_1, var_2 );
}

removebestsentient( var_0 )
{
    var_1 = undefined;

    for ( var_2 = 0; var_2 <= var_0; var_2++ )
    {
        var_1 = getbestsentientfrompool( level.sentientpools[var_2] );

        if ( isdefined( var_1 ) )
            break;
    }

    if ( !isdefined( var_1 ) )
        return 0;

    var_1 unregistersentient( var_1.sentientpool, var_1.sentientpoolindex );
    return 1;
}

getbestsentientfrompool( var_0 )
{
    var_1 = undefined;
    var_2 = undefined;

    foreach ( var_4 in level.activesentients[var_0] )
    {
        if ( !isdefined( var_2 ) || var_4.sentientaddedtime < var_2 )
        {
            var_2 = var_4.sentientaddedtime;
            var_1 = var_4;
        }
    }

    return var_1;
}

unregistersentient( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_1 ) )
        return;

    level.activesentients[var_0][var_1] = undefined;

    if ( isdefined( self ) )
    {
        self.sentientpool = undefined;
        self.sentientpoolindex = undefined;

        if ( !isagent( self ) )
            self freeentitysentient();
    }
}
