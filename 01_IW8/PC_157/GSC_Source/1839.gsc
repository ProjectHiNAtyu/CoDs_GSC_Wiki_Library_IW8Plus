// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

door_dynamic_setup( var_0 )
{
    if ( isdefined( level.doors ) )
        return;

    setdvar( "_encstr_B3D40B9E6624FF155BD17078C1", 150.0 );
    level.doors = [];
    level.doorsetupstarted = 0;
    thread door_dynamic_setup_adapter( "_encstr_B44E0D113F3A6F8881361E71DD7F88", 0 );
    thread door_dynamic_setup_adapter( "_encstr_9EAF12F38B8FDA671002BD46B8406301D5077773", 1, var_0 );
    script_model_anims();
    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::onplayerspawned );
}

door_dynamic_setup_adapter( var_0, var_1, var_2 )
{
    var_3 = getentarray( var_0, "_encstr_B8CE0BE43FC317DF690862BA48" );
    level.doorsetupstarted++;
    level.doorsetupfinished = 0;
    var_4 = [ "_encstr_98C1190E865EE6D26CDC36DE73A32B73E8E6EB6C1B5A0EB91AED1D", "_encstr_BD431CE7B0D853097F67676D6BE477B61B072950F79BD30A5247185850D0", "_encstr_9E9C1638865EB95A6CE68DDEE64795B98E6EAF9BF6B1968C", "_encstr_B7D018B89C4B13AC473342305523920D607E50E3571038A69138", "_encstr_9F57173778F77BCBC6133048DA5B9B90BB0B28AFC43FE22B6A", "_encstr_B874166814E073EA0FAE63B79B8107BB5BD25F7F1821CF8A", "_encstr_941116D7F47B0FC88317C8B07BCC017DD35AD8D44D52D773", "_encstr_A8011987A827AB1B16E3C0980AEBCBC0CB5B98F32CFFD057BD2A50", "_encstr_9DD6156A78B803FAD687D7EF95056246B86329B453E0D5" ];
    var_5 = physics_createcontents( var_4 );
    level.doorcontentoverride = var_5;

    foreach ( var_7 in var_3 )
    {
        if ( isdefined( var_7.script_parameters ) )
            var_7 door_dynamic_parse_parameters( var_7.script_parameters );

        var_7.doors = [];
        var_7.doors[0] = var_7;
        var_7.islean = var_1;
        var_7.baseangles = var_7.angles;

        if ( var_7.baseangles[1] == 360 )
            var_7.baseangles = ( var_7.baseangles[0], 0, var_7.baseangles[2] );

        var_7.state = 0;
        var_8 = var_7.target;
        var_9 = isdefined( var_7.script_noteworthy ) && var_7.script_noteworthy == "_encstr_A3B405375FDD4B" || getdvarint( "_encstr_8CC00FD22ADA3157409003FBE0476FA0C0", 0 ) != 0;
        var_10 = isdefined( var_7.script_noteworthy ) && var_7.script_noteworthy == "_encstr_B4DF07081FAB339D8F";
        var_7.length = 52;
        var_7.height = 96;
        var_7.leftplantorg = var_7.origin + anglestoforward( var_7.angles ) * var_7.length * 0.5 + anglestoright( var_7.angles ) * -24.5;
        var_7.leftplantang = ( 0, var_7.baseangles[1] - 90.0, 0 );
        var_7.rightplantorg = var_7.origin + anglestoforward( var_7.angles ) * var_7.length * 0.5 + anglestoright( var_7.angles ) * 24.5;
        var_7.rightplantang = ( 0, var_7.baseangles[1] + 90.0, 0 );
        var_7.doorcenter = var_7.origin + anglestoforward( var_7.angles ) * var_7.length * 0.5 + anglestoup( var_7.angles ) * var_7.height * 0.5;
        var_7.max_yaw_left = 90;
        var_7.max_yaw_right = 90;
        var_11 = var_7 gettagorigin( "_encstr_B4F3102D4E62AF8167BF68094B8118017AF7", 1 );

        if ( isdefined( var_11 ) )
        {
            var_7 scripts\mp\gameobjects::sethintobject( "_encstr_B4F3102D4E62AF8167BF68094B8118017AF7", "_encstr_98110C0B790BBF87AE11E9F1A8F5", undefined, &"_encstr_9723187911DD91F41F7A809D135FBEFF7A28F961E86D7BADCB55", undefined, "_encstr_88C20E3998B33933533F7207B8280675", undefined, 200, 90, 72, 90 );
            var_7.useprompt = var_7;
            var_7.useprompt setusewhenhandsoccupied( 1 );

            if ( !var_1 && scripts\mp\utility\game::getgametype() != "_encstr_9507034B25" )
            {
                var_7.lockprompt = scripts\mp\gameobjects::createhintobject( var_11, "_encstr_98110C0B790BBF87AE11E9F1A8F5", undefined, &"_encstr_BE1211056FA053EDA7A1D971819BD1CB047E9B", undefined, undefined, "_encstr_B7180526C81F4B", 200, 90, 72, 90 );
                var_7.lockprompt linkto( var_7, "_encstr_B4F3102D4E62AF8167BF68094B8118017AF7", ( 3, 0, 15 ), ( 0, 0, 0 ) );
                var_7.lockprompt setusewhenhandsoccupied( 1 );
                var_7.alarmprompts = [];
                var_12 = [ ( 4, 0, 4 ), ( 4, 0, 90 ) ];

                foreach ( var_14 in var_12 )
                {
                    var_15 = scripts\mp\gameobjects::createhintobject( var_11, "_encstr_98110C0B790BBF87AE11E9F1A8F5", undefined, &"_encstr_AF95123182661964C7CB81D92725BECBF87E36A9", undefined, undefined, "_encstr_B7180526C81F4B", 100, 90, 80, 20 );
                    var_15 linkto( var_7, "_encstr_8CB40B4BB398B1C0A81FDF6BEA", var_14, ( 0, 0, 0 ) );
                    var_15 setusewhenhandsoccupied( 0 );
                    var_16 = var_15 getentitynumber();
                    var_7.alarmprompts[var_16] = var_15;
                }

                var_18 = getent( var_8, "_encstr_B8CE0BE43FC317DF690862BA48" );

                if ( isdefined( var_18 ) )
                {
                    var_7.clipent = var_18;
                    var_7.clipent linkto( var_7 );
                    var_7.clipent.unresolved_collision_func = scripts\mp\movers::unresolved_collision_void;
                    var_7.clipent connectpaths();

                    if ( isdefined( var_18.target ) )
                    {
                        var_19 = getent( var_18.target, "_encstr_B8CE0BE43FC317DF690862BA48" );
                        var_7.audioportalent = var_19;
                    }
                }
            }

            if ( var_9 )
            {
                var_7 thread changestate( 2 );
                var_7.angles = ( var_7.angles[0], var_7.angles[1] + 90.0, var_7.angles[2] );
            }
            else if ( var_10 )
                var_7 thread changestate( 7 );
            else
                var_7 thread changestate( 0 );
        }

        level.doors[level.doors.size] = var_7;
        waitframe();
    }

    if ( !var_1 )
    {
        level thread amortizeyawtraces();

        foreach ( var_7 in level.doors )
            var_7 thread get_max_yaws();

        level thread linkdoubledoors();
    }

    level.doorsetupstarted--;
    level.doorsetupfinished = level.doorsetupstarted == 0;
}

door_dynamic_setup_post_init()
{
    waitframe();

    if ( getdvarint( "_encstr_8CC00FD22ADA3157409003FBE0476FA0C0", 0 ) != 0 )
    {
        foreach ( var_1 in level.doors )
        {
            var_1.statecurr = 2;
            var_1.angles = var_1.doortarget.angles;
        }
    }
}

triggerlisten( var_0 )
{
    self notify( "_encstr_98510F8154631826DAB781D59F32FC701A" );
    self endon( "_encstr_98510F8154631826DAB781D59F32FC701A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( !var_0.islean && var_0.statecurr == 0 )
        var_0 thread bashmonitor();

    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_1 );
        self makeunusable();
        var_2 = var_0.doortarget;

        if ( isdefined( var_0.doortargetccw ) )
        {
            var_3 = anglestoforward( var_0.angles );
            var_4 = vectorcross( ( 0, 0, 1 ), var_3 );
            var_5 = anglestoforward( ( 0, var_1.angles[1], 0 ) );

            if ( vectordot( var_5, var_4 ) < 0 )
                var_2 = var_0.doortargetccw;
        }

        var_6 = 0.666;

        if ( var_0.statecurr == 0 )
        {
            self notify( "_encstr_9F0F1237E8EDC1FA4C2C3786FAB5DB9BA51DDBE4" );
            var_0.statecurr = 3;
            var_0 rotateto( var_2.angles, var_6, 0.0, 0.333 );
            var_7 = &"_encstr_8FAF12D405BC88E93DA4AFAA4DA8BE0D89F4A92A";
        }
        else
        {
            var_0.statecurr = 1;
            var_0 rotateto( var_0.baseangles, var_6, 0.0, 0.333 );
            var_7 = &"_encstr_BE0711916886B5DF9569A9F1513FC76CD3E588";
        }

        var_0 scripts\mp\events::doorused( var_1, var_0.statecurr == 3 );
        wait 0.1;
        var_0 childthread door_state_update_sound();
        wait( var_6 );

        if ( var_0.statecurr == 1 )
        {
            var_0.statecurr = 0;

            if ( !var_0.islean )
                var_0 thread bashmonitor();
        }
        else
            var_0.statecurr = 2;

        self makeusable();
        self sethintstring( var_7 );
    }
}

door_dynamic_parse_parameters( var_0 )
{
    var_1 = self;
    var_1.button_sound = undefined;

    if ( !isdefined( var_0 ) )
        var_0 = "_encstr_A40101";

    var_2 = strtok( var_0, "_encstr_B14C0267" );

    foreach ( var_4 in var_2 )
    {
        var_5 = strtok( var_4, "_encstr_974C02F6" );

        if ( var_5.size != 2 )
            continue;

        if ( var_5[1] == "_encstr_A2500A039865CFC728B5151C" || var_5[1] == "_encstr_AA1608C07786F13312D3" )
        {
            var_1.params[var_5[0]] = undefined;
            continue;
        }

        switch ( var_5[0] )
        {
            case "_encstr_AF780B57F3703B7FCB12FB75D0":
                var_1.stop_sound = var_5[1];
                break;
            case "_encstr_A9351008A25B83039B2D675D2FB7687B05EA":
                var_1.interrupt_sound = var_5[1];
                break;
            case "_encstr_9D850BB9FF2F9B274252ABC0FA":
                var_1.loop_sound = var_5[1];
                break;
            case "_encstr_AF730FCFD34220E149BDA399A23AF8672B":
                var_1.open_interrupt = string_to_bool( var_5[1] );
                break;
            case "_encstr_A83C0C76ECABBD83F9A37D503B28":
                var_1.start_sound = var_5[1];
                break;
            case "_encstr_B36809F08A836BEB0FD181":
                var_1.material = var_5[1];
                break;
        }
    }
}

door_system_init( var_0 )
{
    var_1 = getentarray( var_0, "_encstr_B8CE0BE43FC317DF690862BA48" );

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3.script_parameters ) )
            var_3 button_parse_parameters( var_3.script_parameters );

        var_3 door_setup();
    }

    foreach ( var_3 in var_1 )
        var_3 thread door_think();
}

door_setup()
{
    var_0 = self;
    var_0.doors = [];
    var_0.hasbeenused = 0;

    if ( isdefined( var_0.script_index ) )
        var_0.doormovetime = max( 0.1, float( var_0.script_index ) / 1000 );

    var_1 = getentarray( var_0.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

    foreach ( var_3 in var_1 )
    {
        if ( issubstr( var_3.classname, "_encstr_8B5C081B58E0B7A213E6" ) )
        {
            if ( !isdefined( var_0.trigblock ) )
                var_0.trigblock = [];

            if ( isdefined( var_3.script_parameters ) )
                var_3 trigger_parse_parameters( var_3.script_parameters );

            if ( isdefined( var_3.script_linkto ) )
            {
                var_4 = getent( var_3.script_linkto, "_encstr_8C9D10D2BEF5826893D99B9748283E4AB3C5" );
                var_3 enablelinkto();
                var_3 linkto( var_4 );
            }

            var_0.trigblock[var_0.trigblock.size] = var_3;
            continue;
        }

        if ( var_3.classname == "_encstr_A6F51207834290EF033989F3E367ABF85D1CA381" || var_3.classname == "_encstr_93DC0DCD1B272D3847AF5BED23B2C6" )
        {
            if ( isdefined( var_3.script_noteworthy ) && issubstr( var_3.script_noteworthy, "_encstr_8BA90608F481F0DB" ) )
            {
                if ( issubstr( var_3.script_noteworthy, "_encstr_9C3509E0304C63739E60D5" ) )
                {
                    if ( !isdefined( var_0.lights_on ) )
                        var_0.lights_on = [];

                    var_3 hide();
                    var_0.lights_on[var_0.lights_on.size] = var_3;
                }
                else if ( issubstr( var_3.script_noteworthy, "_encstr_A2F90A6DF39428BB97AF10DA" ) )
                {
                    if ( !isdefined( var_0.lights_off ) )
                        var_0.lights_off = [];

                    var_3 hide();
                    var_0.lights_off[var_0.lights_off.size] = var_3;
                }
                else
                {

                }
            }
            else if ( var_3.spawnflags & 2 )
            {
                if ( !isdefined( var_0.ai_sight_brushes ) )
                    var_0.ai_sight_brushes = [];

                var_3 notsolid();
                var_3 hide();
                var_0.ai_sight_brushes[var_0.ai_sight_brushes.size] = var_3;
            }
            else
                var_0.doors[var_0.doors.size] = var_3;

            continue;
        }

        if ( var_3.classname == "_encstr_A3050EDF6FF5DC081CC1AFA37097B80B" )
            var_0.entsound = var_3;
    }

    if ( !isdefined( var_0.entsound ) && var_0.doors.size )
        var_0.entsound = sortbydistance( var_0.doors, var_0.origin )[0];

    foreach ( var_7 in var_0.doors )
    {
        var_7.posclosed = var_7.origin;
        var_7.posopen = scripts\engine\utility::getstruct( var_7.target, "_encstr_B8CE0BE43FC317DF690862BA48" ).origin;
        var_7.distmove = distance( var_7.posopen, var_7.posclosed );
        var_7.no_moving_unresolved_collisions = 0;

        if ( !istrue( var_0.start_closed ) )
            var_7.origin = var_7.posopen;

        if ( isdefined( var_7.script_parameters ) )
            var_7 door_parse_parameters( var_7.script_parameters );
    }
}

door_think()
{
    var_0 = self;
    var_1 = scripts\engine\utility::ter_op( istrue( var_0.start_closed ), 0, 2 );
    var_0 door_state_change( var_1, 1 );

    for (;;)
    {
        var_0.statedone = undefined;
        var_0.stateinterrupted = undefined;
        var_0 scripts\engine\utility::_id_143A5( "_encstr_8A2010890815368860D338BB7F7FB4C837B7", "_encstr_ABA717F7582FD3A793A08FC330CE59DAA1E5FAEA3D79EBA559" );

        if ( isdefined( var_0.statedone ) && var_0.statedone )
        {
            var_2 = var_0 door_state_next( var_0.statecurr );
            var_0 door_state_change( var_2, 0 );
            continue;
        }

        if ( isdefined( var_0.stateinterrupted ) && var_0.stateinterrupted )
        {
            var_0 door_state_change( 4, 0 );
            continue;
        }
    }
}

door_state_next( var_0 )
{
    var_1 = self;
    var_2 = undefined;

    if ( var_0 == 0 )
        var_2 = 3;
    else if ( var_0 == 2 )
        var_2 = 1;
    else if ( var_0 == 1 )
        var_2 = 0;
    else if ( var_0 == 3 )
        var_2 = 2;
    else if ( var_0 == 4 )
        var_2 = var_1.stateprev;
    else
    {

    }

    return var_2;
}

door_state_update( var_0 )
{
    var_1 = self;
    var_1 endon( "_encstr_ABA717F7582FD3A793A08FC330CE59DAA1E5FAEA3D79EBA559" );
    var_1.statedone = undefined;

    if ( var_1.statecurr == 0 || var_1.statecurr == 2 )
    {
        if ( !var_0 )
        {
            foreach ( var_3 in var_1.doors )
            {
                if ( isdefined( var_3.stop_sound ) )
                {
                    var_3 stoploopsound();
                    var_3 playsoundonmovingent( var_3.stop_sound );
                }
            }
        }

        if ( isdefined( var_1.lights_on ) )
        {
            foreach ( var_6 in var_1.lights_on )
                var_6 show();
        }

        foreach ( var_3 in var_1.doors )
        {
            if ( var_1.statecurr == 0 )
            {
                if ( isdefined( var_1.ai_sight_brushes ) )
                {
                    foreach ( var_10 in var_1.ai_sight_brushes )
                        var_10 show();
                }

                if ( var_3.spawnflags & 1 )
                {

                }
            }
            else
            {
                if ( isdefined( var_1.ai_sight_brushes ) )
                {
                    foreach ( var_10 in var_1.ai_sight_brushes )
                        var_10 hide();
                }

                if ( var_3.spawnflags & 1 )
                {
                    if ( isdefined( var_3.script_noteworthy ) && var_3.script_noteworthy == "_encstr_95D812581BDD0B5EB9D78C4BCDB1B7B9DC56B18E" )
                    {

                    }
                    else
                    {

                    }
                }
            }

            if ( isdefined( var_3.script_noteworthy ) )
            {
                if ( var_3.script_noteworthy == "_encstr_AAF310F349E84E3724889BE2567C7387C021" || var_3.script_noteworthy == "_encstr_93CF176CB7D5E6E85693D8D8BD1BDAEE2DCDACFABBA12BB236" )
                    var_3 rotatevelocity( ( 0, 0, 0 ), 0.1 );
            }

            if ( var_3.no_moving_unresolved_collisions )
                var_3.unresolved_collision_func = undefined;
        }

        var_15 = !istrue( var_1.one_time_use ) || !var_1.hasbeenused;

        if ( var_15 )
        {
            var_16 = scripts\engine\utility::ter_op( var_1.statecurr == 0, &"_encstr_BE0711916886B5DF9569A9F1513FC76CD3E588", &"_encstr_8FAF12D405BC88E93DA4AFAA4DA8BE0D89F4A92A" );

            if ( !scripts\cp_mp\utility\game_utility::isrealismenabled() )
                var_1 sethintstring( var_16 );

            var_1 makeusable();
            var_1 waittill( "_encstr_8B5C081B58E0B7A213E6" );

            if ( isdefined( var_1.button_sound ) )
                var_1 playsound( var_1.button_sound );

            var_1.hasbeenused = 1;
        }
        else
            var_1 waittill( "_encstr_97A00833BD9395CE5993" );
    }
    else if ( var_1.statecurr == 1 || var_1.statecurr == 3 )
    {
        if ( isdefined( var_1.lights_off ) )
        {
            foreach ( var_6 in var_1.lights_off )
                var_6 show();
        }

        var_1 makeunusable();

        if ( var_1.statecurr == 1 )
        {
            var_1 thread door_state_on_interrupt();

            foreach ( var_3 in var_1.doors )
            {
                if ( isdefined( var_3.script_noteworthy ) )
                {
                    var_20 = scripts\engine\utility::ter_op( isdefined( var_1.doormovetime ), var_1.doormovetime, 3.0 );
                    var_21 = scripts\engine\utility::ter_op( var_1.statecurr == 1, var_3.posclosed, var_3.posopen );
                    var_22 = distance( var_3.origin, var_21 );
                    var_23 = max( 0.1, var_22 / var_3.distmove * var_20 );
                    var_24 = max( var_23 * 0.25, 0.05 );
                    var_25 = 360 * var_22 / 94.2;

                    if ( var_3.script_noteworthy == "_encstr_AAF310F349E84E3724889BE2567C7387C021" )
                        var_3 rotatevelocity( ( 0, 0, -1 * var_25 / var_23 ), var_23, var_24, var_24 );
                    else if ( var_3.script_noteworthy == "_encstr_93CF176CB7D5E6E85693D8D8BD1BDAEE2DCDACFABBA12BB236" )
                        var_3 rotatevelocity( ( 0, 0, var_25 / var_23 ), var_23, var_24, var_24 );
                }
            }
        }
        else if ( var_1.statecurr == 3 )
        {
            if ( isdefined( var_1.open_interrupt ) && var_1.open_interrupt )
                var_1 thread door_state_on_interrupt();

            foreach ( var_3 in var_1.doors )
            {
                if ( isdefined( var_3.script_noteworthy ) )
                {
                    var_20 = scripts\engine\utility::ter_op( isdefined( var_1.doormovetime ), var_1.doormovetime, 3.0 );
                    var_21 = scripts\engine\utility::ter_op( var_1.statecurr == 1, var_3.posclosed, var_3.posopen );
                    var_22 = distance( var_3.origin, var_21 );
                    var_23 = max( 0.1, var_22 / var_3.distmove * var_20 );
                    var_24 = max( var_23 * 0.25, 0.05 );
                    var_25 = 360 * var_22 / 94.2;

                    if ( var_3.script_noteworthy == "_encstr_AAF310F349E84E3724889BE2567C7387C021" )
                        var_3 rotatevelocity( ( 0, 0, var_25 / var_23 ), var_23, var_24, var_24 );
                    else if ( var_3.script_noteworthy == "_encstr_93CF176CB7D5E6E85693D8D8BD1BDAEE2DCDACFABBA12BB236" )
                        var_3 rotatevelocity( ( 0, 0, -1 * var_25 / var_23 ), var_23, var_24, var_24 );
                }
            }
        }

        wait 0.1;
        var_1 childthread door_state_update_sound();
        var_20 = scripts\engine\utility::ter_op( isdefined( var_1.doormovetime ), var_1.doormovetime, 3.0 );
        var_29 = undefined;

        foreach ( var_3 in var_1.doors )
        {
            var_21 = scripts\engine\utility::ter_op( var_1.statecurr == 1, var_3.posclosed, var_3.posopen );

            if ( var_3.origin != var_21 )
            {
                var_23 = max( 0.1, distance( var_3.origin, var_21 ) / var_3.distmove * var_20 );
                var_24 = max( var_23 * 0.25, 0.05 );
                var_3 moveto( var_21, var_23, var_24, var_24 );
                var_3 scripts\mp\movers::notify_moving_platform_invalid();

                if ( var_3.no_moving_unresolved_collisions )
                    var_3.unresolved_collision_func = scripts\mp\movers::unresolved_collision_void;

                if ( !isdefined( var_29 ) || var_23 > var_29 )
                    var_29 = var_23;
            }
        }

        if ( isdefined( var_29 ) )
            wait( var_29 );
    }
    else if ( var_1.statecurr == 4 )
    {
        foreach ( var_3 in var_1.doors )
        {
            var_3 moveto( var_3.origin, 0.05, 0.0, 0.0 );
            var_3 scripts\mp\movers::notify_moving_platform_invalid();

            if ( var_3.no_moving_unresolved_collisions )
                var_3.unresolved_collision_func = undefined;

            if ( isdefined( var_3.script_noteworthy ) )
            {
                if ( var_3.script_noteworthy == "_encstr_AAF310F349E84E3724889BE2567C7387C021" || var_3.script_noteworthy == "_encstr_93CF176CB7D5E6E85693D8D8BD1BDAEE2DCDACFABBA12BB236" )
                    var_3 rotatevelocity( ( 0, 0, 0 ), 0.05 );
            }
        }

        if ( isdefined( var_1.lights_off ) )
        {
            foreach ( var_6 in var_1.lights_off )
                var_6 show();
        }

        var_1.entsound stoploopsound();

        foreach ( var_3 in var_1.doors )
        {
            if ( isdefined( var_3.interrupt_sound ) )
                var_3 playsound( var_3.interrupt_sound );
        }

        wait 1.0;
    }
    else
    {

    }

    var_1.statedone = 1;

    foreach ( var_3 in var_1.doors )
        var_3.statedone = 1;

    var_1 notify( "_encstr_8A2010890815368860D338BB7F7FB4C837B7" );
}

door_state_update_sound()
{
    var_0 = self;
    var_1 = 1;
    var_2 = 1;
    var_3 = 0;

    if ( var_0.statecurr == 3 || var_0.statecurr == 1 )
    {
        foreach ( var_5 in var_0.doors )
        {
            if ( isdefined( var_5.start_sound ) )
            {
                var_5 playsoundonmovingent( var_5.start_sound );
                var_3 = lookupsoundlength( var_5.start_sound ) / 1000;
                var_1 = 0;
            }
        }

        if ( var_1 )
        {
            if ( !isdefined( var_0.entsound ) )
                var_0.entsound = var_0;

            if ( var_0.statecurr == 3 )
            {
                if ( soundexists( "_encstr_98651CCD6CC90E8E7DC87B7BE4EB77DBF6467D91DBAE31362BAFF6C195CD" ) )
                {
                    var_3 = lookupsoundlength( "_encstr_98651CCD6CC90E8E7DC87B7BE4EB77DBF6467D91DBAE31362BAFF6C195CD" ) / 1000;
                    playsoundatpos( var_0.entsound.origin, "_encstr_98651CCD6CC90E8E7DC87B7BE4EB77DBF6467D91DBAE31362BAFF6C195CD" );
                }
            }
            else if ( var_0.statecurr == 1 )
            {
                if ( soundexists( "_encstr_930E1D2397C04A8BF0E99A8233284F45D07197BC3750969385A652BA78165F" ) )
                {
                    var_3 = lookupsoundlength( "_encstr_930E1D2397C04A8BF0E99A8233284F45D07197BC3750969385A652BA78165F" ) / 1000;
                    playsoundatpos( var_0.entsound.origin, "_encstr_930E1D2397C04A8BF0E99A8233284F45D07197BC3750969385A652BA78165F" );
                }
            }
        }
    }

    wait( var_3 * 0.3 );

    if ( var_0.statecurr == 3 || var_0.statecurr == 1 )
    {
        foreach ( var_5 in var_0.doors )
        {
            if ( isdefined( var_5.loop_sound ) )
            {
                if ( var_5.loop_sound != "_encstr_AABA05236DC831" )
                    var_5 playloopsound( var_5.loop_sound );

                var_2 = 0;
            }
        }

        if ( var_2 )
        {
            if ( soundexists( "_encstr_A40101" ) )
                var_0.entsound playloopsound( "_encstr_A40101" );
        }
    }
}

door_state_change( var_0, var_1 )
{
    var_2 = self;

    if ( isdefined( var_2.statecurr ) )
    {
        door_state_exit( var_2.statecurr );
        var_2.stateprev = var_2.statecurr;
    }

    var_2.statecurr = var_0;
    var_2 thread door_state_update( var_1 );
}

door_state_exit( var_0 )
{
    var_1 = self;

    if ( var_0 == 0 || var_0 == 2 )
    {
        if ( isdefined( var_1.lights_on ) )
        {
            foreach ( var_3 in var_1.lights_on )
                var_3 hide();
        }
    }
    else if ( var_0 == 1 || var_0 == 3 )
    {
        if ( isdefined( var_1.lights_off ) )
        {
            foreach ( var_3 in var_1.lights_off )
                var_3 hide();
        }

        var_1.entsound stoploopsound();

        foreach ( var_8 in var_1.doors )
        {
            if ( isdefined( var_8.loop_sound ) )
                var_8 stoploopsound();
        }
    }
    else
    {
        if ( var_0 == 4 )
            return;

        return;
    }
}

door_state_on_interrupt()
{
    var_0 = self;
    var_0 endon( "_encstr_8A2010890815368860D338BB7F7FB4C837B7" );

    if ( !isdefined( var_0.trigblock ) )
        return;

    var_1 = [];

    foreach ( var_3 in var_0.trigblock )
    {
        if ( var_0.statecurr == 1 )
        {
            if ( isdefined( var_3.not_closing ) && var_3.not_closing == 1 )
                continue;
        }
        else if ( var_0.statecurr == 3 )
        {
            if ( isdefined( var_3.not_opening ) && var_3.not_opening == 1 )
                continue;
        }

        var_1[var_1.size] = var_3;
    }

    if ( var_1.size > 0 )
    {
        var_5 = var_0 waittill_any_triggered_return_triggerer( var_1 );

        if ( !isdefined( var_5.fauxdead ) || var_5.fauxdead == 0 )
        {
            var_0.stateinterrupted = 1;
            var_0 notify( "_encstr_ABA717F7582FD3A793A08FC330CE59DAA1E5FAEA3D79EBA559" );
        }
    }
}

waittill_any_triggered_return_triggerer( var_0 )
{
    var_1 = self;

    foreach ( var_3 in var_0 )
        var_1 thread return_triggerer( var_3 );

    var_1 waittill( "_encstr_8AFD0CCB760B3836C353F37BBA73" );
    return var_1.interrupter;
}

return_triggerer( var_0 )
{
    var_1 = self;
    var_1 endon( "_encstr_8A2010890815368860D338BB7F7FB4C837B7" );
    var_1 endon( "_encstr_8AFD0CCB760B3836C353F37BBA73" );

    for (;;)
    {
        var_0 waittill( "_encstr_8B5C081B58E0B7A213E6", var_2 );

        if ( isdefined( var_0.prone_only ) && var_0.prone_only == 1 )
        {
            if ( isplayer( var_2 ) )
            {
                var_3 = var_2 getstance();

                if ( var_3 != "_encstr_9F24062875D5FD98" )
                    continue;
                else
                {
                    var_4 = vectornormalize( anglestoforward( var_2.angles ) );
                    var_5 = vectornormalize( var_0.origin - var_2.origin );
                    var_6 = vectordot( var_4, var_5 );

                    if ( var_6 > 0 )
                        continue;
                }
            }
        }

        break;
    }

    var_1.interrupter = var_2;
    var_1 notify( "_encstr_8AFD0CCB760B3836C353F37BBA73" );
}

button_parse_parameters( var_0 )
{
    var_1 = self;
    var_1.button_sound = undefined;

    if ( !isdefined( var_0 ) )
        var_0 = "_encstr_A40101";

    var_2 = strtok( var_0, "_encstr_B14C0267" );

    foreach ( var_4 in var_2 )
    {
        var_5 = strtok( var_4, "_encstr_974C02F6" );

        if ( var_5.size != 2 )
            continue;

        if ( var_5[1] == "_encstr_A2500A039865CFC728B5151C" || var_5[1] == "_encstr_AA1608C07786F13312D3" )
        {
            var_1.params[var_5[0]] = undefined;
            continue;
        }

        switch ( var_5[0] )
        {
            case "_encstr_AF730FCFD34220E149BDA399A23AF8672B":
                var_1.open_interrupt = string_to_bool( var_5[1] );
                break;
            case "_encstr_AAF20DF27B308B27A84E9B4213F043":
                var_1.button_sound = var_5[1];
                break;
            case "_encstr_BD910D431501E33B9F1BD2FA9833F7":
                var_1.start_closed = string_to_bool( var_5[1] );
                break;
            case "_encstr_AA6D0DDBB92BFAE8D2D695F55DCD2B":
                var_1.one_time_use = string_to_bool( var_5[1] );
                break;
            default:
                break;
        }
    }
}

door_parse_parameters( var_0 )
{
    var_1 = self;
    var_1.start_sound = undefined;
    var_1.stop_sound = undefined;
    var_1.loop_sound = undefined;
    var_1.interrupt_sound = undefined;

    if ( !isdefined( var_0 ) )
        var_0 = "_encstr_A40101";

    var_2 = strtok( var_0, "_encstr_B14C0267" );

    foreach ( var_4 in var_2 )
    {
        var_5 = strtok( var_4, "_encstr_974C02F6" );

        if ( var_5.size != 2 )
            continue;

        if ( var_5[1] == "_encstr_A2500A039865CFC728B5151C" || var_5[1] == "_encstr_AA1608C07786F13312D3" )
        {
            var_1.params[var_5[0]] = undefined;
            continue;
        }

        switch ( var_5[0] )
        {
            case "_encstr_AF780B57F3703B7FCB12FB75D0":
                var_1.stop_sound = var_5[1];
                break;
            case "_encstr_A9351008A25B83039B2D675D2FB7687B05EA":
                var_1.interrupt_sound = var_5[1];
                break;
            case "_encstr_9D850BB9FF2F9B274252ABC0FA":
                var_1.loop_sound = var_5[1];
                break;
            case "_encstr_AF730FCFD34220E149BDA399A23AF8672B":
                var_1.open_interrupt = string_to_bool( var_5[1] );
                break;
            case "_encstr_A83C0C76ECABBD83F9A37D503B28":
                var_1.start_sound = var_5[1];
                break;
            case "_encstr_9EA81B055823FFBABF38331A6087F69F9831919B63280B4955081A12B0":
                var_1.unresolved_collision_nodes = getnodearray( var_5[1], "_encstr_B8CE0BE43FC317DF690862BA48" );
                break;
            case "_encstr_ABE52065D761D81873325079795740F807239FE95657D8485F4A288DE2978B589D9B":
                var_1.no_moving_unresolved_collisions = string_to_bool( var_5[1] );
                break;
            case "_encstr_B36809F08A836BEB0FD181":
                var_1.material = var_5[1];
                break;
            default:
                break;
        }
    }
}

trigger_parse_parameters( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_0 ) )
        var_0 = "_encstr_A40101";

    var_2 = strtok( var_0, "_encstr_B14C0267" );

    foreach ( var_4 in var_2 )
    {
        var_5 = strtok( var_4, "_encstr_974C02F6" );

        if ( var_5.size != 2 )
            continue;

        if ( var_5[1] == "_encstr_A2500A039865CFC728B5151C" || var_5[1] == "_encstr_AA1608C07786F13312D3" )
        {
            var_1.params[var_5[0]] = undefined;
            continue;
        }

        switch ( var_5[0] )
        {
            case "_encstr_BA790C6D4011096F0B20ABBF50C1":
                var_1.not_opening = string_to_bool( var_5[1] );
                break;
            case "_encstr_B7F10CDCBD8EF51BD8DBE6A5DCB3":
                var_1.not_closing = string_to_bool( var_5[1] );
                break;
            case "_encstr_B6E50B634BD7504889378D9139":
                var_1.prone_only = string_to_bool( var_5[1] );
                break;
            default:
                break;
        }
    }
}

string_to_bool( var_0 )
{
    var_1 = undefined;

    switch ( var_0 )
    {
        case "_encstr_87EF0558DBA3CB":
        case "_encstr_AF4C02EA":
            var_1 = 1;
            break;
        case "_encstr_95C1068E57682F87":
        case "_encstr_B34C0233":
            var_1 = 0;
            break;
        default:
            break;
    }

    return var_1;
}

bashmonitor()
{
    if ( self.islean || scripts\mp\utility\game::runleanthreadmode() )
        return;

    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );
    self notify( "_encstr_98DC0CF69F27C994550D700BCF2A" );
    self endon( "_encstr_98DC0CF69F27C994550D700BCF2A" );
    thread monitordamage();

    for (;;)
    {
        self.doorcenter = self.origin + anglestoforward( self.angles ) * self.length * 0.5 + anglestoup( self.angles ) * self.height * 0.5;
        var_0 = scripts\mp\utility\player::getplayersinradius( self.origin, 250 );

        if ( var_0.size > 0 )
        {
            foreach ( var_2 in var_0 )
            {
                if ( bashproxcheck( var_2 ) && shouldbashopen( var_2 ) )
                    thread bashopen( var_2, var_2.origin );
            }

            waitframe();
            continue;
        }

        wait 0.1;
    }
}

bashproxcheck( var_0 )
{
    var_1 = distancesquared( var_0.origin, self.doorcenter );
    var_2 = 4900;
    return var_1 < var_2;
}

shouldbashopen( var_0 )
{
    if ( !scripts\mp\utility\player::isreallyalive( var_0 ) )
        return 0;

    var_1 = anglestoforward( var_0.angles );

    if ( scripts\engine\utility::within_fov( var_0.origin + var_1 * -45.0, var_0.angles, self.doorcenter, cos( 43 ) ) )
    {
        var_2 = anglestoright( self.angles );
        var_3 = vectornormalize( self.doorcenter - var_0 geteye() );
        var_4 = vectordot( var_1, var_3 );
        var_5 = vectordot( var_1, var_2 );
        var_6 = var_0 getvelocity();
        var_7 = vectordot( vectornormalize( var_6 ), ( 0, 0, 1 ) );

        if ( ( length( var_6 ) >= 200 || var_0 scripts\mp\utility\killstreak::isjuggernaut() && length( var_6 ) >= 140 ) && abs( var_7 ) < 0.75 && abs( var_5 ) > 0.75 && var_4 > 0.75 )
        {
            var_8 = self gettagorigin( "_encstr_B4F3102D4E62AF8167BF68094B8118017AF7", 1 );

            if ( isdefined( var_8 ) )
            {
                var_9 = scripts\engine\trace::ray_trace( var_0 geteye(), var_8, var_0, level.doorcontentoverride, 0 );

                if ( isdefined( var_9["_encstr_B60E07C9FD1C2055E3"] ) && var_9["_encstr_B60E07C9FD1C2055E3"] == self )
                    return 1;
            }
            else
                return 1;
        }
    }

    return 0;
}

bashopen( var_0, var_1 )
{
    thread checktriggeralarm( var_0 );
    thread changestate( 5 );

    if ( istrue( self.bashed ) )
        return;

    if ( !isdefined( self.useprompt ) )
        self.bashed = 1;

    var_2 = self.origin;
    var_3 = self.angles;
    var_4 = anglestoright( var_3 );
    var_5 = vectornormalize( var_1 - self.origin );
    var_6 = vectordot( var_4, var_5 );
    var_7 = var_6 > 0;
    var_8 = undefined;

    if ( isdefined( var_0 ) && isplayer( var_0 ) )
    {
        if ( !isai( var_0 ) )
            thread bashpresentation( var_0 );
        else
            self notify( "_encstr_BEE70AE153795D4B3D58CAE2" );
    }

    if ( isdefined( self.material ) )
    {
        if ( self.material == "_encstr_ADC806FD3D030F9D" )
            playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_A2C8239B8D271CD1BE32BDF6C9D7A1CAB0CE5E7DDAACD158D8FA6E4BE6D9D8ACAF26C2E6A1" );
        else if ( self.material == "_encstr_97F605EEB7ED46" )
            playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_93561ADC363983A3FAC8F6F639BEEEDEF646BE4C0B9373AF9858B986" );
    }
    else
        playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_9B4D1CCB7E7B3A1BA9D387F012CECB35487FC7A9B7E0C23999291E1FCF60" );

    if ( var_7 )
        var_8 = self.baseangles[1] + self.max_yaw_left;
    else
        var_8 = self.baseangles[1] - self.max_yaw_right;

    if ( var_8 > 360 )
        var_8 = var_8 - 360;
    else if ( var_8 < 0 )
        var_8 = var_8 + 360;

    var_9 = 0.35;
    var_10 = 0.15;
    var_11 = scripts\engine\math::normalize_value( 0, 170, var_8 );
    var_12 = scripts\engine\math::factor_value( var_9, var_10, var_11 );
    var_13 = self.angles;
    var_14 = var_13[1];

    if ( var_14 > 360 )
        var_14 = var_14 - 360;
    else if ( var_14 < 0 )
        var_14 = var_14 + 360;

    var_15 = angle_diff( var_14, self.baseangles[1] );
    var_16 = angle_diff( var_8, self.baseangles[1] );
    var_17 = anglestoforward( var_13 );
    var_18 = anglestoright( self.baseangles );
    var_19 = vectordot( var_17, var_18 ) < 0.0;

    if ( var_7 )
    {
        if ( !var_19 )
            var_16 = var_16 + var_15;
        else
            var_16 = var_16 - var_15;
    }
    else
    {
        if ( var_19 )
            var_16 = var_16 + var_15;
        else
            var_16 = var_16 - var_15;

        var_16 = var_16 * -1.0;
    }

    var_20 = ( 0, var_16, 0 );
    self rotateby( var_20, var_12 );
    wait( var_12 );
    self.lastpushtime = gettime();
    thread changestate( 6 );

    if ( !isdefined( self.useprompt ) )
    {
        self.statecurr = 2;

        if ( !scripts\cp_mp\utility\game_utility::isrealismenabled() )
            self.trigger sethintstring( &"_encstr_8FAF12D405BC88E93DA4AFAA4DA8BE0D89F4A92A" );
    }

    self.bashed = 0;
    var_21 = randomfloatrange( 3, 5 );
    var_22 = randomfloatrange( 0.25, 2.5 );

    if ( var_7 )
        var_22 = var_22 * -1.0;

    self rotateyaw( var_22, var_21, 0.5, var_21 - 0.5 );
}

bashpresentation( var_0 )
{
    var_0 playrumbleonentity( "_encstr_B6D30F3B39CACDC24659EBE4EAAD263695" );
    var_0 earthquakeforplayer( 0.35, 0.5, var_0.origin, 200 );
}

monitordamage()
{
    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );
    self notify( "_encstr_B3790E323A2D083378D310AED9C3E0F3" );
    self endon( "_encstr_B3790E323A2D083378D310AED9C3E0F3" );
    self setcandamage( 1 );
    var_0 = undefined;
    var_1 = undefined;
    var_2 = undefined;
    var_3 = undefined;
    var_4 = undefined;
    var_5 = undefined;
    var_6 = undefined;
    var_7 = undefined;
    var_8 = undefined;
    var_9 = undefined;
    var_10 = undefined;
    var_11 = undefined;
    var_12 = undefined;

    for (;;)
    {
        self waittill( "_encstr_B8BE07320B5B16ECAC", var_0, var_1, var_2, var_13, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );

        if ( isdefined( var_3 ) )
        {
            if ( var_3 == "_encstr_8AED0A5719ED37B8FB512FD7" )
            {
                if ( istrue( self.issaloonstyle ) )
                    self.otherdoor thread bashopen( var_1, var_1.origin );

                thread bashopen( var_1, var_1.origin );
                continue;
            }

            if ( var_3 == "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9" || var_3 == "_encstr_A11B0CBD04C9B790F653EBCF4915" || var_3 == "_encstr_9E0B13A801F1A16F27C52E196DED47FA817110C1A1" || var_3 == "_encstr_81670F602F2B4957763C758D38D1FF6C3B" )
            {
                var_14 = isdefined( var_8 ) && isdefined( var_8.basename ) && ( var_8.basename == "_encstr_98730B19756A772BCF4369E043" || var_8.basename == "_encstr_94410C2B9B052323CB8D7A561F82" || var_8.basename == "_encstr_9D8D0F1D34CAC9ADA51D597D16837DB5E0" || var_8.basename == "_encstr_B89B0FB411E85A7F7B5B8A11C1CC7F5598" );

                if ( var_0 > 10 && !var_14 )
                    thread bashopen( var_12, var_13 );

                continue;
            }

            if ( isdefined( var_8 ) && var_8.basename == "_encstr_B8C015E3F7CF776B6DD38B0391D6551D4ACE31CB3932F0" && ( var_3 == "_encstr_81670F602F2B4957763C758D38D1FF6C3B" || var_3 == "_encstr_BA3916099077D7673B375A25D3CB8C29EF394169385E873C" ) )
                thread bashopen( var_12, var_13 );
        }
    }
}

openmonitor()
{
    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );

    if ( self.state == 7 || scripts\mp\utility\game::runleanthreadmode() )
        return;

    if ( self.islean || 0 || 1 )
    {
        if ( !scripts\cp_mp\utility\game_utility::isrealismenabled() )
            self.useprompt sethintstring( &"_encstr_BE0711916886B5DF9569A9F1513FC76CD3E588" );
    }
    else if ( !scripts\cp_mp\utility\game_utility::isrealismenabled() )
        self.useprompt sethintstring( &"_encstr_9723187911DD91F41F7A809D135FBEFF7A28F961E86D7BADCB55" );

    self.useprompt sethintdisplayrange( 200 );

    for (;;)
    {
        self.useprompt waittill( "_encstr_B3461135929AC7E9653309682BB72125E27A2E", var_0 );

        if ( var_0 meleebuttonpressed() )
            continue;

        if ( var_0 scripts\mp\utility\player::isusingremote() )
            continue;

        var_1 = 0;

        while ( var_1 < 0.1 )
        {
            if ( !var_0 usebuttonpressed() )
                break;

            var_1 = var_1 + level.framedurationseconds;
            waitframe();
        }

        if ( self.state == 7 )
        {
            var_2 = self gettagorigin( "_encstr_B4F3102D4E62AF8167BF68094B8118017AF7", 1 );

            if ( isdefined( var_2 ) )
                playsoundatpos( var_2, "_encstr_A95F0C46EDED27EBC67B8DB62B23" );
            else
                playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_A95F0C46EDED27EBC67B8DB62B23" );

            continue;
        }

        if ( self.islean )
        {
            thread cheapopen( var_0 );
            return;
        }

        if ( 1 && var_0 playerads() > 0.9 )
        {
            thread ajar( var_0 );
            return;
        }

        thread cheapopen( var_0 );
    }
}

cheapopen( var_0 )
{
    thread checktriggeralarm( var_0 );
    var_1 = self.useprompt.origin;
    var_2 = self.angles;
    var_3 = anglestoright( var_2 );
    var_4 = vectornormalize( var_0.origin - var_1 );
    var_5 = vectordot( var_3, var_4 );
    var_6 = var_5 > 0;

    if ( isdefined( self.material ) )
    {
        if ( self.material == "_encstr_ADC806FD3D030F9D" )
            playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_A46A236ED8E438E8FA46EDBD39AFA1AC2C67CBD7B6B21D851BEBCD2DB9B3B1B2EBDB38B2E6" );
        else if ( self.material == "_encstr_97F605EEB7ED46" )
            playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_9C2D1AAB669B13D377E04A42381F4B37905D3F328F63A3D12F58924A" );
    }
    else
        playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_98651CCD6CC90E8E7DC87B7BE4EB77DBF6467D91DBAE31362BAFF6C195CD" );

    thread changestate( 3 );
    var_7 = scripts\engine\utility::ter_op( var_6, self.max_yaw_left, self.max_yaw_right * -1.0 );
    var_8 = ( self.baseangles[0], self.baseangles[1] + var_7, self.baseangles[2] );
    self rotateto( var_8, 0.666, 0.0, 0.333 );

    if ( isdefined( self.otherdoor ) && istrue( self.issaloonstyle ) )
    {
        var_7 = scripts\engine\utility::ter_op( !var_6, self.otherdoor.max_yaw_left, self.otherdoor.max_yaw_right * -1.0 );
        var_8 = ( self.otherdoor.baseangles[0], self.otherdoor.baseangles[1] + var_7, self.otherdoor.baseangles[2] );
        self.otherdoor rotateto( var_8, 0.666, 0.0, 0.333 );
    }

    wait 0.666;
    self.lastpushtime = gettime();
    thread changestate( 2 );

    if ( isdefined( self.otherdoor ) && istrue( self.issaloonstyle ) )
        self.otherdoor thread changestate( 2 );
}

ajar( var_0 )
{
    thread checktriggeralarm( var_0 );
    thread changestate( 6 );
    var_1 = self.useprompt.origin;
    var_2 = self.angles;
    var_3 = anglestoright( var_2 );
    var_4 = vectornormalize( var_0.origin - var_1 );
    var_5 = vectordot( var_3, var_4 );
    var_6 = var_5 > 0;
    var_7 = 0.5;
    var_8 = scripts\engine\utility::ter_op( var_6, 15, -15 );
    var_0 playrumbleonentity( "_encstr_A4BE0D23B06BC2D995BEA1B258CECB" );

    if ( isdefined( self.material ) )
    {
        if ( self.material == "_encstr_ADC806FD3D030F9D" )
            playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_B287290F0786BBCC49217D45DB71E822D7B5AF47F3A54391B82E72CCB058247AA01703377555B95828716C" );
        else if ( self.material == "_encstr_97F605EEB7ED46" )
            playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_957120E6D8C9C1D1BE32BD7BC9D7EEED7B32AF13B039E6D7DC47584E8ED70E562BD6" );
    }
    else
        playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_81E7229BB13907E8FA32B7DB27D7EEDEF6467D8CBD5DC4B159BECDD158E4A3D78356ACB5" );

    self rotateyaw( var_8, var_7, var_7 * 0.25, var_7 * 0.75 );

    if ( isdefined( self.otherdoor ) && istrue( self.issaloonstyle ) )
    {
        self.otherdoor thread changestate( 6 );
        var_8 = scripts\engine\utility::ter_op( !var_6, 15, -15 );
        self.otherdoor rotateyaw( var_8, var_7, var_7 * 0.25, var_7 * 0.75 );
    }

    self.lastpushtime = gettime();
}

pushmonitor()
{
    if ( self.islean )
        return;

    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );
    self notify( "_encstr_9F8C0C773B97048537AB509CBF6B" );
    self endon( "_encstr_9F8C0C773B97048537AB509CBF6B" );
    wait 0.5;

    for (;;)
    {
        var_0 = scripts\mp\utility\player::getplayersinradius( self.origin, 250 );

        if ( var_0.size > 0 )
        {
            foreach ( var_2 in var_0 )
            {
                if ( pushproxcheck( var_2 ) )
                {
                    push( var_2 );
                    self.lastpushtime = gettime();
                    door_destroynavobstacle();
                }
            }
        }

        if ( isdefined( self.lastpushtime ) && gettime() > self.lastpushtime + 2000 )
            door_createnavobstacle();

        waitframe();
    }
}

pushproxcheck( var_0 )
{
    self.doorcenter = self.origin + anglestoforward( self.angles ) * self.length * 0.5 + anglestoup( self.angles ) * self.height * 0.5;

    if ( var_0.origin[2] > self.origin[2] + self.height || var_0.origin[2] + 70 < self.origin[2] )
        return 0;

    var_1 = distance2dsquared( var_0.origin, self.doorcenter );
    var_2 = 900;
    return var_1 < var_2;
}

push( var_0 )
{
    var_1 = 26;
    var_2 = 0;
    var_3 = 25;
    var_4 = self.origin + anglestoforward( self.angles ) * 28;
    var_5 = distance2d( var_0.origin, var_4 );
    var_6 = scripts\engine\math::normalize_value( var_2, var_1, var_5 );
    var_7 = var_3 * ( 1 - var_6 );

    if ( var_7 == 0 )
        return;

    var_8 = self.useprompt.origin;
    var_9 = self.angles;
    var_10 = anglestoright( var_9 );
    var_11 = vectornormalize( var_0.origin - var_8 );
    var_12 = vectordot( var_10, var_11 );
    var_13 = var_12 > 0;
    var_14 = self.angles[1];
    var_15 = scripts\engine\utility::ter_op( var_13 == 1, 1, -1 );
    var_16 = var_14 + var_7 * var_15;
    var_17 = angle_diff( var_16, self.baseangles[1] );

    if ( var_13 )
    {
        if ( var_17 > self.max_yaw_left )
        {
            self.debug_activity = "_encstr_95031B41EA6E86AC23018EBD80ADB01E80632B99E802BC85DD10DBCC02" + self.max_yaw_left;
            self.angles = ( self.angles[0], self.baseangles[1] + self.max_yaw_left, self.angles[2] );
            return;
        }
    }
    else if ( var_17 > self.max_yaw_right )
    {
        self.debug_activity = "_encstr_8BD41C8FDD67A07BAFBE60B0D6852BFA8262AB9C2883618BD6D3BAA88A0E" + self.max_yaw_right;
        self.angles = ( self.angles[0], self.baseangles[1] - self.max_yaw_right, self.angles[2] );
        return;
    }

    self.angles = ( self.angles[0], var_16, self.angles[2] );
}

autoclosemonitor()
{
    if ( self.islean )
        return;

    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );
    self notify( "_encstr_B7D011A9DBCD90267BF2433513E522036070C6" );
    self endon( "_encstr_B7D011A9DBCD90267BF2433513E522036070C6" );
    wait 0.5;

    for (;;)
    {
        if ( angle_diff( self.angles[1], self.baseangles[1] ) < 40 )
        {
            if ( isdefined( self.lastpushtime ) && gettime() > self.lastpushtime + 3000 )
            {
                var_0 = scripts\mp\utility\player::getplayersinradius( self.origin, 250 );

                if ( var_0.size == 0 )
                    thread closedoor( 1 );
            }
        }

        waitframe();
    }
}

changestate( var_0 )
{
    if ( !isdefined( self.useprompt ) )
        return;

    switch ( self.state )
    {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        case 6:
            break;
        case 7:
            if ( isdefined( self.useprompt ) )
                self.useprompt sethinticon( "_encstr_BE9C13E9CE90C3A1B910927BA9A3A583C8A6639DD5" );

            break;
        case 8:
            break;
    }

    self.state = var_0;
    self notify( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );

    switch ( var_0 )
    {
        case 0:
            door_destroynavobstacle();
            door_disableaudioportal();
            thread openmonitor();
            thread bashmonitor();
            thread lockmonitor();
            thread alarmmonitor();
            thread ajarmonitor();
            break;
        case 1:
            door_destroynavobstacle();
            break;
        case 2:
            door_createnavobstacle();
            door_enableaudioportal();
            thread closemonitor();
            thread bashmonitor();
            break;
        case 3:
            door_destroynavobstacle();
            door_enableaudioportal();
            break;
        case 4:
            break;
        case 5:
            break;
        case 6:
            door_enableaudioportal();
            thread closemonitor();
            thread pushmonitor();
            thread bashmonitor();
            thread autoclosemonitor();
            break;
        case 7:
            if ( isdefined( self.useprompt ) )
            {
                self.useprompt sethintdisplayrange( 300 );
                self.useprompt sethinticon( "_encstr_88EA11A5D87BCDAFC8B7DB9C7DB1DB8DB6AC46" );
                self.useprompt sethintstring( &"_encstr_BD651353145E11A73D49BEAAA9A2D713D334D2A888" );
            }

            thread openmonitor();
            thread breachmonitor();
            break;
        case 8:
            thread openmonitor();
            thread bashmonitor();
            thread removealarmmonitor();
            thread disownalarmmonitor();
            break;
    }

    thread updatelockpromptvisibility();
    thread updatealarmpromptvisibility();

    if ( isdefined( self.otherdoor ) )
        self.otherdoor thread updatealarmpromptvisibility();
}

updatestate()
{
    switch ( self.state )
    {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        case 6:
            break;
        case 7:
            break;
        case 8:
            break;
    }
}

closemonitor()
{
    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );

    if ( scripts\mp\utility\game::runleanthreadmode() )
        return;

    if ( !scripts\cp_mp\utility\game_utility::isrealismenabled() )
        self.useprompt sethintstring( &"_encstr_8FAF12D405BC88E93DA4AFAA4DA8BE0D89F4A92A" );

    self.useprompt sethintdisplayrange( 200 );
    self.useprompt sethintdisplayfov( 120 );
    self.useprompt setuserange( 125 );
    self.useprompt setusefov( 120 );
    self.useprompt makeusable();

    for (;;)
    {
        self.useprompt waittill( "_encstr_B3461135929AC7E9653309682BB72125E27A2E", var_0 );

        if ( var_0 meleebuttonpressed() )
            continue;

        if ( var_0 scripts\mp\utility\player::isusingremote() )
            continue;

        var_1 = 0;

        while ( var_1 < 0.1 )
        {
            if ( !var_0 usebuttonpressed() )
                break;

            var_1 = var_1 + level.framedurationseconds;
            waitframe();
        }

        thread closedoor();
    }
}

closedoor( var_0 )
{
    if ( isdefined( self.material ) )
    {
        if ( self.material == "_encstr_ADC806FD3D030F9D" )
            playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_9336246E6C271C8EBE23BD7B9CEB1AAC0BECE5FADA2BE82CD8D7B996739D632B7D6C1BF6CDAC" );
        else if ( self.material == "_encstr_97F605EEB7ED46" )
            playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_A80C1BBFB7566B1C99D18D950BC147D2A0C187631BFE52FF90F8859A81" );
    }
    else
        playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_930E1D2397C04A8BF0E99A8233284F45D07197BC3750969385A652BA78165F" );

    thread changestate( 1 );
    var_1 = 0.666;

    if ( istrue( var_0 ) )
        var_1 = var_1 * 3;

    self rotateto( self.baseangles, var_1, 0.0, 0.333 );

    if ( isdefined( self.otherdoor ) && istrue( self.issaloonstyle ) )
        self.otherdoor rotateto( self.otherdoor.baseangles, var_1, 0.0, 0.333 );

    wait( var_1 );
    waitframe();

    if ( angle_diff( self.angles[1], self.baseangles[1] ) < 1 )
        thread changestate( 0 );
    else
        thread changestate( 6 );

    if ( isdefined( self.otherdoor ) && istrue( self.issaloonstyle ) )
    {
        if ( angle_diff( self.otherdoor.angles[1], self.otherdoor.baseangles[1] ) < 1 )
            self.otherdoor thread changestate( 0 );
        else
            self.otherdoor thread changestate( 6 );
    }
}

angle_diff( var_0, var_1 )
{
    return 180 - abs( abs( var_0 - var_1 ) - 180 );
}

amortizeyawtraces()
{
    level.doorphase = 0;
    level.doortracequeue = 0;
    var_0 = [];
    var_1 = [];
    level.doortracemetrics = spawnstruct();
    level.doortracemetrics.doorcount = level.doors.size;
    level.doortracemetrics.totaltracecount = 0;
    level.doortracemetrics.tracecountbyphase = [];
    level.doortracemetrics.tracetimebyphase = [];
    level.doortracemetrics.totaltime = 0;
    level.doortracemetrics.totalwaitframes = 0;
    level.waitcycles = 0;
    level.doortraces = 0;
    waitframe();
    level.doortracemetrics.totaltime = gettime();
    var_1[0] = level.doortracemetrics.totaltime;

    for (;;)
    {
        if ( level.doortracequeue == 0 )
        {
            var_2 = gettime();
            var_1[level.doorphase] = var_2 - var_1[level.doorphase];
            var_0[level.doorphase] = level.doortraces;
            level.doortracemetrics.totaltracecount = level.doortracemetrics.totaltracecount + level.doortraces;
            level.doortraces = 0;
            level.doortracemetrics.totalwaitframes = level.doortracemetrics.totalwaitframes + level.waitcycles;
            level.waitcycles = 0;
            level.doorphase++;
            level notify( "_encstr_BA27130B32CE58E66C56FA8CF6EDC9BE8E9C0BB1CA" );

            if ( level.doorphase < 3 )
                var_1[level.doorphase] = var_2;
            else
                break;
        }

        waitframe();
    }

    level.doortracemetrics.totaltime = gettime() - level.doortracemetrics.totaltime;
    level.doortracemetrics.tracecountbyphase = var_0;
    level.doortracemetrics.tracetimebyphase = var_1;
}

get_max_yaws()
{
    thread get_max_yaw( 1 );
    thread get_max_yaw( 0 );
}

get_max_yaw( var_0 )
{
    if ( var_0 )
    {
        if ( isdefined( self.script_max_left_angle ) )
        {
            self.max_yaw_left = self.script_max_left_angle;
            return;
        }
    }
    else if ( isdefined( self.script_max_right_angle ) )
    {
        self.max_yaw_right = self.script_max_right_angle;
        return;
    }

    var_1 = 90;
    var_2 = 10;
    var_3 = 0.0;

    while ( level.doorphase < 3 )
    {
        var_3 = get_max_yaw_internal( var_1, var_2, var_0 );

        if ( var_0 )
            self.max_yaw_left = var_3;
        else
            self.max_yaw_right = var_3;

        if ( var_3 == 100 )
            break;

        var_2 = var_2 * 0.5;
        var_1 = var_3 + var_2;
        level waittill( "_encstr_BA27130B32CE58E66C56FA8CF6EDC9BE8E9C0BB1CA" );
    }

    var_3 = max( var_3, 90 );

    if ( var_0 )
        self.max_yaw_left = var_3;
    else
        self.max_yaw_right = var_3;
}

get_max_yaw_internal( var_0, var_1, var_2 )
{
    if ( !isdefined( self.traces ) )
        self.traces = 0;

    if ( !isdefined( level.doortraces ) )
        level.doortraces = 0;

    var_3 = 0;
    var_4 = 0;
    level.doortracequeue++;
    waitframe();

    while ( !var_4 )
    {
        if ( var_0 > 100 )
        {
            level.currentdoor = undefined;
            level.doortracequeue--;
            return 100;
        }

        while ( isdefined( level.currentdoor ) && self != level.currentdoor )
            waitframe();

        if ( !isdefined( level.currentdoor ) )
            level.currentdoor = self;

        var_5 = yaw_collision_check( var_0, var_1, var_2 );

        if ( var_5 )
        {
            if ( var_3 )
                var_6 = 1;

            var_0 = var_0 + var_1;
        }
        else
        {
            if ( !var_3 )
                var_3 = 1;

            var_0 = var_0 - var_1;
            var_4 = 1;
        }

        self.traces++;
        level.doortraces++;
        var_7 = gettime();

        if ( !isdefined( level.doortraceframetime ) || level.doortraceframetime != var_7 )
        {
            level.doortraceframetime = var_7;
            level.doortracesthisframe = 0;
        }

        level.doortracesthisframe++;

        if ( level.doortracesthisframe == 3 )
        {
            level.doortracesthisframe = 0;
            level.waitcycles++;
            waitframe();
        }
    }

    level.currentdoor = undefined;
    level.doortracequeue--;
    return var_0;
}

yaw_collision_check( var_0, var_1, var_2 )
{
    if ( !var_2 )
        var_0 = var_0 * -1;

    var_3 = self.baseangles + ( 0, var_0, 0 );
    var_4 = self.origin + ( 0, 0, 8 );
    var_5 = self.height - 16.0;
    var_6 = anglestoforward( var_3 );
    var_7 = anglestoright( var_3 );

    if ( var_2 )
        var_7 = var_7 * -1.0;

    var_8 = var_4 + var_6 * self.length * 0.2;
    var_9 = var_4 + var_6 * ( self.length - 2.0 );
    var_10 = scripts\engine\trace::capsule_trace( var_8, var_9, 2.0, var_5, var_3, scripts\engine\utility::ter_op( isdefined( self.clip ), [ self, self.clip ], [ self ] ), level.doorcontentoverride, 0 );

    if ( getdvarint( "_encstr_93410F53AE53670FCF702309D023460729" ) )
    {
        var_11 = ( 1, 1, 1 );

        if ( var_10["_encstr_B130095358E1B3930B687D"] == 1.0 )
            var_11 = ( 0, 1, 0 );
        else
            var_11 = ( 1, 0, 0 );

        thread scripts\mp\utility\debug::drawline( var_8, var_9, 600, var_11 );
        thread scripts\mp\utility\debug::drawline( var_8 + ( 0, 0, var_5 ), var_9 + ( 0, 0, var_5 ), 600, var_11 );
        thread scripts\mp\utility\debug::drawline( var_8, var_8 + ( 0, 0, var_5 ), 600, var_11 );
        thread scripts\mp\utility\debug::drawline( var_9, var_9 + ( 0, 0, var_5 ), 600, var_11 );
    }

    return var_10["_encstr_B130095358E1B3930B687D"] == 1.0;
}

perk_doorsensethink()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        foreach ( var_1 in level.doors )
        {
            if ( var_1.state != 0 )
                continue;

            if ( isdefined( level.playerswithdoorsense ) && level.playerswithdoorsense <= 0 )
                continue;

            var_2 = scripts\mp\utility\player::getplayersinradius( var_1.origin, 128 );

            if ( var_2.size == 0 )
                continue;

            foreach ( var_4 in var_2 )
            {
                if ( var_4 scripts\mp\utility\perk::_hasperk( "_encstr_B8D915B6608779CB46E288F8C95F8FB0A3273E25C67761" ) )
                    perk_doorsense_outlinedoor( var_4, var_2, var_1 );
            }
        }

        wait 0.1;
    }
}

perk_doorsense_outlinedoor( var_0, var_1, var_2 )
{
    var_3 = [];

    foreach ( var_5 in var_1 )
    {
        if ( var_5.team != var_0.team )
            var_3[var_3.size] = var_5;
    }

    if ( var_3.size == 0 )
        return;

    foreach ( var_8 in var_3 )
    {
        if ( perk_doorsense_othersideofdoorcheck( var_0, var_8, var_2 ) )
        {
            var_9 = scripts\mp\utility\outline::outlineenableforplayer( var_2, var_0, "_encstr_8CA117D5B5F9D271D008578B40C9355B8143514D9E7B2A8759", "_encstr_BE8F0A2BB8D596386BB273A3" );
            thread perk_doorsense_trackoutlinedisable( var_9, var_2 );
        }
    }
}

perk_doorsense_outlineenemies( var_0, var_1, var_2 )
{
    var_3 = [];

    foreach ( var_5 in var_1 )
    {
        if ( var_5.team != var_0.team )
            var_3[var_3.size] = var_5;
    }

    if ( var_3.size == 0 )
        return;

    foreach ( var_8 in var_3 )
    {
        if ( perk_doorsense_othersideofdoorcheck( var_0, var_8, var_2 ) )
        {
            var_9 = scripts\mp\utility\outline::outlineenableforplayer( var_8, var_0, "_encstr_8CA117D5B5F9D271D008578B40C9355B8143514D9E7B2A8759", "_encstr_BE8F0A2BB8D596386BB273A3" );
            thread perk_doorsense_trackoutlinedisable( var_9, var_8 );
        }
    }
}

perk_doorsense_othersideofdoorcheck( var_0, var_1, var_2 )
{
    var_3 = vectornormalize( anglestoright( var_2.angles ) );
    var_4 = vectornormalize( var_0.origin - var_2.origin );
    var_5 = vectornormalize( var_1.origin - var_2.origin );
    var_6 = vectordot( var_3, var_4 );
    var_7 = vectordot( var_3, var_5 );

    if ( var_6 > 0 && var_7 < 0 || var_6 < 0 && var_7 > 0 )
        return 1;

    return 0;
}

perk_doorsense_trackoutlinedisable( var_0, var_1 )
{
    wait 0.2;
    scripts\mp\utility\outline::outlinedisable( var_0, var_1 );
}

onplayerspawned()
{
    var_0 = scripts\mp\utility\perk::_hasperk( "_encstr_B279168630D7299B1692F8A8996F5F6053F786FEBD6F91C1" ) || getdvarint( "_encstr_88DE1D37B14ED732EDDE39F589C995858D1AAFBA9B93CA371D394BC6D12B19", 0 ) == 1;
    updatealldoorslockvisibilityforplayer( self, var_0 );
    var_1 = scripts\mp\utility\perk::_hasperk( "_encstr_9DD515AA7B5813FAD7B98BB7F70DC24788E6A6F5F158D5" );
    updatealldoorsalarmvisibilityforplayer( self, var_1 );
}

updatelockpromptvisibility()
{
    if ( scripts\mp\utility\game::runleanthreadmode() )
        return;

    while ( !isdefined( level.players ) )
        waitframe();

    foreach ( var_1 in level.players )
    {
        var_2 = var_1 scripts\mp\utility\perk::_hasperk( "_encstr_B279168630D7299B1692F8A8996F5F6053F786FEBD6F91C1" ) || getdvarint( "_encstr_88DE1D37B14ED732EDDE39F589C995858D1AAFBA9B93CA371D394BC6D12B19", 0 ) == 1;
        updatelockpromptvisibilityforplayer( var_1, var_2 );
    }
}

updatealldoorslockvisibilityforplayer( var_0, var_1 )
{
    foreach ( var_3 in level.doors )
        var_3 updatelockpromptvisibilityforplayer( var_0, var_1 );
}

updatelockpromptvisibilityforplayer( var_0, var_1 )
{
    if ( !isdefined( self.lockprompt ) )
        return;

    var_2 = self.state == 0 || self.state == 7;

    if ( var_2 && isdefined( self.otherdoor ) )
        var_2 = self.otherdoor.state == 0 || self.otherdoor.state == 7;

    if ( !istrue( self.breaching ) && var_2 )
    {
        if ( var_1 )
        {
            self.lockprompt showtoplayer( var_0 );
            self.lockprompt enableplayeruse( var_0 );
        }
        else
        {
            self.lockprompt hidefromplayer( var_0 );
            self.lockprompt disableplayeruse( var_0 );
        }
    }
    else
    {
        self.lockprompt hidefromplayer( var_0 );
        self.lockprompt disableplayeruse( var_0 );
    }
}

lockmonitor()
{
    if ( !isdefined( self.lockprompt ) || self.islean || scripts\mp\utility\game::runleanthreadmode() )
        return;

    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );

    if ( isdefined( self.otherdoor ) )
    {
        while ( self.otherdoor.state != 0 )
            waitframe();
    }

    self.lockprompt sethintstring( &"_encstr_BE1211056FA053EDA7A1D971819BD1CB047E9B" );
    self.lockprompt setuseholdduration( "_encstr_9876109DF38B6B2BC927E071371DE1B3031D" );
    updatelockpromptvisibility();

    for (;;)
    {
        self.lockprompt waittill( "_encstr_8B5C081B58E0B7A213E6", var_0 );

        if ( !scripts\mp\utility\player::isreallyalive( var_0 ) )
            continue;

        if ( var_0 meleebuttonpressed() )
            continue;

        if ( var_0 scripts\mp\utility\player::isusingremote() )
            continue;

        thread lockdoor();
    }
}

lockdoor()
{
    thread changestate( 7 );

    if ( isdefined( self.otherdoor ) )
        self.otherdoor thread changestate( 7 );
}

updatealarmpromptvisibility()
{
    if ( scripts\mp\utility\game::runleanthreadmode() )
        return;

    while ( !isdefined( level.players ) )
        waitframe();

    foreach ( var_1 in level.players )
    {
        var_2 = var_1 scripts\mp\utility\perk::_hasperk( "_encstr_9DD515AA7B5813FAD7B98BB7F70DC24788E6A6F5F158D5" );
        updatealarmpromptsvisibilityforplayer( var_1, var_2 );
    }
}

updatealldoorsalarmvisibilityforplayer( var_0, var_1 )
{
    foreach ( var_3 in level.doors )
        var_3 updatealarmpromptsvisibilityforplayer( var_0, var_1 );
}

updatealarmpromptsvisibilityforplayer( var_0, var_1 )
{
    if ( !isdefined( self.alarmprompts ) )
        return;

    foreach ( var_3 in self.alarmprompts )
    {
        var_4 = var_1 && self.state == 0 || self.state == 8 && isdefined( self.dooralarmprompt ) && var_3 == self.dooralarmprompt;

        if ( var_4 && isdefined( self.otherdoor ) )
            var_4 = var_1 && self.otherdoor.state == 0 || self.state == 8 && var_3 == self.dooralarmprompt;

        if ( var_4 )
        {
            var_3 showtoplayer( var_0 );
            var_3 enableplayeruse( var_0 );
            continue;
        }

        var_3 hidefromplayer( var_0 );
        var_3 disableplayeruse( var_0 );
    }
}

alarmmonitor()
{
    if ( self.islean || scripts\mp\utility\game::runleanthreadmode() )
        return;

    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );

    if ( isdefined( self.otherdoor ) )
    {
        while ( self.otherdoor.state != 0 )
            waitframe();
    }

    foreach ( var_1 in self.alarmprompts )
    {
        var_1 sethintstring( &"_encstr_AF95123182661964C7CB81D92725BECBF87E36A9" );
        var_1 setuseholdduration( "_encstr_9876109DF38B6B2BC927E071371DE1B3031D" );
    }

    updatealarmpromptvisibility();

    foreach ( var_1 in self.alarmprompts )
        thread _alarmmonitorinternal( var_1 );
}

_alarmmonitorinternal( var_0 )
{
    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );

    for (;;)
    {
        var_0 waittill( "_encstr_8B5C081B58E0B7A213E6", var_1 );

        if ( self.state != 0 )
            continue;

        if ( !scripts\mp\utility\player::isreallyalive( var_1 ) )
            continue;

        if ( var_1 meleebuttonpressed() )
            continue;

        if ( var_1 scripts\mp\utility\player::isusingremote() )
            continue;

        thread alarmdoor( var_1, var_0 );
    }
}

alarmdoor( var_0, var_1 )
{
    var_2 = self gettagorigin( "_encstr_B4F3102D4E62AF8167BF68094B8118017AF7" );
    playsoundatpos( var_1.origin, "_encstr_9BE711B05AA7B05F35FE41D3D167D08D290AE8" );
    self.dooralarment = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_1.origin );
    self.dooralarment setmodel( "_encstr_B8100D4873B18301E2E6819971EB4B" );
    self.dooralarment.angles = self.angles;
    self.dooralarment linkto( self );
    self.dooralarment setentityowner( var_0 );
    self.dooralarment setotherent( var_0 );
    self.dooralarment setscriptablepartstate( "_encstr_8CCC08BAB3EB9177A5B7", "_encstr_A41B087BB2F758C83F04", 0 );
    self.dooralarmowner = var_0;
    self.dooralarmprompt = var_1;
    self.dooralarmowner.alarmeddoors = scripts\engine\utility::array_add( self.dooralarmowner.alarmeddoors, self );

    while ( self.dooralarmowner.alarmeddoors.size > 3 )
    {
        var_3 = self.dooralarmowner.alarmeddoors[0];
        var_3 removealarmdoor( 0 );
    }

    thread changestate( 8 );

    if ( isdefined( self.otherdoor ) )
        self.otherdoor thread changestate( 8 );
}

removealarmmonitor()
{
    if ( !isdefined( self.dooralarmprompt ) || self.islean || scripts\mp\utility\game::runleanthreadmode() )
        return;

    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );

    if ( isdefined( self.otherdoor ) )
    {
        while ( self.otherdoor.state != 8 )
            waitframe();
    }

    self.dooralarmprompt sethintstring( &"_encstr_AA27198132D6A9F4575BF1A9B7B50E7D98ED08B4DF89EBDC016379" );
    self.dooralarmprompt setuseholdduration( "_encstr_9876109DF38B6B2BC927E071371DE1B3031D" );
    self.dooralarmprompt.owner = self.dooralarmowner;
    self.dooralarmprompt.team = self.dooralarmowner.team;
    updatealarmpromptvisibility();

    for (;;)
    {
        self.dooralarmprompt waittill( "_encstr_8B5C081B58E0B7A213E6", var_0 );

        if ( self.state != 8 )
            continue;

        if ( !scripts\mp\utility\player::isreallyalive( var_0 ) )
            continue;

        if ( var_0 meleebuttonpressed() )
            continue;

        if ( var_0 scripts\mp\utility\player::isusingremote() )
            continue;

        thread removealarmdoor( 1 );
    }
}

disownalarmmonitor()
{
    if ( !isdefined( self.dooralarmprompt ) || self.islean || scripts\mp\utility\game::runleanthreadmode() )
        return;

    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );

    if ( isdefined( self.otherdoor ) )
    {
        while ( self.otherdoor.state != 8 )
            waitframe();
    }

    for (;;)
    {
        self.dooralarmowner scripts\engine\utility::_id_143A6( "_encstr_B2170C4AD884CDC823B9DB9D9F42", "_encstr_8CD0124A97D7F07BAD07C8C342FAA010C490DD5B", "_encstr_8A820B4696CDB1ED3737AC1B3A" );

        if ( self.state != 8 )
            return;

        thread removealarmdoor( 0 );
    }
}

removealarmdoor( var_0 )
{
    if ( var_0 )
        playsoundatpos( self.dooralarment.origin, "_encstr_93F2128A53F0F3BD109527E15198021F1828B282" );

    if ( isdefined( self.dooralarmowner ) )
        self.dooralarmowner.alarmeddoors = scripts\engine\utility::array_remove( self.dooralarmowner.alarmeddoors, self );

    self.dooralarment delete();
    self.dooralarmowner = undefined;
    self.dooralarmprompt = undefined;
    thread changestate( 0 );

    if ( isdefined( self.otherdoor ) )
        self.otherdoor thread changestate( 0 );
}

checktriggeralarm( var_0 )
{
    if ( self.state != 8 )
        return;

    var_1 = self;

    if ( !isdefined( self.dooralarment ) && isdefined( self.otherdoor ) )
        var_1 = self.otherdoor;

    if ( !isdefined( var_1.dooralarmowner ) )
        return;

    var_2 = var_1.dooralarment;
    var_3 = var_1.dooralarmowner;
    var_1.dooralarmowner.alarmeddoors = scripts\engine\utility::array_remove( var_1.dooralarmowner.alarmeddoors, var_1 );
    var_1.dooralarment = undefined;
    var_1.dooralarmowner = undefined;
    var_1.dooralarmprompt = undefined;
    var_3 scripts\mp\killstreaks\killstreaks::givescorefortriggeredalarmeddoor();

    if ( isdefined( self.otherdoor ) )
        self.otherdoor thread changestate( 0 );

    if ( istrue( scripts\cp_mp\utility\player_utility::playersareenemies( var_0, var_3 ) ) )
    {
        var_2 playloopsound( "_encstr_A2E711D7F34F9C10B5922732E971C3E7CFD0C3" );
        pinglocationenemyteams( self.origin, var_0.team );
        var_2 setscriptablepartstate( "_encstr_8CCC08BAB3EB9177A5B7", "_encstr_BAB70AE8392DCEECAC39958C", 0 );
        wait 4.0;
        var_2 stoploopsound();
        var_2 delete();
    }
    else
    {
        playsoundatpos( var_2.origin, "_encstr_93F2128A53F0F3BD109527E15198021F1828B282" );
        var_2 setscriptablepartstate( "_encstr_8CCC08BAB3EB9177A5B7", "_encstr_9BA4080D39CFFB5AB7C1", 0 );
        var_2 delete();
    }
}

ajarmonitor()
{
    if ( self.islean || scripts\mp\utility\game::runleanthreadmode() )
        return;

    if ( !istrue( self.issaloonstyle ) )
        return;

    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );
    self notify( "_encstr_B7B70CC06A96357C678E53D597CB" );
    self endon( "_encstr_B7B70CC06A96357C678E53D597CB" );

    for (;;)
    {
        waitframe();
        waittillframeend;

        if ( self.otherdoor.state != 0 )
            thread changestate( 6 );
    }
}

breachmonitor()
{
    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );
    thread monitorbreachmelee();
    self.lockprompt sethintstring( &"_encstr_940D1349FA1E610CAF9329618FFD4625B1D7D7C644" );
    self.lockprompt setuseholdduration( "_encstr_93370F8CAE27588ED27BB9FADC0DDB4EA3" );
    updatelockpromptvisibility();

    if ( !isdefined( self.otherdoor ) )
        self.doorcenter = self.origin + anglestoforward( self.angles ) * self.length * 0.5 + anglestoup( self.angles ) * self.height * 0.5;

    thread updatelocklight( "_encstr_B65B0BE95FF67095B358F8E023" );

    for (;;)
    {
        self.lockprompt waittill( "_encstr_8B5C081B58E0B7A213E6", var_0 );

        if ( var_0 meleebuttonpressed() )
            continue;

        if ( var_0 scripts\mp\utility\player::isusingremote() )
            continue;

        if ( var_0 issprinting() || var_0 issprintsliding() )
            continue;

        if ( var_0 ismantling() )
            continue;

        if ( istrue( self.breaching ) )
            continue;

        thread breachdoor( var_0 );
    }
}

breachdoor( var_0 )
{
    thread plantbreach( var_0 );
}

monitorbreachmelee()
{
    self endon( "_encstr_AD5C0DD033F8517DC7C8094D046D21" );
    self notify( "_encstr_896B131DF7201AE3D8EB8EE3D75E3ED841B94C67B7" );
    self endon( "_encstr_896B131DF7201AE3D8EB8EE3D75E3ED841B94C67B7" );
    self.lockedmeleehealth = 150;
    self setcandamage( 1 );
    var_0 = undefined;
    var_1 = undefined;
    var_2 = undefined;
    var_3 = undefined;
    var_4 = undefined;
    var_5 = undefined;
    var_6 = undefined;
    var_7 = undefined;
    var_8 = undefined;
    var_9 = undefined;
    var_10 = undefined;
    var_11 = undefined;
    var_12 = undefined;

    for (;;)
    {
        self waittill( "_encstr_B8BE07320B5B16ECAC", var_0, var_1, var_2, var_13, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12 );

        if ( isdefined( var_3 ) && !istrue( self.breaching ) )
        {
            if ( var_3 == "_encstr_8AED0A5719ED37B8FB512FD7" || var_3 == "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9" || var_3 == "_encstr_A11B0CBD04C9B790F653EBCF4915" || var_3 == "_encstr_9E0B13A801F1A16F27C52E196DED47FA817110C1A1" || var_3 == "_encstr_81670F602F2B4957763C758D38D1FF6C3B" )
            {
                var_14 = isdefined( var_8 ) && isdefined( var_8.basename ) && ( var_8.basename == "_encstr_98730B19756A772BCF4369E043" || var_8.basename == "_encstr_94410C2B9B052323CB8D7A561F82" || var_8.basename == "_encstr_9D8D0F1D34CAC9ADA51D597D16837DB5E0" || var_8.basename == "_encstr_B89B0FB411E85A7F7B5B8A11C1CC7F5598" );

                if ( var_14 )
                    continue;

                self.lockedmeleehealth = self.lockedmeleehealth - var_0;

                if ( isdefined( self.otherdoor ) )
                    self.otherdoor.lockedmeleehealth = self.otherdoor.lockedmeleehealth - var_0;

                if ( self.lockedmeleehealth < 1 )
                {
                    if ( isdefined( self.otherdoor ) || istrue( self.issaloonstyle ) )
                    {
                        self.otherdoor thread updatelocklight( "_encstr_9819045FD029" );
                        self.otherdoor thread bashopen( var_1, var_1.origin );
                    }

                    thread updatelocklight( "_encstr_9819045FD029" );
                    thread bashopen( var_1, var_1.origin );
                    continue;
                }

                playsoundatpos( self.origin + ( 0, 0, 42 ), "_encstr_9B4D1CCB7E7B3A1BA9D387F012CECB35487FC7A9B7E0C23999291E1FCF60" );
            }
        }
    }
}

#using_animtree("_encstr_93DC0DCD1B272D3847AF5BED23B2C6");

plantbreach( var_0 )
{
    if ( isdefined( self.otherdoor ) && istrue( self.otherdoor.breaching ) )
        return;

    self.breaching = 1;
    thread updatelockpromptvisibility();
    thread watchplayerdeath( var_0 );
    var_1 = self.origin;
    var_2 = self.angles;
    var_3 = anglestoright( var_2 );
    var_4 = vectornormalize( var_0.origin - self.origin );
    var_5 = vectordot( var_3, var_4 );
    var_6 = var_5 > 0;

    if ( var_6 )
    {
        var_7 = self.rightplantorg;
        var_8 = self.rightplantang;
    }
    else
    {
        var_7 = self.leftplantorg;
        var_8 = self.leftplantang;
    }

    var_0.linktoent = var_0 scripts\engine\utility::spawn_tag_origin();
    var_0 playerlinktodelta( var_0.linktoent, "_encstr_8CB40B4BB398B1C0A81FDF6BEA", 1, 0, 0, 0, 0, 0 );
    var_9 = scripts\engine\utility::spawn_tag_origin( var_7, var_8 );
    var_0.linktoent moveto( var_7, 0.25, 0.1, 0.1 );
    var_0.linktoent rotateto( var_8, 0.25, 0.1, 0.1 );
    var_0 setstance( "_encstr_B1AD06374716DC8C" );

    if ( !istrue( var_0 givegunless() ) )
    {
        var_0 unlink();
        var_0.linktoent delete();
        var_0.linktoent = undefined;
        self.breaching = 0;
        thread updatelockpromptvisibility();
        return 0;
    }

    if ( istrue( self.cancelplant ) )
    {
        self.breaching = 0;
        thread updatelockpromptvisibility();
        return 0;
    }

    var_0 unlink();
    var_0.linktoent delete();
    var_0.linktoent = undefined;
    var_0 setorigin( var_7 );
    var_0 setplayerangles( var_8 );
    level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_0, "_encstr_874509A987BF87D8EEDE41" );
    var_10 = scripts\engine\utility::ter_op( var_0.team == "_encstr_BC850785638DA59537", "_encstr_AAE4054D8E3BF6", "_encstr_A183050B668313" );

    if ( level.mapname == "_encstr_944B10ED4796DB2EB730820A98F760B76B25" )
        var_10 = scripts\engine\utility::ter_op( var_0.team == "_encstr_BC850785638DA59537", "_encstr_B8E405EAB60789", "_encstr_87830516263898" );

    var_0 queuedialogforplayer( "_encstr_816908F24147D853673E" + var_10 + "_encstr_A3500E96E6F2A837BA3327411BA28868", "_encstr_892C11A7DF63C878022F51E994C72099AA7331", 2 );
    thread create_player_rig( var_0, "_encstr_B11B080E8DC2E6475627" );
    var_9 thread scripts\mp\anim::anim_player_solo( var_0, var_0.player_rig, "_encstr_8C4E06E38023450B" );
    var_11 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_7 );
    var_11 setmodel( "_encstr_AFB30E40C753D98390E4D113533F28B9" );
    var_11.animname = "_encstr_AA0703D868";
    var_11 useanimtree( #animtree );
    self.plantedbomb = var_11;
    var_9 thread scripts\common\anim::anim_single_solo( var_11, "_encstr_8C4E06E38023450B" );
    var_12 = getanimlength( level.scr_anim["_encstr_B11B080E8DC2E6475627"]["_encstr_8C4E06E38023450B"] );
    var_13 = 0.5;
    wait( var_12 - var_13 );

    if ( istrue( self.cancelplant ) )
    {
        self.breaching = 0;
        thread updatelockpromptvisibility();
        return 0;
    }

    thread bomb_planted_think( var_0, var_6 );
    givebreachscore( var_0 );
    wait( var_13 );

    if ( var_0 isviewmodelanimplaying() )
        var_0 stopviewmodelanim();

    var_0 thread takegunless();
    remove_player_rig( var_0 );
    return 1;
}

bomb_planted_think( var_0, var_1 )
{
    var_2 = var_0.team;
    self.defused = 0;

    if ( !isdefined( self.breachindex ) )
    {
        if ( !isdefined( level.breachindex ) )
            level.breachindex = 0;
        else
            level.breachindex++;

        self.breachindex = level.breachindex;
    }

    bomb_fuse_think( var_2 );

    if ( !self.defused )
    {
        self.doorcenter = self.origin + anglestoforward( self.angles ) * self.length * 0.5 + anglestoup( self.angles ) * self.height * 0.5;
        var_3 = self.doorcenter;

        if ( var_1 )
            var_4 = self.rightplantang;
        else
            var_4 = self.leftplantang;

        var_5 = spawnfx( level._effect["_encstr_9E0D0F26C9952C360D7DB2F083367BC895"], var_3, anglestoforward( var_4 ) * -1.0, ( 0, 0, 1 ) );
        triggerfx( var_5 );
        physicsexplosionsphere( var_3, 200, 100, 3 );
        playrumbleonposition( "_encstr_B6D30F3B39CACDC24659EBE4EAAD263695", var_3 );
        earthquake( 0.5, 1.0, var_3, 1500 );
        var_0 scripts\mp\utility\weapon::_launchgrenade( "_encstr_970B114D33923EC8CF4FD30935D9E07D295F19", self.plantedbomb.origin + anglestoforward( var_4 ) * 100.0, ( 0, 0, 0 ), 0.05, 1 );
        var_0 scripts\mp\utility\weapon::_launchgrenade( "_encstr_B94516A690081B23D68FC7E78DE84A4208D85EEF4929ADAB", self.plantedbomb.origin + anglestoforward( var_4 ) * 100.0, ( 0, 0, 0 ), 0.05, 1 );
        wait 0.1;

        if ( isdefined( var_0 ) )
            self.plantedbomb radiusdamage( self.plantedbomb.origin, 50, 10, 5, var_0, "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9", "_encstr_9DF00DF37BD0E2716F3B8BC7086BBB" );
        else
            self.plantedbomb radiusdamage( self.plantedbomb.origin, 100, 50, 5, undefined, "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9", "_encstr_9DF00DF37BD0E2716F3B8BC7086BBB" );

        thread bashopen( var_0, self.plantedbomb.origin );

        if ( isdefined( self.otherdoor ) )
            self.otherdoor thread bashopen( var_0, self.plantedbomb.origin );
    }

    self.plantedbomb delete();
    self.plantedbomb = undefined;
    setomnvar( "_encstr_8BB611D55A7DB49B3B16B6ACAF475AD6AC9CEB" + self.breachindex, 0 );
    setomnvar( "_encstr_87B815D748EE61EADFA7457F80D1D23DF1F8071FE8239F" + self.breachindex, undefined );
    self.breaching = 0;
    thread updatelockpromptvisibility();
    thread updatelocklight( "_encstr_9819045FD029" );

    if ( isdefined( self.otherdoor ) )
        self.otherdoor thread updatelocklight( "_encstr_9819045FD029" );
}

bomb_fuse_think( var_0 )
{
    self notify( "_encstr_B3720FEE5B5B72F744F7FBB091C8A5B729" );
    self.timerobject = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", self.plantedbomb.origin );
    var_1 = gettime();
    var_2 = int( var_1 + 1000.0 );
    setomnvar( "_encstr_8BB611D55A7DB49B3B16B6ACAF475AD6AC9CEB" + self.breachindex, var_2 );
    setomnvar( "_encstr_87B815D748EE61EADFA7457F80D1D23DF1F8071FE8239F" + self.breachindex, self.timerobject );
    var_3 = var_2 - var_1;

    while ( !self.defused && var_3 > 0 )
    {
        var_1 = gettime();
        var_3 = var_2 - var_1;

        if ( var_3 < 1500 )
        {
            if ( var_3 <= 250 )
                self.plantedbomb playsound( "_encstr_930317353BA247E068D1E339824678083A27ADB31F9BAF42ED" );
            else if ( var_3 < 500 )
                self.plantedbomb playsound( "_encstr_9F03176B056DCABB90261BE6FBD8C97234C7E3CF830FD1205A" );
            else if ( var_3 < 1500 )
                self.plantedbomb playsound( "_encstr_8703171A9EAA232341016F817A42E388900736ADB5236F03D2" );
            else
                self.plantedbomb playsound( "_encstr_B2031798272BB0C6D0EBDD2CC9B9D273CED7C4B29507EB608C" );

            wait 0.25;
        }
        else if ( var_3 < 3500 )
        {
            self.plantedbomb playsound( "_encstr_B2031798272BB0C6D0EBDD2CC9B9D273CED7C4B29507EB608C" );
            wait 0.5;
        }
        else
        {
            self.plantedbomb playsound( "_encstr_80031762E5285E873BFE6B326337E7D560D71AED532869127F" );
            wait 1.0;
        }

        if ( var_3 < 0 )
            break;
    }
}

watchplayerdeath( var_0 )
{
    self endon( "_encstr_B3720FEE5B5B72F744F7FBB091C8A5B729" );
    self.cancelplant = 0;

    for (;;)
    {
        if ( !isdefined( var_0 ) || !scripts\mp\utility\player::isreallyalive( var_0 ) )
        {
            if ( isdefined( self.plantedbomb ) )
            {
                self.plantedbomb delete();
                self.plantedbomb = undefined;
                self.plantedkey = undefined;
            }

            self.cancelplant = 1;
            break;
        }

        waitframe();
    }
}

script_model_anims()
{

}

#using_animtree("_encstr_A40101");

create_player_rig( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) || isdefined( var_0.player_rig ) )
        return;

    var_0.animname = var_1;

    if ( !isdefined( var_2 ) )
        var_2 = "_encstr_9BC813A0B775E3D91265C55631FA13ABDDD7D0309A";

    var_0.player_rig = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_0.origin );
    var_0.player_rig setmodel( var_2 );
    var_0.player_rig hide();
    var_0.player_rig.animname = var_1;
    var_0.player_rig useanimtree( #animtree );
    var_0 playerlinktodelta( var_0.player_rig, "_encstr_BA010BA012DFB703A379A39542", 1, 0, 0, 0, 0, 0, 0 );
    var_0 watch_remove_rig();
    remove_player_rig( var_0 );
}

remove_player_rig( var_0 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_0.player_rig ) )
        return;

    var_0 unlink();
    var_1 = var_0 getdroptofloorposition( var_0.origin );

    if ( isdefined( var_1 ) )
        var_0 setorigin( var_1 );
    else
        var_0 setorigin( var_0.origin + ( 0, 0, 100 ) );

    var_0.player_rig delete();
    var_0.player_rig = undefined;
}

watch_remove_rig( var_0 )
{
    scripts\engine\utility::_id_143A5( "_encstr_BE840B5637BAB7AB0527C04BDF", "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
}

givebreachscore( var_0 )
{
    var_1 = "_encstr_98D707B69BBF4AC7B0";
    var_2 = scripts\mp\rank::getscoreinfovalue( var_1 );
    var_0 thread scripts\mp\rank::giverankxp( var_1, var_2 );
    var_0 thread scripts\mp\rank::scoreeventpopup( var_1 );
}

givegunless()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    var_0 = getcompleteweaponname( "_encstr_BC0D0C2DBB0E7D9DAE9BC6AC6EB9" );
    scripts\cp_mp\utility\inventory_utility::_giveweapon( var_0, undefined, undefined, 1 );
    var_1 = scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_0, 0 );

    if ( var_1 )
    {
        self.gunnlessweapon = var_0;
        scripts\common\utility::allow_weapon_switch( 0 );
        scripts\common\utility::allow_offhand_weapons( 0 );
        scripts\common\utility::allow_melee( 0 );
    }
    else
    {
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_0 );
        scripts\cp_mp\utility\inventory_utility::forcevalidweapon();
    }

    return var_1;
}

takegunless()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    if ( !isdefined( self.gunnlessweapon ) || !self hasweapon( self.gunnlessweapon ) )
        return;

    self.takinggunless = 1;
    scripts\common\utility::allow_weapon_switch( 1 );

    while ( self hasweapon( self.gunnlessweapon ) )
    {
        if ( !scripts\cp_mp\utility\inventory_utility::iscurrentweapon( self.gunnlessweapon ) )
            scripts\cp_mp\utility\inventory_utility::abortmonitoredweaponswitch( self.gunnlessweapon );
        else
        {
            scripts\cp_mp\utility\inventory_utility::_takeweapon( self.gunnlessweapon );
            scripts\cp_mp\utility\inventory_utility::forcevalidweapon();
        }

        waitframe();
    }

    self.takinggunless = 0;
    self.gunnlessweapon = undefined;
    scripts\common\utility::allow_offhand_weapons( 1 );
    scripts\common\utility::allow_melee( 1 );
}

updatelocklight( var_0 )
{
    if ( !isdefined( self.locklight ) )
        return;

    self notify( "_encstr_B8B410AB1A6C0B35422BFFEF9FF8F3680873" );
    self endon( "_encstr_B8B410AB1A6C0B35422BFFEF9FF8F3680873" );

    if ( !scripts\mp\flags::levelflag( "_encstr_97EC123360481CB793B883EB058A0FFBA2C91DF3" ) )
        scripts\mp\flags::levelflagwait( "_encstr_97EC123360481CB793B883EB058A0FFBA2C91DF3" );

    self.locklight setscriptablepartstate( "_encstr_A12B07D13E43B7F12A", var_0 );
}

linkdoubledoors()
{
    foreach ( var_1 in level.doors )
    {
        if ( isdefined( var_1.otherdoor ) )
            continue;

        foreach ( var_3 in level.doors )
        {
            if ( var_3 == var_1 )
                continue;

            var_4 = var_1 gettagorigin( "_encstr_B4F3102D4E62AF8167BF68094B8118017AF7", 1 );
            var_5 = var_3 gettagorigin( "_encstr_B4F3102D4E62AF8167BF68094B8118017AF7", 1 );

            if ( !isdefined( var_4 ) || !isdefined( var_5 ) )
                continue;

            var_6 = distancesquared( var_4, var_5 );

            if ( var_6 < 225 )
            {
                if ( var_6 < 100 )
                {
                    var_1.issaloonstyle = 1;
                    var_3.issaloonstyle = 1;
                }

                var_3.otherdoor = var_1;
                var_1.otherdoor = var_3;

                if ( isdefined( var_1.lockprompt ) && isdefined( var_3.lockprompt ) )
                {
                    var_3.lockprompt delete();
                    var_3.lockprompt = var_1.lockprompt;
                    var_7 = ( var_4 + var_5 ) * 0.5 + ( 0, 0, 15 );
                    var_1.lockprompt unlink();
                    var_1.lockprompt.origin = var_7;
                    var_1 thread changestate( var_1.state );
                    var_3 thread changestate( var_3.state );
                    var_1.leftplantorg = ( var_7[0], var_7[1], var_1.origin[2] ) + anglestoright( var_1.baseangles ) * -24.5;
                    var_1.leftplantang = ( 0, var_1.baseangles[1] - 90.0, 0 );
                    var_1.rightplantorg = ( var_7[0], var_7[1], var_1.origin[2] ) + anglestoright( var_1.baseangles ) * 24.5;
                    var_1.rightplantang = ( 0, var_1.baseangles[1] + 90.0, 0 );
                    var_3.leftplantorg = ( var_7[0], var_7[1], var_3.origin[2] ) + anglestoright( var_3.baseangles ) * -24.5;
                    var_3.leftplantang = ( 0, var_3.baseangles[1] - 90.0, 0 );
                    var_3.rightplantorg = ( var_7[0], var_7[1], var_3.origin[2] ) + anglestoright( var_3.baseangles ) * 24.5;
                    var_3.rightplantang = ( 0, var_3.baseangles[1] + 90.0, 0 );
                }
            }
        }
    }
}

door_createnavobstacle()
{
    if ( !isdefined( self.clipent ) )
        return;

    if ( isdefined( self.doornavobstacle ) )
        return;

    self.doornavobstacle = createnavobstaclebyent( self.clipent );
}

door_destroynavobstacle()
{
    if ( !isdefined( self.doornavobstacle ) )
        return;

    destroynavobstacle( self.doornavobstacle );
    self.doornavobstacle = undefined;
}

door_enableaudioportal()
{
    if ( isdefined( self.audioportalent ) )
        self.audioportalent enableaudioportal( 1 );
}

door_disableaudioportal()
{
    if ( isdefined( self.otherdoor ) && ( self.otherdoor.state != 0 && self.otherdoor.state != 7 && self.otherdoor.state != 8 ) )
        return;

    if ( isdefined( self.audioportalent ) )
        self.audioportalent enableaudioportal( 0 );
}

door_can_open_check()
{
    return self.state == 6 || self.state == 0;
}
