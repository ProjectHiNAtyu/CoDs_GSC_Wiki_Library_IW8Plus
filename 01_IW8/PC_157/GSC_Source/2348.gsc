// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level._effect["_encstr_A1940F6351B891C2D9239F4309779BD538"] = loadfx( "_encstr_89D432C3EF28B7A7BBFF1F1DE858670828B07BAC12400B328773E73939AAF8529E83A796B7E21F0151A76C707E6A87F3466B04B1" );
    level._effect["_encstr_BE750BADEF3BD0B0E4D6DB317A"] = loadfx( "_encstr_BEC633FB6C0A6027C0823EB8E8A8DC842975CF33D5ED68444FDB60032FF32186328B087E596ABA82C5C151E39988DB813FB8E46E33" );

    if ( level.gametype != "_encstr_9507034B25" )
        level thread getaveragelowspawnpoint();
}

getaveragelowspawnpoint()
{
    var_0 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_A9C01AAD83BE1D91B5FA6E38587737FA8536365A59377DE63A58E4D1" );
    var_1 = 0;
    var_2 = 0;

    foreach ( var_4 in var_0 )
    {
        var_1++;
        var_2 = var_2 + var_4.origin[2];
    }

    if ( var_1 > 0 )
        level.averagealliesz = var_2 / var_1;
    else
        level.averagealliesz = 0;
}

makehelitype( var_0, var_1, var_2 )
{
    level.chopper_fx["_encstr_AB0808DFB97F822F1899"]["_encstr_A3750609A5E61883"][var_0] = loadfx( var_1 );
    level.lightfxfunc[var_0] = var_2;
}

addairexplosion( var_0, var_1 )
{
    level.chopper_fx["_encstr_AB0808DFB97F822F1899"]["_encstr_8B6D0A854BC9D7192B583AD0"][var_0] = loadfx( var_1 );
}

defaultlightfx()
{
    playfxontag( level.chopper_fx["_encstr_8BA90608F481F0DB"]["_encstr_B1AD05C65666E8"], self, "_encstr_82F611DCD148C67938F46874A7F16163BBA818" );
    wait 0.05;
    playfxontag( level.chopper_fx["_encstr_8BA90608F481F0DB"]["_encstr_9353062E718710C9"], self, "_encstr_A8A411E8C2D9F563A5CE86A37D92FADD4B373B" );
    wait 0.05;
    playfxontag( level.chopper_fx["_encstr_8BA90608F481F0DB"]["_encstr_A15E06265B8C79F1"], self, "_encstr_97C9103A0BECD7B1D2B31AA3BE26B2B1B1BC" );
    wait 0.05;
    playfxontag( level.chopper_fx["_encstr_8BA90608F481F0DB"]["_encstr_9CEF05339FE3F2"], self, "_encstr_87A20FB36627B971DACF89891733CFC0F4" );
}

usehelicopter( var_0, var_1 )
{
    return tryusehelicopter( var_0, "_encstr_8B010BD0951B5AC6BD83A3CAC9" );
}

tryusehelicopter( var_0, var_1 )
{
    var_2 = 1;

    if ( isdefined( level.chopper ) )
        var_3 = 1;
    else
        var_3 = 0;

    if ( isdefined( level.chopper ) && var_3 )
    {
        self iprintlnbold( &"_encstr_95C91AB492C4899AA249A2055A357D12A83194EB929CAF45AA515515" );

        if ( isdefined( var_1 ) && var_1 != "_encstr_8B010BD0951B5AC6BD83A3CAC9" )
            var_4 = "_encstr_80DD0C1A31A9077ED051CCA52D29" + var_1;
        else
            var_4 = "_encstr_8B010BD0951B5AC6BD83A3CAC9";

        var_5 = spawn( "_encstr_A3050EDF6FF5DC081CC1AFA37097B80B", ( 0, 0, 0 ) );
        var_5 hide();
        var_5 thread deleteonentnotify( self, "_encstr_8A820B4696CDB1ED3737AC1B3A" );
        var_5.player = self;
        var_5.lifeid = var_0;
        var_5.helitype = var_1;
        var_5.streakname = var_4;
        scripts\mp\utility\script::queueadd( "_encstr_8B010BD0951B5AC6BD83A3CAC9", var_5 );
        return 0;
    }
    else if ( scripts\mp\utility\killstreak::currentactivevehiclecount() >= scripts\mp\utility\killstreak::maxvehiclesallowed() || level.fauxvehiclecount + var_2 >= scripts\mp\utility\killstreak::maxvehiclesallowed() )
    {
        self iprintlnbold( &"_encstr_BA8B1EA7793D498E7339BD25B0B7784105870733D915B9F01360142CD8E31501" );
        return 0;
    }

    var_2 = 1;
    starthelicopter( var_0, var_1 );
    return 1;
}

deleteonentnotify( var_0, var_1 )
{
    self endon( "_encstr_A3750609A5E61883" );
    var_0 waittill( var_1 );
    self delete();
}

starthelicopter( var_0, var_1 )
{
    scripts\mp\utility\killstreak::incrementfauxvehiclecount();
    var_2 = undefined;

    if ( !isdefined( var_1 ) )
        var_1 = "_encstr_A40101";

    var_3 = "_encstr_8B010BD0951B5AC6BD83A3CAC9";
    var_4 = self.pers["_encstr_89EF05D46BA8FD"];
    var_2 = level.heli_start_nodes[randomint( level.heli_start_nodes.size )];
    scripts\common\utility::_id_13E0A( level._id_11B2A, var_3, self.origin );
    thread heli_think( var_0, self, var_2, self.pers["_encstr_89EF05D46BA8FD"], var_1 );
}

precachehelicoptersounds()
{
    level.heli_sound["_encstr_BC850785638DA59537"]["_encstr_B71904ABC973"] = "_encstr_A85818E65BD04117AB48ABB311FEAF0240197877CD9899C3C303";
    level.heli_sound["_encstr_BC850785638DA59537"]["_encstr_95AF0D8BE4FB5F19D317D0B817FA52"] = "_encstr_BDC51F563855B3F976E03F03F0A9BFDB01459AC19EF37A0FB8A8277318066DA3A1";
    level.heli_sound["_encstr_BC850785638DA59537"]["_encstr_BD7609BF280C2079F7B233"] = "_encstr_815B1C87FF627E400F4CF1E8341BF8B7DB3F5D774B7B4B604FE9D8805DD0";
    level.heli_sound["_encstr_BC850785638DA59537"]["_encstr_80BB0AABBB62126E73D16601"] = "_encstr_93BA1DCEC7439BCF0F6BB7786C8E40C2CB9902A8C2E8686527A84261FAFD76";
    level.heli_sound["_encstr_BC850785638DA59537"]["_encstr_8B9E06135641A77C"] = "_encstr_A6731459871C7DD02BC6961BDBE08E95C9AF33D556B1";
    level.heli_sound["_encstr_BC850785638DA59537"]["_encstr_98950C410953470980B78B67C3D2"] = "_encstr_8CDD18A08F791BAF3ADDCECEB61103E0B37FE8F0172F919B1347";
    level.heli_sound["_encstr_BA840579D3F7F6"]["_encstr_B71904ABC973"] = "_encstr_A85818E65BD04117AB48ABB311FEAF0240197877CD9899C3C303";
    level.heli_sound["_encstr_BA840579D3F7F6"]["_encstr_95AF0D8BE4FB5F19D317D0B817FA52"] = "_encstr_BDC51F563855B3F976E03F03F0A9BFDB01459AC19EF37A0FB8A8277318066DA3A1";
    level.heli_sound["_encstr_BA840579D3F7F6"]["_encstr_BD7609BF280C2079F7B233"] = "_encstr_815B1C87FF627E400F4CF1E8341BF8B7DB3F5D774B7B4B604FE9D8805DD0";
    level.heli_sound["_encstr_BA840579D3F7F6"]["_encstr_80BB0AABBB62126E73D16601"] = "_encstr_93BA1DCEC7439BCF0F6BB7786C8E40C2CB9902A8C2E8686527A84261FAFD76";
    level.heli_sound["_encstr_BA840579D3F7F6"]["_encstr_8B9E06135641A77C"] = "_encstr_A6731459871C7DD02BC6961BDBE08E95C9AF33D556B1";
    level.heli_sound["_encstr_BA840579D3F7F6"]["_encstr_98950C410953470980B78B67C3D2"] = "_encstr_8CDD18A08F791BAF3ADDCECEB61103E0B37FE8F0172F919B1347";
}

heli_getteamforsoundclip()
{
    var_0 = self.team;

    if ( level.multiteambased )
        var_0 = "_encstr_BA840579D3F7F6";

    return var_0;
}

spawn_helicopter( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = spawnhelicopter( var_0, var_1, var_2, var_3, var_4 );

    if ( !isdefined( var_5 ) )
        return undefined;

    if ( var_4 == "_encstr_82B614C34A647B10CAAA29A159ABD0B2A307937896B8" )
        var_5.heli_type = "_encstr_AF8E06E128D5250A";
    else
        var_5.heli_type = level.heli_types[var_4];

    var_5 thread [[ level.lightfxfunc[var_5.heli_type] ]]();
    var_5 scripts\mp\utility\killstreak::addtohelilist( var_5 getentitynumber() );
    var_5.zoffset = ( 0, 0, var_5 gettagorigin( "_encstr_8CB40B4BB398B1C0A81FDF6BEA" )[2] - var_5 gettagorigin( "_encstr_B9F80B1037D7466783452DB89F" )[2] );
    var_5.attractor = missile_createattractorent( var_5, level.heli_attract_strength, level.heli_attract_range );
    return var_5;
}

helidialog( var_0 )
{
    if ( gettime() - level.lasthelidialogtime < 6000 )
        return;

    level.lasthelidialogtime = gettime();
    var_1 = randomint( level.helidialog[var_0].size );
    var_2 = level.helidialog[var_0][var_1];
    var_3 = scripts\mp\utility\teams::getteamvoiceinfix( self.team ) + "_encstr_A80703E38A" + var_2;
    self playlocalsound( var_3 );
}

updateareanodes( var_0 )
{
    var_1 = [];

    foreach ( var_3 in var_0 )
    {
        var_3.validplayers = [];
        var_3.nodescore = 0;
    }

    foreach ( var_6 in level.players )
    {
        if ( !isalive( var_6 ) )
            continue;

        if ( var_6.team == self.team )
            continue;

        foreach ( var_3 in var_0 )
        {
            if ( distancesquared( var_6.origin, var_3.origin ) > 1048576 )
                continue;

            var_3.validplayers[var_3.validplayers.size] = var_6;
        }
    }

    var_10 = var_0[0];

    foreach ( var_3 in var_0 )
    {
        var_12 = getent( var_3.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        foreach ( var_6 in var_3.validplayers )
        {
            var_3.nodescore = var_3.nodescore + 1;

            if ( scripts\engine\trace::_bullet_trace_passed( var_6.origin + ( 0, 0, 32 ), var_12.origin, 0, var_6 ) )
                var_3.nodescore = var_3.nodescore + 3;
        }

        if ( var_3.nodescore > var_10.nodescore )
            var_10 = var_3;
    }

    return getent( var_10.target, "_encstr_B8CE0BE43FC317DF690862BA48" );
}

heli_think( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = var_2.origin;
    var_6 = var_2.angles;
    var_7 = "_encstr_9B3509FAB00D5A475601C0";
    var_8 = "_encstr_82B614C34A647B10CAAA29A159ABD0B2A307937896B8";
    var_9 = spawn_helicopter( var_1, var_5, var_6, var_7, var_8 );

    if ( !isdefined( var_9 ) )
        return;

    level.chopper = var_9;

    if ( var_3 == "_encstr_BC850785638DA59537" )
        level.allieschopper = var_9;
    else
        level.axischopper = var_9;

    var_9.helitype = var_4;
    var_9.lifeid = var_0;
    var_9.team = var_3;
    var_9.pers["_encstr_89EF05D46BA8FD"] = var_3;
    var_9.owner = var_1;
    var_9 setotherent( var_1 );
    var_9.startnode = var_2;
    var_9.maxhealth = level.heli_maxhealth;
    var_9.targeting_delay = level.heli_targeting_delay;
    var_9.primarytarget = undefined;
    var_9.secondarytarget = undefined;
    var_9.attacker = undefined;
    var_9.currentstate = "_encstr_AB0703F79F";
    var_9 scripts\mp\sentientpoolmanager::registersentient( "_encstr_B2860FEF13897ACB10E3FFC6F871C1E25E", var_1 );
    var_9.empgrenaded = 0;

    if ( var_4 == "_encstr_B20E070DACE628057F" || var_4 == "_encstr_9EAD081DDBA0CFBF8B28" )
        var_9 thread scripts\mp\killstreaks\flares::flares_monitor( 1 );

    var_9 thread heli_leave_on_disconnect( var_1 );
    var_9 thread heli_leave_on_changeteams( var_1 );
    var_9 thread heli_leave_on_gameended( var_1 );
    var_9 thread heli_damage_monitor( var_4 );
    var_9 thread heli_watchempdamage();
    var_9 thread heli_watchdeath();
    var_9 thread heli_existance();
    var_9 endon( "_encstr_A897106CC5A1EAE36808430F3046DC320D6D" );
    var_9 endon( "_encstr_ABBD09A7AB72DE2819ED91" );
    var_9 endon( "_encstr_982D088DCA2CD95ADCB3" );
    var_9 endon( "_encstr_A3750609A5E61883" );
    var_10 = getentarray( "_encstr_8F6E11BBD321824F0B8BE3AE81B887DA867B27", "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_11 = undefined;
    var_11 = level.heli_loop_nodes[randomint( level.heli_loop_nodes.size )];
    var_9 heli_fly_simple_path( var_2 );
    var_9 thread heli_targeting();
    var_9 thread heli_leave_on_timeout( 60.0 );
    var_9 thread heli_fly_loop_path( var_11 );
}

heli_existance()
{
    var_0 = self getentitynumber();
    scripts\engine\utility::_id_143A6( "_encstr_A3750609A5E61883", "_encstr_ABBD09A7AB72DE2819ED91", "_encstr_982D088DCA2CD95ADCB3" );
    scripts\mp\utility\killstreak::removefromhelilist( var_0 );
    self notify( "_encstr_A897106CC5A1EAE36808430F3046DC320D6D" );
    self notify( "_encstr_815213CAE179F78E20811C159D79120F1158A38269" );
    var_1 = undefined;
    var_2 = scripts\mp\utility\script::queueremovefirst( "_encstr_8B010BD0951B5AC6BD83A3CAC9" );

    if ( !isdefined( var_2 ) )
        level.chopper = undefined;
    else
    {
        var_1 = var_2.player;
        var_3 = var_2.lifeid;
        var_4 = var_2.streakname;
        var_5 = var_2.helitype;
        var_2 delete();

        if ( isdefined( var_1 ) && ( var_1.sessionstate == "_encstr_8F7508BB18675378EBC7" || var_1.sessionstate == "_encstr_816705F27BBF90" ) )
        {
            var_1 starthelicopter( var_3, var_5 );
            return;
        }

        level.chopper = undefined;
    }
}

heli_targeting()
{
    self notify( "_encstr_9F420F981D5DA331B3B6765FEA41A4E89F" );
    self endon( "_encstr_9F420F981D5DA331B3B6765FEA41A4E89F" );
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_A897106CC5A1EAE36808430F3046DC320D6D" );

    for (;;)
    {
        var_0 = [];
        self.primarytarget = undefined;
        self.secondarytarget = undefined;

        foreach ( var_2 in level.characters )
        {
            wait 0.05;

            if ( !cantarget_turret( var_2 ) )
                continue;

            var_0[var_0.size] = var_2;
        }

        if ( var_0.size )
        {
            for ( var_4 = getbestprimarytarget( var_0 ); !isdefined( var_4 ); var_4 = getbestprimarytarget( var_0 ) )
                waitframe();

            self.primarytarget = var_4;
            self notify( "_encstr_9E9511AA8E67057B1382FE90D26F55C36A3049" );
        }

        if ( isdefined( self.primarytarget ) )
        {
            fireontarget( self.primarytarget );
            continue;
        }

        wait 0.25;
    }
}

cantarget_turret( var_0 )
{
    var_1 = 1;

    if ( !isalive( var_0 ) || isdefined( var_0.sessionstate ) && var_0.sessionstate != "_encstr_8F7508BB18675378EBC7" )
        return 0;

    if ( distance( var_0.origin, self.origin ) > level.heli_visual_range )
        return 0;

    if ( !self.owner scripts\mp\utility\player::isenemy( var_0 ) )
        return 0;

    if ( isdefined( var_0.spawntime ) && ( gettime() - var_0.spawntime ) / 1000 <= 5 )
        return 0;

    if ( var_0 scripts\mp\utility\perk::_hasperk( "_encstr_BC8613CD83AC8DA5161B47CBBE4CD84B3732B2CBAC" ) )
        return 0;

    var_2 = self.origin + ( 0, 0, -160 );
    var_3 = anglestoforward( self.angles );
    var_4 = var_2 + 144 * var_3;

    if ( var_0 sightconetrace( var_4, self ) < level.heli_target_recognition )
        return 0;

    return var_1;
}

getbestprimarytarget( var_0 )
{
    foreach ( var_2 in var_0 )
    {
        if ( !isdefined( var_2 ) )
            continue;

        update_player_threat( var_2 );
    }

    var_4 = 0;
    var_5 = undefined;
    var_6 = getentarray( "_encstr_A8BC0F5BD2E6B4B55807BE36B7E4E6ACC9", "_encstr_B8CE0BE43FC317DF690862BA48" );

    foreach ( var_2 in var_0 )
    {
        if ( !isdefined( var_2 ) )
            continue;

        if ( var_6.size == 2 )
        {
            var_8 = var_6[0].origin;
            var_9 = var_6[0].origin;

            if ( var_6[1].origin[0] > var_9[0] )
                var_9 = ( var_6[1].origin[0], var_9[1], var_9[2] );
            else
                var_8 = ( var_6[1].origin[0], var_8[1], var_8[2] );

            if ( var_6[1].origin[1] > var_9[1] )
                var_9 = ( var_9[0], var_6[1].origin[1], var_9[2] );
            else
                var_8 = ( var_8[0], var_6[1].origin[1], var_8[2] );

            if ( var_2.origin[0] < var_8[0] || var_2.origin[0] > var_9[0] || var_2.origin[1] < var_8[1] || var_2.origin[1] > var_9[1] )
                continue;
        }

        if ( var_2.threatlevel < var_4 )
            continue;

        if ( !scripts\engine\trace::_bullet_trace_passed( var_2.origin + ( 0, 0, 32 ), self.origin, 0, self ) )
        {
            wait 0.05;
            continue;
        }

        var_4 = var_2.threatlevel;
        var_5 = var_2;
    }

    return var_5;
}

update_player_threat( var_0 )
{
    var_0.threatlevel = 0;
    var_1 = distance( var_0.origin, self.origin );
    var_0.threatlevel = var_0.threatlevel + ( level.heli_visual_range - var_1 ) / level.heli_visual_range * 100;

    if ( isdefined( self.attacker ) && var_0 == self.attacker )
        var_0.threatlevel = var_0.threatlevel + 100;

    if ( isplayer( var_0 ) )
        var_0.threatlevel = var_0.threatlevel + var_0.score * 4;

    if ( isdefined( var_0.antithreat ) )
        var_0.threatlevel = var_0.threatlevel - var_0.antithreat;

    if ( var_0.threatlevel <= 0 )
        var_0.threatlevel = 1;
}

heli_reset()
{
    self cleartargetyaw();
    self cleargoalyaw();
    self vehicle_setspeed( 80, 35 );
    self setyawspeed( 75, 45, 45 );
    self setmaxpitchroll( 30, 30 );
    self setneargoalnotifydist( 256 );
    self setturningability( 0.9 );
}

addrecentdamage( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self.recentdamageamount = self.recentdamageamount + var_0;
    wait 4.0;
    self.recentdamageamount = self.recentdamageamount - var_0;
}

modifydamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflags;
    var_6 = var_4;
    var_7 = 2;
    var_8 = 3;
    var_9 = 4;

    if ( isdefined( self.helitype ) && self.helitype == "_encstr_ABF20A23E47B73B29193DE1C" )
    {
        var_7 = 1;
        var_8 = 1;
        var_9 = 2;
    }

    var_6 = scripts\mp\utility\killstreak::getmodifiedantikillstreakdamage( var_1, var_2, var_3, var_6, self.maxhealth, var_7, var_8, var_9 );
    thread addrecentdamage( var_6 );
    self notify( "_encstr_8F8F0F60723DFBC6A35989F737CF8EBD60" );
    return var_6;
}

handledeathdamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflags;

    if ( isdefined( var_1 ) )
    {
        var_6 = level.heliconfigs[self.streakname];
        var_7 = scripts\mp\damage::onkillstreakkilled( self.streakname, var_1, var_2, var_3, var_4, var_6.scorepopup, var_6.destroyedvo, var_6.callout );

        if ( var_7 )
        {
            var_1 notify( "_encstr_9DE515A17AE71DB0C561DBC15FECC0E977F258ABD31756" );
            self.killingattacker = var_1;
        }
    }
}

heli_damage_monitor( var_0, var_1, var_2 )
{
    self endon( "_encstr_ABBD09A7AB72DE2819ED91" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );
    self.streakname = var_0;
    self.recentdamageamount = 0;

    if ( !istrue( var_2 ) )
        thread heli_health();

    scripts\mp\damage::monitordamage( self.maxhealth, "_encstr_8B010BD0951B5AC6BD83A3CAC9", ::handledeathdamage, ::modifydamage, 1, var_1 );
}

heli_watchempdamage()
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );
    self endon( "_encstr_ABBD09A7AB72DE2819ED91" );
    self.owner endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        self waittill( "_encstr_B3F60B314A5B38B0D6E543B715", var_0, var_1 );
        self.empgrenaded = 1;

        if ( isdefined( self.mgturretleft ) )
            self.mgturretleft notify( "_encstr_94210E32B34F979E3A7810D2057350BA" );

        if ( isdefined( self.mgturretright ) )
            self.mgturretright notify( "_encstr_94210E32B34F979E3A7810D2057350BA" );

        wait( var_1 );
        self.empgrenaded = 0;

        if ( isdefined( self.mgturretleft ) )
            self.mgturretleft notify( "_encstr_B67D12389F333E65FBF67B827829A648EA28BF2A" );

        if ( isdefined( self.mgturretright ) )
            self.mgturretright notify( "_encstr_B67D12389F333E65FBF67B827829A648EA28BF2A" );
    }
}

heli_health()
{
    self endon( "_encstr_982D088DCA2CD95ADCB3" );
    self endon( "_encstr_ABBD09A7AB72DE2819ED91" );
    self.currentstate = "_encstr_AB0703F79F";
    self.laststate = "_encstr_AB0703F79F";
    self setdamagestage( 3 );
    var_0 = 3;
    self setdamagestage( var_0 );
    var_1 = level.heliconfigs[self.streakname];

    for (;;)
    {
        self waittill( "_encstr_8F8F0F60723DFBC6A35989F737CF8EBD60" );

        if ( var_0 > 0 && self.damagetaken >= self.maxhealth )
        {
            var_0 = 0;
            self setdamagestage( var_0 );
            stopfxontag( level.chopper_fx["_encstr_B8BE07320B5B16ECAC"]["_encstr_97710C54FD933321B6F8DFCF2029"], self, var_1.enginevfxtag );
            self notify( "_encstr_A3750609A5E61883" );
            break;
        }
        else
        {
            if ( var_0 > 1 && self.damagetaken >= self.maxhealth * 0.66 )
            {
                var_0 = 1;
                self setdamagestage( var_0 );
                self.currentstate = "_encstr_9CB70CE0BFE1E627609B2897F24A";
                stopfxontag( level.chopper_fx["_encstr_B8BE07320B5B16ECAC"]["_encstr_80B00CD32889682BCFCE255D3A53"], self, var_1.enginevfxtag );
                playfxontag( level.chopper_fx["_encstr_B8BE07320B5B16ECAC"]["_encstr_97710C54FD933321B6F8DFCF2029"], self, var_1.enginevfxtag );
                continue;
            }

            if ( var_0 > 2 && self.damagetaken >= self.maxhealth * 0.33 )
            {
                var_0 = 2;
                self setdamagestage( var_0 );
                self.currentstate = "_encstr_BE640CC62DD9868E40B9B5F66D95";
                playfxontag( level.chopper_fx["_encstr_B8BE07320B5B16ECAC"]["_encstr_80B00CD32889682BCFCE255D3A53"], self, var_1.enginevfxtag );
            }
        }
    }
}

heli_watchdeath()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8F7205CA785B6B" );
    self waittill( "_encstr_A3750609A5E61883" );

    if ( isdefined( self.largeprojectiledamage ) && self.largeprojectiledamage )
        thread heli_explode( 1 );
    else
    {
        var_0 = level.heliconfigs[self.streakname];
        playfxontag( level.chopper_fx["_encstr_B8BE07320B5B16ECAC"]["_encstr_B8C108EDCB3F0571E6FF"], self, var_0.enginevfxtag );
        thread heli_crash();
    }
}

heli_crash()
{
    self notify( "_encstr_ABBD09A7AB72DE2819ED91" );
    self clearlookatent();
    var_0 = level.heli_crash_nodes[randomint( level.heli_crash_nodes.size )];

    if ( isdefined( self.mgturretleft ) )
        self.mgturretleft notify( "_encstr_94210E32B34F979E3A7810D2057350BA" );

    if ( isdefined( self.mgturretright ) )
        self.mgturretright notify( "_encstr_94210E32B34F979E3A7810D2057350BA" );

    thread heli_spin( 180 );
    thread heli_secondary_explosions();
    heli_fly_simple_path( var_0 );
    thread heli_explode();
}

heli_secondary_explosions()
{
    var_0 = heli_getteamforsoundclip();
    var_1 = level.heliconfigs[self.streakname];
    playfxontag( level.chopper_fx["_encstr_AB0808DFB97F822F1899"]["_encstr_8AEC06D3682B0F3A"], self, var_1.enginevfxtag );
    self playsound( level.heli_sound[var_0]["_encstr_95AF0D8BE4FB5F19D317D0B817FA52"] );
    wait 3.0;

    if ( !isdefined( self ) )
        return;

    playfxontag( level.chopper_fx["_encstr_AB0808DFB97F822F1899"]["_encstr_8AEC06D3682B0F3A"], self, var_1.enginevfxtag );
    self playsound( level.heli_sound[var_0]["_encstr_95AF0D8BE4FB5F19D317D0B817FA52"] );
}

heli_spin( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    var_1 = heli_getteamforsoundclip();
    self playsound( level.heli_sound[var_1]["_encstr_B71904ABC973"] );
    thread spinsoundshortly();
    self setyawspeed( var_0, var_0, var_0 );

    while ( isdefined( self ) )
    {
        self settargetyaw( self.angles[1] + var_0 * 0.9 );
        wait 1;
    }
}

spinsoundshortly()
{
    self endon( "_encstr_A3750609A5E61883" );
    wait 0.25;
    var_0 = heli_getteamforsoundclip();
    self stoploopsound();
    wait 0.05;
    self playloopsound( level.heli_sound[var_0]["_encstr_BD7609BF280C2079F7B233"] );
    wait 0.05;
    self playloopsound( level.heli_sound[var_0]["_encstr_80BB0AABBB62126E73D16601"] );
}

heli_explode( var_0 )
{
    self notify( "_encstr_A3750609A5E61883" );

    if ( isdefined( var_0 ) && isdefined( level.chopper_fx["_encstr_AB0808DFB97F822F1899"]["_encstr_8B6D0A854BC9D7192B583AD0"][self.heli_type] ) )
    {
        var_1 = self gettagangles( "_encstr_8F1E0C63A21FE6A9026144A9C0D8" );
        playfx( level.chopper_fx["_encstr_AB0808DFB97F822F1899"]["_encstr_8B6D0A854BC9D7192B583AD0"][self.heli_type], self gettagorigin( "_encstr_8F1E0C63A21FE6A9026144A9C0D8" ), anglestoforward( var_1 ), anglestoup( var_1 ) );
    }
    else
    {
        var_2 = self.origin;
        var_3 = self.origin + ( 0, 0, 1 ) - self.origin;
        playfx( level.chopper_fx["_encstr_AB0808DFB97F822F1899"]["_encstr_A3750609A5E61883"][self.heli_type], var_2, var_3 );
    }

    var_4 = heli_getteamforsoundclip();
    self playsound( level.heli_sound[var_4]["_encstr_8B9E06135641A77C"] );
    waitframe();

    if ( isdefined( self.killcament ) )
        self.killcament delete();

    scripts\mp\utility\killstreak::decrementfauxvehiclecount();
    self delete();
}

check_owner()
{
    if ( !isdefined( self.owner ) || !isdefined( self.owner.pers["_encstr_89EF05D46BA8FD"] ) || self.owner.pers["_encstr_89EF05D46BA8FD"] != self.team )
    {
        thread heli_leave();
        return 0;
    }

    return 1;
}

heli_leave_on_disconnect( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_A897106CC5A1EAE36808430F3046DC320D6D" );
    var_0 waittill( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    thread heli_leave();
}

heli_leave_on_changeteams( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_A897106CC5A1EAE36808430F3046DC320D6D" );
    var_0 scripts\engine\utility::_id_143A5( "_encstr_B2170C4AD884CDC823B9DB9D9F42", "_encstr_8CD0124A97D7F07BAD07C8C342FAA010C490DD5B" );
    thread heli_leave();
}

heli_leave_on_spawned( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_A897106CC5A1EAE36808430F3046DC320D6D" );
    var_0 waittill( "_encstr_983508635BE787C548A1" );
    thread heli_leave();
}

heli_leave_on_gameended( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_A897106CC5A1EAE36808430F3046DC320D6D" );
    level waittill( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    thread heli_leave();
}

heli_leave_on_timeout( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_A897106CC5A1EAE36808430F3046DC320D6D" );
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_0 );
    thread heli_leave();
}

fireontarget( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_ABBD09A7AB72DE2819ED91" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );
    var_1 = 15;
    var_2 = 0;
    var_3 = 0;

    foreach ( var_5 in level.heli_loop_nodes )
    {
        var_2++;
        var_3 = var_3 + var_5.origin[2];
    }

    var_7 = var_3 / var_2;
    self notify( "_encstr_AB5B0AD22D3F89F9BEF2418B" );

    if ( isdefined( self.secondarytarget ) && self.secondarytarget.damagetaken < self.secondarytarget.maxhealth )
        return;

    if ( isdefined( self.isperformingmaneuver ) && self.isperformingmaneuver )
        return;

    var_8 = self.primarytarget;
    var_8.antithreat = 0;
    var_9 = self.primarytarget.origin * ( 1, 1, 0 );
    var_10 = self.origin * ( 0, 0, 1 );
    var_11 = var_9 + var_10;
    var_12 = distance2d( self.origin, var_8.origin );

    if ( var_12 < 1000 )
        var_1 = 600;

    var_13 = anglestoforward( var_8.angles );
    var_13 = var_13 * ( 1, 1, 0 );
    var_14 = var_11 + var_1 * var_13;
    var_15 = var_14 - var_11;
    var_16 = vectortoangles( var_15 );
    var_16 = var_16 * ( 1, 1, 0 );
    thread attackgroundtarget( var_8 );
    self vehicle_setspeed( 80 );

    if ( distance2d( self.origin, var_14 ) < 1000 )
        var_14 = var_14 * 1.5;

    var_14 = var_14 * ( 1, 1, 0 );
    var_14 = var_14 + ( 0, 0, var_7 );
    _setvehgoalpos( var_14, 1, 1 );
    self waittill( "_encstr_A4D10A68F227A6614FFF4B59" );

    if ( !isdefined( var_8 ) || !isalive( var_8 ) )
        return;

    self setlookatent( var_8 );
    thread isfacing( 10, var_8 );
    scripts\engine\utility::_id_143B9( 4, "_encstr_AA9907CC58C6D2DC76" );

    if ( !isdefined( var_8 ) || !isalive( var_8 ) )
        return;

    self clearlookatent();
    var_17 = var_11 + var_1 * anglestoforward( var_16 );
    self setmaxpitchroll( 40, 30 );
    _setvehgoalpos( var_17, 1, 1 );
    self setmaxpitchroll( 30, 30 );

    if ( isdefined( var_8 ) && isalive( var_8 ) )
    {
        if ( isdefined( var_8.antithreat ) )
            var_8.antithreat = var_8.antithreat + 100;
        else
            var_8.antithreat = 100;
    }

    scripts\engine\utility::_id_143B9( 3, "_encstr_A4D10A68F227A6614FFF4B59" );
}

attackgroundtarget( var_0 )
{
    self notify( "_encstr_BD95135115A3AFFEF72133FAA825F7B3F9FEDFCDAD" );
    self endon( "_encstr_BD95135115A3AFFEF72133FAA825F7B3F9FEDFCDAD" );
    self stoploopsound();
    self.isattacking = 1;
    self setturrettargetent( var_0 );
    waitontargetordeath( var_0, 3.0 );

    if ( !isalive( var_0 ) )
        self.isattacking = 0;
    else
    {
        var_1 = distance2dsquared( self.origin, var_0.origin );

        if ( var_1 < 640000 )
        {
            thread dropbombs( var_0 );
            self.isattacking = 0;
            return;
        }
        else
        {
            if ( checkisfacing( 50, var_0 ) && scripts\engine\utility::cointoss() )
            {
                thread firemissile( var_0 );
                self.isattacking = 0;
                return;
                return;
            }

            var_2 = weaponfiretime( "_encstr_895B0E9647A363F3E11FC2208289B37B" );
            var_3 = 0;
            var_4 = 0;

            for ( var_5 = 0; var_5 < level.heli_turretclipsize; var_5++ )
            {
                if ( !isdefined( self ) )
                    break;

                if ( self.empgrenaded )
                    break;

                if ( !isdefined( var_0 ) )
                    break;

                if ( !isalive( var_0 ) )
                    break;

                if ( self.damagetaken >= self.maxhealth )
                    continue;

                if ( !checkisfacing( 55, var_0 ) )
                {
                    self stoploopsound();
                    var_4 = 0;
                    wait( var_2 );
                    var_5--;
                    continue;
                }

                if ( var_5 < level.heli_turretclipsize - 1 )
                    wait( var_2 );

                if ( !isdefined( var_0 ) || !isalive( var_0 ) )
                    break;

                if ( !var_4 )
                {
                    self playloopsound( "_encstr_B80B18EE56C238AF43B49B46FAC803DAADD7995AC995AF37388D" );
                    var_4 = 1;
                }

                self setvehweapon( "_encstr_895B0E9647A363F3E11FC2208289B37B" );
                self fireweapon( "_encstr_A94F0AD158D9BECCD80BE6A1", var_0 );
            }

            if ( !isdefined( self ) )
                return;

            self stoploopsound();
            var_4 = 0;
            self.isattacking = 0;
        }
    }
}

checkisfacing( var_0, var_1 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );

    if ( !isdefined( var_0 ) )
        var_0 = 10;

    var_2 = anglestoforward( self.angles );
    var_3 = var_1.origin - self.origin;
    var_2 = var_2 * ( 1, 1, 0 );
    var_3 = var_3 * ( 1, 1, 0 );
    var_3 = vectornormalize( var_3 );
    var_2 = vectornormalize( var_2 );
    var_4 = vectordot( var_3, var_2 );
    var_5 = cos( var_0 );

    if ( var_4 >= var_5 )
        return 1;
    else
        return 0;
}

isfacing( var_0, var_1 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );

    if ( !isdefined( var_0 ) )
        var_0 = 10;

    while ( isalive( var_1 ) )
    {
        var_2 = anglestoforward( self.angles );
        var_3 = var_1.origin - self.origin;
        var_2 = var_2 * ( 1, 1, 0 );
        var_3 = var_3 * ( 1, 1, 0 );
        var_3 = vectornormalize( var_3 );
        var_2 = vectornormalize( var_2 );
        var_4 = vectordot( var_3, var_2 );
        var_5 = cos( var_0 );

        if ( var_4 >= var_5 )
        {
            self notify( "_encstr_AA9907CC58C6D2DC76" );
            break;
        }

        wait 0.1;
    }
}

waitontargetordeath( var_0, var_1 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_A897106CC5A1EAE36808430F3046DC320D6D" );
    var_0 endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    scripts\engine\utility::waittill_notify_or_timeout( "_encstr_888811AB43D63BAF58BF677EA78076F3F4F923", var_1 );
}

firemissile( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_ABBD09A7AB72DE2819ED91" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );
    var_1 = 2;

    for ( var_2 = 0; var_2 < var_1; var_2++ )
    {
        if ( !isdefined( var_0 ) )
            return;

        if ( scripts\engine\utility::cointoss() )
        {
            var_3 = scripts\cp_mp\utility\weapon_utility::_magicbullet( getcompleteweaponname( "_encstr_B2D010712035C0290FD78A1BABF973EFC513" ), self gettagorigin( "_encstr_8FDC122BF61819BF1AA78B3B3961C778932F703B" ) - ( 0, 0, 64 ), var_0.origin, self.owner );
            var_3.vehicle_fired_from = self;
        }
        else
        {
            var_3 = scripts\cp_mp\utility\weapon_utility::_magicbullet( getcompleteweaponname( "_encstr_B2D010712035C0290FD78A1BABF973EFC513" ), self gettagorigin( "_encstr_B79C11F0D737A693D2E28E9B3D4AAF889D7378" ) - ( 0, 0, 64 ), var_0.origin, self.owner );
            var_3.vehicle_fired_from = self;
        }

        var_3 missile_settargetent( var_0 );
        var_3.owner = self;
        var_3 missile_setflightmodedirect();
        wait( 0.5 / var_1 );
    }
}

dropbombs( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_ABBD09A7AB72DE2819ED91" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );

    if ( !isdefined( var_0 ) )
        return;

    for ( var_1 = 0; var_1 < randomintrange( 2, 5 ); var_1++ )
    {
        if ( scripts\engine\utility::cointoss() )
        {
            var_2 = scripts\cp_mp\utility\weapon_utility::_magicbullet( getcompleteweaponname( "_encstr_AD010D789F56B98F0AFDA926D9D219" ), self gettagorigin( "_encstr_B79C11F0D737A693D2E28E9B3D4AAF889D7378" ) - ( 0, 0, 45 ), var_0.origin, self.owner );
            var_2.vehicle_fired_from = self;
        }
        else
        {
            var_2 = scripts\cp_mp\utility\weapon_utility::_magicbullet( getcompleteweaponname( "_encstr_AD010D789F56B98F0AFDA926D9D219" ), self gettagorigin( "_encstr_8FDC122BF61819BF1AA78B3B3961C778932F703B" ) - ( 0, 0, 45 ), var_0.origin, self.owner );
            var_2.vehicle_fired_from = self;
        }

        wait( randomfloatrange( 0.35, 0.65 ) );
    }
}

getoriginoffsets( var_0 )
{
    var_1 = self.origin;
    var_2 = var_0.origin;
    var_3 = 0;
    var_4 = 40;
    var_5 = ( 0, 0, -196 );

    for ( var_6 = scripts\engine\trace::_bullet_trace( var_1 + var_5, var_2 + var_5, 0, self ); distancesquared( var_6["_encstr_B7260923C89E8F3378E72E"], var_2 + var_5 ) > 10 && var_3 < var_4; var_6 = scripts\engine\trace::_bullet_trace( var_1 + var_5, var_2 + var_5, 0, self ) )
    {
        if ( var_1[2] < var_2[2] )
            var_1 = var_1 + ( 0, 0, 128 );
        else if ( var_1[2] > var_2[2] )
            var_2 = var_2 + ( 0, 0, 128 );
        else
        {
            var_1 = var_1 + ( 0, 0, 128 );
            var_2 = var_2 + ( 0, 0, 128 );
        }

        var_3++;
    }

    var_7 = [];
    var_7["_encstr_94AD0637D1C24ED1"] = var_1;
    var_7["_encstr_B41804CA7391"] = var_2;
    return var_7;
}

traveltonode( var_0 )
{
    var_1 = getoriginoffsets( var_0 );

    if ( var_1["_encstr_94AD0637D1C24ED1"] != self.origin )
    {
        self vehicle_setspeed( 75, 35 );
        _setvehgoalpos( var_1["_encstr_94AD0637D1C24ED1"] + ( 0, 0, 30 ), 0 );
        self setgoalyaw( var_0.angles[1] + level.heli_angle_offset );
        self waittill( "_encstr_AA7205F03A9609" );
    }

    if ( var_1["_encstr_B41804CA7391"] != var_0.origin )
    {
        if ( isdefined( var_0.script_airspeed ) && isdefined( var_0.script_accel ) )
        {
            var_2 = var_0.script_airspeed;
            var_3 = var_0.script_accel;
        }
        else
        {
            var_2 = 30 + randomint( 20 );
            var_3 = 15 + randomint( 15 );
        }

        self vehicle_setspeed( 75, 35 );
        _setvehgoalpos( var_1["_encstr_B41804CA7391"] + ( 0, 0, 30 ), 0 );
        self setgoalyaw( var_0.angles[1] + level.heli_angle_offset );
        self waittill( "_encstr_AA7205F03A9609" );
    }
}

_setvehgoalpos( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 0;

    var_2 = 0;

    if ( var_2 )
        thread _setvehgoalposadheretomesh( var_0, var_1 );
    else
        self setvehgoalpos( var_0, var_1 );
}

_setvehgoalposadheretomesh( var_0, var_1 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );
    self endon( "_encstr_ABBD09A7AB72DE2819ED91" );
    var_2 = var_0;

    for (;;)
    {
        if ( !isdefined( self ) )
            return;

        if ( scripts\engine\utility::distance_2d_squared( self.origin, var_2 ) < 65536 )
        {
            self setvehgoalpos( var_2, var_1 );
            break;
        }

        var_3 = vectortoangles( var_2 - self.origin );
        var_4 = anglestoforward( var_3 );
        var_5 = self.origin + var_4 * ( 1, 1, 0 ) * 250;
        var_6 = ( 0, 0, 2500 );
        var_7 = var_5 + ( scripts\mp\utility\killstreak::gethelipilotmeshoffset() + var_6 );
        var_8 = var_5 + ( scripts\mp\utility\killstreak::gethelipilotmeshoffset() - var_6 );
        var_9 = scripts\engine\trace::_bullet_trace( var_7, var_8, 0, self, 0, 0, 1 );
        var_10 = var_9;

        if ( isdefined( var_9["_encstr_B60E07C9FD1C2055E3"] ) && var_9["_encstr_B60E07C9FD1C2055E3"] == self && var_9["_encstr_930E073E8FC00DDF69"][2] > 0.1 )
        {
            var_11 = var_9["_encstr_B7260923C89E8F3378E72E"][2] - 4400;
            var_12 = var_11 - self.origin[2];

            if ( var_12 > 256 )
            {
                var_9["_encstr_B7260923C89E8F3378E72E"] = var_9["_encstr_B7260923C89E8F3378E72E"] * ( 1, 1, 0 );
                var_9["_encstr_B7260923C89E8F3378E72E"] = var_9["_encstr_B7260923C89E8F3378E72E"] + ( 0, 0, self.origin[2] + 256 );
            }
            else if ( var_12 < -256 )
            {
                var_9["_encstr_B7260923C89E8F3378E72E"] = var_9["_encstr_B7260923C89E8F3378E72E"] * ( 1, 1, 0 );
                var_9["_encstr_B7260923C89E8F3378E72E"] = var_9["_encstr_B7260923C89E8F3378E72E"] + ( 0, 0, self.origin[2] - 256 );
            }

            var_10 = var_9["_encstr_B7260923C89E8F3378E72E"] - scripts\mp\utility\killstreak::gethelipilotmeshoffset() + ( 0, 0, 600 );
        }
        else
            var_10 = var_2;

        self setvehgoalpos( var_10, 0 );
        wait 0.15;
    }
}

heli_fly_simple_path( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );
    self notify( "_encstr_A85507F64958CC232C" );
    self endon( "_encstr_A85507F64958CC232C" );
    heli_reset();
    var_1 = var_0;

    while ( isdefined( var_1.target ) )
    {
        var_2 = getent( var_1.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        if ( isdefined( var_1.script_airspeed ) && isdefined( var_1.script_accel ) )
        {
            var_3 = var_1.script_airspeed;
            var_4 = var_1.script_accel;
        }
        else
        {
            var_3 = 30 + randomint( 20 );
            var_4 = 15 + randomint( 15 );
        }

        if ( isdefined( self.isattacking ) && self.isattacking )
        {
            waitframe();
            continue;
        }

        if ( isdefined( self.isperformingmaneuver ) && self.isperformingmaneuver )
        {
            waitframe();
            continue;
        }

        self vehicle_setspeed( 75, 35 );

        if ( !isdefined( var_2.target ) )
        {
            _setvehgoalpos( var_2.origin + self.zoffset, 1 );
            self waittill( "_encstr_A4D10A68F227A6614FFF4B59" );
        }
        else
        {
            _setvehgoalpos( var_2.origin + self.zoffset, 0 );
            self waittill( "_encstr_A4D10A68F227A6614FFF4B59" );
            self setgoalyaw( var_2.angles[1] );
            self waittillmatch( "_encstr_AA7205F03A9609" );
        }

        var_1 = var_2;
    }
}

heli_fly_loop_path( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_ABBD09A7AB72DE2819ED91" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );
    self notify( "_encstr_A85507F64958CC232C" );
    self endon( "_encstr_A85507F64958CC232C" );
    heli_reset();
    thread heli_loop_speed_control( var_0 );
    var_1 = var_0;

    while ( isdefined( var_1.target ) )
    {
        var_2 = getent( var_1.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        if ( isdefined( self.isperformingmaneuver ) && self.isperformingmaneuver )
        {
            wait 0.25;
            continue;
        }

        if ( isdefined( self.isattacking ) && self.isattacking )
        {
            wait 0.1;
            continue;
        }

        if ( isdefined( var_1.script_airspeed ) && isdefined( var_1.script_accel ) )
        {
            self.desired_speed = var_1.script_airspeed;
            self.desired_accel = var_1.script_accel;
        }
        else
        {
            self.desired_speed = 30 + randomint( 20 );
            self.desired_accel = 15 + randomint( 15 );
        }

        if ( self.helitype == "_encstr_B20E070DACE628057F" )
        {
            self.desired_speed = self.desired_speed * 0.5;
            self.desired_accel = self.desired_accel * 0.5;
        }

        if ( isdefined( var_2.script_delay ) && isdefined( self.primarytarget ) && !heli_is_threatened() )
        {
            _setvehgoalpos( var_2.origin + self.zoffset, 1, 1 );
            self waittill( "_encstr_A4D10A68F227A6614FFF4B59" );
            wait( var_2.script_delay );
        }
        else
        {
            _setvehgoalpos( var_2.origin + self.zoffset, 0, 1 );
            self waittill( "_encstr_A4D10A68F227A6614FFF4B59" );
            self setgoalyaw( var_2.angles[1] );
            self waittillmatch( "_encstr_AA7205F03A9609" );
        }

        var_1 = var_2;
    }
}

heli_loop_speed_control( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_ABBD09A7AB72DE2819ED91" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );

    if ( isdefined( var_0.script_airspeed ) && isdefined( var_0.script_accel ) )
    {
        self.desired_speed = var_0.script_airspeed;
        self.desired_accel = var_0.script_accel;
    }
    else
    {
        self.desired_speed = 30 + randomint( 20 );
        self.desired_accel = 15 + randomint( 15 );
    }

    var_1 = 0;
    var_2 = 0;

    for (;;)
    {
        var_3 = self.desired_speed;
        var_4 = self.desired_accel;

        if ( isdefined( self.isattacking ) && self.isattacking )
        {
            waitframe();
            continue;
        }

        if ( self.helitype != "_encstr_B20E070DACE628057F" && isdefined( self.primarytarget ) && !heli_is_threatened() )
            var_3 = var_3 * 0.25;

        if ( var_1 != var_3 || var_2 != var_4 )
        {
            self vehicle_setspeed( 75, 35 );
            var_1 = var_3;
            var_2 = var_4;
        }

        wait 0.05;
    }
}

heli_is_threatened()
{
    if ( self.recentdamageamount > 50 )
        return 1;

    if ( self.currentstate == "_encstr_9CB70CE0BFE1E627609B2897F24A" )
        return 1;

    return 0;
}

heli_fly_well( var_0 )
{
    self notify( "_encstr_A85507F64958CC232C" );
    self endon( "_encstr_A85507F64958CC232C" );
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_ABBD09A7AB72DE2819ED91" );
    self endon( "_encstr_982D088DCA2CD95ADCB3" );

    for (;;)
    {
        if ( isdefined( self.isattacking ) && self.isattacking )
        {
            waitframe();
            continue;
        }

        var_1 = get_best_area_attack_node( var_0 );
        traveltonode( var_1 );

        if ( isdefined( var_1.script_airspeed ) && isdefined( var_1.script_accel ) )
        {
            var_2 = var_1.script_airspeed;
            var_3 = var_1.script_accel;
        }
        else
        {
            var_2 = 30 + randomint( 20 );
            var_3 = 15 + randomint( 15 );
        }

        self vehicle_setspeed( 75, 35 );
        _setvehgoalpos( var_1.origin + self.zoffset, 1 );
        self setgoalyaw( var_1.angles[1] + level.heli_angle_offset );

        if ( level.heli_forced_wait != 0 )
        {
            self waittill( "_encstr_A4D10A68F227A6614FFF4B59" );
            wait( level.heli_forced_wait );
            continue;
        }

        if ( !isdefined( var_1.script_delay ) )
        {
            self waittill( "_encstr_A4D10A68F227A6614FFF4B59" );
            wait( 5 + randomint( 5 ) );
            continue;
        }

        self waittillmatch( "_encstr_AA7205F03A9609" );
        wait( var_1.script_delay );
    }
}

get_best_area_attack_node( var_0 )
{
    return updateareanodes( var_0 );
}

heli_leave( var_0 )
{
    self notify( "_encstr_982D088DCA2CD95ADCB3" );
    self clearlookatent();

    if ( isdefined( self.helitype ) && self.helitype == "_encstr_9F4307A0165A95BF12" && isdefined( self.pathgoal ) )
    {
        _setvehgoalpos( self.pathgoal, 1 );
        scripts\engine\utility::_id_143B9( 5, "_encstr_AA7205F03A9609" );
    }

    if ( !isdefined( var_0 ) )
    {
        var_1 = level.heli_leave_nodes[randomint( level.heli_leave_nodes.size )];
        var_0 = var_1.origin;
    }

    var_2 = spawn( "_encstr_A3050EDF6FF5DC081CC1AFA37097B80B", var_0 );

    if ( isdefined( var_2 ) )
    {
        self setlookatent( var_2 );
        var_2 thread wait_and_delete( 3.0 );
    }

    var_3 = ( var_0 - self.origin ) * 2000;
    heli_reset();
    self vehicle_setspeed( 180, 45 );
    _setvehgoalpos( var_3, 1 );
    scripts\engine\utility::_id_143B9( 12, "_encstr_AA7205F03A9609" );
    self notify( "_encstr_8F7205CA785B6B" );
    self notify( "_encstr_A3750609A5E61883" );
    waitframe();

    if ( isdefined( self.killcament ) )
        self.killcament delete();

    scripts\mp\utility\killstreak::decrementfauxvehiclecount();
    self delete();
}

wait_and_delete( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    wait( var_0 );
    self delete();
}

debug_print3d( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( level.heli_debug ) && level.heli_debug == 1.0 )
        thread draw_text( var_0, var_1, var_2, var_3, var_4 );
}

debug_print3d_simple( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( level.heli_debug ) && level.heli_debug == 1.0 )
    {
        if ( isdefined( var_3 ) )
            thread draw_text( var_0, ( 0.8, 0.8, 0.8 ), var_1, var_2, var_3 );
        else
            thread draw_text( var_0, ( 0.8, 0.8, 0.8 ), var_1, var_2, 0 );
    }
}

debug_line( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( level.heli_debug ) && level.heli_debug == 1.0 && !isdefined( var_3 ) )
        thread draw_line( var_0, var_1, var_2 );
    else if ( isdefined( level.heli_debug ) && level.heli_debug == 1.0 )
        thread draw_line( var_0, var_1, var_2, var_3 );
}

draw_text( var_0, var_1, var_2, var_3, var_4 )
{
    if ( var_4 == 0 )
    {
        while ( isdefined( var_2 ) )
            wait 0.05;
    }
    else
    {
        for ( var_5 = 0; var_5 < var_4; var_5++ )
        {
            if ( !isdefined( var_2 ) )
                break;

            wait 0.05;
        }
    }
}

draw_line( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_3 ) )
    {
        for ( var_4 = 0; var_4 < var_3; var_4++ )
            wait 0.05;
    }
    else
    {
        for (;;)
            wait 0.05;
    }
}

exceededmaxlittlebirds( var_0 )
{
    if ( level.littlebirds.size >= 4 || level.littlebirds.size >= 2 && var_0 == "_encstr_BEC911B8EB8BCD335050F840FCA69FC5A8B6AF" )
        return 1;
    else
        return 0;
}

pavelowmadeselectionvo()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self playlocalsound( game["_encstr_8B8206834A2DD711"][self.team] + "_encstr_B8B40F6CD25748B73367C1EBEB6A712817" );
    wait 3.5;
    self playlocalsound( game["_encstr_8B8206834A2DD711"][self.team] + "_encstr_93920F2492EF9AAE89BFF83E266F05D0CA" );
}

lbonkilled()
{
    self endon( "_encstr_8F7205CA785B6B" );

    if ( !isdefined( self ) )
        return;

    self notify( "_encstr_ABBD09A7AB72DE2819ED91" );

    if ( isdefined( self.largeprojectiledamage ) && self.largeprojectiledamage )
        waitframe();
    else
    {
        self vehicle_setspeed( 25, 5 );
        thread lbspin( randomintrange( 180, 220 ) );
        wait( randomfloatrange( 1.0, 2.0 ) );
    }

    lbexplode();
}

lbspin( var_0 )
{
    self endon( "_encstr_AB0808DFB97F822F1899" );
    playfxontag( level.chopper_fx["_encstr_AB0808DFB97F822F1899"]["_encstr_975E0745B1387143B9"], self, "_encstr_8C5B0F0BA7CBDA7F6B50E387D0A6328299" );
    thread trail_fx( level.chopper_fx["_encstr_BE72069FCF8ACAA8"]["_encstr_89A606647398D382"], "_encstr_8C5B0F0BA7CBDA7F6B50E387D0A6328299", "_encstr_AADF10CDA3BDC1401DB04BC608B9B6DEB62B" );
    self setyawspeed( var_0, var_0, var_0 );

    while ( isdefined( self ) )
    {
        self settargetyaw( self.angles[1] + var_0 * 0.9 );
        wait 1;
    }
}

lbexplode()
{
    var_0 = self.origin + ( 0, 0, 1 ) - self.origin;
    var_1 = self gettagangles( "_encstr_8F1E0C63A21FE6A9026144A9C0D8" );
    playfx( level.chopper_fx["_encstr_AB0808DFB97F822F1899"]["_encstr_8B6D0A854BC9D7192B583AD0"]["_encstr_AF780B2BB413BB19DDC2C34DD0"], self gettagorigin( "_encstr_8F1E0C63A21FE6A9026144A9C0D8" ), anglestoforward( var_1 ), anglestoup( var_1 ) );
    self playsound( "_encstr_A6731459871C7DD02BC6961BDBE08E95C9AF33D556B1" );
    self notify( "_encstr_AB0808DFB97F822F1899" );
    removelittlebird();
}

trail_fx( var_0, var_1, var_2 )
{
    self notify( var_2 );
    self endon( var_2 );
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        playfxontag( var_0, self, var_1 );
        wait 0.05;
    }
}

removelittlebird()
{
    if ( isdefined( self.mgturretleft ) )
    {
        if ( isdefined( self.mgturretleft.killcament ) )
            self.mgturretleft.killcament delete();

        self.mgturretleft delete();
    }

    if ( isdefined( self.mgturretright ) )
    {
        if ( isdefined( self.mgturretright.killcament ) )
            self.mgturretright.killcament delete();

        self.mgturretright delete();
    }

    if ( isdefined( self.marker ) )
        self.marker delete();

    if ( isdefined( level.heli_pilot[self.team] ) && level.heli_pilot[self.team] == self )
        level.heli_pilot[self.team] = undefined;

    scripts\mp\utility\killstreak::decrementfauxvehiclecount();
    self delete();
}
