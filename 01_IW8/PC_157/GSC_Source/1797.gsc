// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

powershud_init()
{
    var_0 = spawnstruct();
    level.power_hud_info = var_0;
    var_0.omnvarnames = [ "_encstr_987F080E394BDAC2E45E", "_encstr_B98F0AC7D5B99F4DDBA8353B" ];
    var_0.omnvarnames["_encstr_987F080E394BDAC2E45E"][0] = "_encstr_981E15236F39F7A8AF87AB066D7560B8129383B5FF223E";
    var_0.omnvarnames["_encstr_987F080E394BDAC2E45E"][1] = "_encstr_8CA415E5C3591BE0FB6D757E3B872878E7A31B0A87397B";
    var_0.omnvarnames["_encstr_987F080E394BDAC2E45E"][2] = "_encstr_A8A9121DB1D8633FB451228938FD1F5237C3A739";
    var_0.omnvarnames["_encstr_987F080E394BDAC2E45E"][3] = "_encstr_BC980CEF70D630B2A7FDCA89D3B9";
    var_0.omnvarnames["_encstr_987F080E394BDAC2E45E"][4] = "_encstr_8F59115328A8CBD5A8D35277F740DD9FE5C02A";
    var_0.omnvarnames["_encstr_987F080E394BDAC2E45E"][5] = "_encstr_8A3E12BB903FA0E83B7D53963C53F647B0389BBF";
    var_0.omnvarnames["_encstr_987F080E394BDAC2E45E"][6] = "_encstr_82800F407A39111827653EA06BF301D11F";
    var_0.omnvarnames["_encstr_B98F0AC7D5B99F4DDBA8353B"][0] = "_encstr_822B1F5D2DBEC1F6BB95C9FA6E59C6F6DCC858E4E5BECDD5B6FAC6D016933B9537";
    var_0.omnvarnames["_encstr_B98F0AC7D5B99F4DDBA8353B"][1] = "_encstr_A60E1FF388086B750873B29737F03E4FC8810A0B12E0D72E481FDBB82B90C7AFEE";
    var_0.omnvarnames["_encstr_B98F0AC7D5B99F4DDBA8353B"][2] = "_encstr_B6FA1C4F4B3893FF3029E2A103483BBA08F9A7DBF340FBADA890DEF2B910";
    var_0.omnvarnames["_encstr_B98F0AC7D5B99F4DDBA8353B"][3] = "_encstr_80E716BA2DBE83DEEE5927F54B91FA9B2B1B7B739185E4BC";
    var_0.omnvarnames["_encstr_B98F0AC7D5B99F4DDBA8353B"][4] = "_encstr_8C051B0DEC415140DF37086947E519B7BA578F1640F93F08BE7708E0E7";
    var_0.omnvarnames["_encstr_B98F0AC7D5B99F4DDBA8353B"][5] = "_encstr_98E41C57B4AF07DEDD9593D7E659C67B37462CE45ED7C8D2DC589836B246";
    var_0.omnvarnames["_encstr_B98F0AC7D5B99F4DDBA8353B"][6] = "_encstr_AA791905A9BFCB1713824819DBAFC7E0A34C877E21171379FEFBF8";
}

powershud_assignpower( var_0, var_1, var_2, var_3 )
{
    if ( var_0 == "_encstr_81DB0937D8394BC147AC46" )
        return;

    self setclientomnvar( powershud_getslotomnvar( var_0, 3 ), var_1 );
    var_4 = scripts\engine\utility::ter_op( var_2, 1000, 0 );
    self setclientomnvar( powershud_getslotomnvar( var_0, 2 ), var_4 );

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    self setclientomnvar( powershud_getslotomnvar( var_0, 0 ), var_3 );
    self setclientomnvar( powershud_getslotomnvar( var_0, 4 ), 0 );
}

powershud_clearpower( var_0 )
{
    if ( var_0 == "_encstr_81DB0937D8394BC147AC46" )
        return;

    self setclientomnvar( powershud_getslotomnvar( var_0, 3 ), -1 );
    self setclientomnvar( powershud_getslotomnvar( var_0, 2 ), -1 );
    self setclientomnvar( powershud_getslotomnvar( var_0, 0 ), 0 );
    self setclientomnvar( powershud_getslotomnvar( var_0, 4 ), -1 );
}

powershud_updatepowercharges( var_0, var_1 )
{
    self setclientomnvar( powershud_getslotomnvar( var_0, 0 ), int( var_1 ) );
}

powershud_updatepowermaxcharges( var_0, var_1 )
{
    self setclientomnvar( powershud_getslotomnvar( var_0, 1 ), int( var_1 ) );
}

powershud_updatepowerdrain( var_0, var_1 )
{
    self setclientomnvar( powershud_getslotomnvar( var_0, 4 ), var_1 );
}

powershud_updatepowermeter( var_0, var_1 )
{
    self setclientomnvar( powershud_getslotomnvar( var_0, 2 ), int( var_1 ) );
}

powershud_updatepowerdisabled( var_0, var_1 )
{
    self setclientomnvar( powershud_getslotomnvar( var_0, 5 ), var_1 );
}

powershud_updatepoweroffcooldown( var_0, var_1 )
{
    var_2 = scripts\engine\utility::ter_op( var_1, 1, 0 );
    self setclientomnvar( powershud_getslotomnvar( var_0, 6 ), var_2 );
}

powershud_updatepowerstate( var_0, var_1 )
{
    self setclientomnvar( powershud_getslotomnvar( var_0, 6 ), var_1 );
}

powershud_beginpowerdrain( var_0 )
{
    powershud_updatepowerdrain( var_0, 1 );
}

powershud_endpowerdrain( var_0 )
{
    powershud_updatepowerdrain( var_0, 0 );
}

powershud_beginpowercooldown( var_0, var_1 )
{
    powershud_updatepowermeter( var_0, 0 );

    if ( isdefined( var_1 ) && var_1 )
        powershud_updatepowerdisabled( var_0, 1 );

    powershud_updatepowerstate( var_0, 1 );
}

powershud_finishpowercooldown( var_0, var_1 )
{
    powershud_updatepowermeter( var_0, 1000 );

    if ( isdefined( var_1 ) && var_1 )
        powershud_updatepowerdisabled( var_0, 0 );

    if ( var_0 == "_encstr_987F080E394BDAC2E45E" )
        self playlocalsound( "_encstr_A6C71623EF7A767DFFDB49C0E2541389236934AD6F8F9999" );
    else
        self playlocalsound( "_encstr_A6C71623EF7A767DFFDB49C0E2541389236934AD6F8F9999" );

    powershud_updatepowerstate( var_0, 0 );
}

powershud_updatepowercooldown( var_0, var_1 )
{
    powershud_updatepowermeter( var_0, 1000 * var_1 );
}

powershud_updatepowerdrainprogress( var_0, var_1 )
{
    powershud_updatepowermeter( var_0, 1000 * var_1 );
}

powershud_getslotomnvar( var_0, var_1 )
{
    if ( var_0 == "_encstr_81DB0937D8394BC147AC46" )
        return;

    return level.power_hud_info.omnvarnames[var_0][var_1];
}
