// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

attachmentgroup( var_0 )
{
    return tablelookup( "_encstr_AF9F1761CA261343BC47A0F01FC558613B366E7967CEDF6B86", 4, var_0, 2 );
}

init()
{
    level.scavenger_altmode = 1;
    level.scavenger_secondary = 1;
    level._id_12E38 = getdvarint( "_encstr_BD2E1837D839AF31E4BEDC682DB9C6597323A5589CE5EBC8AD9D", 12 );
    level._id_12E39 = getdvarfloat( "_encstr_A4391DE6C6397D26C97DCD43A537362BE6C8A5C2C95EEBA396C6DAE42C1D95", 0.25 );
    level.maxperplayerexplosives = max( scripts\mp\utility\dvars::getintproperty( "_encstr_A8531BB9C627F5AD85E10A2B9314360BF2ACE4A21E38C6EDDCB4CE956E", 2 ), 1 );
    level.riotshieldxpbullets = scripts\mp\utility\dvars::getintproperty( "_encstr_BC6E18E78F23A89879CD934F345168791A0BD90D4F6A89F89C22", 15 );
    createthreatbiasgroup( "_encstr_8A980F11DE9DDC44DEE68E288EE82C1BAD" );
    createthreatbiasgroup( "_encstr_8B670533FFAC2B" );
    setignoremegroup( "_encstr_8A980F11DE9DDC44DEE68E288EE82C1BAD", "_encstr_8B670533FFAC2B" );

    switch ( scripts\mp\utility\dvars::getintproperty( "_encstr_9F8E13773F93C4010F9F519EB51B8AD09354F090CF", 0 ) )
    {
        case 1:
            level.scavenger_altmode = 0;
            break;
        case 2:
            level.scavenger_secondary = 0;
            break;
        case 3:
            level.scavenger_altmode = 0;
            level.scavenger_secondary = 0;
            break;
    }

    buildweaponmap();
    buildattachmentmaps();
    level._effect["_encstr_AD12094DA5FB479B843F90"] = loadfx( "_encstr_9D7F269D991E79B1B79C59CBDAE0BCACC5AB5A07B556B9D15E67663CD7AC6BE0FACE9CAC9BC2C8AC" );
    level._effect["_encstr_B8921295C5AE2D075BACDCE8EB56871C8DDB32CA"] = loadfx( "_encstr_8043334DD5B11E8A5C468EE1732057E5D760F03B8AC25BDA20E8F879DF57267DF24BB221174B3DA42B7FCD0BF9C7DBE3D3CD13AC08" );
    level._effect["_encstr_977510B14FCD58281FB0B50D5EAB6860EF05"] = loadfx( "_encstr_A91831CE990F978DF6C959BC6B38CBDAB4D81B6E3AC9B2B0B5CD79EC99F0EBCDCE7D322C6BB03BACBE311B586CB59BB67B6D95" );
    level._effect["_encstr_AB1E116823DD20BB0A90456B07AEEB50CDD268"] = loadfx( "_encstr_AF1231166C52E68E8FD812CE58C9D5BF28C184ABFDFB37D6AFF8BE5328F1310701B8042293E6779B7D8102AB8001754F789096" );
    level._effect["_encstr_877608807A621B2867B5"] = loadfx( "_encstr_80EA3523F65B9A57A7685785BB8537E8E303B0CA43C62C1D70731F372F91775390AEC1D29F969E1243DFAFF2206ABD5EDCAA93852738D8" );
    level._effect["_encstr_B86817C3D64BAD95266093A234B239B6963A9512B7BACDC6CA"] = loadfx( "_encstr_B81932F3DD38ED14CF7781157317A8F3353FB275DD53D01A23B102B9D83D2B9B7D12EF5B51E94CE7635108EB1FC7390F90A82621" );
    level._effect["_encstr_BEBE09C1844B1D89B46B98"] = loadfx( "_encstr_B14835CECCF05ED2DD70BCBB2B0B83F2EB5A6B8316D81D79D7B6E80FBC1C984BD1BCCE33F0F54BB6C1D7B6E81EAFC1C4D2D17DB1A56B26" );
    level._effect["_encstr_AFE00A8A4321CBE9CAAA9690"] = loadfx( "_encstr_8CE336DD56305293FF9FF0E3527FD79A01A16349F95ED0C837E2930A1E3286D0634FADED7809F021B3B9887353D763407C8C777107AA9878" );
    level._effect["_encstr_AD9C0991EB72DDA995AE71"] = loadfx( "_encstr_B967350B5FB0B27BA33ABF0767EA3F6A7F7490430613209759773101B6A70E100C5D7B19E84770E983D70B11C3B96BB0B9E3C650D7A1D0" );
    level._effect["_encstr_B1280A1D569BD82CC44BD613"] = loadfx( "_encstr_80012E76CDC0CDAFB412EE5381878385A1BB15F85BB0A36E485053ABA066FFC8CA3D96688F702C570949DAC1D0330746" );
    level._effect["_encstr_AD430B0D25A759C18CBF4ACB55"] = loadfx( "_encstr_A10A2F8BDD581F7F1FF8C63B207050608720D283D1429B6FF608136318A82F09580DB03047B1C34627311D47FBB716B648" );
    level._effect["_encstr_8F450AC303E3A9E7F991799C"] = loadfx( "_encstr_A3E32E84113B06A3B7985D17475F1B26F6D110A88631EB904FE87370BDE5261360B3C260B90BA1830D256507F3710F89" );
    level._effect["_encstr_A84E0FB0C2C6070D85C446FA2B1E3863DE"] = loadfx( "_encstr_BAEE3388A340D0E35B28B0A112F633C3957740D837FEF33733A71BA0AECA19ABE0EFC2BA77988B7FDA0F9E3D847243B655E350C0CF" );
    scripts\mp\utility\entity::placeequipmentfailedinit();
    level.weaponconfigs = [];

    if ( !isdefined( level.weapondropfunction ) )
        level.weapondropfunction = ::dropweaponfordeath;

    var_0 = 25;
    level.sticky_minedetectiondot = cos( var_0 );
    level.sticky_minedetectionmindist = 15;
    level.sticky_minedetectiongraceperiod = 0.35;
    level.sticky_minedetonateradius = 256;
    level.minedetectiongraceperiod = 0.3;
    level.primary_weapon_array = [];
    level.side_arm_array = [];
    level.grenade_array = [];
    level.missile_array = [];
    level.inventory_array = [];
    level.mines = [];
    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::onplayerspawned );
    level thread onplayerconnect();
    scripts\mp\utility\outline::initoutlineoccluders();
    init_function_refs();
    level._id_120AD = _calloutmarkerping_handleluinotify_acknowledgedcancel::friendlyfire_allowed();
    level._id_120AE = _calloutmarkerping_handleluinotify_acknowledgedcancel::friendlyfire_allowed();

    if ( getdvarint( "_encstr_A870198BDFFAD020E2536345279B70C082B7B3E6475E4866AA1751" ) == 1 )
        level thread savegraverobberammo();
}

savegraverobberammo()
{
    for (;;)
    {
        if ( isdefined( level.players ) )
        {
            foreach ( var_1 in level.players )
            {
                if ( !isdefined( var_1 ) )
                    continue;

                if ( var_1 scripts\mp\utility\perk::_hasperk( "_encstr_AD7318FB8AFD802BB21B594BBFFB667091E2E6F37721D0D09A5F" ) )
                {
                    var_2 = var_1 getcurrentweapon();
                    var_1 getcurrentweapon();

                    if ( !isdefined( var_2 ) )
                        continue;

                    if ( !isdefined( var_1.graverobberammo ) )
                    {
                        var_1.graverobberammo = spawnstruct();
                        var_1.graverobberammo = spawnstruct();
                        var_1.graverobberammo = spawnstruct();
                    }

                    if ( isdefined( var_1.graverobberammo.currentweapon ) && var_1.graverobberammo.currentweapon.weapon.basename != "_encstr_AABA05236DC831" && var_1.graverobberammo.currentweapon.weapon != var_2 )
                    {
                        var_1.graverobberammo.lastweapon = var_1.graverobberammo.currentweapon;
                        var_1.graverobberammo.currentweapon = spawnstruct();
                    }

                    var_1.graverobberammo.currentweapon = spawnstruct();
                    var_1.graverobberammo.currentweapon.weapon = var_2;
                    var_1.graverobberammo.currentweapon.rightclip = var_1 getweaponammoclip( var_2, "_encstr_9353062E718710C9" );
                    var_1.graverobberammo.currentweapon.leftclip = var_1 getweaponammoclip( var_2, "_encstr_B1AD05C65666E8" );
                    var_1.graverobberammo.currentweapon.stock = var_1 getweaponammostock( var_2 );
                    continue;
                }

                var_1.graverobberammo = undefined;
            }
        }

        waitframe();
    }
}

enablevisibilitycullingforclient( var_0 )
{
    self hudoutlinedisableforclient( var_0 );
}

onplayerconnect()
{
    for (;;)
    {
        level waittill( "_encstr_87940A7F075A88E8ABD37951", var_0 );
        var_0.hits = 0;
        scripts\mp\gamelogic::sethasdonecombat( var_0, 0 );
        var_0 thread watchmissileusage();
    }
}

watchchangeweapon()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_8CD0124A97D7F07BAD07C8C342FAA010C490DD5B" );
    self endon( "_encstr_A1D70BDE071B53794F208AE3F8" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        var_0 = self getcurrentweapon();

        if ( isdefined( var_0 ) )
            dochangeweapon( var_0 );

        self waittill( "_encstr_89390E4C39FEB818C099781C19966AEB" );
    }
}

dochangeweapon( var_0 )
{
    if ( istrue( self.get_alive_players ) )
        _id_119AD( var_0 );

    self.get_alive_players = 1;
    updatecamoscripts( var_0, self.lastweaponobj );
    updateweaponspeed( var_0 );
    updatelastweaponobj( var_0 );
    updatelauncherusage();
    updatesniperglint( var_0 );
    updateweaponperks();
    _id_13FD2( var_0 );
    _id_13FFC( var_0 );
    _id_12F87( var_0 );
    scripts\mp\perks\perkfunctions::updatedefaultflinchreduction();
    scripts\mp\events::updateweaponchangetime();
    scripts\mp\class::riotshieldonweaponchange( var_0 );
    scripts\mp\perks\perkfunctions::updateweaponkick();
    thread scripts\cp_mp\gestures::_id_13E1A();
}

_id_12F87( var_0 )
{
    if ( istrue( level.loadout_updateammo ) )
        return;

    if ( _id_132F2( var_0 ) )
    {
        scripts\common\utility::allow_mount_top( 0, "_encstr_BCC715979F6EC220E8E92765C088764BDD232F570599CA" );
        scripts\common\utility::allow_mount_side( 0, "_encstr_BCC715979F6EC220E8E92765C088764BDD232F570599CA" );
        thread _id_12F88();
    }
}

_id_12F88()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    scripts\engine\utility::_id_143A5( "_encstr_A3750609A5E61883", "_encstr_89390E4C39FEB818C099781C19966AEB" );
    scripts\common\utility::allow_mount_top( 1, "_encstr_BCC715979F6EC220E8E92765C088764BDD232F570599CA" );
    scripts\common\utility::allow_mount_side( 1, "_encstr_BCC715979F6EC220E8E92765C088764BDD232F570599CA" );
}

_id_13FFC( var_0 )
{
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_2 = undefined;

    if ( var_1 == "_encstr_8F610A500B9AD828F501AD93" )
    {
        if ( var_0.basename == "_encstr_B7AA1613B7B041020B3A6931613F47303E2C8FE94D0BB0F5" )
            var_2 = "_encstr_BE220F0F544A58F3159160AB351B40812B";
        else if ( var_0.basename == "_encstr_BC4A0E8FC73BD14B6838975F169898FA" && var_0.attachmentvarindices["_encstr_BA9B0AC56351740B037192EA"] == 9 )
            var_2 = "_encstr_AFBD0D154011A7CCA05F3378B8D6FB";
        else if ( var_0.basename == "_encstr_9E4A0EB7A81247AAFD93B76F90935304" && var_0.attachmentvarindices["_encstr_B99B0A5B2B7DDAE6B4332B46"] == 1 )
            var_2 = "_encstr_8BC80EAD11E01603EEF0D258384B934F";
    }

    if ( isdefined( var_2 ) )
        thread _id_11DF9( var_2 );

    return 1;
}

_id_11DF9( var_0 )
{
    self endon( "_encstr_89390E4C39FEB818C099781C19966AEB" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self notify( "_encstr_BC67123D0BDFA779B804D7F831A35EC33B326D7B" );
    self endon( "_encstr_BC67123D0BDFA779B804D7F831A35EC33B326D7B" );
    var_1 = "_encstr_B25D08773BC0C295880E" + var_0;
    thread _id_11DF7( var_1 );
    childthread _id_11DFB( var_0, var_1 );
    childthread _id_11DFE( var_0, var_1 );
    childthread _id_11DFD( var_0, var_1 );
}

_id_11DFE( var_0, var_1 )
{
    for (;;)
    {
        self waittill( "_encstr_B3C216770F8AA7D8C679DB539CA4C0D301CFF9E3FB03E548" );

        if ( self isthrowinggrenade() )
        {
            _id_11DFA( var_1 );
            self waittill( "_encstr_BC630CF633331AC237327D959B8C" );
            childthread _id_11DFB( var_0, var_1 );
            continue;
        }

        if ( self isonladder() )
            _id_11DF8( var_0, var_1 );
    }
}

_id_11DFD( var_0, var_1 )
{
    for (;;)
    {
        self waittill( "_encstr_BC6A0BFD03C643FA85801FCE42" );

        if ( self isonladder() )
            _id_11DF8( var_0, var_1 );
    }
}

_id_11DF8( var_0, var_1 )
{
    _id_11DFA( var_1 );

    while ( self isonladder() )
        waitframe();

    childthread _id_11DFC( var_0, var_1 );
}

_id_11DFB( var_0, var_1 )
{
    self notify( var_1 );
    self endon( var_1 );
    self._id_12745 = 1;
    self setscriptablepartstate( "_encstr_BD7B133F9059A010E64D89E8BB810B633DB027BB98", var_0 );
    self setscriptablepartstate( "_encstr_AACB140FF8F9A82A3DCC7FE054D7334CA151F7CB40F0", "_encstr_9BA4080D39CFFB5AB7C1" );
    var_2 = 0.4;
    wait( var_2 );
    self setscriptablepartstate( "_encstr_AACB140FF8F9A82A3DCC7FE054D7334CA151F7CB40F0", var_0, 0 );
}

_id_11DFC( var_0, var_1 )
{
    self notify( var_1 );
    self endon( var_1 );
    self._id_12745 = 1;
    self setscriptablepartstate( "_encstr_BD7B133F9059A010E64D89E8BB810B633DB027BB98", "_encstr_9BA4080D39CFFB5AB7C1" );
    self setscriptablepartstate( "_encstr_AACB140FF8F9A82A3DCC7FE054D7334CA151F7CB40F0", "_encstr_9BA4080D39CFFB5AB7C1" );
    var_2 = 0.4;
    wait( var_2 );
    self setscriptablepartstate( "_encstr_BD7B133F9059A010E64D89E8BB810B633DB027BB98", var_0, 0 );
    self setscriptablepartstate( "_encstr_AACB140FF8F9A82A3DCC7FE054D7334CA151F7CB40F0", var_0, 0 );
}

_id_11DFA( var_0 )
{
    self notify( var_0 );

    if ( istrue( self._id_12745 ) )
    {
        self setscriptablepartstate( "_encstr_BD7B133F9059A010E64D89E8BB810B633DB027BB98", "_encstr_9BA4080D39CFFB5AB7C1" );
        self setscriptablepartstate( "_encstr_AACB140FF8F9A82A3DCC7FE054D7334CA151F7CB40F0", "_encstr_9BA4080D39CFFB5AB7C1" );
    }

    self._id_12745 = undefined;
}

_id_11DF7( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_BC67123D0BDFA779B804D7F831A35EC33B326D7B" );
    scripts\engine\utility::_id_143A5( "_encstr_A3750609A5E61883", "_encstr_89390E4C39FEB818C099781C19966AEB" );
    _id_11DFA( var_0 );
}

_id_132F2( var_0 )
{
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0 );

    if ( var_1 == "_encstr_AD750FB84BA061A972D7576B57EBEEE888" && var_0 hasattachment( "_encstr_AAB111AB13282F7C3073CF9F2F988723CE2993" ) )
        return 1;

    return 0;
}

_id_119AD( var_0 )
{
    var_1 = var_0.basename;
    var_2 = "_encstr_AABA05236DC831";

    if ( !isdefined( var_1 ) || var_1 == "_encstr_AABA05236DC831" )
        return;

    if ( isdefined( self.lastweaponobj ) && var_0 == self.lastweaponobj )
        return;

    if ( self.equippedweapons.size > 1 )
    {
        var_2 = self.equippedweapons[1].basename;

        if ( var_2 == var_1 )
            var_2 = self.equippedweapons[0].basename;
    }

    if ( isdefined( self.equippedweapons[0] ) )
        self setclientweaponinfo( 0, createheadicon( self.equippedweapons[0] ) );

    if ( isdefined( self.equippedweapons[1] ) )
        self setclientweaponinfo( 1, createheadicon( self.equippedweapons[1] ) );

    self dlog_recordplayerevent( "_encstr_A35019F165EFB828DA4B537D7B4104E0B9FA18C8C14B78FF82E75B", [ "_encstr_BDD50F8DAB3993B2B98EEBEEB22CE07B9B", var_1, "_encstr_A25D118B907F6D0B2117D2E1206BEF368128A2", var_2 ] );
}

updateweaponperks()
{
    self.prevweaponobj = doweaponperkupdate( self.prevweaponobj );
}

updatesniperglint( var_0 )
{
    if ( sniperglint_supported( var_0 ) )
        childthread sniperglint_manage();
}

_id_13FD2( var_0 )
{
    self notify( "_encstr_9E350FE548F1076F95601278C08366E328" );

    if ( scripts\mp\utility\weapon::getweapongroup( var_0 ) == "_encstr_8FE60FAF13D0C25FD006C37AE835877B40" || var_0.basename == "_encstr_88F517D79F73991828B64B4E4B704363A0D1374B07FD41CD08" || var_0 hasattachment( "_encstr_A3E1100F706A02B8A9CE4E5F6B4B7FC253C1", 1 ) )
    {
        if ( scripts\cp_mp\killstreaks\nuke::unlockables( var_0 ) )
            thread scripts\cp_mp\killstreaks\nuke::terminal_pusher_approach_array( var_0 );
    }
}

updatelauncherusage()
{
    var_0 = self getcurrentweapon();
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0.basename );

    switch ( var_1 )
    {
        default:
            break;
        case "_encstr_BC4512A83FD83601C219FD236AEB6358ECFFF878":
        case "_encstr_B1090EB883F847708757BC2E4F9F999F":
            thread scripts\mp\missilelauncher::initmissilelauncherusage();
            break;
        case "_encstr_88EF0EA5DDC1EB36C2AF9A5DB1A559D1":
            thread scripts\mp\javelin::javelin_reset();
            break;
        case "_encstr_AF4C1228BF58B6BFB2997DA3EE0BFF7B7B739060":
        case "_encstr_A25910D2EEC1AFE6B9D78D9CDBCDB9C4EDEE":
            thread scripts\cp\vehicles\vehicle_damage_cp::teleport_text_updated();
            break;
        case "_encstr_A45310689B70B1F6B22791B3D7CA351A90E0":
            thread scripts\cp_mp\utility\omnvar_utility::tr_vis_facing_dist_add_override();
            break;
        case "_encstr_A8AE10D2AB5B379210E70109A9F89C1707EB":
            thread scripts\cp\utility\cp_safehouse_util::tr_vis_facing_dist_add_override();
            break;
        case "_encstr_9F4318901448CFBD913975E39A6BE5A81CA00B10323418606353":
            thread scripts\cp\vehicles\cargo_truck_mg_cp::tr_vis_facing_dist_add_override();
            break;
    }

    self notify( "_encstr_9CC80D7A58296FC46F8375C931A3F0" );

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_9DF31FB7F8D1E3124BB98BC0087DAABB5B7067B368095CB9B9C7D33D0E09A26243" ) )
    {
        var_2 = weaponclass( var_0.basename ) == "_encstr_98080F93DBB1B556D11B85ABB936D059E4" || var_0.basename == "_encstr_A3521050A3B879B19AEF4F6F17728C31B5FA";

        if ( var_2 && !istrue( self.fastreloadlaunchers ) )
        {
            scripts\mp\utility\perk::giveperk( "_encstr_B9FE151A83CF7E72792BC5D85FBB632B045BEBE0AF06AA" );
            self.fastreloadlaunchers = 1;
        }
        else if ( !var_2 && istrue( self.fastreloadlaunchers ) )
        {
            scripts\mp\utility\perk::removeperk( "_encstr_B9FE151A83CF7E72792BC5D85FBB632B045BEBE0AF06AA" );
            self.fastreloadlaunchers = undefined;
        }
    }

    switch ( var_1 )
    {
        default:
            break;
        case "_encstr_BC4512A83FD83601C219FD236AEB6358ECFFF878":
        case "_encstr_B1090EB883F847708757BC2E4F9F999F":
            thread scripts\mp\missilelauncher::missilelauncherusageloop();
            break;
        case "_encstr_88EF0EA5DDC1EB36C2AF9A5DB1A559D1":
            thread scripts\mp\javelin::javelinusageloop();
            break;
        case "_encstr_AF4C1228BF58B6BFB2997DA3EE0BFF7B7B739060":
        case "_encstr_A25910D2EEC1AFE6B9D78D9CDBCDB9C4EDEE":
            thread scripts\cp\vehicles\vehicle_damage_cp::initarmor( var_0 );
            break;
        case "_encstr_A45310689B70B1F6B22791B3D7CA351A90E0":
            thread scripts\cp_mp\utility\omnvar_utility::_id_1403E( var_0 );
            break;
        case "_encstr_A8AE10D2AB5B379210E70109A9F89C1707EB":
            thread scripts\cp\utility\cp_safehouse_util::_id_1403E( var_0 );
            break;
        case "_encstr_9F4318901448CFBD913975E39A6BE5A81CA00B10323418606353":
            thread scripts\cp\vehicles\cargo_truck_mg_cp::_id_1403E( var_0 );
            break;
    }
}

_id_1316B( var_0 )
{
    self.lastdroppableweaponobj = var_0;

    if ( isdefined( level.waittillmatch_wait ) )
        self [[ level.waittillmatch_wait ]]();
}

updatelastweaponobj( var_0 )
{
    var_1 = var_0 getnoaltweapon();

    if ( nullweapon( var_1 ) )
        var_1 = var_0;

    self.lastweaponobj = var_0;

    if ( isnormallastweapon( var_0 ) )
        self.lastnormalweaponobj = var_0;

    if ( isdroppableweapon( var_1 ) )
        _id_1316B( var_1 );

    if ( scripts\mp\utility\weapon::iscacprimaryorsecondary( var_0 ) )
        self.lastcacweaponobj = var_0;
}

updateweaponspeed( var_0 )
{
    if ( var_0.basename == "_encstr_AABA05236DC831" )
        return;
    else if ( scripts\mp\utility\weapon::issuperweapon( var_0.basename ) )
    {
        updatemovespeedscale();
        return;
    }
    else if ( scripts\mp\utility\weapon::iskillstreakweapon( var_0.basename ) )
        return;
    else if ( var_0.basename == "_encstr_AF9310234B172F41E14FD8E8170D5BF7FAF2" )
    {
        updatemovespeedscale();
        return;
    }
    else if ( var_0.inventorytype != "_encstr_987F080E394BDAC2E45E" && var_0.inventorytype != "_encstr_A4DC0819F2E399503F45" )
        return;

    updatemovespeedscale();
}

onplayerspawned()
{
    self.hits = 0;
    scripts\mp\gamelogic::sethasdonecombat( self, 0 );

    if ( !isdefined( self.trackingweapon ) )
    {
        self.trackingweapon = isundefinedweapon();
        self.trackingweaponshots = 0;
        self.trackingweaponkills = 0;
        self.trackingweaponhits = 0;
        self.trackingweaponheadshots = 0;
        self.trackingweapondeaths = 0;
    }

    if ( !isdefined( self.plantedlethalequip ) )
        self.plantedlethalequip = [];

    if ( !isdefined( self.plantedtacticalequip ) )
        self.plantedtacticalequip = [];

    if ( !isdefined( self.plantedsuperequip ) )
        self.plantedsuperequip = [];

    if ( !isdefined( self.plantedhackedequip ) )
        self.plantedhackedequip = [];

    self.prevweaponobj = undefined;
    thread watchchangeweapon();
    thread watchweaponusage();
    thread watchgrenadeusage();
    thread watchequipmentonspawn();

    if ( scripts\mp\utility\game::onlinestatsenabled() )
        thread _id_144C3();

    if ( !scripts\mp\utility\game::runleanthreadmode() )
        thread watchdropweapons();

    self.lasthittime = [];
    self.droppeddeathweapon = undefined;
    self.tookweaponfrom = [];
    self.lastnormalweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() );
    self.lastweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() );
    self.lastcacweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ) && scripts\mp\utility\weapon::iscacprimaryorsecondary( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() );
    _id_1316B( scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() ) );
    scripts\mp\gamescore::initassisttrackers();
}

savealtstates()
{
    self.pers["_encstr_BA7E0AAE7850A3AB57094F1F"] = [];
    var_0 = self.primaryinventory;

    foreach ( var_2 in var_0 )
    {
        if ( !getqueuedspleveltransients( self.primaryweaponobj ) && var_2 == self.primaryweaponobj || !getqueuedspleveltransients( self.secondaryweaponobj ) && var_2 == self.secondaryweaponobj )
        {
            if ( shouldweaponsavealtstate( var_2 ) && self isalternatemode( var_2, 1 ) )
            {
                var_3 = scripts\mp\utility\weapon::getcompleteweaponnamenoalt( var_2 );
                self.pers["_encstr_BA7E0AAE7850A3AB57094F1F"][var_3] = 1;
            }
        }
    }
}

savetogglescopestates()
{
    self.pers["_encstr_B8CA12ABB777CAAC69515F676041AB43D32577E2"] = [];
    var_0 = self.primaryinventory;

    foreach ( var_2 in var_0 )
    {
        if ( !getqueuedspleveltransients( self.primaryweaponobj ) && var_2 == self.primaryweaponobj || !getqueuedspleveltransients( self.secondaryweaponobj ) && var_2 == self.secondaryweaponobj )
        {
            if ( isdefined( var_2.scope ) && istogglescope( var_2.scope ) && !_id_138B1( var_2.backpiece ) )
            {
                var_3 = scripts\mp\utility\weapon::getcompleteweaponnamenoalt( var_2 );
                self.pers["_encstr_B8CA12ABB777CAAC69515F676041AB43D32577E2"][var_3] = self gethybridscopestate( var_2 );
            }
        }
    }
}

updatetogglescopestate( var_0 )
{
    var_1 = scripts\mp\utility\weapon::getcompleteweaponnamenoalt( var_0 );

    if ( isdefined( self.pers["_encstr_B8CA12ABB777CAAC69515F676041AB43D32577E2"] ) && isdefined( self.pers["_encstr_B8CA12ABB777CAAC69515F676041AB43D32577E2"][var_1] ) )
        self sethybridscopestate( var_0, self.pers["_encstr_B8CA12ABB777CAAC69515F676041AB43D32577E2"][var_1] );
}

updatesavedaltstate( var_0 )
{
    if ( isdefined( self.pers["_encstr_BA7E0AAE7850A3AB57094F1F"] ) && istrue( var_0.hasalternate ) )
    {
        var_1 = scripts\mp\utility\weapon::getcompleteweaponnamenoalt( var_0 );

        if ( isdefined( self.pers["_encstr_BA7E0AAE7850A3AB57094F1F"][var_1] ) && self.pers["_encstr_BA7E0AAE7850A3AB57094F1F"][var_1] )
            var_0 = var_0 getaltweapon();
    }

    return var_0;
}

istogglescope( var_0 )
{
    var_1 = scripts\mp\utility\weapon::attachmentmap_tobase( var_0 );

    switch ( var_1 )
    {
        case "_encstr_870B0DA03B239EE887AB495BE76CC8":
        case "_encstr_9DD40D6C5A6002FA5505EBF7870B73":
        case "_encstr_8B120C0A1342AA9CA258DBDF4228":
        case "_encstr_950308A1F24C272D23A1":
        case "_encstr_A20308CCFAC0A25AF5A7":
        case "_encstr_9D030838A340CAFF6D23":
        case "_encstr_B31A076BEBAA4DC064":
            return 1;
        default:
            return 0;
    }
}

_id_138B1( var_0 )
{
    return isdefined( var_0 ) && var_0 == "_encstr_AAB111AB13282F7C3073CF9F2F988723CE2993";
}

shouldweaponsavealtstate( var_0 )
{
    if ( istrue( var_0.hasalternate ) )
    {
        if ( shouldattachmentsavealtstate( var_0.underbarrel ) )
            return 1;
    }

    return 0;
}

shouldattachmentsavealtstate( var_0 )
{
    return turretoverridefunc( var_0 );
}

turretoverridefunc( var_0 )
{
    var_1 = scripts\mp\utility\weapon::attachmentmap_tobase( var_0 );

    switch ( var_1 )
    {
        case "_encstr_93910B2A1F23DFBBB981182465":
        case "_encstr_9F6D0CCD563659C68E13BAC9B98E":
        case "_encstr_80270B9E4D9B81F72B0B6820C2":
            return 1;
        default:
            return 0;
    }
}

turretobjweapon( var_0 )
{
    var_1 = scripts\mp\utility\weapon::attachmentmap_tobase( var_0 );

    switch ( var_1 )
    {
        case "_encstr_813507FFA8B84E0A2F":
        case "_encstr_9B8B09FA614ECB20C93119":
        case "_encstr_A6E00D2C2837F69E396E8009D35059":
        case "_encstr_8F3708CA308C739E5001":
        case "_encstr_A3BD07C10B0F7F5556":
        case "_encstr_88D506545542FFDB":
        case "_encstr_877608807A621B2867B5":
        case "_encstr_89070358A2":
            return 1;
        default:
            return 0;
    }
}

weaponperkupdate( var_0, var_1 )
{
    if ( !getqueuedspleveltransients( var_1 ) )
    {
        var_2 = scripts\mp\utility\weapon::getweaponrootname( var_1.basename );
        var_3 = scripts\mp\utility\weapon::weaponperkmap( var_2 );

        if ( isdefined( var_3 ) )
            scripts\mp\class::loadout_removeperk( var_3 );
    }

    if ( !getqueuedspleveltransients( var_0 ) )
    {
        var_4 = scripts\mp\utility\weapon::getweaponrootname( var_0.basename );
        var_5 = scripts\mp\utility\weapon::weaponperkmap( var_4 );

        if ( isdefined( var_5 ) )
            scripts\mp\class::loadout_giveperk( var_5 );
    }
}

weaponattachmentperkupdate( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = undefined;

    if ( !getqueuedspleveltransients( var_1 ) )
    {
        var_3 = getweaponattachments( var_1 );

        if ( isdefined( var_3 ) && var_3.size > 0 )
        {
            foreach ( var_5 in var_3 )
            {
                var_6 = scripts\mp\utility\weapon::attachmentperkmap( var_5 );

                if ( !isdefined( var_6 ) )
                    continue;

                if ( !scripts\mp\utility\perk::_hasperk( var_6 ) )
                    continue;

                scripts\mp\class::loadout_removeperk( var_6 );
            }
        }
    }

    if ( !getqueuedspleveltransients( var_0 ) )
    {
        var_2 = getweaponattachments( var_0 );

        if ( isdefined( var_2 ) && var_2.size > 0 )
        {
            foreach ( var_9 in var_2 )
            {
                var_6 = scripts\mp\utility\weapon::attachmentperkmap( var_9 );

                if ( !isdefined( var_6 ) )
                    continue;

                scripts\mp\class::loadout_giveperk( var_6 );
            }
        }
    }
}

doweaponperkupdate( var_0 )
{
    var_1 = self getcurrentweapon();
    weaponattachmentperkupdate( var_1, var_0 );
    weaponperkupdate( var_1, var_0 );
    return var_1;
}

watchweaponperkupdates()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_A1D70BDE071B53794F208AE3F8" );
    self endon( "_encstr_A41712F05A531B5C6781D5588DD3E6FF3B22D0F0" );
    var_0 = undefined;

    for (;;)
    {
        var_0 = doweaponperkupdate( var_0 );
        self waittill( "_encstr_89390E4C39FEB818C099781C19966AEB" );
    }
}

watchsniperuse()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    for (;;)
    {
        var_0 = self getcurrentweapon();

        if ( sniperglint_supported( var_0 ) )
            childthread sniperglint_manage();

        self waittill( "_encstr_89390E4C39FEB818C099781C19966AEB" );
    }
}

sniperadsblur_supported( var_0 )
{
    return scripts\mp\utility\weapon::weaponhasattachment( var_0, "_encstr_BDFB06E61BBD1C59" ) && !issubstr( var_0.basename, "_encstr_B3A30816C607A1585303" ) && !issubstr( var_0.basename, "_encstr_A29407DA40DF5FC67B" );
}

sniperglint_supported( var_0 )
{
    if ( nullweapon( var_0 ) || !isdefined( var_0.scope ) || weaponclass( var_0 ) == "_encstr_98080F93DBB1B556D11B85ABB936D059E4" || weaponclass( var_0 ) == "_encstr_BE1904B9D6B3" )
        return 0;

    if ( var_0.basename == "_encstr_A3291137A1BEB59CEBB3956C0DEDA199D76B83" || var_0.basename == "_encstr_B14A106E68BEDAE47DDAC43B7B6333F5AD1C" || var_0.basename == "_encstr_9EC513E60DD7ADE4EB6ED92D6CE8BD396881EBB5E0" || var_0.basename == "_encstr_A69E144A8D274AD24EC0370B40C0B9F7836783C999A1" )
        return 0;

    var_1 = scripts\mp\utility\weapon::attachmentmap_tobase( var_0.scope );

    switch ( var_1 )
    {
        case "_encstr_BDFB06E61BBD1C59":
            if ( var_0.basename == "_encstr_B8DB14BB67F2FEDB82D188FA1ADA83D3CF0BB338C57B" )
                return 0;
            else if ( var_0.classname == "_encstr_B6070748328C39712B" && issubstr( var_0.basename, "_encstr_B707036379" ) )
                return 1;
        case "_encstr_97770B7307C090801BD0F7033B":
            if ( var_0.classname == "_encstr_B6070748328C39712B" )
                return 1;
            else
                return 0;
        case "_encstr_A6A00C4A26479BC568D07B3F8840":
            if ( var_0.classname == "_encstr_B6070748328C39712B" && issubstr( var_0.basename, "_encstr_B707036379" ) )
                return 1;
            else
                return 0;
        case "_encstr_B36B099BAA45410913C604":
            if ( var_0.classname == "_encstr_B6070748328C39712B" )
                return 1;
            else
                return 0;
        case "_encstr_A884093B7BF317320B59D6":
            if ( var_0.classname != "_encstr_B6070748328C39712B" && issubstr( var_0.basename, "_encstr_B707036379" ) )
                return 0;
        case "_encstr_A9B50A1D86CA93B6C28DD9A7":
        case "_encstr_958409ED7A22E04033BA83":
            return 1;
        case "_encstr_AFCA08A3D059276B8563":
            var_2 = scripts\mp\utility\weapon::getweapongroup( var_0 );

            if ( var_2 == "_encstr_AABE0E47EF4F93A830EFCFC309E7BF9E" )
                return 1;
            else
                return 0;
        case "_encstr_8C39062F329DB746":
            if ( var_0.classname == "_encstr_B6070748328C39712B" && issubstr( var_0.basename, "_encstr_A60703ADA1" ) )
                return 1;
            else
                return 0;
        case "_encstr_89390647F97D3BB5":
            if ( issubstr( var_0.basename, "_encstr_A60703ADA1" ) )
                return 1;
            else
                return 0;
        case "_encstr_AAEB08D99EB936BD3895":
            if ( var_0.classname == "_encstr_B6070748328C39712B" && ( issubstr( var_0.basename, "_encstr_B707036379" ) || issubstr( var_0.basename, "_encstr_A60703ADA1" ) ) )
                return 1;
            else if ( !issubstr( var_0.basename, "_encstr_B707036379" ) && !issubstr( var_0.basename, "_encstr_A60703ADA1" ) )
                return 1;
    }

    return 0;
}

sniperglint_manage()
{
    self notify( "_encstr_8139126096BED8648AAF35233B523621446C88DB" );
    self endon( "_encstr_8139126096BED8648AAF35233B523621446C88DB" );
    self endon( "_encstr_89390E4C39FEB818C099781C19966AEB" );
    waitframe();
    thread sniperglint_cleanup();
    self.glinton = 0;

    if ( self.currentweapon hasattachment( "_encstr_8A1711C42B9291C11ACFA1C8EB32D8C35A57CD" ) )
        var_0 = getdvarfloat( "_encstr_986A202B1BFDC18FA330709DD688A712112052C3A0BB47377AA8679D7830371BA328", 0.85 );
    else
        var_0 = 0.5;

    for (;;)
    {
        if ( self playerads() > var_0 )
        {
            if ( !self.glinton )
                sniperglint_add();
        }
        else if ( self.glinton )
            sniperglint_remove();

        waitframe();
    }
}

sniperglint_cleanup()
{
    scripts\engine\utility::_id_143A5( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3", "_encstr_89390E4C39FEB818C099781C19966AEB" );

    if ( isdefined( self.glinton ) && self.glinton )
    {
        sniperglint_remove();
        self.glinton = undefined;
    }
}

sniperglint_add()
{
    if ( scripts\mp\utility\perk::_hasperk( "_encstr_8C9D16D237DB22713140FBD7C1A93CCAB54D1ACF9553FA85" ) )
        self setscriptablepartstate( "_encstr_B2560CCB65F0A257FE25124A28D5", "_encstr_87821537E6B438599CE88D2D73A37A37D737583927DEDD", 0 );
    else
        self setscriptablepartstate( "_encstr_B2560CCB65F0A257FE25124A28D5", "_encstr_AF090E8E781F1BE3B8C83017703075D0", 0 );

    self.glinton = 1;
}

sniperglint_remove()
{
    if ( isdefined( self ) )
    {
        self setscriptablepartstate( "_encstr_B2560CCB65F0A257FE25124A28D5", "_encstr_AB5C0F032647C179BEF0605A58E39D954B", 0 );
        self.glinton = 0;
    }
}

sniperadsblur( var_0 )
{
    self endon( "_encstr_89390E4C39FEB818C099781C19966AEB" );
    self.sniperblur = 0;

    for (;;)
    {
        if ( self playerads() > 0.65 && !self.sniperblur )
            thread sniperadsblur_execute( var_0 );
        else if ( self playerads() <= 0.65 )
            sniperadsblur_remove();

        waitframe();
    }
}

sniperadsblur_execute( var_0 )
{
    self notify( "_encstr_9B2B10ABE0F813972DD17AE33805CF47D155" );
    self endon( "_encstr_9B2B10ABE0F813972DD17AE33805CF47D155" );
    self.sniperblur = 1;
    self setblurforplayer( 25, 0.1 );
    wait 0.1;
    self setblurforplayer( 0, getsniperadsblurtime( var_0 ) );
}

sniperadsblur_remove()
{
    self notify( "_encstr_9B2B10ABE0F813972DD17AE33805CF47D155" );
    self setblurforplayer( 0, 0 );
    self.sniperblur = 0;
}

getsniperadsblurtime( var_0 )
{
    var_1 = 0.3;

    switch ( var_0.basename )
    {
        case "_encstr_8A06115A770ED7B9E6EB6DD21B7B930EF5D6E0":
            var_1 = 0.18;
            break;
        case "_encstr_BDF911D2BBE0D7DCCDFAB5B4DA2B131AD7B51C":
            var_1 = 0.12;
            break;
        case "_encstr_ADFF1087A8FA2F131B0F4F162B6BA10F1877":
            var_1 = 0.12;
            break;
    }

    return var_1;
}

watchsniperboltactionkills()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    thread watchsniperboltactionkills_ondeath();

    if ( !isdefined( self.pers["_encstr_8A8E12272B36BD968DA4B2C8EA8DACB42DC6C637"] ) )
        self.pers["_encstr_8A8E12272B36BD968DA4B2C8EA8DACB42DC6C637"] = 0;

    self setclientomnvar( "_encstr_AD4B1AD75D6EB080E7C2301B5ACB58C884A32169C1D081DE832AABA1", self.pers["_encstr_8A8E12272B36BD968DA4B2C8EA8DACB42DC6C637"] );

    for (;;)
    {
        self waittill( "_encstr_8B220BCF9A8BAFAB5920581491", var_0, var_1, var_2 );
        var_3 = asmdevgetallstates( var_1 );

        if ( isrecoilreducingweapon( var_3 ) )
        {
            var_4 = self.pers["_encstr_8A8E12272B36BD968DA4B2C8EA8DACB42DC6C637"] + 1;
            self.pers["_encstr_8A8E12272B36BD968DA4B2C8EA8DACB42DC6C637"] = int( min( var_4, 4 ) );
            self setclientomnvar( "_encstr_AD4B1AD75D6EB080E7C2301B5ACB58C884A32169C1D081DE832AABA1", self.pers["_encstr_8A8E12272B36BD968DA4B2C8EA8DACB42DC6C637"] );

            if ( var_4 <= 4 )
                stancerecoilupdate( self getstance() );
        }
    }
}

watchsniperboltactionkills_ondeath()
{
    self notify( "_encstr_B1662303F178BB526615677B7B9EB8FFE0FB368ECB784FEA52337B037FD0922609A1B6D3A0" );
    self endon( "_encstr_B1662303F178BB526615677B7B9EB8FFE0FB368ECB784FEA52337B037FD0922609A1B6D3A0" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self waittill( "_encstr_A3750609A5E61883" );
    self.pers["_encstr_8A8E12272B36BD968DA4B2C8EA8DACB42DC6C637"] = 0;
}

isrecoilreducingweapon( var_0 )
{
    if ( !isdefined( var_0 ) || nullweapon( var_0 ) )
        return 0;

    var_1 = 0;

    if ( var_0 hasattachment( "_encstr_88270CC6C4C4530B66B9B17B0756", 1 ) || var_0 hasattachment( "_encstr_95490E98EFB26B29C6662AA64B8F3383", 1 ) || var_0 hasattachment( "_encstr_93410955A653D7CECF8852", 1 ) || var_0 hasattachment( "_encstr_A6680BCD0EFB6B304FB86A93A0", 1 ) )
        var_1 = 1;

    return var_1;
}

getrecoilreductionvalue()
{
    if ( !isdefined( self.pers["_encstr_8A8E12272B36BD968DA4B2C8EA8DACB42DC6C637"] ) )
        self.pers["_encstr_8A8E12272B36BD968DA4B2C8EA8DACB42DC6C637"] = 0;

    return self.pers["_encstr_8A8E12272B36BD968DA4B2C8EA8DACB42DC6C637"] * 3;
}

ishackweapon( var_0 )
{
    if ( var_0 == "_encstr_9B0809C39A1B3710A91591" || var_0 == "_encstr_A9180D2CA54EB9D127A5DA95FAB61C" || var_0 == "_encstr_9F5E0EF83D8D2F5E5FF8333AF0E71583" )
        return 1;

    if ( var_0 == "_encstr_B22C12108D8B47BB1F3AA0D24E8EE8E858AE7863" )
        return 1;

    return 0;
}

isfistweapon( var_0 )
{
    var_0 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    return var_0 == "_encstr_9BED0AA307609154C76BDB23";
}

isbombplantweapon( var_0 )
{
    return var_0 == "_encstr_B22C12108D8B47BB1F3AA0D24E8EE8E858AE7863" || var_0 == "_encstr_9C08198B83C8E7426B0EC3E849D37FF0D1D80189933746CF4183A8" || var_0 == "_encstr_81F4147DA6DC2BD4461772A04F42291075B511E7E1F3" || var_0 == "_encstr_B1C31B7DCAEC989C27B2F3397913C55803238B8F535498556BFB4E2073";
}

dropweaponfordeath( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( level.blockweapondrops ) )
        return;

    if ( isdefined( self.droppeddeathweapon ) )
        return;

    if ( isdefined( var_0 ) && var_0 == self || var_1 == "_encstr_97590CFD0825D7720BD1A018A1F3" )
        return;

    var_4 = self.lastdroppableweaponobj;

    if ( isdefined( var_2 ) )
        var_4 = var_2;

    if ( !isdefined( var_4 ) )
        return;

    if ( var_4.basename == "_encstr_AABA05236DC831" )
        return;

    if ( !self hasweapon( var_4 ) )
        return;

    if ( isdefined( level.gamemodemaydropweapon ) && !self [[ level.gamemodemaydropweapon ]]( var_4 ) )
        return;

    var_4 = var_4 getnoaltweapon();
    var_5 = 0;
    var_6 = 0;
    var_7 = 0;

    if ( !scripts\mp\riotshield::isriotshield( var_4.basename ) )
    {
        if ( !self anyammoforweaponmodes( var_4 ) )
            return;

        var_5 = self getweaponammoclip( var_4, "_encstr_9353062E718710C9" );
        var_6 = self getweaponammoclip( var_4, "_encstr_B1AD05C65666E8" );

        if ( !var_5 && !var_6 )
            return;

        var_7 = self getweaponammostock( var_4 );
        var_8 = weaponmaxammo( var_4 );

        if ( var_7 > var_8 )
            var_7 = var_8;

        var_9 = self dropitem( var_4 );

        if ( !isdefined( var_9 ) )
            return;

        if ( istrue( level.clearstockondrop ) )
            var_7 = 0;

        var_9 itemweaponsetammo( var_5, var_7, var_6 );
        var_10 = scripts\mp\utility\weapon::getweapongroup( var_4 );

        if ( var_1 != "_encstr_87230ED5301DEFDF39A94821C9F38573" )
            thread scripts\cp_mp\utility\weapon_utility::dropweaponfordeathlaunch( var_9, var_10, var_3, self.angles );
    }
    else
    {
        var_9 = self dropitem( var_4 );

        if ( !isdefined( var_9 ) )
            return;

        var_9 itemweaponsetammo( 1, 1, 0 );
    }

    var_9 sethintdisplayrange( 96 );
    var_9 setuserange( 96 );
    self.droppeddeathweapon = 1;
    var_9.owner = self;
    var_9.targetname = "_encstr_A3580F88A8B0D79B791DD11355BBE04FB3";
    var_9.objweapon = var_4;
    var_9 thread watchpickup( self );
    var_9 thread deletepickupafterawhile();
}

forcedropweapon( var_0 )
{
    if ( isdefined( level.blockweapondrops ) )
        return 0;

    if ( isdefined( self.droppeddeathweapon ) )
        return 0;

    var_1 = self.lastdroppableweaponobj;

    if ( isdefined( var_0 ) )
        var_1 = var_0;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( var_1.basename == "_encstr_AABA05236DC831" )
        return 0;

    if ( !self hasweapon( var_1 ) )
        return -1;

    if ( isdefined( level.gamemodemaydropweapon ) && !self [[ level.gamemodemaydropweapon ]]( var_1 ) )
        return 0;

    var_1 = var_1 getnoaltweapon();
    var_2 = 0;
    var_3 = 0;
    var_4 = 0;

    if ( !scripts\mp\riotshield::isriotshield( var_1.basename ) )
    {
        if ( !self anyammoforweaponmodes( var_1 ) )
            return 0;

        var_2 = self getweaponammoclip( var_1, "_encstr_9353062E718710C9" );
        var_3 = self getweaponammoclip( var_1, "_encstr_B1AD05C65666E8" );

        if ( !var_2 && !var_3 )
            return 0;

        var_4 = self getweaponammostock( var_1 );
        var_5 = weaponmaxammo( var_1 );

        if ( var_4 > var_5 )
            var_4 = var_5;

        var_6 = self dropitem( var_1 );

        if ( !isdefined( var_6 ) )
            return 0;

        if ( istrue( level.clearstockondrop ) )
            var_4 = 0;

        var_6 itemweaponsetammo( var_2, var_4, var_3 );
    }
    else
    {
        var_6 = self dropitem( var_1 );

        if ( !isdefined( var_6 ) )
            return 0;

        var_6 itemweaponsetammo( 1, 1, 0 );
    }

    var_6 sethintdisplayrange( 96 );
    var_6 setuserange( 96 );
    var_6.owner = self;
    var_6.targetname = "_encstr_A3580F88A8B0D79B791DD11355BBE04FB3";
    var_6.objweapon = var_1;
    var_6 thread watchpickup( self );
    var_6 thread deletepickupafterawhile();
    return 1;
}

detachifattached( var_0, var_1 )
{
    var_2 = self getattachsize();

    for ( var_3 = 0; var_3 < var_2; var_3++ )
    {
        var_4 = self getattachmodelname( var_3 );

        if ( var_4 != var_0 )
            continue;

        var_5 = self getattachtagname( var_3 );
        self detach( var_0, var_5 );

        if ( var_5 != var_1 )
        {
            var_2 = self getattachsize();

            for ( var_3 = 0; var_3 < var_2; var_3++ )
            {
                var_5 = self getattachtagname( var_3 );

                if ( var_5 != var_1 )
                    continue;

                var_0 = self getattachmodelname( var_3 );
                self detach( var_0, var_5 );
                break;
            }
        }

        return 1;
    }

    return 0;
}

deletepickupafterawhile()
{
    self endon( "_encstr_A3750609A5E61883" );
    wait 60;

    if ( !isdefined( self ) )
        return;

    self delete();
}

getitemweaponname()
{
    var_0 = self.classname;
    var_1 = getsubstr( var_0, 7 );
    return var_1;
}

watchpickup( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    level._id_120AD _calloutmarkerping_handleluinotify_acknowledgedcancel::from( self, var_0, self.objweapon );
    var_1 = getitemweaponname();

    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_2, var_3 );
        var_4 = undefined;
        var_5 = isdefined( level.cyberemp ) && isdefined( level.cyberemp.carrier ) && level.cyberemp.carrier == var_2;
        var_6 = scripts\mp\utility\game::getgametype() == "_encstr_B9F906A857D2014D" && ( isdefined( var_3 ) || var_5 );

        if ( var_6 )
        {
            var_7 = var_2 scripts\cp_mp\utility\inventory_utility::getcurrentprimaryweaponsminusalt();

            if ( var_7.size > 2 )
            {
                var_8 = 0;
                var_9 = 0;
                var_10 = 0;

                foreach ( var_12 in var_7 )
                {
                    if ( var_12.basename == "_encstr_886A100B633F07D9C923880807E573CFB24A" )
                        var_8 = 1;

                    if ( scripts\mp\utility\weapon::update_health_bar_to_player( var_12 ) )
                        var_9 = 1;

                    if ( var_12.basename == "_encstr_B3BD102DEEE0FAD85BD72326B1D63BBEAD0E" )
                        var_10 = 1;
                }

                if ( isdefined( var_2.primaryweapon ) && var_2.primaryweapon != "_encstr_886A100B633F07D9C923880807E573CFB24A" )
                    var_4 = var_2.primaryweaponobj;
                else if ( isdefined( var_2.secondaryweapon ) && var_2.secondaryweapon != "_encstr_886A100B633F07D9C923880807E573CFB24A" )
                    var_4 = var_2.secondaryweaponobj;

                var_14 = var_7.size;

                if ( var_9 )
                    var_14--;

                if ( var_10 )
                    var_14--;

                if ( !var_8 || var_14 > 3 )
                {
                    var_15 = undefined;

                    if ( var_4.basename != "_encstr_AABA05236DC831" )
                        var_15 = var_4;

                    var_16 = var_2 forcedropweapon( var_15 );

                    if ( var_5 )
                    {
                        var_2 scripts\common\utility::allow_weapon_switch( 0 );
                        var_2 scripts\common\utility::allow_weapon_pickup( 0 );
                        var_2 scripts\common\utility::allow_usability( 0 );
                        var_2 thread waitthengivecyberweapon( var_16 == 0 );
                    }

                    if ( var_16 == 1 )
                    {

                    }
                    else if ( var_16 == 0 )
                    {
                        if ( var_5 )
                        {
                            var_2 scripts\common\utility::allow_usability( 1 );
                            var_2 scripts\common\utility::allow_weapon_switch( 1 );
                            var_2 scripts\common\utility::allow_weapon_pickup( 1 );
                        }

                        return;
                    }
                    else if ( var_16 == -1 )
                    {

                    }
                }
            }
            else if ( var_5 )
            {
                var_2 scripts\common\utility::allow_weapon_switch( 0 );
                var_2 scripts\common\utility::allow_weapon_pickup( 0 );
                var_2 scripts\common\utility::allow_usability( 0 );
                var_2 thread waitthengivecyberweapon();
            }
            else if ( isdefined( var_3 ) )
                var_4 = var_2.lastdroppableweaponobj;
            else
                var_4 = var_2 getcurrentweapon();
        }
        else if ( isdefined( var_3 ) )
            var_4 = var_2.lastdroppableweaponobj;
        else
            var_4 = var_2 getcurrentweapon();

        var_17 = var_2 scripts\mp\utility\perk::_hasperk( "_encstr_AD7318FB8AFD802BB21B594BBFFB667091E2E6F37721D0D09A5F" ) && getdvarint( "_encstr_A870198BDFFAD020E2536345279B70C082B7B3E6475E4866AA1751" ) == 1;
        var_2 thread watchpickupcomplete( self.objweapon, var_4, var_17 );
        level._id_120AE _calloutmarkerping_handleluinotify_acknowledgedcancel::from( self, var_2, self.objweapon );
        var_2 notify( "_encstr_A14C0E78A29718E8A8C95FF78F273DB8", self.objweapon );

        if ( isdefined( var_3 ) )
        {
            var_2.lastweaponpickuptime = gettime();
            var_2 scripts\mp\utility\stats::incpersstat( "_encstr_B2880E1F0B0FBBD7C0A7FC46F820F043", 1 );
        }

        var_18 = fixupplayerweapons( var_2, var_1 );

        if ( isdefined( var_3 ) && var_17 )
            var_3 delete();

        if ( isdefined( var_3 ) || var_18 )
            break;
    }

    if ( isdefined( var_3 ) )
    {
        var_19 = var_3 getitemweaponname();
        var_20 = asmdevgetallstates( var_19 );

        if ( isdefined( var_2.tookweaponfrom[var_19] ) )
        {
            var_3.owner = var_2.tookweaponfrom[var_19];
            var_2.tookweaponfrom[var_19] = undefined;
        }

        var_3.objweapon = var_20;
        var_3.targetname = "_encstr_A3580F88A8B0D79B791DD11355BBE04FB3";
        var_3 thread watchpickup( var_2 );
    }

    var_2.tookweaponfrom[var_1] = self.owner;
}

waitthengivecyberweapon( var_0 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self notify( "_encstr_B70D0E23A923E6854168FB4B45DD51B1" );
    self endon( "_encstr_B70D0E23A923E6854168FB4B45DD51B1" );

    while ( isdefined( self.currentweapon.basename ) && self.currentweapon.basename == "_encstr_AABA05236DC831" )
        waitframe();

    scripts\cp_mp\utility\inventory_utility::_giveweapon( "_encstr_886A100B633F07D9C923880807E573CFB24A" );

    if ( !istrue( var_0 ) )
    {
        scripts\common\utility::allow_usability( 1 );
        scripts\common\utility::allow_weapon_switch( 1 );
        scripts\common\utility::allow_weapon_pickup( 1 );
    }
}

watchpickupcomplete( var_0, var_1, var_2 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self notify( "_encstr_9E6C165CBEA327D08877D0986FC0CD475A6259ED536A7930" );
    self endon( "_encstr_9E6C165CBEA327D08877D0986FC0CD475A6259ED536A7930" );
    var_3 = self.currentweapon;
    var_4 = 0;

    if ( var_3 == var_0 )
        var_4 = 1;
    else
    {
        for (;;)
        {
            waitframe();
            var_5 = self.currentweapon;

            if ( isnullweapon( var_3, var_5, 0 ) )
                continue;

            if ( isnullweapon( var_0, var_5, 0 ) )
                var_4 = 1;
            else
                var_4 = 0;

            break;
        }
    }

    if ( var_4 )
    {
        if ( var_0.basename == "_encstr_B3BD102DEEE0FAD85BD72326B1D63BBEAD0E" )
            scripts\mp\killstreaks\juggernaut_mp::juggernautweaponpickedup( var_0, var_1 );

        thread notifyuiofpickedupweapon();

        if ( isdefined( level._id_120B0 ) )
            [[ level._id_120B0 ]]( var_0 );
        else if ( var_2 )
            thread usegraverobber( var_0, var_1 );
    }
}

usegraverobber( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
    {
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_0 );
        var_2 = var_1;
        var_3 = safechecknum( var_1.name );
        var_4 = getrandomgraverobberattachment( var_1 );

        if ( isdefined( var_4 ) )
        {
            var_5 = getweaponattachments( var_1 );

            foreach ( var_8, var_7 in var_5 )
            {
                if ( !scripts\mp\utility\weapon::attachmentscompatible( var_3, var_7, var_4 ) )
                    var_5[var_8] = undefined;
            }

            var_5 = scripts\engine\utility::array_removeundefined( var_5 );
            var_5[var_5.size] = var_4;
            var_2 = var_1 withattachments( var_5 );
        }

        var_9 = scripts\mp\utility\weapon::getweaponfullname( var_2 );
        scripts\cp_mp\utility\inventory_utility::_giveweapon( var_2 );
        self assignweaponprimaryslot( var_9 );
        scripts\cp_mp\utility\inventory_utility::_switchtoweaponimmediate( var_9 );
        fixupplayerweapons( self, var_9 );
        self setweaponammoclip( var_2, self.graverobberammo.lastweapon.rightclip, "_encstr_9353062E718710C9" );
        self setweaponammoclip( var_2, self.graverobberammo.lastweapon.leftclip, "_encstr_B1AD05C65666E8" );
        self setweaponammostock( var_2, self.graverobberammo.lastweapon.stock );
        var_10 = self getweaponslistprimaries();

        foreach ( var_12 in var_10 )
            addscavengercliptoweapon( self, var_12, 0.5 );

        if ( isdefined( var_4 ) )
        {
            wait 0.05;
            var_5 = getweaponattachments( var_2 );
            var_14 = scripts\engine\utility::array_find( var_5, var_4 );

            if ( !isdefined( var_14 ) )
                var_14 = 0;

            self setclientomnvar( "_encstr_A381115DA5AF772B16C1DEE6EB1C96B1D6EA38", var_14 + 1 );
            self playlocalsound( "_encstr_B9491203B4A3B006137A0950D3F74738BE33A3D9" );
        }
    }
}

getrandomgraverobberattachment( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return undefined;

    var_2 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_3 = getweaponattachments( var_0 );
    var_4 = [];

    if ( isdefined( var_1 ) && var_1.size > 0 )
        var_4 = var_1;
    else
        var_4 = scripts\mp\utility\weapon::register_wave_spawner( var_2 );

    if ( !isdefined( var_4 ) )
        return undefined;

    foreach ( var_8, var_6 in var_3 )
    {
        var_7 = scripts\mp\utility\weapon::attachmentmap_tobase( var_6 );

        if ( !scripts\mp\utility\weapon::carriedpunchcard( var_0, var_7 ) )
        {
            var_3[var_8] = undefined;
            continue;
        }
    }

    var_4 = scripts\engine\utility::can_be_shot_again( var_4 );
    var_4 = scripts\engine\utility::array_randomize( var_4 );

    foreach ( var_10 in var_4 )
    {
        if ( !isgraverobberattachment( var_2, var_10 ) )
            continue;

        var_11 = 0;

        foreach ( var_6 in var_3 )
        {
            if ( scripts\mp\utility\weapon::attachmentsconflict( var_6, var_10, var_0 ) != "_encstr_A40101" )
            {
                var_11 = 1;
                break;
            }
        }

        if ( var_11 )
            continue;

        return var_10;
    }

    return undefined;
}

addattachmenttoweapon( var_0, var_1 )
{
    var_2 = getweaponvariantindex( var_0 );
    var_0 = var_0 getnoaltweapon();
    var_3 = var_0.attachmentvarindices;
    var_4 = [];
    var_5 = [];

    foreach ( var_9, var_7 in var_3 )
    {
        var_8 = scripts\mp\utility\weapon::attachmentmap_tobase( var_9 );
        var_5[var_5.size] = var_8;
        var_4[var_8] = var_7;
    }

    var_10 = 0;

    if ( scripts\engine\utility::array_contains( var_5, var_1 ) )
        var_10 = 1;
    else
    {
        var_11 = scripts\mp\utility\weapon::attachmentmap_tounique( var_1, var_0 );

        if ( !var_0 canuseattachment( var_11 ) )
            var_10 = 1;
    }

    if ( var_10 )
        return undefined;

    var_5 = scripts\mp\utility\weapon::weaponattachremoveextraattachments( var_5, var_0 );
    var_12 = [];

    foreach ( var_14, var_9 in var_5 )
        var_12[var_14] = var_4[var_9];

    var_5[var_5.size] = var_1;
    var_12[var_12.size] = 0;
    var_15 = var_0.camo;
    var_16 = [];

    if ( isdefined( var_0.stickerslot0 ) )
        var_16[var_16.size] = var_0.stickerslot0;

    if ( isdefined( var_0.stickerslot1 ) )
        var_16[var_16.size] = var_0.stickerslot1;

    if ( isdefined( var_0.stickerslot2 ) )
        var_16[var_16.size] = var_0.stickerslot2;

    if ( isdefined( var_0.stickerslot3 ) )
        var_16[var_16.size] = var_0.stickerslot3;

    var_17 = scripts\cp_mp\utility\game_utility::isnightmap();
    var_0 = scripts\mp\class::buildweapon( scripts\mp\utility\weapon::getweaponrootname( var_0 ), var_5, var_15, "_encstr_AABA05236DC831", var_2, var_12, undefined, var_16, var_17 );
    return var_0;
}

getammooverride( var_0 )
{
    var_1 = var_0 getbaseweapon();
    var_2 = weaponclipsize( var_1 );
    var_3 = weaponclipsize( var_0 );
    var_4 = var_2;

    switch ( var_0.basename )
    {
        case "_encstr_A15411518C324F35F3D9CAA240D92D263679B0":
        case "_encstr_B22911B2C479F8CB2C2F8129CF49AAA4162D20":
        case "_encstr_A81B13A28852375E0DC64BDFA31723780A3ECF508B":
            break;
        default:
            var_4 = int( min( var_2, var_3 ) );
    }

    var_5 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_6 = 30;

    if ( var_0.isalternate )
    {
        var_7 = scripts\mp\utility\weapon::attachmentmap_tobase( var_0.underbarrel );

        switch ( var_7 )
        {
            case "_encstr_813507FFA8B84E0A2F":
            case "_encstr_9B8B09FA614ECB20C93119":
            case "_encstr_A6E00D2C2837F69E396E8009D35059":
            case "_encstr_8F3708CA308C739E5001":
            case "_encstr_A3BD07C10B0F7F5556":
            case "_encstr_88D506545542FFDB":
            case "_encstr_877608807A621B2867B5":
            case "_encstr_89070358A2":
                var_6 = 1;
                break;
            case "_encstr_BE970867A0DBD0FB0FF0":
                var_6 = 999;
                break;
            default:
                var_6 = 0;
                break;
        }
    }
    else
    {
        switch ( var_0.classname )
        {
            case "_encstr_A91007F0AB1AC9A31A":
                switch ( var_5 )
                {
                    case "_encstr_9C0B12A7D3E269136081C280C69373D031ECAD83":
                        var_6 = 6;
                        break;
                    case "_encstr_A9E70FB4DD70D7DC86BE32C12CC1B09864":
                        var_6 = 8;
                        break;
                    default:
                        var_6 = int( min( var_4, 30 ) );
                        break;
                }

                break;
            case "_encstr_B6070748328C39712B":
                switch ( var_5 )
                {
                    case "_encstr_A25910D2EEC1AFE6B9D78D9CDBCDB9C4EDEE":
                        var_6 = 3;
                        break;
                    default:
                        var_6 = int( min( var_4, 30 ) );
                        break;
                }

                break;
            default:
                var_6 = int( min( var_4, 30 ) );
        }
    }

    return var_6;
}

isgraverobberattachment( var_0, var_1 )
{
    if ( !scripts\mp\utility\weapon::carriedpunchcard( var_0, var_1 ) )
        return 0;

    switch ( var_1 )
    {
        case "_encstr_9DF90E8D58E656274C16360B9BB1598C":
        case "_encstr_A45E080BB1D0C071774A":
        case "_encstr_A1D30BD407DB27324DA87AE2A0":
        case "_encstr_A39C07B1CFC082B1AD":
            return 0;
    }

    if ( issubstr( var_1, "_encstr_AFCA08A3D059276B8563" ) )
        return 0;

    if ( issubstr( var_1, "_encstr_B4E206EA259A0BBB" ) )
        return 0;

    if ( getsubstr( var_1, 0, 3 ) == "_encstr_8F1904870B80" )
        return 0;

    return 1;
}

notifyuiofpickedupweapon()
{

}

fixupplayerweapons( var_0, var_1 )
{
    var_2 = var_0 getweaponslistprimaries();
    var_3 = 1;
    var_4 = 1;
    var_5 = undefined;

    if ( issameweapon( var_1 ) )
        var_5 = createheadicon( var_1 );
    else
        var_5 = var_1;

    foreach ( var_7 in var_2 )
    {
        if ( isdefined( var_0.primaryweaponobj ) && var_0.primaryweaponobj == var_7 )
        {
            var_3 = 0;
            continue;
        }

        if ( isdefined( var_0.secondaryweaponobj ) && var_0.secondaryweaponobj == var_7 )
            var_4 = 0;
    }

    if ( var_3 )
    {
        var_0.primaryweapon = var_5;
        var_0.primaryweaponobj = asmdevgetallstates( var_5 );
    }
    else if ( var_4 )
    {
        var_0.secondaryweapon = var_5;
        var_0.secondaryweaponobj = asmdevgetallstates( var_5 );
    }

    return var_3 || var_4;
}

itemremoveammofromaltmodes()
{
    var_0 = getitemweaponname();
    var_1 = weaponaltweaponname( var_0 );

    for ( var_2 = 1; var_1 != "_encstr_AABA05236DC831" && var_1 != var_0; var_2++ )
    {
        self itemweaponsetammo( 0, 0, 0, var_2 );
        var_1 = weaponaltweaponname( var_1 );
    }
}

_id_12082( var_0 )
{
    if ( isdefined( level._id_12082 ) )
        [[ level._id_12082 ]]( var_0 );
    else
    {
        scavengergiveammo( var_0 );
        var_0 scripts\mp\equipment::givescavengerammo();
    }
}

handlescavengerbagpickup( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        self waittill( "_encstr_A6460A8BD10F1B9FB81FBD92", var_1 );

        if ( !var_1 scripts\cp_mp\utility\player_utility::isinvehicle() )
            break;
    }

    var_1 notify( "_encstr_BCF011E66C859D2B73CECAE4BE0EA51B6D57C1" );
    _id_12082( var_1 );

    if ( !isdefined( var_1.pers["_encstr_BDFE122A99F886BAD02F4F1B690B82C3B0012B72"] ) )
        var_1.pers["_encstr_BDFE122A99F886BAD02F4F1B690B82C3B0012B72"] = 0;

    var_1 scripts\cp\vehicles\vehicle_compass_cp::_id_1205F( "_encstr_AA2C0E6367277E725DA7BD5A1D1B47D0", 0 );
    var_1 scripts\mp\utility\stats::incpersstat( "_encstr_BDFE122A99F886BAD02F4F1B690B82C3B0012B72", 1 );
    var_1 scripts\mp\damagefeedback::hudicontype( "_encstr_A6460A8BD10F1B9FB81FBD92" );
    var_2 = scripts\mp\utility\game::unset_relic_grounded();

    if ( istrue( var_2 ) )
        var_1 scripts\mp\equipment::incrementequipmentslotammo( "_encstr_A1B507EB87CA015BB8", 1 );

    if ( isdefined( self.useobj ) )
        self.useobj delete();

    self notify( "_encstr_A3750609A5E61883" );
}

scavengergiveammo( var_0 )
{
    var_1 = var_0 getweaponslistprimaries();

    foreach ( var_3 in var_1 )
        addscavengercliptoweapon( var_0, var_3, 1 );

    var_5 = scripts\mp\utility\game::unset_relic_grounded();

    if ( istrue( var_5 ) )
        bbeingelectrocuted( var_0, 1 );
}

addscavengercliptoweapon( var_0, var_1, var_2 )
{
    if ( !scripts\mp\utility\weapon::iscacprimaryweapon( var_1 ) && !level.scavenger_secondary )
        return;

    if ( var_1.isalternate )
        return;

    if ( scripts\mp\utility\weapon::getweapongroup( var_1 ) == "_encstr_B7BF127F8889D85A6D18A25A780DB2937340ABBF" )
        return;

    var_3 = var_0 getweaponammostock( var_1 );
    var_4 = getammooverride( var_1 );
    var_4 = int( ceil( var_2 * var_4 ) );

    if ( var_1 hasattachment( "_encstr_A39C07B1CFC082B1AD", 1 ) )
        var_4 = var_4 * 1;

    var_0 setweaponammostock( var_1, var_3 + var_4 );
}

bbeingelectrocuted( var_0, var_1 )
{
    var_0 scripts\mp\equipment::incrementequipmentslotammo( "_encstr_A1B507EB87CA015BB8", var_1 );
}

scavenger_budget_delete()
{
    if ( isdefined( self.useobj ) )
        self.useobj delete();

    self delete();
}

dropscavengerfordeath( var_0, var_1 )
{
    self endon( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( !shoulddropscavengerbag( var_0, var_1 ) )
        return;

    var_2 = 0;

    if ( isdefined( var_1 ) && var_1 == "_encstr_87230ED5301DEFDF39A94821C9F38573" )
        var_2 = 1.5;

    wait( var_2 );

    if ( var_2 > 0 && !shoulddropscavengerbag( var_0, var_1 ) )
        return;

    dropscavengerfordeathinternal( var_0 );
}

dropscavengerfordeathinternal( var_0 )
{
    var_1 = self dropscavengerbag( "_encstr_803D11B67397DBD385522BA0C9DE93B11715BF", "_encstr_87DA078B11C012A35F" );

    if ( !isdefined( var_1 ) )
        return;

    var_1 scripts\cp_mp\ent_manager::registerspawn( 2, ::scavenger_budget_delete );
    var_1.owner = var_0;
    var_1.team = var_0.team;
    var_2 = scripts\mp\utility\game::unset_relic_grounded();

    if ( istrue( var_2 ) )
    {
        var_1.outlineid = scripts\mp\utility\outline::outlineenableforplayer( var_1, var_1.owner, "_encstr_AD9D133F37A3D1A09EAF16895768801BC9C7ABABC3", "_encstr_B40D05E05627D6" );
        var_1 thread handlescavengerbagpickup( self );
        var_1 thread scavengerbagcleanupthink( var_1.outlineid );
        var_1 thread scavengerbagtimeoutthink( var_1.outlineid );
    }
    else
    {
        var_1 thread handlescavengerbagpickup( self );
        var_1 thread scavengerbagcleanupthink();
        var_1 thread scavengerbagtimeoutthink();
    }

    if ( isdefined( level.bot_funcs ) && isdefined( level.bot_funcs["_encstr_BCDC17C4ED3A6EAF584646D7CDD816CE9537B35693D7268576"] ) )
        [[ level.bot_funcs["_encstr_BCDC17C4ED3A6EAF584646D7CDD816CE9537B35693D7268576"] ]]( var_1 );
}

shoulddropscavengerbag( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( var_0 == self )
        return 0;

    return 1;
}

scavengerbagcleanupthink( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.owner scripts\engine\utility::_id_143A6( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3", "_encstr_B2170C4AD884CDC823B9DB9D9F42", "_encstr_B9DC0C4C2CECAF3AD2D6B2B7AED1" );

    if ( isdefined( self ) )
    {
        if ( isdefined( self.useobj ) )
        {
            var_1 = scripts\mp\utility\game::unset_relic_grounded();

            if ( istrue( var_1 ) )
                scripts\mp\utility\outline::outlinedisable( var_0, self );

            self.useobj delete();
        }

        scripts\cp_mp\ent_manager::deregisterspawn();
        self delete();
    }
}

scavengerbagtimeoutthink( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self.owner endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_1 = scripts\mp\utility\game::unset_relic_grounded();
    wait( scripts\engine\utility::ter_op( var_1, 60, 20 ) );

    if ( istrue( var_1 ) )
        scripts\mp\utility\outline::outlinedisable( var_0, self );

    if ( isdefined( self ) )
        self.owner notify( "_encstr_B9DC0C4C2CECAF3AD2D6B2B7AED1" );
}

scavengerbagusesetup()
{
    self endon( "_encstr_A3750609A5E61883" );
    self.owner endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 = &"_encstr_AD5C17C9F7612F661FE8CCC59557271C6EE2D89FA97D802449";
    self.useobj = scripts\mp\gameobjects::createhintobject( self.origin + anglestoup( self.angles ) * 1, "_encstr_98110C0B790BBF87AE11E9F1A8F5", undefined, var_0, undefined, undefined, "_encstr_B7180526C81F4B", 200, 160, 100, 160 );
    self.useobj.owner = self.owner;
    self.useobj.team = self.team;
    self.useobj linkto( self );

    foreach ( var_2 in level.players )
        self.useobj disableplayeruse( var_2 );

    thread scavengebagthink();
    thread scavengebagusemonitoring();

    for (;;)
    {
        self waittill( "_encstr_B192157178106315114B77074882C317AD301A72230FF9", var_2 );

        if ( isplayer( var_2 ) )
        {
            var_2 notify( "_encstr_BCF011E66C859D2B73CECAE4BE0EA51B6D57C1" );
            _id_12082( var_2 );
            var_2 scripts\mp\damagefeedback::hudicontype( "_encstr_A6460A8BD10F1B9FB81FBD92" );

            if ( isdefined( self.useobj ) )
                self.useobj delete();

            self notify( "_encstr_A3750609A5E61883" );
        }
    }
}

scavengebagusemonitoring()
{
    self endon( "_encstr_A3750609A5E61883" );
    self.owner endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 = 1;

    while ( var_0 )
    {
        wait 0.1;

        foreach ( var_2 in level.players )
        {
            if ( !isdefined( self ) )
            {
                var_0 = 0;
                continue;
            }

            if ( var_2.team != self.team || var_2 scripts\mp\utility\perk::_hasperk( "_encstr_9E57146EE0B21BA50B36A3BCD76EB1C23B5637765993" ) )
            {
                self.useobj disableplayeruse( var_2 );
                continue;
            }

            self.useobj enableplayeruse( var_2 );
        }
    }
}

scavengebagthink()
{
    self endon( "_encstr_B117130B3A8B51507373BFD3E7C98F9832FB784EDB" );
    var_0 = self.useobj;
    var_1 = undefined;

    if ( istrue( level.gameended ) && !isdefined( var_0 ) )
        return;

    while ( isdefined( self ) )
    {
        var_0 waittill( "_encstr_8B5C081B58E0B7A213E6", var_2 );
        var_2.iscapturingcrate = 1;
        var_1 = createuseent();
        var_1.id = "_encstr_971904D5B9B2";
        var_3 = var_1 useholdthink( var_2, getdvarfloat( "_encstr_A848209FFF837776F62FF819F711AB93AAE79D26D9CB2FF9B63FE040F717A3C3228F" ) );

        if ( !isdefined( var_2 ) )
            return;

        var_2.iscapturingcrate = 0;

        if ( var_3 )
            self notify( "_encstr_B192157178106315114B77074882C317AD301A72230FF9", var_2 );
    }
}

useholdthink( var_0, var_1 )
{
    self.curprogress = 0;
    self.inuse = 1;
    self.userate = 0;
    self.usetime = var_1;
    scripts\mp\movers::script_mover_link_to_use_object( var_0 );
    var_0 scripts\common\utility::allow_weapon( 0 );
    var_2 = useholdthinkloop( var_0 );

    if ( isalive( var_0 ) )
        var_0 scripts\common\utility::allow_weapon( 1 );

    if ( isdefined( var_0 ) )
        scripts\mp\movers::script_mover_unlink_from_use_object( var_0 );

    if ( !isdefined( self ) )
        return 0;

    self.inuse = 0;
    self.curprogress = 0;
    return var_2;
}

useholdthinkloop( var_0 )
{
    var_1 = internal_useholdthinkloop( var_0 );

    if ( isdefined( self ) )
        var_0 scripts\mp\gameobjects::updateuiprogress( self, 0 );

    return istrue( var_1 );
}

internal_useholdthinkloop( var_0 )
{
    self endon( "_encstr_8B2010CB8A8F878FD744981481896430D0E8" );

    while ( var_0 isplayerusing( self ) )
    {
        if ( !var_0 scripts\mp\movers::script_mover_use_can_link( self ) )
            return 0;

        self.curprogress = self.curprogress + level.framedurationseconds * self.userate;

        if ( isdefined( self.objectivescaler ) )
            self.userate = 1 * self.objectivescaler;
        else
            self.userate = 1;

        var_0 scripts\mp\gameobjects::updateuiprogress( self, 1 );

        if ( self.curprogress >= self.usetime )
            return scripts\mp\utility\player::isreallyalive( var_0 );

        waitframe();
    }

    return 0;
}

createuseent()
{
    var_0 = spawn( "_encstr_A3050EDF6FF5DC081CC1AFA37097B80B", self.origin );
    var_0.curprogress = 0;
    var_0.usetime = 0;
    var_0.userate = 3000;
    var_0.inuse = 0;
    var_0.id = self.id;
    var_0 linkto( self );
    var_0 thread deleteuseent( self );
    return var_0;
}

deleteuseent( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    var_0 waittill( "_encstr_A3750609A5E61883" );

    if ( isdefined( self.usedby ) )
    {
        foreach ( var_2 in self.usedby )
        {
            var_2 setclientomnvar( "_encstr_82370C57A5EBB92B1B57C9B4DC9D", 0 );
            var_2.ui_securing = undefined;
        }
    }

    self delete();
}

isplayerusing( var_0 )
{
    return !level.gameended && isdefined( var_0 ) && scripts\mp\utility\player::isreallyalive( self ) && self usebuttonpressed() && !self isonladder() && !self meleebuttonpressed() && var_0.curprogress < var_0.usetime && ( !isdefined( self.teleporting ) || !self.teleporting );
}

weaponcanstoreaccuracystats( var_0 )
{
    if ( scripts\mp\utility\weapon::iscacmeleeweapon( var_0.basename ) )
        return 0;

    return scripts\mp\utility\weapon::iscacprimaryweapon( var_0.basename ) || scripts\mp\utility\weapon::iscacsecondaryweapon( var_0.basename );
}

setweaponstat( var_0, var_1, var_2 )
{
    scripts\mp\gamelogic::setweaponstat( var_0, var_1, var_2 );
}

watchweaponusage( var_0 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_A1D70BDE071B53794F208AE3F8" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        self waittill( "_encstr_BE140D3FF56983E5E5C94AB288DB1F", var_1 );
        onweaponfired( var_1 );
    }
}

onweaponfired( var_0 )
{
    scripts\mp\gamelogic::sethasdonecombat( self, 1 );
    var_1 = gettime();

    if ( !isdefined( self.lastshotfiredtime ) )
        self.lastshotfiredtime = 0;

    var_2 = gettime() - self.lastshotfiredtime;
    self.lastshotfiredtime = var_1;

    if ( isai( self ) )
        return;

    if ( !weaponcanstoreaccuracystats( var_0 ) )
        return;

    thread watchformiss( var_0 );

    if ( scripts\mp\utility\game::onlinestatsenabled() )
    {
        var_3 = scripts\mp\playerstats_interface::getplayerstat( "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_882C0B7B2D8CF0C931ABCFF1EF" ) + 1;
        var_4 = scripts\mp\playerstats_interface::getplayerstat( "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_80CC058CB830E3" );
        scripts\mp\playerstats_interface::setplayerstatbuffered( var_3, "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_882C0B7B2D8CF0C931ABCFF1EF" );
        scripts\mp\playerstats_interface::setplayerstatbuffered( int( var_3 - var_4 ), "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_BADA076094A34865EB" );
    }

    var_5 = 1;
    setweaponstat( var_0, var_5, "_encstr_804806A3D04F9347" );
    setweaponstat( var_0, self.hits, "_encstr_80CC058CB830E3" );
    scripts\mp\utility\stats::incpersstat( "_encstr_97AB0BB614FAE16B465F60C073", 1 );
    self.hits = 0;

    if ( self getweaponammoclip( var_0 ) == 0 && self getweaponammostock( var_0 ) == 0 )
        level thread scripts\mp\battlechatter_mp::trysaylocalsound( self, "_encstr_8836104FE477D37F8BA8FDB3A7F10BC243F5" );
}

watchformiss( var_0 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    var_1 = createheadicon( var_0 );
    self endon( "_encstr_8B0C0EF392538BB869C07B2D63F03B68" + var_1 );
    waitframe();
    self.consecutivehitsperweapon[var_1] = 0;
    scripts\mp\events::shotmissed();
}

clearmiss( var_0 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    var_1 = createheadicon( var_0 );
    self notify( "_encstr_8B0C0EF392538BB869C07B2D63F03B68" + var_1 );
}

_id_144C3()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_A1D70BDE071B53794F208AE3F8" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        self waittill( "_encstr_8CF3153F1833A1F21F7D4A465D293A6D9B9893E7802901" );
        scripts\mp\playerstats_interface::addtoplayerstatbuffered( 1, "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_8BD00B054FCAE68981329B51DA" );
    }
}

checkhit( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    if ( var_0.isalternate )
    {
        var_2 = scripts\mp\utility\weapon::getweaponattachmentsbasenames( var_0 );

        if ( scripts\engine\utility::array_contains( var_2, "_encstr_A85B083786B7E8ECAEB9" ) || scripts\engine\utility::array_contains( var_2, "_encstr_89070358A2" ) || scripts\engine\utility::array_contains( var_2, "_encstr_877608807A621B2867B5" ) || scripts\engine\utility::array_contains( var_2, "_encstr_88D506545542FFDB" ) || scripts\engine\utility::array_contains( var_2, "_encstr_A3BD07C10B0F7F5556" ) || scripts\engine\utility::array_contains( var_2, "_encstr_8F3708CA308C739E5001" ) || scripts\engine\utility::array_contains( var_2, "_encstr_A6E00D2C2837F69E396E8009D35059" ) || scripts\engine\utility::array_contains( var_2, "_encstr_9B8B09FA614ECB20C93119" ) || scripts\engine\utility::array_contains( var_2, "_encstr_813507FFA8B84E0A2F" ) )
            self.hits = 1;
    }

    if ( !weaponcanstoreaccuracystats( var_0 ) )
        return;

    if ( self meleebuttonpressed() && var_0.basename != "_encstr_BED80DB4BB83AFD6379633CAEBB6E0" )
        return;

    switch ( weaponclass( var_0 ) )
    {
        case "_encstr_BE1904B9D6B3":
        case "_encstr_8A94070E2DCD8E7BB1":
        case "_encstr_B6070748328C39712B":
        case "_encstr_BE0703815F":
        case "_encstr_B453063D7FBAE9C8":
            self.hits++;
            break;
        case "_encstr_A91007F0AB1AC9A31A":
            self.hits = 1;
            break;
        default:
            break;
    }

    var_3 = createheadicon( var_0 );

    if ( scripts\mp\riotshield::isriotshield( var_0.basename ) || var_0.basename == "_encstr_BED80DB4BB83AFD6379633CAEBB6E0" )
    {
        thread scripts\mp\gamelogic::threadedsetweaponstatbyname( var_3, self.hits, "_encstr_80CC058CB830E3" );
        self.hits = 0;
    }

    waittillframeend;
    thread clearmiss( var_0 );

    if ( !isdefined( self.lasthittime[var_3] ) )
        self.lasthittime[var_3] = 0;

    if ( self.lasthittime[var_3] == gettime() )
        return;

    self.lasthittime[var_3] = gettime();

    if ( !isdefined( self.consecutivehitsperweapon ) || !isdefined( self.consecutivehitsperweapon[var_3] ) )
        self.consecutivehitsperweapon[var_3] = 1;
    else
    {
        self.consecutivehitsperweapon[var_3]++;
        scripts\cp\vehicles\vehicle_compass_cp::_id_12007( var_0, self.consecutivehitsperweapon[var_3] );
    }

    if ( scripts\mp\utility\game::onlinestatsenabled() )
    {
        var_4 = scripts\mp\playerstats_interface::getplayerstat( "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_882C0B7B2D8CF0C931ABCFF1EF" );
        var_5 = scripts\mp\playerstats_interface::getplayerstat( "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_80CC058CB830E3" ) + 1;

        if ( var_5 <= var_4 )
        {
            scripts\mp\playerstats_interface::setplayerstatbuffered( var_5, "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_80CC058CB830E3" );
            scripts\mp\playerstats_interface::setplayerstatbuffered( int( var_4 - var_5 ), "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_BADA076094A34865EB" );
        }
    }

    thread scripts\cp\vehicles\vehicle_compass_cp::onsuccessfulhit( var_0 );
    thread scripts\mp\events::shothit();
    var_6 = scripts\mp\utility\weapon::getweapongroup( var_0.basename );

    if ( var_6 == "_encstr_AF710B0B50BB6ACFA0C80C35FC" )
    {
        if ( !isdefined( self.shotslandedlmg ) )
            self.shotslandedlmg = 1;
        else
            self.shotslandedlmg++;
    }

    var_7 = gettime();
    self.lastdamagetime = var_7;

    if ( isdefined( var_1 ) )
        var_1.lasttimedamaged = var_7;
}

friendlyfirecheck( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_0 ) )
        return 1;

    if ( !level.teambased )
        return 1;

    var_4 = level.friendlyfire;

    if ( isdefined( var_2 ) )
        var_4 = var_2;

    if ( var_4 != 0 )
        return 1;

    if ( var_1 == var_0 || isdefined( var_1.owner ) && var_1.owner == var_0 )
        return 1;

    var_5 = undefined;

    if ( isdefined( var_1.owner ) )
        var_5 = var_1.owner.team;
    else if ( isdefined( var_1.team ) )
        var_5 = var_1.team;

    if ( !isdefined( var_5 ) )
        return 1;

    if ( var_5 != var_0.team )
        return 1;

    return 0;
}

watchequipmentonspawn()
{
    self notify( "_encstr_BD2816DDC2D18DA154B8D54BE0AD569B8E9ECD4D1C2C7773" );
    self endon( "_encstr_BD2816DDC2D18DA154B8D54BE0AD569B8E9ECD4D1C2C7773" );
    self endon( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A1D70BDE071B53794F208AE3F8" );
    deletedisparateplacedequipment();
    var_0 = scripts\mp\utility\dvars::getintproperty( "_encstr_A25F1C8BA05D61230191C5EC3D299B72B92873A290DB22571806D8F1CC90", 1 ) && ( !scripts\mp\utility\perk::_hasperk( "_encstr_871415CD83AC1BB416C6A3CBD7395D3BB35919F52BE2E0" ) || !checkequipforrugged() );

    if ( var_0 )
        deleteplacedequipment();

    var_1 = self.plantedtacticalequip.size;
    var_2 = self.plantedlethalequip.size;
    var_3 = self.plantedsuperequip.size;
    var_4 = self.plantedhackedequip.size;
    var_5 = var_1 && var_2 && var_3 && var_4;

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_871415CD83AC1BB416C6A3CBD7395D3BB35919F52BE2E0" ) && var_5 )
        thread scripts\mp\perks\perkfunctions::feedbackruggedeqp( var_2, var_1, var_3, var_4 );
}

getallequip()
{
    var_0 = [];

    if ( isdefined( self.plantedlethalequip ) )
        var_0 = scripts\engine\utility::array_combine( var_0, self.plantedlethalequip );

    if ( isdefined( self.plantedtacticalequip ) )
        var_0 = scripts\engine\utility::array_combine( var_0, self.plantedtacticalequip );

    if ( isdefined( self.plantedsuperequip ) )
        var_0 = scripts\engine\utility::array_combine( var_0, self.plantedsuperequip );

    if ( isdefined( self.plantedhackedequip ) )
        var_0 = scripts\engine\utility::array_combine( var_0, self.plantedhackedequip );

    return var_0;
}

removeequip( var_0 )
{
    if ( isdefined( self.plantedlethalequip ) )
        self.plantedlethalequip = scripts\engine\utility::array_remove( self.plantedlethalequip, var_0 );

    if ( isdefined( self.plantedtacticalequip ) )
        self.plantedtacticalequip = scripts\engine\utility::array_remove( self.plantedtacticalequip, var_0 );

    if ( isdefined( self.plantedsuperequip ) )
        self.plantedsuperequip = scripts\engine\utility::array_remove( self.plantedsuperequip, var_0 );

    if ( isdefined( self.plantedhackedequip ) )
        self.plantedhackedequip = scripts\engine\utility::array_remove( self.plantedhackedequip, var_0 );
}

checkequipforrugged()
{
    var_0 = scripts\engine\utility::array_combine( self.plantedtacticalequip, self.plantedlethalequip );

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( var_2.hasruggedeqp ) )
            return 1;
    }

    return 0;
}

watchgrenadeusage()
{
    self notify( "_encstr_9E71125CBEA327D09F1BE0B03FD40933BB26DCED" );
    self endon( "_encstr_9E71125CBEA327D09F1BE0B03FD40933BB26DCED" );
    self endon( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A1D70BDE071B53794F208AE3F8" );

    for (;;)
        watchgrenadethrows();
}

watchgrenadethrows()
{
    var_0 = _utilflare_isvalidflaretype::waittill_grenade_throw();

    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( var_0.weapon_name ) )
        return;

    setweaponstat( var_0.weapon_name, 1, "_encstr_804806A3D04F9347" );
    var_1 = scripts\mp\equipment::isequipmentlethal( var_0.weapon_name );
    var_2 = isdefined( var_0.equipmentref ) && scripts\mp\equipment::isequipmenttactical( var_0.equipmentref );
    scripts\mp\potg_events::grenadethrownevent( var_1 );
    scripts\mp\battlechatter_mp::ongrenadeuse( var_0 );
    scripts\mp\gamelogic::sethasdonecombat( self, 1 );

    if ( var_2 && self isthrowingbackgrenade() && getdvarint( "_encstr_AD561FA2CE6571E140A03F1BE03BA53931572E1BA3EF2A3C0B811F1BE8F19643D1", 1 ) )
    {
        self _meth_87A8();
        var_3 = getcompleteweaponname( var_0.weapon_name );
        var_4 = self getweaponammoclip( var_3 );
        var_5 = int( max( var_4 - 1, 0 ) );
        self setweaponammoclip( var_3, var_5 );
    }

    if ( scripts\mp\utility\weapon::isaxeweapon( var_0.weapon_name ) )
    {
        var_0 thread _utilflare_isvalidflaretype::watchgrenadeaxepickup( self );
        return;
    }

    var_0 thread scripts\mp\battlechatter_mp::grenadeproximitytracking();
    var_0.spawnpos = var_0.origin;

    switch ( var_0.weapon_name )
    {
        case "_encstr_A24A10B6DA889F713C522A18E8157A0F7580":
            if ( var_0.ticks >= 1 )
                var_0.iscooked = 1;

            var_0.originalowner = self;
            var_0 thread scripts\mp\shellshock::grenade_earthquake();
            break;
        case "_encstr_970F0EE3A041D9E66F48B47B63E1A071":
            if ( var_0.ticks >= 1 )
                var_0.iscooked = 1;

            var_0.originalowner = self;
            thread scripts\mp\equipment\wristrocket::wristrocketused( var_0 );
            var_0 thread scripts\mp\shellshock::grenade_earthquake( 0.6 );
            break;
        case "_encstr_9FA70ADF38B86C4AD188752A":
            thread _id_13018( var_0 );
            var_0 thread scripts\mp\shellshock::grenade_earthquake();
            break;
        case "_encstr_BCAE08D8D0F5B607F538":
            thread scripts\mp\equipment\c4::c4_used( var_0 );
            break;
        case "_encstr_9CD20F566B38D79DE4CA730B2356F55B83":
            thread scripts\mp\equipment\emp_grenade::emp_grenade_used( var_0 );
            break;
        case "_encstr_A31414205AE621AB6BBFED708F3B51D54E6218B9827A":
            thread scripts\mp\equipment\snapshot_grenade::snapshot_grenade_used( var_0, 0 );
            break;
        case "_encstr_802311433F5F07C5494F1BE12DA911CD999558":
            var_0 thread smokegrenadeused();
            break;
        case "_encstr_9FEA0A4BD5D8EB085A26CB99":
            thread scripts\mp\equipment\trophy_system::trophy_used( var_0 );
            break;
        case "_encstr_8256119AF01F0D6B267EB4D9958827153F1863":
            thread _debug_rooftop_heli_start::jeep_initomnvars( var_0 );
            break;
        case "_encstr_B9C40C1EFA1EBBB22FC305A93AF3":
            thread scripts\mp\equipment\claymore::claymore_use( var_0 );
            break;
        case "_encstr_B2430B07CCC710135D9A29B0E3":
            thread scripts\mp\equipment\at_mine::at_mine_use( var_0 );
            break;
        case "_encstr_89F817DB90A61F7BE06DDFAB1598477F588933B2B871273583":
        case "_encstr_BE851A55744BB78B09E36810FB51E1EBE15FC1550E8355B0EB0F30C0":
        case "_encstr_B40F16E88627DEDDD2DCCE5BDC4BCCCAEBCC2D392BBE5B0E":
        case "_encstr_89F511713BBB2818C13559D05DB9E85501B7F1":
            thread scripts\cp_mp\equipment\throwing_knife::throwing_knife_used( var_0 );
            break;
        case "_encstr_98730B19756A772BCF4369E043":
            var_0 thread scripts\mp\shellshock::grenade_earthquake();
            thread scripts\mp\equipment\molotov::molotov_used( var_0 );
            break;
        case "_encstr_94410C2B9B052323CB8D7A561F82":
            thread scripts\mp\equipment\thermite::thermite_used( var_0 );
            break;
        case "_encstr_9535193541C3815FCA9EF7FAEA2337C839877E802273C7B871FF88":
            thread scripts\mp\supers\spawnbeacon::thrown( var_0 );
            break;
        case "_encstr_8AAF1F1D2CD8FAED839BAFDCAEE0838DF2F5E0166CD6BE769CCAE62C91CAAF5BC1":
            thread scripts\mp\tac_ops\roles_utility::throwsupplypack( var_0 );
            break;
        case "_encstr_9FBC0F3B03937730DA3487F5471EE9B13B":
            thread scripts\mp\equipment\support_box::supportbox_used( var_0 );
            break;
        case "_encstr_B2BE0DF7651DBFEADE4AF09261B83B":
            thread scripts\mp\equipment\support_box::calloutmarkerpingvo_playpredictivepingadded( var_0 );
            break;
        case "_encstr_BE8B1123B28DF6BCFAB3932BDC0B1959BEB538":
            thread scripts\mp\equipment\decoy_grenade::decoy_used( var_0 );
            break;
        case "_encstr_BDD3079D0BB9FAB6C1":
            thread scripts\mp\equipment\gas_grenade::gas_used( var_0 );
            break;
        case "_encstr_A22E0D63D02EBB9A0D6E057A402303":
            thread scripts\mp\equipment\hb_sensor::hb_sensor_used( var_0 );
            break;
        case "_encstr_B32A125452AAF2972377D14FCD38D0350BBF2998":
            thread _determinelocationarray::postspawn_juggernaut( var_0 );
            break;
        case "_encstr_884A1932F00DA43F789DF7D3AF60536BA3C8B90B30C71A673671C0":
            thread _debug_rooftop_activesat::colmodel( var_0 );
            break;
        case "_encstr_BD0E0DE3F39ED94B58D34F92EE9080":
            thread scripts\mp\equipment\tactical_cover::tac_cover_used( var_0 );
            break;
        case "_encstr_9535093C4CC1E85501914B":
            thread scripts\mp\equipment\tac_insert::tacinsert_used( var_0 );
            break;
        case "_encstr_AB691F51EA6010308ED52099D003E15B633B41BDF31F6AA970EF3D6882BE6120B1":
            thread scripts\mp\equipment\advanced_supply_drop::advanced_supply_drop_marker_used( var_0 );
            break;
        case "_encstr_B7DF209259A33BF2160552A9409781EAB771F737F252B8688798903D075B3D274F73":
            thread scripts\mp\equipment\advanced_supply_drop::binoculars_onstatelospendingupdate( var_0 );
            break;
        case "_encstr_A6281D9BCB3BEF100B37F9969DFFE09D4153353F33F1A120328CC1CB49D550":
            thread scripts\mp\equipment\advanced_supply_drop::binoculars_onstateinvalidupdate( var_0 );
            break;
        case "_encstr_A8AB150CBD4F133FB3166358A0772F32B5C3A59B818D90":
            thread scripts\mp\equipment\weapon_drop::weapondrop_used( var_0 );
            break;
        case "_encstr_BD671524E950E24F19BC227871A7B5A1A5CA11CA7990AA":
            thread _findgivearmoramountanddropleftovers::wait_between_combat_action( var_0 );
            break;
        case "_encstr_B94516A690081B23D68FC7E78DE84A4208D85EEF4929ADAB":
            var_0 thread hoopty_truck_initdamage();
            break;
        case "_encstr_AFC80A53C25BD62BC9FAC427":
            thread _donewithcorpse::vehicle_compass_instanceisregistered( var_0 );
            break;
        case "_encstr_9B9A0E37E0781F39F14B411F09B1C0CA":
            thread _debug_rooftop_raid_exfil::morsenumber( var_0 );
            break;
        case "_encstr_BDFE136D5B9892BADE07A74F2D0D52C9B821A93553":
            thread _encstr_9CB1296EC6C94BC1A36EE55BC179B28BBAD2E0B5AC37E8CBDCEAADC42B9CCDFA9D4ECA9B851956E2D9B936::_encstr_82CE15C5CFCA2E085AF2DED1DA3528D732172F4B7F92E5( var_0 );
            break;
        default:
            if ( isdefined( level._id_1203B ) )
                [[ level._id_1203B ]]( var_0.weapon_name, var_0 );

            break;
    }

    _id_119B0( var_0.weapon_name );
}

_id_119B0( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    var_1 = scripts\mp\utility\weapon::getequipmenttype( var_0 );

    if ( !isdefined( var_1 ) )
        var_1 = "_encstr_AABA05236DC831";

    self dlog_recordplayerevent( "_encstr_BA28192336EDD9F5AC672BCD47EB95E2AE5A83B6CA73A3BEABE6B2", [ "_encstr_ADA20CC71D816B7D7D61C3BBA8B1", var_0, "_encstr_B3B20F7D999373B7AFBD7B64EE51907F15", var_1 ] );
}

hoopty_truck_initdamage()
{
    thread scripts\mp\utility\script::notifyafterframeend( "_encstr_A3750609A5E61883", "_encstr_B7F90C0A289181C7427F2C571D89" );
    self endon( "_encstr_B7F90C0A289181C7427F2C571D89" );
    var_0 = self.owner;
    self waittill( "_encstr_AB0808DFB97F822F1899", var_1 );
    thread scripts\mp\equipment\concussion_grenade::_id_12031( var_0, var_1 );
}

smokegrenadeused( var_0 )
{
    thread scripts\mp\utility\script::notifyafterframeend( "_encstr_A3750609A5E61883", "_encstr_B7F90C0A289181C7427F2C571D89" );
    self endon( "_encstr_B7F90C0A289181C7427F2C571D89" );

    if ( istrue( var_0 ) )
    {
        self waittill( "_encstr_8AE90E7D08B8538A21DB77CF1155D2B3", var_5, var_1, var_2, var_3, var_4, var_6 );
        thread _id_13426( var_5 );
        thread scripts\mp\bots\bots::init_leave_cave( var_5 );
    }
    else
        self waittill( "_encstr_AB0808DFB97F822F1899", var_5 );

    thread smokegrenadeexplode( var_5 );
    thread sfx_smoke_grenade_smoke( var_5 );

    if ( isdefined( self.owner ) )
        self.owner thread monitorsmokeactive();
}

sfx_smoke_grenade_smoke( var_0 )
{
    wait 0.2;
    var_1 = spawn( "_encstr_A3050EDF6FF5DC081CC1AFA37097B80B", var_0 );
    var_1 playloopsound( "_encstr_AB1817325208FB0FE7F9F0DF8BB1971517E04A08ABB1E77D6A" );
    var_1 scripts\cp_mp\ent_manager::registerspawncount( 1 );
    wait 5.25;
    thread scripts\engine\utility::play_sound_in_space( "_encstr_A2F1197F8F92EA61A708AAA5ABB9E350C17AA0304B3FF0A3D108B4", var_0 );
    wait 0.3;
    var_1 scripts\cp_mp\ent_manager::deregisterspawn();
    var_1 stoploopsound();
    var_1 delete();
}

smokegrenadeexplode( var_0 )
{
    wait 1;
    thread smokegrenadegiveblindeye( var_0 );
    var_1 = scripts\mp\utility\outline::addoutlineoccluder( var_0, 330 );
    wait 8.25;
    scripts\mp\utility\outline::removeoutlineoccluder( var_1 );
}

_id_13426( var_0, var_1 )
{
    playfx( scripts\engine\utility::getfx( "_encstr_877608807A621B2867B5" ), var_0, anglestoup( ( 0, 90, 0 ) ) );
}

smokegrenadegiveblindeye( var_0 )
{
    var_1 = spawnstruct();
    var_1.blindeyerecipients = [];
    smokegrenademonitorblindeyerecipients( var_1, var_0 );

    foreach ( var_3 in var_1.blindeyerecipients )
    {
        if ( isdefined( var_3 ) && scripts\mp\utility\player::isreallyalive( var_3 ) )
            var_3 scripts\mp\utility\perk::removeperk( "_encstr_BC8613CD83AC8DA5161B47CBBE4CD84B3732B2CBAC" );
    }
}

smokegrenademonitorblindeyerecipients( var_0, var_1 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_2 = gettime() + 8250.0;
    var_3 = [];

    while ( gettime() < var_2 )
    {
        var_3 = scripts\mp\utility\player::getplayersinradius( var_1, 330 );

        foreach ( var_7, var_5 in var_0.blindeyerecipients )
        {
            if ( !isdefined( var_5 ) )
            {
                var_0.blindeyerecipients[var_7] = undefined;
                continue;
            }

            var_6 = scripts\engine\utility::array_find( var_3, var_5 );

            if ( !isdefined( var_6 ) || !scripts\mp\utility\player::isreallyalive( var_5 ) )
            {
                if ( var_5 scripts\mp\utility\perk::_hasperk( "_encstr_BC8613CD83AC8DA5161B47CBBE4CD84B3732B2CBAC" ) )
                    var_5 scripts\mp\utility\perk::removeperk( "_encstr_BC8613CD83AC8DA5161B47CBBE4CD84B3732B2CBAC" );

                var_0.blindeyerecipients[var_7] = undefined;
            }

            if ( isdefined( var_6 ) )
                var_3[var_6] = undefined;
        }

        foreach ( var_9 in var_3 )
        {
            if ( !isdefined( var_9 ) )
                continue;

            var_9.lastinsmoketime = gettime();

            if ( isdefined( var_0.blindeyerecipients[var_9 getentitynumber()] ) )
                continue;

            if ( !scripts\mp\utility\player::isreallyalive( var_9 ) || scripts\mp\utility\entity::isspidergrenade( var_9 ) )
                continue;

            var_9 scripts\mp\utility\perk::giveperk( "_encstr_BC8613CD83AC8DA5161B47CBBE4CD84B3732B2CBAC" );
            var_0.blindeyerecipients[var_9 getentitynumber()] = var_9;
        }

        waitframe();
    }
}

monitorsmokeactive()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_BAD415516F184B5540EAC7C5F8A23B2156B344747FBA41" );
    self endon( "_encstr_BAD415516F184B5540EAC7C5F8A23B2156B344747FBA41" );
    scripts\mp\utility\print::printgameaction( "_encstr_BC75186848BD2489D2B40DBD60A36077D6BB9F03D77367086001", self );
    self.hasactivesmokegrenade = 1;
    var_0 = scripts\engine\utility::_id_143B9( 9.25, "_encstr_A3750609A5E61883" );
    self.hasactivesmokegrenade = 0;
    scripts\mp\utility\print::printgameaction( "_encstr_A93E1A3A51375A95F1C0CB9F60314C62017D0736CE7932CEE1406F83", self );
}

lockonlaunchers_gettargetarray( var_0 )
{
    var_1 = [];
    var_2 = 0;
    var_3 = lockonlaunchers_gettargetvehiclerefs();

    if ( level.teambased )
    {
        if ( isdefined( var_0 ) && var_0 == 1 )
        {
            foreach ( var_5 in level.characters )
            {
                if ( isdefined( var_5 ) && isalive( var_5 ) && ( var_5.team != self.team || var_2 ) )
                    var_1[var_1.size] = var_5;
            }
        }

        if ( isdefined( level.activekillstreaks ) )
        {
            foreach ( var_8 in level.activekillstreaks )
            {
                if ( isdefined( var_8 ) && isdefined( var_8.affectedbylockon ) && ( var_8.team != self.team || var_2 ) )
                    var_1[var_1.size] = var_8;
            }
        }

        if ( isdefined( level.cratedropdata ) )
        {
            if ( isdefined( level.cratedropdata.ac130s ) )
            {
                foreach ( var_11 in level.cratedropdata.ac130s )
                {
                    if ( isdefined( var_11 ) && ( var_11.team != self.team || var_2 ) )
                        var_1[var_1.size] = var_11;
                }
            }
        }

        foreach ( var_14 in var_3 )
        {
            var_15 = scripts\cp_mp\vehicles\vehicle_tracking::vehicle_tracking_getgameinstances( var_14 );

            foreach ( var_17 in var_15 )
            {
                if ( isdefined( var_17 ) && ( !scripts\cp_mp\vehicles\vehicle::_id_141B9( var_17, self ) || var_2 ) )
                    var_1[var_1.size] = var_17;
            }
        }
    }
    else
    {
        if ( isdefined( var_0 ) && var_0 == 1 )
        {
            foreach ( var_5 in level.characters )
            {
                if ( ( !isdefined( var_5 ) || !isalive( var_5 ) ) && !var_2 )
                    continue;

                var_1[var_1.size] = var_5;
            }
        }

        if ( isdefined( level.activekillstreaks ) )
        {
            foreach ( var_8 in level.activekillstreaks )
            {
                if ( isdefined( var_8.affectedbylockon ) && ( isdefined( var_8.owner ) && var_8.owner != self || var_2 ) )
                    var_1[var_1.size] = var_8;
            }
        }

        if ( isdefined( level.cratedropdata ) )
        {
            if ( isdefined( level.cratedropdata.ac130s ) )
            {
                foreach ( var_11 in level.cratedropdata.ac130s )
                {
                    if ( var_11.owner != self || var_2 )
                        var_1[var_1.size] = var_11;
                }
            }
        }

        foreach ( var_14 in var_3 )
        {
            var_15 = scripts\cp_mp\vehicles\vehicle_tracking::vehicle_tracking_getgameinstances( var_14 );

            foreach ( var_17 in var_15 )
            {
                if ( !isdefined( var_17.owner ) )
                {
                    var_1[var_1.size] = var_17;
                    continue;
                }

                if ( var_17.owner != self || var_2 )
                    var_1[var_1.size] = var_17;
            }
        }
    }

    return var_1;
}

lockonlaunchers_gettargetvehiclerefs()
{
    var_0 = [ "_encstr_AB510CB03836AF93ABCD6ED21673", "_encstr_A219044B93BB", "_encstr_89D409C62C37C78B785B69", "_encstr_93120C26CEB35F60D753E8D8E70B", "_encstr_98C20F6C169CCEDEEB1D27EA1B5BFA6BCE", "_encstr_8BE6087F2FD7198BE893", "_encstr_A1CD07D38757E319A8", "_encstr_AAAA0DD8226FF768989F5155DD46C8", "_encstr_B6DE05E0ED1382", "_encstr_ADDA105BE0A397A247C59A5620C72B570BF0", "_encstr_A6390B63B4CEA1D17D1D16E6AD", "_encstr_BC8F0CED4311BB6CA9F19BBFB0A1", "_encstr_A4E90F635A473A63B2BEC4D2E48CBEAD9D", "_encstr_9C60118D79F0B99B717F6B7B6BA8A3F87B2343", "_encstr_8BD60D9FC127C05BAA49605883063F", "_encstr_BC120A09810621EE6FAB69F3", "_encstr_81D70A1B037642AEF0D9F6BD", "_encstr_A1190473C198", "_encstr_9BB30DCA70D71B7F91C39F98E77903", "_encstr_94C20B50BFCB3F037BF93BA34D", "_encstr_B7C80A23E9733716DA39060C", "_encstr_82F407ABC5611796BB", "_encstr_BE820BD3200D4F82C52D7CF780", "_encstr_A1F51125F3D09601DA23771B6F76AAC220785E" ];

    if ( isdefined( level.playerzombieupdatetagobjectives ) )
        var_0 = level.playerzombieupdatetagobjectives;

    return var_0;
}

watchmissileusage()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    for (;;)
    {
        var_0 = waittill_missile_fire();
        updatemissilefire( var_0 );
    }
}

updatemissilefire( var_0 )
{
    var_1 = undefined;
    var_2 = 0;

    switch ( var_0.weapon_name )
    {
        case "_encstr_89BB137823B2E0281E1FF7D5474538B057DB3660BB":
        case "_encstr_A96D112BD7424E71F6412840DACA230B87652F":
        case "_encstr_AD69112DF308C9012A3F87B5E7B2DD7BD7CDAB":
        case "_encstr_BE3E15324BBBD7B5B807B4F11D48BF67CC203B7AD6F9A3":
        case "_encstr_AAD0152DEE0EEB3685D7A3C9CDE80BDC8CC2278C7DB683":
            var_1 = self.missilelaunchertarget;
            level thread scripts\mp\battlechatter_mp::watchbrsquadleaderdisconnect( var_0 );
            level thread scripts\mp\battlechatter_mp::trysaylocalsound( self, "_encstr_8C040B0D6AE20FE3C72FC0B85B", undefined, 0.5 );
            break;
        case "_encstr_A623119954EA97FD2321729BA06BF7737E3108":
            var_1 = self.javelin.target;
            level thread scripts\mp\battlechatter_mp::javelinfired( self.team, self.javelin.target.origin );
            level thread scripts\mp\battlechatter_mp::trysaylocalsound( self, "_encstr_8C040B0D6AE20FE3C72FC0B85B", undefined, 0.5 );
            break;
        case "_encstr_89070358A2":
            var_2 = 1;
            break;
        case "_encstr_877608807A621B2867B5":
            var_2 = 1;
            var_0 thread smokegrenadeused( 1 );
            break;
        case "_encstr_88D506545542FFDB":
            var_2 = 1;
            thread scripts\mp\equipment\gas_grenade::gas_used( var_0 );
            break;
        case "_encstr_8F3708CA308C739E5001":
        case "_encstr_A3BD07C10B0F7F5556":
            var_2 = 1;
            break;
        case "_encstr_A6E00D2C2837F69E396E8009D35059":
            var_2 = 1;
            var_0 thread scripts\mp\shellshock::grenade_earthquake();
            thread scripts\mp\equipment\thermite::thermite_used( var_0, 1 );
            break;
        case "_encstr_9B8B09FA614ECB20C93119":
            var_2 = 1;
            break;
        case "_encstr_813507FFA8B84E0A2F":
            var_2 = 1;
            thread scripts\mp\equipment\snapshot_grenade::snapshot_grenade_used( var_0, var_2 );
            break;
        default:
            break;
    }

    if ( scripts\cp_mp\utility\weapon_utility::islockonlauncher( var_0.weapon_name ) && isdefined( var_1 ) )
    {
        var_0._id_119A0 = var_1;
        level notify( "_encstr_A9B90EDC47D273B3CA4E7D66A539B2C8", self, var_0, var_1 );
        thread scripts\cp_mp\utility\weapon_utility::watchtargetlockedontobyprojectile( var_1, var_0 );
    }

    if ( isplayer( self ) )
        var_0.adsfire = scripts\mp\utility\player::isplayerads();

    if ( !var_2 && isexplosivemissile( var_0.weapon_name ) )
    {
        var_3 = 1.0;

        if ( issmallmissile( var_0.weapon_name ) )
            var_3 = 0.65;

        var_0 thread scripts\mp\shellshock::grenade_earthquake( var_3 );
    }

    scripts\mp\events::missilefired( var_0 );
}

issmallmissile( var_0 )
{
    return 0;
}

isexplosivemissile( var_0 )
{
    var_1 = getweaponbasename( var_0 );

    switch ( var_1 )
    {
        case "_encstr_9DDA13EB9009312B3066BBAD855E6B024FD081B2D0":
        case "_encstr_80F90E9B3B1ACA5737679B98FA5FA188":
        case "_encstr_80710E6E59BA032F8849DAA7D3502298":
        case "_encstr_9BBC0FD39F078E9A7F6A2B936525A9E96B":
            return 0;
    }

    return 1;
}

movingplatformdetonate( var_0 )
{
    if ( !isdefined( var_0.lasttouchedplatform ) || !isdefined( var_0.lasttouchedplatform.destroyexplosiveoncollision ) || var_0.lasttouchedplatform.destroyexplosiveoncollision )
        self notify( "_encstr_98CE128F25716ACE890827AFC3C3B412174B9347" );
}

monitordisownedequipment( var_0, var_1, var_2 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_1 endon( "_encstr_A3750609A5E61883" );
    var_1 notify( "_encstr_BC011B0FC070A98317F6C7845E2F8B66B9232787F848085A6B80D3EC6B" );
    var_1 endon( "_encstr_BC011B0FC070A98317F6C7845E2F8B66B9232787F848085A6B80D3EC6B" );

    if ( istrue( var_2 ) )
        var_0 scripts\engine\utility::_id_143A5( "_encstr_B2170C4AD884CDC823B9DB9D9F42", "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    else
        var_0 scripts\engine\utility::_id_143A6( "_encstr_B2170C4AD884CDC823B9DB9D9F42", "_encstr_8CD0124A97D7F07BAD07C8C342FAA010C490DD5B", "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    var_1 deleteexplosive();
}

monitordisownedgrenade( var_0, var_1 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_1 endon( "_encstr_A3750609A5E61883" );
    var_1 endon( "_encstr_80120D914193818F2AFA48381307A1" );
    scripts\engine\utility::waittill_any_ents( var_0, "_encstr_B2170C4AD884CDC823B9DB9D9F42", var_0, "_encstr_8CD0124A97D7F07BAD07C8C342FAA010C490DD5B", var_0, "_encstr_8A820B4696CDB1ED3737AC1B3A", level, "_encstr_A39F11A0FDA082D16B53E91FFF45070A08980A" );

    if ( isdefined( var_1 ) )
        var_1 delete();
}

isplantedequipment( var_0 )
{
    return isdefined( level.mines[var_0 getentitynumber()] ) || istrue( var_0.planted );
}

getmaxplantedlethalequip( var_0 )
{
    var_1 = 2;

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_A4D722FA831F46391719BB981F50AB83231A4FE058B9752342B93F79E72737638DF51B4B" ) )
        var_1++;

    return var_1;
}

getmaxplantedtacticalequip( var_0 )
{
    var_1 = 2;

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_A4D722FA831F46391719BB981F50AB83231A4FE058B9752342B93F79E72737638DF51B4B" ) )
        var_1++;

    return var_1;
}

getmaxplantedsuperequip( var_0 )
{
    return 1;
}

getmaxplantedhackedequip()
{
    return 3;
}

onequipmentplanted( var_0, var_1, var_2 )
{
    var_0.equipmentref = var_1;
    var_0.deletefunc = var_2;
    var_0.planted = 1;
    updateplantedarray( var_0 );
    var_3 = var_0 getentitynumber();
    level.mines[var_3] = var_0;

    if ( var_1 != "_encstr_AB701059B8AB4B38FAE88536D78DB7ECCAE4" )
    {
        var_0 enableplayermarks( "_encstr_BE8F0A2BB8D596386BB273A3" );

        if ( level.teambased )
            var_0 filteroutplayermarks( self.team );
        else
            var_0 filteroutplayermarks( self );
    }

    var_0 notify( "_encstr_80120D914193818F2AFA48381307A1" );
}

updateplantedarray( var_0 )
{
    var_1 = undefined;
    var_2 = 0;
    var_3 = scripts\mp\equipment::findequipmentslot( var_0.equipmentref );

    if ( istrue( var_0.ishacked ) )
    {
        var_1 = var_0.owner.plantedhackedequip;
        var_2 = getmaxplantedhackedequip();
    }
    else if ( istrue( var_0.issuper ) )
    {
        var_1 = var_0.owner.plantedsuperequip;
        var_2 = getmaxplantedsuperequip( var_0.equipmentref );
    }
    else if ( isdefined( var_3 ) && var_3 == "_encstr_987F080E394BDAC2E45E" || scripts\mp\equipment::isequipmentlethal( var_0.equipmentref ) )
    {
        var_1 = var_0.owner.plantedlethalequip;
        var_2 = getmaxplantedlethalequip( self );
    }
    else if ( isdefined( var_3 ) && var_3 == "_encstr_B98F0AC7D5B99F4DDBA8353B" || scripts\mp\equipment::isequipmenttactical( var_0.equipmentref ) )
    {
        var_1 = var_0.owner.plantedtacticalequip;
        var_2 = getmaxplantedtacticalequip( self );
    }

    if ( !isdefined( var_1 ) )
    {
        var_4 = "_encstr_B12E0A3AC30667AA9025F2F0" + var_0.issuper + "_encstr_9F08099651EEEB85C01D50" + var_3 + "_encstr_BC99118A3A9131139B770D07509959ED597232" + var_0.equipmentref + "_encstr_B24E0C9CF1B8AD0B082B9A929AF7" + scripts\mp\equipment::is_equipment_slot_allowed( "_encstr_BEB4068F1B5BA3AB" );
        scripts\mp\utility\script::laststand_dogtags( var_4 );
    }

    if ( var_1.size > 0 )
    {
        if ( var_1.size && var_1.size >= var_2 )
        {
            var_5 = var_1[0];
            var_1 = scripts\engine\utility::array_remove( var_1, var_5 );
            var_5 deleteexplosive();
        }
    }

    var_1[var_1.size] = var_0;

    if ( istrue( var_0.ishacked ) )
        var_0.owner.plantedhackedequip = var_1;
    else if ( istrue( var_0.issuper ) )
        var_0.owner.plantedsuperequip = var_1;
    else if ( isdefined( var_3 ) && var_3 == "_encstr_987F080E394BDAC2E45E" || scripts\mp\equipment::isequipmentlethal( var_0.equipmentref ) )
        var_0.owner.plantedlethalequip = var_1;
    else if ( isdefined( var_3 ) && var_3 == "_encstr_B98F0AC7D5B99F4DDBA8353B" || scripts\mp\equipment::isequipmenttactical( var_0.equipmentref ) )
        var_0.owner.plantedtacticalequip = var_1;
}

setplantedequipmentuse( var_0 )
{
    var_1 = getallequip();

    foreach ( var_3 in var_1 )
    {
        if ( isdefined( var_3.trigger ) && isdefined( var_3.owner ) )
        {
            if ( var_0 )
            {
                var_3.trigger enableplayeruse( var_3.owner );
                continue;
            }

            var_3.trigger disableplayeruse( var_3.owner );
        }
    }
}

cleanupequipment( var_0, var_1, var_2 )
{
    if ( isdefined( var_0 ) )
        level.mines[var_0] = undefined;

    if ( isdefined( var_1 ) )
        var_1 delete();

    if ( isdefined( var_2 ) )
        var_2 delete();
}

equipmenthit( var_0, var_1, var_2, var_3 )
{
    if ( scripts\cp_mp\utility\player_utility::playersareenemies( var_1, var_0 ) )
    {
        if ( !isdefined( var_2 ) )
            return;

        if ( scripts\mp\utility\weapon::iskillstreakweapon( var_2.basename ) )
            return;

        var_4 = createheadicon( var_2 );

        if ( !isdefined( var_1.lasthittime ) )
            var_1.lasthittime = [];

        if ( !isdefined( var_1.lasthittime[var_4] ) )
            var_1.lasthittime[var_4] = 0;

        if ( var_1.lasthittime[var_4] == gettime() )
            return;

        var_1.lasthittime[var_4] = gettime();
        var_1 thread scripts\mp\gamelogic::threadedsetweaponstatbyname( var_4, 1, "_encstr_80CC058CB830E3" );

        if ( scripts\mp\utility\game::onlinestatsenabled() )
        {
            var_5 = var_1 scripts\mp\playerstats_interface::getplayerstat( "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_882C0B7B2D8CF0C931ABCFF1EF" );
            var_6 = var_1 scripts\mp\playerstats_interface::getplayerstat( "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_80CC058CB830E3" ) + 1;

            if ( var_6 <= var_5 )
            {
                scripts\mp\playerstats_interface::setplayerstatbuffered( var_6, "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_80CC058CB830E3" );
                scripts\mp\playerstats_interface::setplayerstatbuffered( int( var_5 - var_6 ), "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_BADA076094A34865EB" );
            }
        }

        if ( isdefined( var_3 ) && scripts\engine\utility::isbulletdamage( var_3 ) || scripts\mp\utility\damage::isprojectiledamage( var_3 ) )
        {
            var_1.lastdamagetime = gettime();
            var_7 = scripts\mp\utility\weapon::getweapongroup( var_2.basename );

            if ( var_7 == "_encstr_AF710B0B50BB6ACFA0C80C35FC" )
            {
                if ( !isdefined( var_1.shotslandedlmg ) )
                    var_1.shotslandedlmg = 1;
                else
                    var_1.shotslandedlmg++;
            }
        }
    }
}

deleteexplosive()
{
    if ( !isdefined( self ) )
        return;

    scripts\mp\sentientpoolmanager::unregistersentient( self.sentientpool, self.sentientpoolindex );
    var_0 = self getentitynumber();
    level.mines[var_0] = undefined;
    self disableplayermarks( "_encstr_BE8F0A2BB8D596386BB273A3" );

    if ( isdefined( self.deletefunc ) )
    {
        self thread [[ self.deletefunc ]]();
        self notify( "_encstr_939012EF1F23DFAC9B844935E25B0B205AC57DA8" );
    }
    else
    {
        var_1 = self.killcament;
        var_2 = self.trigger;
        cleanupequipment( var_0, var_1, var_2 );
        self notify( "_encstr_939012EF1F23DFAC9B844935E25B0B205AC57DA8" );
        self delete();
    }
}

makeexplosiveusable( var_0 )
{
    self setotherent( self.owner );

    if ( !isdefined( var_0 ) )
        var_0 = 10;

    var_1 = spawn( "_encstr_A3050EDF6FF5DC081CC1AFA37097B80B", self.origin + var_0 * anglestoup( self.angles ) );
    var_1 linkto( self );
    self.trigger = var_1;
    var_1.owner = self;
    thread makeexplosiveusableinternal();
    return var_1;
}

makeexplosiveusableinternal()
{
    self endon( "_encstr_BAAF16C56BF0F7A78BB3023ABB6B33AFA9CD554383407DEF" );
    var_0 = self.trigger;
    watchexplosiveusable();

    if ( isdefined( self ) )
    {
        var_0 = self.trigger;
        self.trigger = undefined;
    }

    if ( isdefined( var_0 ) )
        var_0 delete();
}

makeexplosiveunusable()
{
    self notify( "_encstr_BAAF16C56BF0F7A78BB3023ABB6B33AFA9CD554383407DEF" );
    var_0 = self.trigger;
    self.trigger = undefined;

    if ( isdefined( var_0 ) )
        var_0 delete();
}

watchexplosiveusable()
{
    var_0 = self.owner;
    var_1 = self.trigger;
    self endon( "_encstr_A3750609A5E61883" );
    var_1 endon( "_encstr_A3750609A5E61883" );
    var_0 endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_1 setcursorhint( "_encstr_939A0CEC70DBF521459F5B47F73D" );
    var_1 scripts\mp\utility\usability::setselfusable( var_0 );
    var_1 childthread scripts\mp\utility\usability::notusableforjoiningplayers( var_0 );
    var_1 childthread scripts\mp\utility\usability::notusableafterownerchange( var_0, self );
    var_1 setexplosiveusablehintstring( self.weapon_name );

    for (;;)
    {
        var_1 waittillmatch( "_encstr_8B5C081B58E0B7A213E6", var_0 );

        if ( isdefined( self.weapon_name ) )
        {
            switch ( self.weapon_name )
            {
                case "_encstr_9FEA0A4BD5D8EB085A26CB99":
                    thread scripts\mp\equipment\trophy_system::trophy_pickup();
                    break;
            }

            var_0 thread scripts\mp\equipment\c4::c4_resetaltdetonpickup();
        }

        var_0 playlocalsound( "_encstr_BD1516E6D82C6795373BB2C9D70E586CD6BE07A5B1D6AB38" );
        var_0 notify( "_encstr_A8790F63211B16B173EF0DB22062859507", self.weapon_name );
        var_2 = scripts\mp\equipment::getequipmentreffromweapon( getcompleteweaponname( self.weapon_name ) );

        if ( isdefined( var_2 ) && self.owner scripts\mp\equipment::hasequipment( var_2 ) )
            self.owner scripts\mp\equipment::incrementequipmentammo( var_2, 1 );

        thread deleteexplosive();
        return;
    }
}

makeexplosiveusabletag( var_0, var_1 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_BAAF16C56BF0F7A78BB3023ABB6B33AFA9CD554383407DEF" );
    var_2 = self.owner;
    var_3 = self.weapon_name;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    if ( var_1 )
        self enablemissilehint( 1 );
    else
        self setcursorhint( "_encstr_939A0CEC70DBF521459F5B47F73D" );

    self sethinttag( var_0 );
    self setuserange( 72 );
    setexplosiveusablehintstring( self.weapon_name );
    scripts\mp\utility\usability::setselfusable( var_2 );
    childthread scripts\mp\utility\usability::notusableforjoiningplayers( var_2 );
    childthread scripts\mp\utility\usability::notusableafterownerchange( var_2, self );

    for (;;)
    {
        self waittillmatch( "_encstr_8B5C081B58E0B7A213E6", var_2 );

        if ( istrue( var_2.isjuggernaut ) )
        {
            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "_encstr_801904A15DC8", "_encstr_A4851193A81077FF205DAFBA4BF03A3F4FE14A" ) )
                var_2 [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "_encstr_801904A15DC8", "_encstr_A4851193A81077FF205DAFBA4BF03A3F4FE14A" ) ]]( "_encstr_9DC125D747D8E95F892ACD79D7D18E05A135418FDF873DBD4F15DF9D47DFC9C3C12BE5F047F980" );

            continue;
        }

        if ( isdefined( var_3 ) )
        {
            switch ( var_3 )
            {
                case "_encstr_9FEA0A4BD5D8EB085A26CB99":
                    thread scripts\mp\equipment\trophy_system::trophy_pickup();
                    break;
                case "_encstr_8256119AF01F0D6B267EB4D9958827153F1863":
                    thread _debug_rooftop_heli_start::jugg_health_debug();
            }

            var_2 thread scripts\mp\equipment\c4::c4_resetaltdetonpickup();
        }

        var_2 playlocalsound( "_encstr_BD1516E6D82C6795373BB2C9D70E586CD6BE07A5B1D6AB38" );
        var_2 notify( "_encstr_A8790F63211B16B173EF0DB22062859507", var_3 );
        var_4 = scripts\mp\equipment::getequipmentreffromweapon( getcompleteweaponname( var_3 ) );

        if ( isdefined( var_4 ) )
        {
            if ( self.owner scripts\mp\equipment::hasequipment( var_4 ) )
                self.owner scripts\mp\equipment::incrementequipmentammo( var_4, 1 );
            else if ( isdefined( level._id_1205C ) )
                [[ level._id_1205C ]]( self.owner, var_4 );
        }

        if ( isdefined( self.useobj ) )
            self.useobj delete();

        thread deleteexplosive();
        return;
    }
}

makeexplosiveunusuabletag()
{
    self notify( "_encstr_BAAF16C56BF0F7A78BB3023ABB6B33AFA9CD554383407DEF" );
    self makeunusable();
}

setexplosiveusablehintstring( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_BCAE08D8D0F5B607F538":
            self sethintstring( &"_encstr_B7CD1A8DD25D54E2FF5090AD372C504D616E686AE7757C2B8FE9C53B" );
            break;
        case "_encstr_B2430B07CCC710135D9A29B0E3":
            self sethintstring( &"_encstr_9B691F2D1755C4D878159C7D36ABC9C54B17075ABCB687C7F920B64949C5B199D9" );
            break;
        case "_encstr_B9C40C1EFA1EBBB22FC305A93AF3":
            self sethintstring( &"_encstr_94E920A73737511814C32D83A990E80C7C629F6761DEFCF71F493B217619C4584F33" );
            break;
        case "_encstr_82B20FC7F7829E3F2B75B2566D5FF9105B":
            self sethintstring( &"_encstr_943B23C301233C1FF13B9B0DF1EC8BD3C54915D98471478BC3E7D95901C968613B70469CE3" );
            break;
        case "_encstr_9FEA0A4BD5D8EB085A26CB99":
            self sethintstring( &"_encstr_95AC1E35C9CFB401F5F8C11931DC4B2CA3539837794F3CC36A61095128E28106" );
            break;
    }
}

explosivehandlemovers( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.linkparent = var_0;
    var_2.deathoverridecallback = ::movingplatformdetonate;
    var_2.endonstring = "_encstr_A3750609A5E61883";

    if ( _calloutmarkerping_handleluinotify_enemyrepinged::tugofwar_tank( var_0 ) )
    {
        var_2._id_123B4 = 1;
        self _meth_87BA( 1 );
    }

    if ( !isdefined( var_1 ) || !var_1 )
        var_2.invalidparentoverridecallback = scripts\mp\movers::moving_platform_empty_func;

    thread scripts\mp\movers::handle_moving_platforms( var_2 );
}

explosivetrigger( var_0, var_1, var_2 )
{
    if ( isplayer( var_0 ) && var_0 scripts\mp\utility\perk::_hasperk( "_encstr_BCE514D798B143B2EB192B60E8990A0459482707C069" ) )
    {
        var_0 thread scripts\cp\vehicles\vehicle_compass_cp::triggereddelayedexplosion();
        var_1 = level.delayminetime;
    }

    wait( var_1 );
}

getdamageableents( var_0, var_1, var_2, var_3 )
{
    var_4 = [];

    if ( !isdefined( var_2 ) )
        var_2 = 0;

    if ( !isdefined( var_3 ) )
        var_3 = 0;

    var_5 = var_1 * var_1;
    var_6 = level.players;

    for ( var_7 = 0; var_7 < var_6.size; var_7++ )
    {
        if ( !isalive( var_6[var_7] ) || var_6[var_7].sessionstate != "_encstr_8F7508BB18675378EBC7" )
            continue;

        var_8 = scripts\mp\utility\damage::get_damageable_player_pos( var_6[var_7] );
        var_9 = distancesquared( var_0, var_8 );

        if ( var_9 < var_5 && ( !var_2 || weapondamagetracepassed( var_0, var_8, var_3, var_6[var_7] ) ) )
            var_4[var_4.size] = scripts\mp\utility\damage::get_damageable_player( var_6[var_7], var_8 );
    }

    var_10 = getentarray( "_encstr_A28D080FA2D39DC7FAFA", "_encstr_B9110A36362C3737732CDA59" );

    for ( var_7 = 0; var_7 < var_10.size; var_7++ )
    {
        var_11 = scripts\mp\utility\damage::get_damageable_grenade_pos( var_10[var_7] );
        var_9 = distancesquared( var_0, var_11 );

        if ( var_9 < var_5 && ( !var_2 || weapondamagetracepassed( var_0, var_11, var_3, var_10[var_7] ) ) )
            var_4[var_4.size] = scripts\mp\utility\damage::get_damageable_grenade( var_10[var_7], var_11 );
    }

    var_12 = getentarray( "_encstr_A8460D91CA6EA3C957C6D1A5981BB2", "_encstr_B8CE0BE43FC317DF690862BA48" );

    for ( var_7 = 0; var_7 < var_12.size; var_7++ )
    {
        var_11 = var_12[var_7].origin;
        var_9 = distancesquared( var_0, var_11 );

        if ( var_9 < var_5 && ( !var_2 || weapondamagetracepassed( var_0, var_11, var_3, var_12[var_7] ) ) )
        {
            var_13 = spawnstruct();
            var_13.isplayer = 0;
            var_13.isadestructable = 0;
            var_13.entity = var_12[var_7];
            var_13.damagecenter = var_11;
            var_4[var_4.size] = var_13;
        }
    }

    var_14 = getentarray( "_encstr_A8040D8DA50F4B2D93E278E8CAEDCB", "_encstr_B8CE0BE43FC317DF690862BA48" );

    for ( var_7 = 0; var_7 < var_14.size; var_7++ )
    {
        var_11 = var_14[var_7].origin;
        var_9 = distancesquared( var_0, var_11 );

        if ( var_9 < var_5 && ( !var_2 || weapondamagetracepassed( var_0, var_11, var_3, var_14[var_7] ) ) )
        {
            var_13 = spawnstruct();
            var_13.isplayer = 0;
            var_13.isadestructable = 1;
            var_13.entity = var_14[var_7];
            var_13.damagecenter = var_11;
            var_4[var_4.size] = var_13;
        }
    }

    var_15 = getentarray( "_encstr_88710C0763169AF7A3330A1229D8", "_encstr_B9110A36362C3737732CDA59" );

    foreach ( var_17 in var_15 )
    {
        var_11 = var_17.origin + ( 0, 0, 32 );
        var_9 = distancesquared( var_0, var_11 );

        if ( var_9 < var_5 && ( !var_2 || weapondamagetracepassed( var_0, var_11, var_3, var_17 ) ) )
        {
            switch ( var_17.model )
            {
                case "_encstr_81BA199BDA08932F218901F044A3491361E508938830280D99A82B":
                case "_encstr_9D93133DB1A98AD76649BA52F035EF83AB5DBABD01":
                case "_encstr_971F0E7813C1FF319777158D3283F989":
                case "_encstr_9880146EB273E8E4F2D7ADD237B4CEABE67DEEB258B5":
                    var_4[var_4.size] = scripts\mp\utility\damage::get_damageable_sentry( var_17, var_11 );
                    break;
            }
        }
    }

    var_19 = getentarray( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", "_encstr_B9110A36362C3737732CDA59" );

    foreach ( var_21 in var_19 )
    {
        if ( var_21.model != "_encstr_94F4221CE4F63556D8E8D26356AF31F6AE9B8D96CDB3D78959D13A97BE76C9CA9B0BC8AC" && var_21.model != "_encstr_A130128969B3A70A17B0E3BBF87705EFC9C00C21" )
            continue;

        var_11 = var_21.origin + ( 0, 0, 32 );
        var_9 = distancesquared( var_0, var_11 );

        if ( var_9 < var_5 && ( !var_2 || weapondamagetracepassed( var_0, var_11, var_3, var_21 ) ) )
            var_4[var_4.size] = scripts\mp\utility\damage::get_damageable_mine( var_21, var_11 );
    }

    return var_4;
}

weapondamagetracepassed( var_0, var_1, var_2, var_3 )
{
    var_4 = undefined;
    var_5 = var_1 - var_0;

    if ( lengthsquared( var_5 ) < var_2 * var_2 )
        return 1;

    var_6 = vectornormalize( var_5 );
    var_4 = var_0 + ( var_6[0] * var_2, var_6[1] * var_2, var_6[2] * var_2 );
    var_7 = scripts\engine\trace::_bullet_trace( var_4, var_1, 0, var_3 );

    if ( getdvarint( "_encstr_9B1411726EDB26D2E1B1626CF2DFE17F467BDF" ) != 0 || getdvarint( "_encstr_AB550F13EE13274F9B58134A59FB85876B" ) != 0 )
    {
        thread debugprint( var_0, "_encstr_89A7053E2BF8D4" );

        if ( isdefined( var_3 ) )
            thread debugprint( var_1, "_encstr_B74C028B" + var_3.classname );
        else
            thread debugprint( var_1, "_encstr_89840B086D052922781A75276F" );

        if ( var_7["_encstr_B130095358E1B3930B687D"] == 1 )
            thread debugline( var_4, var_1, ( 1, 1, 1 ) );
        else
        {
            thread debugline( var_4, var_7["_encstr_B7260923C89E8F3378E72E"], ( 1, 0.9, 0.8 ) );
            thread debugline( var_7["_encstr_B7260923C89E8F3378E72E"], var_1, ( 1, 0.4, 0.3 ) );
        }
    }

    return var_7["_encstr_B130095358E1B3930B687D"] == 1;
}

damageent( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    if ( self.isplayer )
    {
        self.damageorigin = var_5;
        self.entity thread [[ level.callbackplayerdamage ]]( var_0, var_1, var_2, 0, var_3, var_4, var_5, var_6, "_encstr_AABA05236DC831", 0 );
    }
    else
    {
        if ( self.isadestructable && ( var_4.basename == "_encstr_8C950D507B43B3E8DB154EC3D72793" || var_4.basename == "_encstr_B9C40C1EFA1EBBB22FC305A93AF3" || var_4.basename == "_encstr_A41710508B9713580B8848DE97B741A77D33" ) )
            return;

        self.entity notify( "_encstr_B8BE07320B5B16ECAC", var_2, var_1, ( 0, 0, 0 ), ( 0, 0, 0 ), "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9", "_encstr_A40101", "_encstr_A40101", "_encstr_A40101", undefined, var_4 );
    }
}

debugline( var_0, var_1, var_2 )
{
    for ( var_3 = 0; var_3 < 600; var_3++ )
        wait 0.05;
}

debugcircle( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_3 ) )
        var_3 = 16;

    var_4 = 360 / var_3;
    var_5 = [];

    for ( var_6 = 0; var_6 < var_3; var_6++ )
    {
        var_7 = var_4 * var_6;
        var_8 = cos( var_7 ) * var_1;
        var_9 = sin( var_7 ) * var_1;
        var_10 = var_0[0] + var_8;
        var_11 = var_0[1] + var_9;
        var_12 = var_0[2];
        var_5[var_5.size] = ( var_10, var_11, var_12 );
    }

    for ( var_6 = 0; var_6 < var_5.size; var_6++ )
    {
        var_13 = var_5[var_6];

        if ( var_6 + 1 >= var_5.size )
            var_14 = var_5[0];
        else
            var_14 = var_5[var_6 + 1];

        thread debugline( var_13, var_14, var_2 );
    }
}

debugprint( var_0, var_1 )
{
    for ( var_2 = 0; var_2 < 600; var_2++ )
        wait 0.05;
}

onweapondamage( var_0, var_1, var_2, var_3, var_4 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    if ( !scripts\mp\utility\player::isreallyalive( self ) )
        return;

    switch ( var_1.basename )
    {
        case "_encstr_AFDA1189BAC9B09BE2C729231BFB55505F5513":
        case "_encstr_B94516A690081B23D68FC7E78DE84A4208D85EEF4929ADAB":
        case "_encstr_B8C015E3F7CF776B6DD38B0391D6551D4ACE31CB3932F0":
        case "_encstr_B89B0FB411E85A7F7B5B8A11C1CC7F5598":
        case "_encstr_9D8D0F1D34CAC9ADA51D597D16837DB5E0":
        case "_encstr_98730B19756A772BCF4369E043":
            break;
        case "_encstr_94410C2B9B052323CB8D7A561F82":
            scripts\cp_mp\utility\shellshock_utility::_shellshock( "_encstr_94410C2B9B052323CB8D7A561F82", "_encstr_BA440AE369236808B76F2DB8", 0.5 );
            break;
        case "_encstr_BCAE08D8D0F5B607F538":
        case "_encstr_9FA70ADF38B86C4AD188752A":
        case "_encstr_A24A10B6DA889F713C522A18E8157A0F7580":
            scripts\cp_mp\utility\shellshock_utility::_shellshock( "_encstr_A24A10B6DA889F713C522A18E8157A0F7580", "_encstr_BA440AE369236808B76F2DB8", 0.5 );
            break;
        default:
            scripts\mp\shellshock::shellshockondamage( var_2, var_3 );
            break;
    }
}

updatelastweapon()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_A1D70BDE071B53794F208AE3F8" );
    self.lastnormalweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() );
    self.lastweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() );
    self.lastcacweaponobj = scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ) && scripts\mp\utility\weapon::iscacprimaryorsecondary( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() );
    _id_1316B( scripts\engine\utility::ter_op( isdefined( self.spawnweaponobj ), self.spawnweaponobj, isundefinedweapon() ) );

    for (;;)
    {
        self waittill( "_encstr_89390E4C39FEB818C099781C19966AEB", var_0 );
        self.lastweaponobj = var_0;

        if ( isnormallastweapon( var_0 ) )
            self.lastnormalweaponobj = var_0;

        if ( isdroppableweapon( var_0 ) )
            _id_1316B( var_0 );

        if ( scripts\mp\utility\weapon::iscacprimaryorsecondary( var_0 ) )
            self.lastcacweaponobj = var_0;
    }
}

isnormallastweapon( var_0 )
{
    if ( var_0.basename == "_encstr_AABA05236DC831" )
        return 0;

    if ( var_0.classname == "_encstr_9BAF074BA0ED9A9773" )
        return 0;

    if ( scripts\mp\utility\weapon::issuperweapon( var_0.basename ) )
        return 0;

    if ( scripts\mp\utility\weapon::iskillstreakweapon( var_0.basename ) )
        return 0;

    if ( scripts\mp\utility\weapon::isspecialmeleeweapon( var_0 ) )
        return 0;

    if ( var_0.inventorytype != "_encstr_987F080E394BDAC2E45E" && var_0.inventorytype != "_encstr_A4DC0819F2E399503F45" )
        return 0;

    return 1;
}

isdroppableweapon( var_0 )
{
    if ( var_0.basename == "_encstr_AABA05236DC831" )
        return 0;

    if ( isfistweapon( var_0.basename ) )
        return 0;

    if ( isbombplantweapon( var_0.basename ) )
        return 0;

    if ( scripts\mp\utility\weapon::iskillstreakweapon( var_0.basename ) )
        return 0;

    if ( scripts\mp\utility\weapon::issuperweapon( var_0.basename ) )
        return 0;

    if ( var_0.inventorytype != "_encstr_987F080E394BDAC2E45E" )
        return 0;

    if ( var_0.classname == "_encstr_9BAF074BA0ED9A9773" )
        return 0;

    if ( !scripts\mp\utility\weapon::iscacprimaryweapon( var_0.basename ) && !scripts\mp\utility\weapon::iscacsecondaryweapon( var_0.basename ) )
        return 0;

    return 1;
}

updatemovespeedonweaponchange()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_A1D70BDE071B53794F208AE3F8" );

    for (;;)
    {
        self waittill( "_encstr_89390E4C39FEB818C099781C19966AEB", var_0 );

        if ( var_0.basename == "_encstr_AABA05236DC831" )
            continue;
        else if ( scripts\mp\utility\weapon::issuperweapon( var_0.basename ) )
        {
            updatemovespeedscale();
            continue;
        }
        else if ( scripts\mp\utility\weapon::iskillstreakweapon( var_0.basename ) )
            continue;
        else if ( var_0.basename == "_encstr_AF9310234B172F41E14FD8E8170D5BF7FAF2" )
        {
            updatemovespeedscale();
            continue;
        }
        else if ( var_0.inventorytype != "_encstr_987F080E394BDAC2E45E" && var_0.inventorytype != "_encstr_A4DC0819F2E399503F45" )
            continue;

        updatemovespeedscale();
    }
}

getweaponspeedslowest()
{
    var_0 = 2.0;
    self.weaponlist = self getweaponslistprimaries();

    if ( self.weaponlist.size )
    {
        foreach ( var_2 in self.weaponlist )
        {
            if ( scripts\mp\utility\weapon::issuperweapon( var_2 ) )
                var_3 = scripts\mp\supers::getmovespeedforsuperweapon( var_2 );
            else if ( scripts\mp\utility\weapon::isgamemodeweapon( var_2 ) )
                var_3 = getgamemodeweaponspeed( var_2 );
            else
                var_3 = getweaponspeed( var_2 );

            if ( var_3 == 0 )
                continue;

            if ( var_3 < var_0 )
                var_0 = var_3;
        }
    }
    else
        var_0 = 0.85;

    var_0 = clampweaponspeed( var_0 );
    return var_0;
}

getweaponspeed( var_0 )
{
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0 );

    if ( !isdefined( var_1 ) || !isdefined( level.weaponmapdata[var_1] ) || !isdefined( level.weaponmapdata[var_1].speed ) )
        return 1.0;

    return level.weaponmapdata[var_1].speed;
}

getgamemodeweaponspeed( var_0 )
{
    return 0.93;
}

clampweaponspeed( var_0 )
{
    return clamp( var_0, 0.0, 1.0 );
}

updateviewkickscale( var_0 )
{
    if ( isdefined( var_0 ) )
        self.viewkickscale = var_0;

    var_1 = self getcurrentweapon();

    if ( isdefined( self.overchargeviewkickscale ) )
        var_0 = self.overchargeviewkickscale;
    else if ( isdefined( self.overrideviewkickscale ) )
    {
        var_0 = self.overrideviewkickscale;
        var_2 = scripts\mp\utility\weapon::_id_14584( var_1 );

        if ( var_2 == 1 )
            var_0 = self.overrideviewkickscalepistol;
        else if ( var_2 == 4 )
            var_0 = self._id_1218D;
        else if ( var_2 == 2 )
            var_0 = self._id_1218E;
        else if ( var_2 == 3 )
            var_0 = self._id_1218F;
        else if ( var_2 == 5 )
            var_0 = self.overrideviewkickscalesniper;
    }
    else if ( isdefined( self.viewkickscale ) )
        var_0 = self.viewkickscale;
    else
        var_0 = 1.0;

    if ( weaponclass( var_1 ) == "_encstr_B6070748328C39712B" && level.debug_unlock_silo == 1 )
    {
        if ( var_1 hasattachment( "_encstr_8C3212B6F517DB57023228499A9E07715B913DA5", 1 ) && var_1 hasattachment( "_encstr_8AAA0D89854EBE1E63FA1A2B169D2F", 1 ) )
            var_0 = var_0 * 0.7;
        else if ( var_1 hasattachment( "_encstr_8AAA0D89854EBE1E63FA1A2B169D2F", 1 ) )
            var_0 = var_0 * 0.85;
        else if ( var_1 hasattachment( "_encstr_8C3212B6F517DB57023228499A9E07715B913DA5", 1 ) )
            var_0 = var_0 * 0.8;
        else if ( var_1 hasattachment( "_encstr_81E20D356303C8FFD03024774F1F40", 1 ) )
            var_0 = var_0 * 0.85;
        else if ( var_1 hasattachment( "_encstr_AD790A348573231B56AFB9B9", 1 ) )
            var_0 = var_0 * 0.75;
        else if ( isdefined( self.viewkickscale ) )
            var_0 = self.viewkickscale;
        else
            var_0 = 1.0;
    }

    var_0 = clamp( var_0, 0.0, 1.0 );
    self setviewkickscale( var_0 );
}

updatemovespeedscale()
{
    var_0 = undefined;

    if ( isdefined( self.playerstreakspeedscale ) )
    {
        var_0 = 1.0;
        var_0 = var_0 + self.playerstreakspeedscale;
    }
    else
    {
        var_0 = getplayerspeedbyweapon( self );

        if ( isdefined( self.overrideweaponspeed_speedscale ) )
            var_0 = self.overrideweaponspeed_speedscale;

        var_1 = self.chill_data;

        if ( isdefined( var_1 ) && isdefined( var_1.speedmod ) )
            var_0 = var_0 + var_1.speedmod;

        if ( isdefined( self.gasspeedmod ) )
            var_0 = var_0 + self.gasspeedmod;

        if ( isdefined( self.disabledspeedmod ) )
            var_0 = var_0 + self.disabledspeedmod;

        if ( isdefined( self.speedonkillmod ) )
            var_0 = var_0 + self.speedonkillmod;

        if ( isdefined( self.momentumspeedincrease ) )
            var_0 = var_0 + self.momentumspeedincrease;
    }

    self.weaponspeed = var_0;

    if ( !isdefined( self.combatspeedscalar ) )
        self.combatspeedscalar = 1;

    var_0 = var_0 + ( self.movespeedscaler - 1.0 );
    var_0 = var_0 + ( self.combatspeedscalar - 1.0 );
    var_0 = clamp( var_0, 0.0, 1.08 );

    if ( isdefined( self.fastcrouchspeedmod ) )
        var_0 = var_0 + self.fastcrouchspeedmod;

    self setmovespeedscale( var_0 );
}

getplayerspeedbyweapon( var_0 )
{
    var_1 = 1.0;
    self.weaponlist = self getweaponslistprimaries();

    if ( !self.weaponlist.size )
        var_1 = 0.85;
    else
    {
        var_2 = self getcurrentweapon();

        if ( !isdefined( var_2 ) )
            var_1 = getweaponspeedslowest();
        else if ( scripts\mp\utility\weapon::issuperweapon( var_2.basename ) )
            var_1 = scripts\mp\supers::getmovespeedforsuperweapon( var_2 );
        else if ( scripts\mp\utility\weapon::isgamemodeweapon( var_2.basename ) )
            var_1 = getgamemodeweaponspeed( var_2 );
        else if ( scripts\mp\utility\weapon::iskillstreakweapon( var_2.basename ) )
            var_1 = 0.85;
        else if ( scripts\mp\utility\weapon::unset_relic_mythic( var_2.basename ) )
            var_1 = 0.85;
        else
        {
            if ( var_2.inventorytype != "_encstr_987F080E394BDAC2E45E" && var_2.inventorytype != "_encstr_A4DC0819F2E399503F45" || scripts\mp\utility\weapon::update_health_bar_to_player( var_2 ) )
            {
                if ( isdefined( self.lastnormalweaponobj ) )
                    var_2 = self.lastnormalweaponobj;
                else
                    var_2 = undefined;
            }

            if ( !self hasweapon( var_2 ) )
                var_1 = getweaponspeedslowest();
            else
                var_1 = getweaponspeed( var_2 );
        }
    }

    var_1 = clampweaponspeed( var_1 );
    return var_1;
}

stancerecoiladjuster()
{
    if ( !isplayer( self ) )
        return;

    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_A1D70BDE071B53794F208AE3F8" );
    self notifyonplayercommand( "_encstr_93EE0FE07B824B079B8FFD6EA3A275F1F5", "_encstr_A8E308ACE6E82C73B1CA" );
    self notifyonplayercommand( "_encstr_93EE0FE07B824B079B8FFD6EA3A275F1F5", "_encstr_A44609F657CA4A130156DF" );

    if ( !self isconsoleplayer() && !isai( self ) )
    {
        self notifyonplayercommand( "_encstr_93EE0FE07B824B079B8FFD6EA3A275F1F5", "_encstr_9C680E37148560E4E31A2973C2FFAE50" );
        self notifyonplayercommand( "_encstr_93EE0FE07B824B079B8FFD6EA3A275F1F5", "_encstr_AF8B0C0328DF0FDADAF983F2280A" );
        self notifyonplayercommand( "_encstr_93EE0FE07B824B079B8FFD6EA3A275F1F5", "_encstr_B9F70AEA07DF6363E2452CB8" );
        self notifyonplayercommand( "_encstr_93EE0FE07B824B079B8FFD6EA3A275F1F5", "_encstr_9F700AB4D6B79DCA8C7BBBB9" );
        self notifyonplayercommand( "_encstr_93EE0FE07B824B079B8FFD6EA3A275F1F5", "_encstr_9B54077A803B1825A7" );
        self notifyonplayercommand( "_encstr_93EE0FE07B824B079B8FFD6EA3A275F1F5", "_encstr_871207B4834E7B3756" );
    }

    for (;;)
    {
        scripts\engine\utility::_id_143A6( "_encstr_93EE0FE07B824B079B8FFD6EA3A275F1F5", "_encstr_BC1A0D3F70BB911AE9A8964FACFBD2", "_encstr_89390E4C39FEB818C099781C19966AEB" );
        wait 0.5;
        var_0 = self getstance();
        stancerecoilupdate( var_0 );
    }
}

stancerecoilupdate( var_0 )
{
    var_1 = self getcurrentprimaryweapon();
    var_2 = 0;

    if ( isrecoilreducingweapon( var_1 ) )
        var_2 = getrecoilreductionvalue();

    if ( var_0 == "_encstr_9F24062875D5FD98" )
    {
        var_3 = scripts\mp\utility\weapon::getweapongroup( var_1 );

        if ( var_3 == "_encstr_AF710B0B50BB6ACFA0C80C35FC" )
        {
            scripts\mp\utility\weapon::setrecoilscale( 0, 0 );
            return;
        }

        if ( var_3 == "_encstr_AABE0E47EF4F93A830EFCFC309E7BF9E" )
        {
            if ( var_1 hasattachment( "_encstr_93820C9A3B6862973141E23B891D", 1 ) )
            {
                scripts\mp\utility\weapon::setrecoilscale( 0, 0 + var_2 );
                return;
            }

            scripts\mp\utility\weapon::setrecoilscale( 0, 0 + var_2 );
            return;
            return;
        }

        scripts\mp\utility\weapon::setrecoilscale();
        return;
        return;
    }
    else if ( var_0 == "_encstr_9C3D071B63023B26C3" )
    {
        var_3 = scripts\mp\utility\weapon::getweapongroup( var_1 );

        if ( var_3 == "_encstr_AF710B0B50BB6ACFA0C80C35FC" )
        {
            scripts\mp\utility\weapon::setrecoilscale( 0, 0 );
            return;
        }

        if ( var_3 == "_encstr_AABE0E47EF4F93A830EFCFC309E7BF9E" )
        {
            if ( var_1 hasattachment( "_encstr_93820C9A3B6862973141E23B891D", 1 ) )
            {
                scripts\mp\utility\weapon::setrecoilscale( 0, 0 + var_2 );
                return;
            }

            scripts\mp\utility\weapon::setrecoilscale( 0, 0 + var_2 );
            return;
            return;
        }

        scripts\mp\utility\weapon::setrecoilscale();
        return;
        return;
    }
    else if ( var_2 > 0 )
        scripts\mp\utility\weapon::setrecoilscale( 0, var_2 );
    else
        scripts\mp\utility\weapon::setrecoilscale();
}

deleteallgrenades()
{
    if ( isdefined( level.grenades ) )
    {
        foreach ( var_1 in level.grenades )
        {
            if ( isdefined( var_1 ) && !istrue( var_1.exploding ) && !isplantedequipment( var_1 ) )
                var_1 delete();
        }
    }

    if ( isdefined( level.missiles ) )
    {
        foreach ( var_4 in level.missiles )
        {
            if ( isdefined( var_4 ) && !istrue( var_4.exploding ) && !isplantedequipment( var_4 ) )
                var_4 delete();
        }
    }
}

minegettwohitthreshold()
{
    return 80;
}

minedamagemonitor()
{
    self endon( "_encstr_885012FA3F78403F22A08CBC74AAC8BBE30F467D" );
    self endon( "_encstr_A3750609A5E61883" );
    self setcandamage( 1 );
    self.maxhealth = 100000;
    self.health = self.maxhealth;
    var_0 = undefined;
    var_1 = 1;
    var_2 = "_encstr_8CFB0986B4E856B8EA960E";

    for (;;)
    {
        self waittill( "_encstr_B8BE07320B5B16ECAC", var_3, var_0, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15 );
        var_11 = scripts\mp\utility\weapon::mapweapon( var_11, var_15 );
        var_16 = var_0;

        if ( !isplayer( var_0 ) && !isagent( var_0 ) )
        {
            if ( isdefined( var_0.owner ) && isplayer( var_0.owner ) )
                var_16 = var_0.owner;
        }

        if ( !isplayer( var_16 ) && !isagent( var_16 ) )
            continue;

        if ( isdefined( var_11 ) && isendstr( var_11.basename, "_encstr_A618097527F38D709F9DC3" ) )
            continue;

        if ( !friendlyfirecheck( self.owner, var_16 ) )
            continue;

        if ( scripts\mp\utility\damage::non_player_should_ignore_damage( var_16, var_11, var_15, var_6 ) )
            continue;

        var_17 = scripts\engine\utility::ter_op( scripts\mp\utility\damage::isfmjdamage( var_11, var_6, 1 ) || var_3 >= 80, 2, 1 );
        var_1 = var_1 - var_17;
        equipmenthit( self.owner, var_16, var_11, var_6 );

        if ( var_1 <= 0 )
            break;
        else
            var_16 scripts\mp\damagefeedback::updatedamagefeedback( var_2 );
    }

    self notify( "_encstr_807B0FB55B2DA2A77128C7C388C8496A81" );

    if ( isdefined( var_6 ) && ( issubstr( var_6, "_encstr_A11B0CBD04C9B790F653EBCF4915" ) || issubstr( var_6, "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9" ) ) )
        self.waschained = 1;

    if ( isdefined( var_10 ) && var_10 & level.idflags_penetration )
        self.wasdamagedfrombulletpenetration = 1;

    if ( isdefined( var_10 ) && var_10 & level.idflags_ricochet )
        self.wasdamagedfrombulletricochet = 1;

    self.wasdamaged = 1;

    if ( isdefined( var_16 ) )
        self.damagedby = var_16;

    if ( isdefined( self.killcament ) )
        self.killcament.damagedby = var_16;

    if ( isplayer( var_16 ) )
    {
        var_16 scripts\mp\damagefeedback::updatedamagefeedback( var_2 );

        if ( var_16 != self.owner && var_16.team != self.owner.team )
        {
            var_16 scripts\mp\killstreaks\killstreaks::givescoreforequipment( self, var_11 );
            var_16 scripts\mp\battlechatter_mp::equipmentdestroyed( self );
            scripts\cp\vehicles\vehicle_compass_cp::equipmentdestroyed( var_15, var_0, var_3, var_10, undefined, var_11, undefined, var_16.modifiers );
        }
    }

    if ( level.teambased )
    {
        if ( isdefined( var_16 ) && isdefined( var_16.pers["_encstr_89EF05D46BA8FD"] ) && isdefined( self.owner ) && isdefined( self.owner.pers["_encstr_89EF05D46BA8FD"] ) )
        {
            if ( var_16.pers["_encstr_89EF05D46BA8FD"] != self.owner.pers["_encstr_89EF05D46BA8FD"] )
                var_16 notify( "_encstr_B6BB140AE56FC14D7781B0FDAF0869F3E818D827BDEB" );
        }
    }
    else if ( isdefined( self.owner ) && isdefined( var_16 ) && var_16 != self.owner )
        var_16 notify( "_encstr_B6BB140AE56FC14D7781B0FDAF0869F3E818D827BDEB" );

    scripts\cp\vehicles\vehicle_compass_cp::minedestroyed( self, var_16, var_6 );
    self notify( "_encstr_98CE128F25716ACE890827AFC3C3B412174B9347", var_16 );
}

mineselfdestruct()
{
    self endon( "_encstr_8F9C0FB87BDEBD6105A2446FAAE5AA4D6C" );
    self endon( "_encstr_807B0FB55B2DA2A77128C7C388C8496A81" );
    self endon( "_encstr_A3750609A5E61883" );
    wait( level.mineselfdestructtime + randomfloat( 0.4 ) );
    self notify( "_encstr_885012FA3F78403F22A08CBC74AAC8BBE30F467D" );
    self notify( "_encstr_98CE128F25716ACE890827AFC3C3B412174B9347" );
}

mineexplodeonnotify()
{
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self waittill( "_encstr_98CE128F25716ACE890827AFC3C3B412174B9347", var_0 );

    if ( !isdefined( self ) || !isdefined( self.owner ) )
        return;

    if ( !isdefined( var_0 ) )
        var_0 = self.owner;

    var_1 = self.config;
    var_2 = var_1.vfxtag;

    if ( !isdefined( var_2 ) )
        var_2 = "_encstr_B8BF073A0BD9F5CC0F";

    var_3 = self gettagorigin( var_2 );

    if ( !isdefined( var_3 ) )
        var_3 = self gettagorigin( "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );

    self notify( "_encstr_AB0808DFB97F822F1899", var_3 );
    waitframe();

    if ( !isdefined( self ) || !isdefined( self.owner ) )
        return;

    self hide();

    if ( isdefined( var_1.onexplodefunc ) )
        self thread [[ var_1.onexplodefunc ]]();

    if ( isdefined( var_1.onexplodesfx ) )
        self playsound( var_1.onexplodesfx );

    var_4 = scripts\engine\utility::ter_op( isdefined( var_1.onexplodevfx ), var_1.onexplodevfx, level.mine_explode );
    playfx( var_4, var_3 );
    var_5 = scripts\engine\utility::ter_op( isdefined( var_1.minedamagemin ), var_1.minedamagemin, level.minedamagemin );
    var_6 = scripts\engine\utility::ter_op( isdefined( var_1.minedamagemax ), var_1.minedamagemax, level.minedamagemax );
    var_7 = scripts\engine\utility::ter_op( isdefined( var_1.minedamageradius ), var_1.minedamageradius, level.minedamageradius );

    if ( var_6 > 0 )
        self radiusdamage( self.origin, var_7, var_6, var_5, var_0, "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9", self.weapon_name );

    if ( isdefined( self.owner ) )
        self.owner thread scripts\mp\utility\dialog::leaderdialogonplayer( "_encstr_807B0FB55B2DA2A77128C7C388C8496A81", undefined, undefined, self.origin );

    wait 0.2;
    deleteexplosive();
}

deleteplacedequipment( var_0 )
{
    if ( isdefined( self.plantedlethalequip ) )
    {
        foreach ( var_2 in self.plantedlethalequip )
        {
            if ( isdefined( var_2 ) )
                var_2 deleteexplosive();
        }
    }

    self.plantedlethalequip = [];

    if ( isdefined( self.plantedtacticalequip ) )
    {
        foreach ( var_2 in self.plantedtacticalequip )
        {
            if ( isdefined( var_2 ) )
                var_2 deleteexplosive();
        }
    }

    self.plantedtacticalequip = [];
    var_6 = scripts\mp\utility\game::isanymlgmatch() || istrue( var_0 );

    if ( isdefined( self.plantedhackedequip ) )
    {
        foreach ( var_8, var_2 in self.plantedhackedequip )
        {
            if ( isdefined( var_2 ) && ( !var_6 || !istrue( var_2.issuper ) ) )
            {
                var_2 deleteexplosive();
                self.plantedhackedequip[var_8] = undefined;
            }
        }

        self.plantedhackedequip = scripts\engine\utility::array_removeundefined( self.plantedhackedequip );
    }

    if ( var_6 && isdefined( self.plantedsuperequip ) )
    {
        foreach ( var_8, var_2 in self.plantedsuperequip )
        {
            var_2 deleteexplosive();
            self.plantedsuperequip[var_8] = undefined;
        }

        self.plantedsuperequip = scripts\engine\utility::array_removeundefined( self.plantedsuperequip );
    }
}

deletedisparateplacedequipment()
{
    var_0 = scripts\mp\equipment::getcurrentequipment( "_encstr_987F080E394BDAC2E45E" );

    foreach ( var_2 in self.plantedlethalequip )
    {
        if ( isdefined( var_2 ) )
        {
            if ( !isdefined( var_2.equipmentref ) || !isdefined( var_0 ) || var_2.equipmentref != var_0 )
                var_2 deleteexplosive();
        }
    }

    var_4 = scripts\mp\equipment::getcurrentequipment( "_encstr_B98F0AC7D5B99F4DDBA8353B" );

    foreach ( var_2 in self.plantedtacticalequip )
    {
        if ( isdefined( var_2 ) )
        {
            if ( !isdefined( var_2.equipmentref ) || !isdefined( var_4 ) || var_2.equipmentref != var_4 )
                var_2 deleteexplosive();
        }
    }
}

equipmentdeletevfx( var_0, var_1 )
{
    if ( isdefined( var_0 ) )
    {
        if ( isdefined( var_1 ) )
        {
            var_2 = anglestoforward( var_1 );
            var_3 = anglestoup( var_1 );
            playfx( scripts\engine\utility::getfx( "_encstr_B8921295C5AE2D075BACDCE8EB56871C8DDB32CA" ), var_0, var_2, var_3 );
            playfx( scripts\engine\utility::getfx( "_encstr_977510B14FCD58281FB0B50D5EAB6860EF05" ), var_0, var_2, var_3 );
        }
        else
        {
            playfx( scripts\engine\utility::getfx( "_encstr_B8921295C5AE2D075BACDCE8EB56871C8DDB32CA" ), var_0 );
            playfx( scripts\engine\utility::getfx( "_encstr_977510B14FCD58281FB0B50D5EAB6860EF05" ), var_0 );
        }

        playsoundatpos( var_0, "_encstr_B7A11838930F209B82258E15BA4AD368A77B90503FD89B4B7ACA" );
    }
    else if ( isdefined( self ) )
    {
        var_4 = self.origin;
        var_2 = anglestoforward( self.angles );
        var_3 = anglestoup( self.angles );
        playfx( scripts\engine\utility::getfx( "_encstr_B8921295C5AE2D075BACDCE8EB56871C8DDB32CA" ), var_4, var_2, var_3 );
        playfx( scripts\engine\utility::getfx( "_encstr_977510B14FCD58281FB0B50D5EAB6860EF05" ), var_4, var_2, var_3 );
        self playsound( "_encstr_B7A11838930F209B82258E15BA4AD368A77B90503FD89B4B7ACA" );
    }
}

vehcolignorelist()
{
    if ( level.mapname == "_encstr_AF930F218A615DA0FA270848A30198876A" || isstartstr( level.mapname, "_encstr_9B5F09ADABD7170887F14F" ) )
        return 1;

    return 0;
}

buildattachmentmaps()
{
    level.attachmentmap_uniquetobase = [];
    level.attachmentmap_uniquetoextra = [];
    level.weaponattachments = [];
    var_0 = [];
    var_1 = 1;
    var_2 = tablelookupbyrow( "_encstr_9899156F3940C2A468E966ACAD88F6CBC9B3A3EA87967B", var_1, 0 );

    for ( var_3 = scripts\mp\utility\game::unset_relic_grounded(); var_2 != "_encstr_A40101"; var_2 = tablelookupbyrow( "_encstr_9899156F3940C2A468E966ACAD88F6CBC9B3A3EA87967B", var_1, 0 ) )
    {
        if ( var_3 || scripts\cp_mp\utility\weapon_utility::vehicle_ai_script_models( var_2 ) || vehcolignorelist() )
            var_0[var_0.size] = var_2;

        var_1++;
    }

    var_4 = [];
    var_5 = 1;

    for ( var_6 = tablelookupbyrow( "_encstr_9899156F3940C2A468E966ACAD88F6CBC9B3A3EA87967B", 0, var_5 ); var_6 != "_encstr_A40101"; var_6 = tablelookupbyrow( "_encstr_9899156F3940C2A468E966ACAD88F6CBC9B3A3EA87967B", 0, var_5 ) )
    {
        var_4[var_6] = var_5;
        var_5++;
    }

    level.attachmentmap_basetounique = [];

    foreach ( var_2 in var_0 )
    {
        foreach ( var_11, var_9 in var_4 )
        {
            var_10 = tablelookup( "_encstr_9899156F3940C2A468E966ACAD88F6CBC9B3A3EA87967B", 0, var_2, var_9 );

            if ( var_10 == "_encstr_A40101" )
                continue;

            if ( !isdefined( level.attachmentmap_basetounique[var_2] ) )
                level.attachmentmap_basetounique[var_2] = [];

            level.attachmentmap_basetounique[var_2][var_11] = var_10;

            if ( !isdefined( level.attachmentmap_uniquetobase[var_10] ) )
            {
                level.attachmentmap_uniquetobase[var_10] = var_11;
                continue;
            }

            if ( level.attachmentmap_uniquetobase[var_10] != var_11 )
            {

            }
        }
    }

    level.carryingplayer = [];
    var_13 = [];
    var_1 = 1;

    for ( var_14 = tablelookupbyrow( "_encstr_8F9824B638F2B03A3A0BD81A6BB2DC8E5B160ED7C6EDD6C4B7A7D9AC39E4B446596E5C6C6E3B", var_1, 0 ); var_14 != "_encstr_A40101"; var_14 = tablelookupbyrow( "_encstr_8F9824B638F2B03A3A0BD81A6BB2DC8E5B160ED7C6EDD6C4B7A7D9AC39E4B446596E5C6C6E3B", var_1, 0 ) )
    {
        var_13[var_13.size] = var_14;
        var_1++;
    }

    var_15 = [];
    var_5 = 1;

    for ( var_16 = tablelookupbyrow( "_encstr_8F9824B638F2B03A3A0BD81A6BB2DC8E5B160ED7C6EDD6C4B7A7D9AC39E4B446596E5C6C6E3B", 0, var_5 ); var_16 != "_encstr_A40101"; var_16 = tablelookupbyrow( "_encstr_8F9824B638F2B03A3A0BD81A6BB2DC8E5B160ED7C6EDD6C4B7A7D9AC39E4B446596E5C6C6E3B", 0, var_5 ) )
    {
        var_15[var_15.size] = var_16;
        var_5++;
    }

    foreach ( var_14 in var_13 )
    {
        foreach ( var_9, var_16 in var_15 )
        {
            var_19 = tablelookup( "_encstr_8F9824B638F2B03A3A0BD81A6BB2DC8E5B160ED7C6EDD6C4B7A7D9AC39E4B446596E5C6C6E3B", 0, var_14, var_9 + 1 );

            if ( var_19 == "_encstr_A40101" )
                continue;

            if ( !isdefined( level.carryingplayer[var_14] ) )
                level.carryingplayer[var_14] = [];

            level.carryingplayer[var_14][var_16] = var_19;
        }
    }

    foreach ( var_31, var_22 in level.weaponmapdata )
    {
        var_23 = var_31;

        if ( getsubstr( var_31, 0, 4 ) == "_encstr_82C50518EB38C1" )
            var_23 = getsubstr( var_31, 4 );

        var_24 = "_encstr_A8180DE2B0EAD75D0D4355DBA413B7" + var_23 + "_encstr_A45011AE5A3A30FC73CF878FD78AB0E2C37273";

        if ( !tableexists( var_24 ) )
            continue;

        level.weaponattachments[var_31] = [];
        var_1 = 1;
        var_25 = tablelookupbyrow( var_24, var_1, 0 );
        var_26 = var_23 + "_encstr_A65214FA0B1D8EC21BD0ADACCDE8AFB4916EE26C6E67";

        if ( getsubstr( var_23, 0, 3 ) == "_encstr_B219046E68FA" )
            var_26 = "_encstr_AAB60638185F01EF" + var_26;
        else
            var_26 = "_encstr_B2190A8DDE7B1D5E96EE0EEB" + var_26;

        while ( var_25 != "_encstr_A40101" )
        {
            var_27 = getdvarint( "_encstr_89CC21EB5F08491717A2A0FB4B7F57FC98CB7E549B304DD7CEF89BC171CE2377F8A3E4", 3 );

            for ( var_28 = 0; var_28 < var_27; var_28++ )
            {
                var_29 = tablelookupbyrow( var_24, var_1, 1 + var_28 * 4 );

                if ( var_29 != "_encstr_A40101" )
                {
                    var_30 = tablelookup( var_26, 0, var_29, 1 );

                    if ( var_30 != "_encstr_A40101" )
                        level.weaponattachments[var_31][var_30] = var_30;
                }
            }

            var_1++;
            var_25 = tablelookupbyrow( var_24, var_1, 0 );
            var_29 = tablelookupbyrow( var_24, var_1, 1 );
        }
    }

    level.attachmentmap_attachtoperk = [];
    level.carrier_remove_carriable_weapon = [];
    level.carry_ref = [];
    level.carryobjects_onjuggernaut = [];
    var_32 = getattachmentlistuniquenames();

    foreach ( var_34 in var_32 )
    {
        var_35 = tablelookup( "_encstr_AF9F1761CA261343BC47A0F01FC558613B366E7967CEDF6B86", 4, var_34, 2 );
        var_36 = scripts\mp\utility\weapon::attachmentmap_tobase( var_34 );

        if ( var_35 != "_encstr_A40101" && isdefined( var_36 ) )
        {
            var_37 = level.carry_ref[var_36];

            if ( !isdefined( var_37 ) )
                level.carry_ref[var_36] = var_35;
            else if ( var_35 != var_37 )
                level.carryobjects_onjuggernaut[var_34] = var_35;
        }

        var_38 = tablelookup( "_encstr_AF9F1761CA261343BC47A0F01FC558613B366E7967CEDF6B86", 4, var_34, 12 );

        if ( var_38 != "_encstr_A40101" )
            level.attachmentmap_attachtoperk[var_34] = var_38;

        var_39 = tablelookup( "_encstr_AF9F1761CA261343BC47A0F01FC558613B366E7967CEDF6B86", 4, var_34, 13 );

        if ( var_39 != "_encstr_A40101" )
            level.attachmentmap_uniquetoextra[var_34] = var_39;

        var_40 = tablelookup( "_encstr_AF9F1761CA261343BC47A0F01FC558613B366E7967CEDF6B86", 4, var_34, 9 );

        if ( var_40 != "_encstr_A40101" )
            level.carrier_remove_carriable_weapon[var_34] = var_40;
    }

    level.carryitem2omnvar = [];
    level.carryitem2omnvar["_encstr_AA1608C07786F13312D3"] = fired_missiles( "_encstr_B7FB188AD8070E83C3F723509989A313C78832F2B85715071B64" );
    level.carryitem2omnvar["_encstr_B707036379"] = fired_missiles( "_encstr_81FF1B828725118B798F520BA8223084BFDF68953717596F0580FF9320" );
    level.cash_hud_bink = [];
    level.cash_hud_bink["_encstr_AA1608C07786F13312D3"] = "_encstr_B7FB188AD8070E83C3F723509989A313C78832F2B85715071B64";
    level.cash_hud_bink["_encstr_B707036379"] = "_encstr_81FF1B828725118B798F520BA8223084BFDF68953717596F0580FF9320";
}

fired_missiles( var_0 )
{
    var_4 = [];
    var_1 = 1;

    for ( var_2 = tablelookupbyrow( var_0, var_1, 0 ); var_2 != "_encstr_A40101"; var_2 = tablelookupbyrow( var_0, var_1, 0 ) )
    {
        var_5 = 1;

        for ( var_3 = tablelookupbyrow( var_0, 0, var_5 ); var_3 != "_encstr_A40101"; var_3 = tablelookupbyrow( var_0, 0, var_5 ) )
        {
            if ( var_1 != var_5 )
            {
                var_6 = tablelookupbyrow( var_0, var_1, var_5 );

                if ( !isdefined( var_4[var_2] ) )
                    var_4[var_2] = [];

                if ( var_6 != "_encstr_A40101" )
                    var_4[var_2][var_3] = var_6;
            }

            var_5++;
        }

        var_1++;
    }

    return var_4;
}

getattachmentlistuniquenames()
{
    return scripts\mp\utility\weapon::getattachmentlist( 4, 1 );
}

track_get_launch_target()
{
    level._id_1459E = [];
    _encstr_AF331D7B20F9D2133B21E0CA76137793DAFE216B9366D93351F3AFF080D203( "_encstr_B48317ADC1799647955BE6EDEA276C561D2C261B56E2B137EC" );
    _encstr_AF331D7B20F9D2133B21E0CA76137793DAFE216B9366D93351F3AFF080D203( "_encstr_A4C71BB538795AE82B5BB97BEA9CC62BE885311BCAAFD80D2317C6E6CE" );
}

_encstr_AF331D7B20F9D2133B21E0CA76137793DAFE216B9366D93351F3AFF080D203( var_0 )
{
    var_1 = 0;

    for (;;)
    {
        var_2 = tablelookupbyrow( var_0, var_1, 1 );

        if ( !isdefined( var_2 ) || var_2 == "_encstr_A40101" )
            break;

        if ( var_2 != "_encstr_B92007DDCA2C0EF6DC" )
        {
            var_1++;
            continue;
        }

        var_3 = tablelookupbyrow( var_0, var_1, 3 );
        var_4 = tablelookupbyrow( var_0, var_1, 2 );
        level._id_1459E[var_4] = var_3;
        var_1++;
    }
}

safechecknum( var_0 )
{
    if ( !isdefined( level._id_1459E ) )
        track_get_launch_target();

    var_1 = level._id_1459E[var_0];

    if ( isdefined( var_1 ) )
        return var_1;

    return "_encstr_B8190402FF3A";
}

vehicle_ai_avoidance_cleanup( var_0 )
{
    if ( !isdefined( level._id_1459E ) )
        track_get_launch_target();

    var_1 = level._id_1459E[var_0];

    if ( isdefined( var_1 ) && ( var_1 == "_encstr_A60703ADA1" || var_1 == "_encstr_B707036379" ) )
    {
        if ( !istrue( level._id_14434 ) )
            return 0;

        if ( !getdvarint( "_encstr_9B910B79DB204191A2A5F78FDA" ) )
            return 0;

        return 1;
    }

    if ( isdefined( var_1 ) && var_1 != "_encstr_B8190402FF3A" )
        return 0;

    return 1;
}

buildweaponmap()
{
    level.weaponmapdata = [];
    level._id_14589 = [];
    level._id_14580 = [];
    var_0 = scripts\mp\utility\game::unset_relic_grounded();
    var_1 = tablelookupgetnumrows( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D" );

    for ( var_2 = 0; var_2 < var_1; var_2++ )
    {
        var_3 = tablelookupbyrow( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", var_2, 0 );
        var_4 = tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 4 );

        if ( var_4 == "_encstr_A40101" )
            continue;

        if ( var_0 || scripts\cp_mp\utility\weapon_utility::vehicle_ai_script_models( var_4 ) || vehcolignorelist() )
        {
            level.weaponmapdata[var_4] = spawnstruct();
            var_5 = tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 0 );

            if ( var_5 != "_encstr_A40101" )
                level.weaponmapdata[var_4].number = var_5;

            var_6 = tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 1 );

            if ( var_6 != "_encstr_A40101" )
            {
                level.weaponmapdata[var_4].group = var_6;
                var_7 = tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 41 );

                if ( var_7 != "_encstr_A40101" )
                {
                    var_8 = int( var_7 );
                    var_9 = 0;
                    var_10 = tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 17 );

                    if ( var_10 != "_encstr_A40101" )
                        var_9 = getdvarint( var_10, 0 ) == 0;

                    if ( var_8 > -1 && vehicle_ai_avoidance_cleanup( var_4 ) && !var_9 )
                    {
                        if ( !isdefined( level._id_14589[var_6] ) )
                            level._id_14589[var_6] = [];

                        level._id_14589[var_6][level._id_14589[var_6].size] = var_4;
                    }
                    else
                        level.weaponmapdata[var_4]._id_13EFC = 1;
                }
            }

            if ( !istrue( level.weaponmapdata[var_4]._id_13EFC ) )
                level._id_14580[var_4] = 1;

            var_11 = tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 2 );

            if ( var_11 != "_encstr_A40101" )
                level.weaponmapdata[var_4]._id_11BD1 = var_11;

            var_12 = tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 5 );

            if ( var_12 != "_encstr_A40101" )
                level.weaponmapdata[var_4].assetname = var_12;

            var_13 = tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 44 );

            if ( var_13 != "_encstr_A40101" )
                level.weaponmapdata[var_4].perk = var_13;

            var_14 = tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 9 );
            var_15 = parseattachdefaulttoidmap( var_14 );

            if ( isdefined( var_15 ) )
                level.weaponmapdata[var_4].attachdefaulttoidmap = var_15;

            var_16 = tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 8 );

            if ( var_16 != "_encstr_A40101" )
            {
                var_16 = float( var_16 );
                level.weaponmapdata[var_4].speed = var_16;
            }

            continue;
        }

        var_9 = undefined;

        if ( tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 1 ) != "_encstr_A40101" )
        {
            if ( tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 41 ) != "_encstr_A40101" )
            {
                var_10 = tablelookup( "_encstr_AD2712B507E5E61DC23A373AB04C8D56C5D8379D", 0, var_3, 17 );

                if ( var_10 != "_encstr_A40101" )
                    var_9 = getdvarint( var_10, 0 ) == 0;
            }
        }

        if ( !istrue( var_9 ) )
            level._id_14580[var_4] = 1;
    }

    var_17 = [];
    level.weaponlootmapdata = [];
    var_2 = -1;

    for (;;)
    {
        var_2++;
        var_18 = tablelookupbyrow( "_encstr_BC791491279DE0A8E762012BEAABA8B0F7938D07C303", var_2, 0 );

        if ( var_18 == "_encstr_A40101" )
            break;

        var_4 = tablelookupbyrow( "_encstr_BC791491279DE0A8E762012BEAABA8B0F7938D07C303", var_2, 1 );

        if ( !var_0 && !scripts\cp_mp\utility\weapon_utility::vehicle_ai_script_models( var_4 ) && !vehcolignorelist() )
            continue;

        var_19 = tablelookupbyrow( "_encstr_BC791491279DE0A8E762012BEAABA8B0F7938D07C303", var_2, 6 );
        var_20 = scripts\mp\utility\weapon::getweaponvarianttablename( var_4 );
        var_21 = tablelookup( var_20, 1, var_19, 0 );

        if ( var_21 == "_encstr_A40101" )
            continue;

        if ( int( var_21 ) > 0 )
        {
            if ( !isdefined( var_17[var_4] ) || int( var_21 ) > var_17[var_4] )
                var_17[var_4] = int( var_21 );
        }

        var_22 = var_4 + "_encstr_B64C02F0" + var_21;
        level.weaponlootmapdata[var_22] = spawnstruct();
        level.weaponlootmapdata[var_22].variantid = int( var_21 );
        var_23 = tablelookup( var_20, 1, var_19, 3 );

        if ( var_23 != "_encstr_A40101" )
            level.weaponlootmapdata[var_22].assetoverridename = var_23;

        var_24 = tablelookup( "_encstr_BC791491279DE0A8E762012BEAABA8B0F7938D07C303", 6, var_19, 5 );
        level.weaponlootmapdata[var_22].update_focus_fire_objective = int( var_21 ) != 0 && int( var_24 ) == 99;
        level.weaponlootmapdata[var_22].tut_bot_nameplate = vehicle_ai_avoidance_cleanup( var_4 );
        var_25 = tablelookup( var_20, 1, var_19, 4 );
        var_15 = parseattachdefaulttoidmap( var_25 );

        if ( isdefined( var_15 ) )
        {
            if ( isdefined( level.weaponmapdata[var_4].attachdefaulttoidmap ) )
                var_15 = scripts\engine\utility::array_combine_unique_keys( var_15, level.weaponmapdata[var_4].attachdefaulttoidmap );

            level.weaponlootmapdata[var_22].attachdefaulttoidmap = var_15;
        }

        var_26 = [];

        for ( var_27 = 5; var_27 <= 15; var_27++ )
        {
            var_28 = tablelookup( var_20, 1, var_19, var_27 );

            if ( var_28 != "_encstr_A40101" )
            {
                var_29 = strtok( var_28, "_encstr_B64C02F0" );

                if ( var_29.size == 2 )
                    var_26[var_29[0]] = int( var_29[1] );
                else
                    var_26[var_29[0]] = 0;
            }
        }

        if ( var_26.size > 0 )
            level.weaponlootmapdata[var_22].attachcustomtoidmap = var_26;

        var_30 = tablelookup( var_20, 1, var_19, 16 );

        if ( var_30 != "_encstr_A40101" )
        {
            var_31 = [];
            var_32 = strtok( var_30, "_encstr_884C02C6" );

            foreach ( var_34 in var_32 )
            {
                var_35 = strtok( var_34, "_encstr_B64C02F0" );

                if ( var_35.size != 2 )
                    continue;

                var_31[var_35[0]] = int( var_35[1] );
            }

            if ( var_31.size > 0 )
                level.weaponlootmapdata[var_22].attachextratoidmap = var_31;
        }
    }

    foreach ( var_41, var_38 in var_17 )
    {
        for ( var_39 = 1; var_39 <= var_38; var_39++ )
        {
            var_40 = var_41 + "_encstr_B64C02F0" + var_39;

            if ( !isdefined( level.weaponlootmapdata[var_40] ) )
            {
                level.weaponlootmapdata[var_40] = spawnstruct();
                level.weaponlootmapdata[var_40].variantid = var_39;
                level.weaponlootmapdata[var_40].update_focus_fire_objective = 1;
                level.weaponlootmapdata[var_40].tut_bot_nameplate = 0;
            }
        }
    }
}

parseattachdefaulttoidmap( var_0 )
{
    if ( var_0 != "_encstr_A40101" )
    {
        var_1 = strtok( var_0, "_encstr_884C02C6" );
        var_2 = [];

        foreach ( var_4 in var_1 )
        {
            var_5 = strtok( var_4, "_encstr_B64C02F0" );

            if ( getdvarint( "_encstr_873F171338C5C9D7B9396D63CD21474A0341FA7A80BD7DC7B1", 1 ) == 0 )
            {
                if ( scripts\engine\utility::string_starts_with( var_5[0], "_encstr_940B07138911BFF690" ) )
                    continue;
            }

            if ( var_5.size == 2 )
            {
                var_2[var_5[0]] = int( var_5[1] );
                continue;
            }

            var_2[var_5[0]] = 0;
        }

        return var_2;
    }

    return undefined;
}

grenadestuckto( var_0, var_1, var_2 )
{
    if ( !isdefined( self ) )
    {
        var_0.stuckenemyentity = var_1;
        var_1.stuckbygrenade = var_0;
        var_1._id_13935 = var_0.owner;
    }
    else if ( level.teambased && isdefined( var_1.team ) && var_1.team == self.team )
        var_0.isstuck = "_encstr_B9FC095F8BCCFF02D92B43";
    else
    {
        var_3 = undefined;
        var_4 = "_encstr_9D460F538667ED2BAC1A38F12303C359EF";

        switch ( var_0.weapon_name )
        {
            case "_encstr_9FA70ADF38B86C4AD188752A":
                var_3 = "_encstr_A1860DE0F7F5F3FF93519389EF3FA7";
                break;
            case "_encstr_98730B19756A772BCF4369E043":
                var_3 = "_encstr_A40E0EADEDB1DB47DBB3FAB93AD56CAD";
                var_4 = "_encstr_8BF0103B01B3EBF8D65727E53588B85308E3";
                break;
            case "_encstr_94410C2B9B052323CB8D7A561F82":
                var_3 = "_encstr_9DC0182BC34A95A7600CC96783E83B53C2B0503BAF4F49CBFF8A";
                var_4 = "_encstr_8BF0103B01B3EBF8D65727E53588B85308E3";
                break;
        }

        var_0.isstuck = "_encstr_80BF06CA78A2226B";
        var_0.stuckenemyentity = var_1;
        var_1.stuckbygrenade = var_0;
        var_1._id_13935 = var_0.owner;
        self notify( "_encstr_814F143A03FDEB0E78AB37039128563708192282484B" );
        level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_1, var_4 );

        if ( !istrue( var_2 ) )
            grenadestucktosplash( var_3, var_1 );
    }
}

grenadestucktosplash( var_0, var_1 )
{
    var_2 = self;

    if ( isplayer( var_1 ) && isdefined( var_0 ) )
    {
        if ( isdefined( var_2.owner ) )
            var_2 = var_2.owner;

        var_2 scripts\mp\hud_message::showsplash( var_0 );
    }

    var_2 thread scripts\mp\awards::givemidmatchaward( "_encstr_81DC10561E3863BD372D672BAF6E1DD236B6" );
}

outlineequipmentforowner( var_0 )
{

}

outlinesuperequipment( var_0, var_1 )
{
    if ( level.teambased )
        thread outlinesuperequipmentforteam( var_0, var_1 );
    else
        thread outlinesuperequipmentforplayer( var_0, var_1 );
}

outlinesuperequipmentforteam( var_0, var_1 )
{
    var_2 = scripts\mp\utility\outline::outlineenableforteam( var_0, var_1.team, "_encstr_BCBD15F0DB9349B823C50898D7536139FB72F908B36E95", "_encstr_B6CE0B0BB00A031B7B88355740" );
    var_0 waittill( "_encstr_A3750609A5E61883" );
    scripts\mp\utility\outline::outlinedisable( var_2, var_0 );
}

outlinesuperequipmentforplayer( var_0, var_1 )
{
    var_2 = scripts\mp\utility\outline::outlineenableforplayer( var_0, var_1, "_encstr_BCBD15F0DB9349B823C50898D7536139FB72F908B36E95", "_encstr_B6CE0B0BB00A031B7B88355740" );
    var_0 waittill( "_encstr_A3750609A5E61883" );
    scripts\mp\utility\outline::outlinedisable( var_2, var_0 );
}

grenadeheldatdeath()
{
    return istrue( self.grenadeheldatdeath );
}

set_cp_vehicle_health_values()
{
    self.grenadeheldatdeath = !nullweapon( self getheldoffhand() );
}

trace_impale( var_0, var_1 )
{
    var_2 = physics_createcontents( [ "_encstr_9E9C1638865EB95A6CE68DDEE64795B98E6EAF9BF6B1968C", "_encstr_941116D7F47B0FC88317C8B07BCC017DD35AD8D44D52D773", "_encstr_BD431CE7B0D853097F67676D6BE477B61B072950F79BD30A5247185850D0", "_encstr_B7D018B89C4B13AC473342305523920D607E50E3571038A69138", "_encstr_9DD6156A78B803FAD687D7EF95056246B86329B453E0D5" ] );
    var_3 = scripts\engine\trace::ray_trace_detail( var_0, var_1, level.players, var_2, undefined, 1 );
    return var_3;
}

impale_endpoint( var_0, var_1 )
{
    var_2 = var_0 + var_1 * 4096;
    return var_2;
}

impale( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 )
{
    var_1 endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    if ( !isdefined( var_1.body ) )
        return;

    playfx( scripts\engine\utility::getfx( "_encstr_AFDA1BABFFC68095933F291B6F3A4860615490C1633E99C35A637B173B" ), var_4 );
    var_9 = impale_endpoint( var_4, var_5 );
    var_10 = trace_impale( var_4, var_9 );
    var_9 = var_10["_encstr_B7260923C89E8F3378E72E"] - var_5 * 12;
    var_11 = length( var_9 - var_4 );
    var_12 = var_11 / 1000;
    var_12 = max( var_12, 0.05 );

    if ( var_10["_encstr_871C08D169E3584B33BA"] != "_encstr_AD0C0E10C3FBA3308948A92330A52DBB" )
        var_12 = 0;

    var_13 = var_12 > 0.05;

    if ( isdefined( var_1 ) )
        var_1.body startragdoll();

    waitframe();

    if ( var_13 )
    {
        var_14 = var_5;
        var_15 = anglestoup( var_0.angles );
        var_16 = vectorcross( var_14, var_15 );
        var_17 = scripts\engine\utility::spawn_tag_origin( var_4, axistoangles( var_14, var_16, var_15 ) );
        var_17 moveto( var_9, var_12 );
        var_18 = spawnragdollconstraint( var_1.body, var_6, var_7, var_8 );
        var_18.origin = var_17.origin;
        var_18.angles = var_17.angles;
        var_18 linkto( var_17 );

        if ( var_12 > 1 )
            thread impale_detachaftertime( var_18, 1 );

        thread impale_cleanup( var_1, var_17, var_12 + 0.25 );
        var_17 thread impale_effects( var_9, var_12 );
    }
}

impale_detachaftertime( var_0, var_1 )
{
    wait( var_1 );

    if ( isdefined( var_0 ) )
        var_0 delete();
}

impale_effects( var_0, var_1 )
{
    wait( clamp( var_1 - 0.05, 0.05, 20 ) );
    playfx( scripts\engine\utility::getfx( "_encstr_BE6E1FB3991E7DE0CA9B593AC9B08E5AED377DE4B0D263765D37BE5AD6C185D8E8" ), var_0 );
}

impale_cleanup( var_0, var_1, var_2 )
{
    if ( isdefined( var_0 ) )
        var_0 scripts\engine\utility::_id_143B9( var_2, "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    var_1 delete();
}

codecallback_getprojectilespeedscale( var_0, var_1 )
{
    return [ 1.0, 1.0 ];
}

setplayerstunned()
{
    if ( !isdefined( self.isstunned ) )
        self.isstunned = 1;
    else
        self.isstunned++;
}

setplayerunstunned()
{
    self.isstunned--;
}

isstunned()
{
    return isdefined( self.debuffedbyplayers ) && isdefined( self.debuffedbyplayers["_encstr_B94516A690081B23D68FC7E78DE84A4208D85EEF4929ADAB"] );
}

setplayerblinded()
{
    if ( !isdefined( self.isblinded ) )
        self.isblinded = 1;
    else
        self.isblinded++;
}

setplayerunblinded()
{
    self.isblinded--;
}

isblinded()
{
    return isdefined( self.debuffedbyplayers ) && isdefined( self.debuffedbyplayers["_encstr_970B114D33923EC8CF4FD30935D9E07D295F19"] );
}

tutkioskpurchase( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = "_encstr_970B114D33923EC8CF4FD30935D9E07D295F19";
    var_2 = var_0 getentitynumber();

    if ( isdefined( self.debuffedbyplayers ) && isdefined( self.debuffedbyplayers[var_1] ) && isdefined( self.debuffedbyplayers[var_1][var_2] ) )
        return 1;

    return 0;
}

using_self_revive( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = "_encstr_B94516A690081B23D68FC7E78DE84A4208D85EEF4929ADAB";
    var_2 = var_0 getentitynumber();

    if ( isdefined( self.debuffedbyplayers ) && isdefined( self.debuffedbyplayers[var_1] ) && isdefined( self.debuffedbyplayers[var_1][var_2] ) )
        return 1;

    return 0;
}

isstunnedorblinded()
{
    return isblinded() || isstunned();
}

cleanupconcussionstun( var_0 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_8F1614200C576863C761B17F2817CB5549E902CA9D42" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    wait( var_0 );
    setplayerunstunned();
}

applyweaponsonicstun()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    wait 0.1;

    if ( isdefined( self ) && isplayer( self ) && !isbot( self ) )
    {
        self playlocalsound( "_encstr_98721516754A7BC9FF57D0F0531FC3BDA15F85164B623D" );
        self setsoundsubmix( "_encstr_8AC015DCDE374B36EBCDA1DB1D76AE9BD72DD6380B1BA3" );
    }
}

watchinvalidweaponchange()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    for (;;)
    {
        self waittill( "_encstr_B4451677595838DECDAFB9DD961D6CA1D7969BB32CC6A546", var_0 );
        var_1 = self getcurrentweapon();

        if ( var_1.inventorytype == "_encstr_B8C505C0A3D713" || var_1.inventorytype == "_encstr_B1D70A113B37811872C14D53" )
            scripts\cp_mp\utility\inventory_utility::_switchtoweapon( self.lastdroppableweaponobj );
    }
}

weaponhasselectableoptic( var_0 )
{
    var_1 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_2 = getweaponattachments( var_0 );

    foreach ( var_4 in var_2 )
    {
        var_5 = attachmentgroup( var_4 );

        if ( var_5 == "_encstr_B61F057B6E5158" )
        {
            var_6 = scripts\mp\utility\weapon::attachmentmap_tobase( var_4 );

            if ( scripts\mp\utility\weapon::carriedpunchcard( var_1, var_6 ) )
                return 1;
        }
    }

    return 0;
}

watchdropweapons()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self notify( "_encstr_B42C115307CD7E4BA36A30589BA32B9FC0C847" );
    self endon( "_encstr_B42C115307CD7E4BA36A30589BA32B9FC0C847" );

    for (;;)
    {
        self waittill( "_encstr_BDE20F7FF5D608303B89F923929B77682F", var_0, var_1 );

        if ( isdefined( var_0 ) && isdefined( var_1 ) && !scripts\mp\utility\weapon::ismeleeonly( var_1 ) && !scripts\mp\utility\weapon::update_health_bar_to_player( var_1 ) && !scripts\mp\utility\weapon::isknifeonly( var_1 ) )
        {
            if ( var_0 physics_getnumbodies() > 0 )
            {
                var_0 physics_registerforcollisioncallback();
                var_0 thread weapondrop_physics_callback_monitor();
            }
        }
    }
}

weapondrop_physics_callback_monitor()
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_945408D1B4B556B7BA3A" );
    thread weapondrop_physics_timeout( 2 );
    self waittill( "_encstr_B3510AD8BDD8C6A56ED2B737", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 );

    if ( isdefined( self.classname ) && getsubstr( self.classname, 0, 6 ) == "_encstr_B92007DDCA2C0EF6DC" )
    {
        var_8 = physics_getsurfacetypefromflags( var_3 );
        var_9 = getsubstr( var_8["_encstr_81BA051A9AA88B"], 9 );

        if ( var_9 == "_encstr_A9140E55C708BA5715991B6361E3DB22" )
            var_9 = "_encstr_879D0FE30F92BBF7631A868B39686E413A";

        if ( var_9 == "_encstr_AD140E4522AA1D1E847F704857A170DB" )
            var_9 = "_encstr_899D0FBBAF359331FD03DB88C17F9D0F76";

        switch ( getsubstr( self.classname, 0, 13 ) )
        {
            case "_encstr_ABA00E57AD31DBCDCDF1928B3257861B":
                if ( isdefined( self.objweapon ) )
                {
                    if ( isdefined( self.objweapon.material ) && self.objweapon.material == "_encstr_97CA08387B8D5EB5CA39" )
                        self playsurfacesound( "_encstr_8B7813FB0D3788F0346DE7E32E4299E8A93785A0D3", var_9 );
                    else
                        self playsurfacesound( "_encstr_9DD30EABD97870995585E793F789624C", var_9 );
                }
                else
                    self playsurfacesound( "_encstr_9DD30EABD97870995585E793F789624C", var_9 );

                break;
            case "_encstr_ABA00E57AD31DBCDCDF1928B32570267":
                if ( isdefined( self.objweapon ) )
                {
                    if ( isdefined( self.objweapon.material ) && self.objweapon.material == "_encstr_97CA08387B8D5EB5CA39" )
                        self playsurfacesound( "_encstr_8C1B15ABF01BCAAF41FEAFC8AFCB2FD65910915338E940", var_9 );
                    else
                        self playsurfacesound( "_encstr_AA49106C8FC23126AC0BC030D7D3384BBA75", var_9 );
                }
                else
                    self playsurfacesound( "_encstr_AA49106C8FC23126AC0BC030D7D3384BBA75", var_9 );

                break;
            case "_encstr_97A00EBB950BC1ED9BFA2DBBC1F536D6":
                self playsurfacesound( "_encstr_870E114B3998E079B565C7B3D7639229A8C147", var_9 );
                break;
            case "_encstr_97A00EBB950BC1ED9BFA2DBBC1F5B986":
                if ( isdefined( self.objweapon ) )
                {
                    if ( isdefined( self.objweapon.material ) && self.objweapon.material == "_encstr_97CA08387B8D5EB5CA39" )
                        self playsurfacesound( "_encstr_8B7813FB0D3788F0346DE7E32E4299E8A93785A0D3", var_9 );
                    else
                        self playsurfacesound( "_encstr_9DD30EABD97870995585E793F789624C", var_9 );
                }
                else
                    self playsurfacesound( "_encstr_9DD30EABD97870995585E793F789624C", var_9 );

                break;
            case "_encstr_B1A00EBB56B00EDE73AF2DBB1C7D9BDC":
                self playsurfacesound( "_encstr_97F310479D01EBF1E988E20BF921B62B3975", var_9 );
                break;
            case "_encstr_BCA00EEE950B83ED37AFD2BB0E7D834B":
                if ( isdefined( self.objweapon ) )
                {
                    if ( isdefined( self.objweapon.material ) && self.objweapon.material == "_encstr_97CA08387B8D5EB5CA39" )
                        self playsurfacesound( "_encstr_AFFE16DD560B07F5239CB783D7E09637E8DBB1FA83B76397", var_9 );
                    else
                        self playsurfacesound( "_encstr_B68E11D4377A898E049328C83F482DC753DDC1", var_9 );
                }
                else
                    self playsurfacesound( "_encstr_B68E11D4377A898E049328C83F482DC753DDC1", var_9 );

                break;
            case "_encstr_AFA00E6C8FC23120A6BFF0084AFF184B":
                self playsurfacesound( "_encstr_9EF413A329715061E8A5EF2B21C26133D00821C593", var_9 );
                break;
            default:
                self playsurfacesound( "_encstr_9DD30EABD97870995585E793F789624C", var_9 );
                break;
        }
    }
}

weapondrop_physics_timeout( var_0 )
{
    wait( var_0 );
    self notify( "_encstr_945408D1B4B556B7BA3A" );
}

axedetachfromcorpse( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_1 = var_0 getlinkedchildren();

    foreach ( var_3 in var_1 )
    {
        if ( !isdefined( var_3 ) )
            continue;

        var_4 = var_3.weapon_name;
        var_5 = var_3.owner;
        var_6 = var_3.origin;

        if ( isdefined( var_4 ) && scripts\mp\utility\weapon::isaxeweapon( var_4 ) )
            var_3 relaunchaxe( var_4, var_5 );
    }
}

relaunchaxe( var_0, var_1 )
{
    self unlink();
    var_2 = scripts\mp\utility\weapon::getweaponbasenamescript( var_0 );
    var_3 = getsubstr( var_0, var_2.size );
    var_4 = var_1 scripts\mp\utility\weapon::_launchgrenade( "_encstr_82371196DDE6AF0BC3567DB6E07D19BA5BADE5" + var_3, self.origin, ( 0, 0, 0 ), 100, 1, self );
    var_4 setentityowner( var_1 );
    var_4 thread _utilflare_isvalidflaretype::watchgrenadeaxepickup( var_1, self.weapon_name );
}

callback_finishweaponchange( var_0, var_1, var_2, var_3 )
{
    updateweaponscriptvfx( var_0, var_1, var_2, var_3 );
    var_4 = self.weaponchangecallbacks;

    if ( isdefined( var_4 ) )
    {
        foreach ( var_6 in var_4.callbacks )
            self [[ var_6 ]]( var_0, var_1 );

        foreach ( var_6 in var_4.oneshotcallbacks )
            self [[ var_6 ]]( var_0, var_1 );

        var_4.oneshotcallbacks = [];
    }
}

updateweaponscriptvfx( var_0, var_1, var_2, var_3 )
{
    if ( ( var_1.basename == "_encstr_AABA05236DC831" || var_1.basename == "_encstr_8778092C8D1DFAE6BDE6AC" ) && isdefined( self.lastdroppableweapon ) )
    {
        if ( var_1 == "_encstr_8778092C8D1DFAE6BDE6AC" )
            var_3 = 1;
        else
            var_3 = 0;

        var_1 = self.lastdroppableweapon;
    }

    clearweaponscriptvfx( var_1, var_3 );
    runweaponscriptvfx( var_0, var_2 );
}

runweaponscriptvfx( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_1 ) && var_1 == 1 )
        var_2 = "_encstr_AD830589BDDC51" + scripts\mp\utility\weapon::getweaponbasenamescript( var_0 );
    else
        var_2 = scripts\mp\utility\weapon::getweaponbasenamescript( var_0 );
}

clearweaponscriptvfx( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_1 ) && var_1 == 1 )
        var_2 = "_encstr_AD830589BDDC51" + scripts\mp\utility\weapon::getweaponbasenamescript( var_0 );
    else
        var_2 = scripts\mp\utility\weapon::getweaponbasenamescript( var_0 );

    switch ( var_2 )
    {
        case "_encstr_828010A09BE04F9B435F35BD74F301871D53":
        case "_encstr_8B0912ABC39FA77B7E7708983380F1BBC76111AF":
        case "_encstr_B9DD102DEE07AFB9DAF5BA3DAEB1D5AFB6E0":
        case "_encstr_82EA112D7783AF37DAEB5B1C85C116DCEBAD0E":
        case "_encstr_95F50F4BDD83AF37DAAFC4B2E816AFAD38":
        case "_encstr_BDAB11B2AF30A73779512283A1E5418E30B0BA":
        case "_encstr_B3D811B4EEE0F5CDB57DB5382CC12CA97DADE0":
        case "_encstr_A6D811A26C0E5E3693A1926F403A933FA713E8":
        case "_encstr_BC4512A83FD8363F521970066EBA45B3BA076BD8":
        case "_encstr_A9AF1520E339B95BAB673648BFC6281CD033FA2361ABDF":
        case "_encstr_8AE1129F803A1F7399E04F42D7916AB9D3590703":
        case "_encstr_BA86127823B2E0C81C1FD9F358468A1E3A1970C3":
        case "_encstr_AA98102DDD70BEE096AFC895D80DDBBEB61C":
        case "_encstr_BD101097DF33D95868F6CE12297891116129":
        case "_encstr_BDB7134BBB0EEB38D27D5B2DD62B26939862FADA0E":
        case "_encstr_BDB31120D328E92F8A5FE7EF8B2256D2372D8B":
        case "_encstr_875110535F0728E8FD4193C8F4D4B8600A2B":
        case "_encstr_AFA312CF877B910C30BE159FD0504E2F15BF4723":
        case "_encstr_82ED112D7783AFC6DAEB1B5AB58583D8EBAD0E":
        case "_encstr_8F1312F00F320165E706BC4B341003428B70C2EB":
        case "_encstr_AB0A13EFA75BB121A8DEF2FE10187A3A5B2BAF7751":
        case "_encstr_93B813483BEBC16F43B98B081169CB6033EF2683B9":
        case "_encstr_B451110B075F70E89A3939D11D605897C1F7B1":
        case "_encstr_9B8B111AECEBBFA1C57625F1D9FBE170E1B753":
        case "_encstr_B4CF14800F99D1B2AE6757B3DBABB2FA66CAB677A0B0":
        case "_encstr_ADFF1087A8FA2F131B0F4F162B6BA10F1877":
        case "_encstr_BDF911D2BBE0D7DCCDFAB5B4DA2B131AD7B51C":
        case "_encstr_8A06115A770ED7B9E6EB6DD21B7B930EF5D6E0":
        case "_encstr_AFD910887B90511F93C71B1B7F8AFD096D12":
        case "_encstr_A623119954EA97FD2321729BA06BF7737E3108":
        case "_encstr_A96D112BD7424E71F6412840DACA230B87652F":
        case "_encstr_A3521050A3B879B19AEF4F6F17728C31B5FA":
        case "_encstr_AD69112DF308C9012A3F87B5E7B2DD7BD7CDAB":
        case "_encstr_95D8115ADD0EFA1BB0D7AD4BADB299C8BED638":
        case "_encstr_81FC12C204E0D6297577728A88B210C417BF68B1":
        case "_encstr_B76D15A8F362D0182E2F81133416E837A79AA1B3196FFF":
        case "_encstr_BE3E15324BBBD7B5B807B4F11D48BF67CC203B7AD6F9A3":
        case "_encstr_AAD0152DEE0EEB3685D7A3C9CDE80BDC8CC2278C7DB683":
        case "_encstr_A8CB15BFF70BE16360EEE3B88340B92A8D736B033FD95B":
            break;
    }
}

updatecamoscripts( var_0, var_1 )
{
    if ( _id_1458A( var_1 ) )
        clearcamoscripts( getweaponcamoname( var_1 ) );

    runcamoscripts( var_0 );
}

runcamoscripts( var_0 )
{
    if ( !getdvarint( "_encstr_94CF13E6D89CBE4E5685B14796D9CAEB3685D6DBCD", 1 ) )
        return;

    if ( _id_1458A( var_0 ) )
        thread _id_12A3E( var_0 );
    else
        self setscriptablepartstate( "_encstr_B42A0B320FCD7B33275B37B095", "_encstr_B8AC099BF67D373A0B3BAC" );

    var_1 = getweaponcamoname( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    switch ( var_1 )
    {
        case "_encstr_979207B1585B7BE043":
            thread blood_camo_84();
            break;
    }
}

clearcamoscripts( var_0 )
{
    self notify( "_encstr_9FF6166D459A7D79B14760F06BCDF55352AD4D63DA62E381" );
    self setscriptablepartstate( "_encstr_B42A0B320FCD7B33275B37B095", "_encstr_B8AC099BF67D373A0B3BAC" );

    if ( !isdefined( var_0 ) )
        return;

    switch ( var_0 )
    {
        case "_encstr_979207B1585B7BE043":
            self notify( "_encstr_A8600EF659AF821C96980F27E04E88FF" );
            break;
    }
}

_id_12A41()
{
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );

    foreach ( var_1 in level.players )
    {
        if ( isdefined( var_1 ) && isdefined( var_1._id_12A44 ) )
        {
            var_1._id_12A44 = undefined;
            var_1 notify( "_encstr_9FF6166D459A7D79B14760F06BCDF55352AD4D63DA62E381" );
        }
    }
}

_id_12A42( var_0, var_1, var_2 )
{
    var_0._id_13765 = var_1;

    if ( var_2 == 1 )
        self setscriptablepartstate( "_encstr_B42A0B320FCD7B33275B37B095", "_encstr_B4AD06A65382F741" + var_0._id_13765 );
    else
        self setscriptablepartstate( "_encstr_B42A0B320FCD7B33275B37B095", "_encstr_8C200B398D184B27E6EB7A02D1" + var_0._id_13765 );
}

_id_12A43( var_0 )
{
    if ( !isdefined( self._id_12A44 ) )
        self._id_12A44 = [];

    if ( !isdefined( self._id_12A44[var_0] ) )
    {
        self._id_12A44[var_0] = spawnstruct();
        self._id_12A44[var_0].kills = 0;
        self._id_12A44[var_0]._id_13765 = 0;
    }
}

_id_12A3E( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_9FF6166D459A7D79B14760F06BCDF55352AD4D63DA62E381" );

    if ( !isdefined( level._id_12A40 ) && !scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) )
    {
        level._id_12A40 = 1;
        level thread _id_12A41();
    }

    var_1 = _id_14585( var_0 );
    _id_12A43( var_1 );
    var_2 = self._id_12A44[var_1];
    _id_12A42( var_2, var_2._id_13765, 0 );
    var_3 = tablelookuprownum( "_encstr_BA7D136A453BCA7428B88767380155B2B748B6A2B4", 0, var_1 );
    var_4 = int( tablelookupbyrow( "_encstr_BA7D136A453BCA7428B88767380155B2B748B6A2B4", var_3, 1 ) );
    var_5 = strtok( tablelookupbyrow( "_encstr_BA7D136A453BCA7428B88767380155B2B748B6A2B4", var_3, 2 ), "_encstr_B64C02F0" );

    while ( var_2._id_13765 < var_4 )
    {
        scripts\engine\utility::waittill_either( "_encstr_8B220BCF9A8BAFAB5920581491", "_encstr_814E187B21762F0E788D091EBFA8120F17D983422B4587465897" );
        var_6 = int( var_5[var_2._id_13765 + 1] );
        var_2.kills++;

        if ( var_2.kills >= var_6 )
        {
            _id_12A42( var_2, var_2._id_13765 + 1, 1 );

            if ( !self isswitchingweapon() )
                self playlocalsound( "_encstr_A3BD1A617377474F933B0E90E103F1087B3FA4F371B86EC8F03490C6" );
        }
    }
}

blood_camo_84()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_A8600EF659AF821C96980F27E04E88FF" );

    if ( isdefined( self.bloodcamokillcount ) )
        self setscriptablepartstate( "_encstr_A49D081ED1075807B087", self.bloodcamokillcount + "_encstr_BCBE07713AD4491857" );
    else
        self.bloodcamokillcount = 0;

    while ( self.bloodcamokillcount < 13 )
    {
        self waittill( "_encstr_AFEC14FC08404CE9A5FD9FBB1140C2ADF871F7022158" );
        self.bloodcamokillcount = self.bloodcamokillcount + 1;
        self setscriptablepartstate( "_encstr_A49D081ED1075807B087", self.bloodcamokillcount + "_encstr_BCBE07713AD4491857" );
    }
}

_id_14585( var_0 )
{
    return var_0.basename + "_encstr_B40703D73B" + var_0.variantid;
}

_id_1458A( var_0 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_0.variantid ) )
        return 0;

    var_1 = _id_14585( var_0 );
    var_2 = tablelookuprownum( "_encstr_BA7D136A453BCA7428B88767380155B2B748B6A2B4", 0, var_1 );

    if ( isdefined( var_2 ) && var_2 >= 0 )
        return 1;

    return 0;
}

getactiveequipmentarray()
{
    return scripts\engine\utility::array_remove_duplicates( level.mines );
}

init_function_refs()
{
    level.getactiveequipmentarray = ::getactiveequipmentarray;
}

doesshareammo( var_0 )
{
    return var_0.isalternate && !issubstr( var_0.underbarrel, "_encstr_89070358A2" ) && issubstr( var_0.underbarrel, "_encstr_A85B083786B7E8ECAEB9" );
}

grenadeinitialize( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_0.weapon_object ) )
        var_0.weapon_object = var_1;

    if ( !isdefined( var_0.weapon_name ) )
        var_0.weapon_name = var_1.basename;

    if ( !isdefined( var_0.owner ) )
        var_0.owner = self;

    if ( !isdefined( var_0.team ) )
        var_0.team = self.team;

    if ( !isdefined( var_0.tickpercent ) )
        var_0.tickpercent = var_2;

    if ( !isdefined( var_0.ticks ) && isdefined( var_0.tickpercent ) )
        var_0.ticks = scripts\mp\utility\script::roundup( 4 * var_2 );

    var_4 = scripts\mp\equipment::getequipmentreffromweapon( var_1 );

    if ( isdefined( var_4 ) )
    {
        var_0.equipmentref = var_4;
        var_0.isequipment = 1;

        if ( var_4 == "_encstr_81CB0C988FDDA9C066A37F97BF65" )
            var_0.owner scripts\mp\utility\stats::incpersstat( "_encstr_888F0B53C8D0C737E8D3F3ED59", 1 );
    }

    var_0.threwback = isdefined( var_3 );
}

waittill_missile_fire()
{
    self waittill( "_encstr_B9A30D87785B4BAA99F599CFEB8D22", var_0, var_1 );

    if ( isdefined( var_0 ) )
    {
        if ( !isdefined( var_0.weapon_name ) )
        {
            if ( var_1.isalternate )
                var_0.weapon_name = scripts\mp\utility\weapon::getaltmodeweapon( var_1 );
            else
                var_0.weapon_name = var_1.basename;
        }

        if ( !isdefined( var_0.owner ) )
            var_0.owner = self;

        if ( !isdefined( var_0.team ) )
            var_0.team = self.team;
    }

    return var_0;
}

update_jugg_targets( var_0 )
{
    if ( var_0.basename == "_encstr_875B1659942A577EC5E102BA482135323368D5D8A528FBD2" || var_0.basename == "_encstr_8C9515102B50DF0BDF2FC147E953B1C761125088B3187F" )
        return 1;

    return 0;
}

update_icon_for_bomb_case_detonator_holder( var_0 )
{
    if ( var_0.basename == "_encstr_B6361A4BBB83BEB0C9F5C2E6ED3B2BAD4C2B274E687DAD07D68E0F23" || var_0.basename == "_encstr_BEFB150BAFD829767F31B399AB270B0AA91D818B343082" )
        return 1;

    if ( isdefined( var_0.reargrip ) && var_0.reargrip == "_encstr_A1DF0BAB20470A03669BE21155" )
        return 1;

    return 0;
}

_id_11DF6( var_0 )
{
    _id_12734( "_encstr_9DB30E35EB9B1A7BD56323B24ED74E96", "_encstr_B1280A1D569BD82CC44BD613" );
    _id_12734( "_encstr_AAB30E3A7626037DAB69DCA52D29C57F", "_encstr_B1280A1D569BD82CC44BD613" );
    _id_12734( "_encstr_9B8B0B2AF845D9C1FF7357E2D3", "_encstr_B1280A1D569BD82CC44BD613" );
    _id_12734( "_encstr_8A8B0BA6FA56B126EDEEAFD8CA", "_encstr_B1280A1D569BD82CC44BD613" );
    _id_12734( "_encstr_A6DD0992781498B7F7EAD4", "_encstr_B1280A1D569BD82CC44BD613" );
    _id_12734( "_encstr_A6DD0992781498B7F76DD7", "_encstr_B1280A1D569BD82CC44BD613" );
    _id_12734( "_encstr_B7500A35F5B53756B2AFC9B4", "_encstr_B1280A1D569BD82CC44BD613" );
    _id_12734( "_encstr_B9500ADADFD8262B6F97522D", "_encstr_B1280A1D569BD82CC44BD613" );
    _id_12734( "_encstr_B23B0D92F89BF1F805A258730F796E", "_encstr_AD430B0D25A759C18CBF4ACB55" );
    _id_12734( "_encstr_87DA078B11C012A35F", "_encstr_8F450AC303E3A9E7F991799C" );
    self playsound( "_encstr_94EE174B77C1AFB6E0D7A395CD3616F5232BC2D11AEB9B99E1" );
    var_0 hide();
}

_id_11DF5( var_0 )
{
    _id_12734( "_encstr_9DB30E35EB9B1A7BD56323B24ED74E96", "_encstr_BEBE09C1844B1D89B46B98" );
    _id_12734( "_encstr_AAB30E3A7626037DAB69DCA52D29C57F", "_encstr_BEBE09C1844B1D89B46B98" );
    _id_12734( "_encstr_9B8B0B2AF845D9C1FF7357E2D3", "_encstr_BEBE09C1844B1D89B46B98" );
    _id_12734( "_encstr_8A8B0BA6FA56B126EDEEAFD8CA", "_encstr_BEBE09C1844B1D89B46B98" );
    _id_12734( "_encstr_A6DD0992781498B7F7EAD4", "_encstr_BEBE09C1844B1D89B46B98" );
    _id_12734( "_encstr_A6DD0992781498B7F76DD7", "_encstr_BEBE09C1844B1D89B46B98" );
    _id_12734( "_encstr_B7500A35F5B53756B2AFC9B4", "_encstr_BEBE09C1844B1D89B46B98" );
    _id_12734( "_encstr_B9500ADADFD8262B6F97522D", "_encstr_BEBE09C1844B1D89B46B98" );
    _id_12734( "_encstr_B23B0D92F89BF1F805A258730F796E", "_encstr_AFE00A8A4321CBE9CAAA9690" );
    _id_12734( "_encstr_87DA078B11C012A35F", "_encstr_AD9C0991EB72DDA995AE71" );
    self playsound( "_encstr_8FA80F10AE81739905D226915A7F2BC993" );
    var_0 hide();
}

_id_12734( var_0, var_1 )
{
    var_2 = self gettagorigin( var_0 );
    var_3 = self gettagangles( var_0 );
    playfx( level._effect[var_1], var_2, anglestoforward( var_3 ), anglestoup( var_3 ) );
}

enableburnfx( var_0, var_1 )
{
    if ( !isdefined( self.flare_thread ) )
        self.flare_thread = [];

    if ( !isdefined( var_1 ) )
        var_1 = "_encstr_B30B07E216CBFFC4C2";

    if ( !istrue( var_0 ) )
        thread enableburnsfx();

    self.flare_thread[release_mortar_operator( var_1 )] = var_1;
    thread startburnfx();
}

release_mortar_operator( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_AB630CBDD7035AEF9FF3B8300DFB":
            return 3;
        case "_encstr_A28F0A2FA0A75ECFFB3AEE0A":
            return 2;
        case "_encstr_B30B07E216CBFFC4C2":
            return 1;
        default:
            return 0;
    }
}

remove_invulnerability( var_0 )
{
    var_1 = 3;

    for ( var_2 = undefined; var_1 >= 0; var_1-- )
    {
        if ( isdefined( var_0[var_1] ) )
        {
            var_2 = var_0[var_1];
            break;
        }
    }

    return var_2;
}

enableburnsfx()
{
    if ( !isdefined( self.burnsfxenabled ) )
        self.burnsfxenabled = 0;

    if ( !isdefined( self.burnsfx ) )
    {
        self.burnsfx = spawn( "_encstr_A3050EDF6FF5DC081CC1AFA37097B80B", self.origin );
        self.burnsfx linkto( self );
        self.burnsfx scripts\cp_mp\ent_manager::registerspawncount( 1 );
        thread flares_from_structs( self.burnsfx );
        wait 0.05;
    }

    if ( self.burnsfxenabled == 0 )
    {
        self.burnsfx playloopsound( "_encstr_A9E01DEEB22CE0AF6BF6D8BDE8B79DAFCCD2E456FAACDCCA6BF27D895739DC" );
        self.burnsfxenabled = 1;
    }
}

flares_from_structs( var_0 )
{
    self endon( "_encstr_BA20100A83168BE209F11734936337AB3519" );
    self waittill( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    if ( isdefined( var_0 ) )
    {
        var_0 stoploopsound( "_encstr_A9E01DEEB22CE0AF6BF6D8BDE8B79DAFCCD2E456FAACDCCA6BF27D895739DC" );
        var_0 delete();
    }
}

enableburnfxfortime( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = "_encstr_B30B07E216CBFFC4C2";

    var_2 = "_encstr_8C5415204BB1821856988D0EFA7C0357771BF19B255DC1" + var_1;
    self notify( var_2 );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_B4410CAF5B596380EE73BDF078BE" );
    self endon( var_2 );
    thread enableburnfx( 0, var_1 );
    wait( var_0 );
    thread disableburnfx( 0, var_1 );
}

disableburnfx( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
    {
        if ( self.flare_thread[release_mortar_operator( var_1 )] == var_1 )
            self.flare_thread[release_mortar_operator( var_1 )] = undefined;
    }
    else
        self.flare_thread = [];

    if ( self.flare_thread.size > 0 )
        thread startburnfx();
    else
    {
        thread stopburnfx();

        if ( !istrue( var_0 ) )
            thread disable_burnsfx();
    }
}

disable_burnsfx()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    if ( !isdefined( self.burnsfxenabled ) )
        self.burnsfxenabled = 0;

    wait 0.5;

    if ( self.burnsfxenabled == 1 )
    {
        self playsound( "_encstr_987A2177FDCE10203F72F0982BDF6CB1A759C5DB5FB7A875070B6E2103F328F9BFA661" );

        if ( isdefined( self.burnsfx ) )
        {
            self.burnsfx scripts\cp_mp\ent_manager::deregisterspawn();
            wait 0.15;

            if ( isdefined( self.burnsfx ) )
            {
                self notify( "_encstr_BA20100A83168BE209F11734936337AB3519" );
                self.burnsfx stoploopsound( "_encstr_A9E01DEEB22CE0AF6BF6D8BDE8B79DAFCCD2E456FAACDCCA6BF27D895739DC" );
                self.burnsfx delete();
            }
        }

        self.burnsfxenabled = 0;
    }
}

supressburnfx( var_0 )
{
    if ( !isdefined( self.burnfxsuppressed ) )
        self.burnfxsupressed = 0;

    if ( var_0 )
        self.burnfxsuppressed++;
    else
        self.burnfxsuppressed--;
}

clearburnfx()
{
    self notify( "_encstr_B4410CAF5B596380EE73BDF078BE" );
    thread stopburnfx();
    self.burnfxsuppressed = undefined;
    self.burnfxplaying = undefined;
    self.flare_thread = undefined;
}

startburnfx()
{
    self notify( "_encstr_80490BA3304F92832B4616364B" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_80490BA3304F92832B4616364B" );
    var_0 = remove_invulnerability( self.flare_thread );

    for (;;)
    {
        var_1 = isdefined( self.burnfxsuppressed ) && self.burnfxsuppressed > 0;
        var_2 = isdefined( self.burnfxplaying );

        if ( var_1 && var_2 )
        {
            self setscriptablepartstate( "_encstr_9DB10831AE939B4BB93B", "_encstr_9BA4080D39CFFB5AB7C1" );
            scripts\mp\damage::dequeuecorpsetablefunc( "_encstr_9DB10831AE939B4BB93B" );
            self.burnfxplaying = undefined;
        }
        else if ( !var_1 && !var_2 || var_0 != self.burnfxplaying )
        {
            self setscriptablepartstate( "_encstr_9DB10831AE939B4BB93B", var_0 );
            self.burnfxplaying = var_0;

            if ( !var_2 )
                scripts\mp\damage::enqueuecorpsetablefunc( "_encstr_9DB10831AE939B4BB93B", ::burnfxcorpstablefunc );
        }

        waitframe();
    }
}

stopburnfx()
{
    self notify( "_encstr_80490BA3304F92832B4616364B" );

    if ( isdefined( self.burnfxplaying ) )
    {
        self setscriptablepartstate( "_encstr_9DB10831AE939B4BB93B", "_encstr_9BA4080D39CFFB5AB7C1" );
        scripts\mp\damage::dequeuecorpsetablefunc( "_encstr_9DB10831AE939B4BB93B" );
        self.burnfxplaying = undefined;
    }
}

burnfxcorpstablefunc( var_0 )
{
    var_0 setscriptablepartstate( "_encstr_9DB10831AE939B4BB93B", "_encstr_AB3908ADD3725E40256A", 0 );
}

_id_13018( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_0 endon( "_encstr_A3750609A5E61883" );
    var_0 waittill( "_encstr_8AE90E7D08B8538A21DB77CF1155D2B3", var_1 );

    if ( isplayer( var_1 ) )
    {
        thread grenadestuckto( var_0, var_1 );

        if ( isalive( var_1 ) )
            thread _id_13016( var_0, var_1 );
    }
}

_id_13016( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_0 endon( "_encstr_B7F90C0A289181C7427F2C571D89" );
    var_1 endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    var_0 thread scripts\mp\utility\script::notifyafterframeend( "_encstr_A3750609A5E61883", "_encstr_B7F90C0A289181C7427F2C571D89" );
    var_0 waittill( "_encstr_AB0808DFB97F822F1899", var_2 );
    thread _id_13017( var_1, var_2 );
}

_id_13017( var_0, var_1 )
{
    var_2 = distancesquared( var_1, var_0.origin );
    var_3 = 5000;

    if ( var_2 > var_3 )
        return;

    var_0 scripts\cp_mp\utility\damage_utility::playerplunderbankcallback();
    var_0 dodamage( var_0.maxhealth, var_1, self, undefined, "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9", getcompleteweaponname( "_encstr_9FA70ADF38B86C4AD188752A" ) );
    var_0 scripts\cp_mp\utility\damage_utility::playerplunderbankdeposit();
}
