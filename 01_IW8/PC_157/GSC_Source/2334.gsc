// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    level.sentrytype = [];
    level.sentrytype["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"] = "_encstr_AD2F0DD8973091DDC1331EA80A8AF3";
    level.sentrytype["_encstr_AB470D9B59738E275EAF9BD07BD8B6"] = "_encstr_AB470D9B59738E275EAF9BD07BD8B6";
    level.sentrytype["_encstr_8BD90EB62CB9EAC28DFAD1EAE49C56D1"] = "_encstr_8BD90EB62CB9EAC28DFAD1EAE49C56D1";
    level.sentrysettings = [];
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"] = spawnstruct();
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].health = 999999;
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].maxhealth = 100;
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].sentrymodeon = "_encstr_AD1807EA95E028356F";
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].sentrymodeoff = "_encstr_81FD0F630D75B34B6377920CF0B2D09EB3";
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].weaponinfo = "_encstr_82E4106E2B37E84E5EFA8D2C6EB29CF55BC1";
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].modelbase = "_encstr_8F39108B1387575A3139AA8F09B0A077A12B";
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].modelgood = "_encstr_80C61A37BA07ACC9BEE84E7BE0342F7DD60EBE1C36166C95B6ACCD1D";
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].modelbad = "_encstr_B70A1F63FB904FD3B0AB0BC23373B7896B99D7E871B0167741A1C27BBE5C0FFCA0";
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].modeldestroyed = "_encstr_8F39108B1387575A3139AA8F09B0A077A12B";
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].hintstring = &"_encstr_BC190EBFD93CACD9B3901A44BEBF6110";
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].headicon = 1;
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].teamsplash = "_encstr_ADDB123F704194011F451A572E9F6B4AA8D0C397";
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].shouldsplash = 0;
    level.sentrysettings["_encstr_AD2F0DD8973091DDC1331EA80A8AF3"].lightfxtag = "_encstr_B8BF073A0BD9F5CC0F";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"] = spawnstruct();
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].health = 999999;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].maxhealth = 670;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].burstmin = 20;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].burstmax = 120;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].pausemin = 0.15;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].pausemax = 0.35;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].sentrymodeon = "_encstr_AD1807EA95E028356F";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].sentrymodeoff = "_encstr_81FD0F630D75B34B6377920CF0B2D09EB3";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].timeout = 90.0;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].spinuptime = 0.05;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].overheattime = 8.0;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].cooldowntime = 0.1;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].fxtime = 0.3;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].streakname = "_encstr_AB470D9B59738E275EAF9BD07BD8B6";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].weaponinfo = "_encstr_B3EF106B70854B9B62E833509849B7D9DB70";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].scriptable = "_encstr_81441302280F720B482EF3CF3ED1CB7BBD80C9FA98";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].modelbase = "_encstr_8FC914B91AEDD86DAFE6CA371DE4E5FAECEAB9EBDDAD";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].modelgood = "_encstr_A21318DFC85D498731CE223763F2D0E947E785A06B208FB75620";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].modelbad = "_encstr_B16E1C76D43A0FA89F7798D873EAA23F023B60E8EBF2AF108A7B41301F14";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].modeldestroyed = "_encstr_87031E0B930A272B2FC34B607C83C31090AF3597A7576F89607B0533C04AC79D";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].hintstring = &"_encstr_BC190EBFD93CACD9B3901A44BEBF6110";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].headicon = 1;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].teamsplash = "_encstr_A9EA12D537CA32F56ED0B78D6DEBCDCA37473997";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].destroyedsplash = "_encstr_B3AB1FAF49A85198CDE36F7BA13680FBEAA09B4F28C790C078EBBF27D35C9873C7";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].shouldsplash = 1;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].votimeout = "_encstr_896C15B9AC9BE8C9F2F5E6A1DB1BDABEE8B4D695DB5747";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].vodestroyed = "_encstr_A93D153A5535AB82DA01CFAB687143C189FD8273464F33";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].scorepopup = "_encstr_94881191CA9BE8C9ED5E2B23F5CD2B738E39CB";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].lightfxtag = "_encstr_B8BF073A0BD9F5CC0F";
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].iskillstreak = 1;
    level.sentrysettings["_encstr_AB470D9B59738E275EAF9BD07BD8B6"].headiconoffset = 75;
    level._effect["_encstr_A636139BB2DCD1C9E5D7F66795938656C2D1FAB5C1"] = loadfx( "_encstr_AAD02ECECC1EE5B1BD9C2B79B5E079D62DD8C66ED1392B16B637BC9DCCF0D76EB3F5F63BCA9334AC58D1AFCDD6DEB5B2" );
    level._effect["_encstr_9B161272EF5843B3E2A822E3A313F77B87D95D9A"] = loadfx( "_encstr_8A67363B99E1CBB4DDDCE5AF4ECAE2D52B6E1D3797ADE079D9333CD7B3B27359274B367DB22ED5D2386BCA733AD7AC8783D7D8B3179D333C" );
    level._effect["_encstr_BAB511E6B2CDE84E2FAFCD0E16E4DADCF55B83"] = loadfx( "_encstr_AF1231166C52E68E8FD812CE58C9D5BF28C184ABFDFB37D6AFF8BE5328F1310701B8042293E6779B7D8102AB8001754F789096" );
    level._effect["_encstr_97821037D0307423FBA0CA4590E76A17F8E0"] = loadfx( "_encstr_822538CECC3CBC4BBB6ECBD739B2C55DACDC476E5EB6385ED9663CF5B3CA37D7B28B572D38BE320BADD7371CC239ADD79357DCE62B278BB3CC3C" );
    level._effect["_encstr_A6AA14C720C06433EBB0FA348087FA070930075B9819"] = loadfx( "_encstr_A2C534B3991E972DBB73E5D79C56C5BAB26EA3CD5E6BE05E9D333CEB37B2738E9CF2F56E34F636B5FA8D86B093CE95EB5D07B8B399F0" );
    level._effect["_encstr_94041427C02084D30B50DA14A0E79A672B48ABE7A858"] = loadfx( "_encstr_8B0C2DE3E2D2C7B0E0CBAEA95540397DA753E342D078D9188BE92011C0B2DEFD9202A11A18D852F437B6B80357188E" );
    level._effect["_encstr_9E7E1218A8C50D10FF374EA447272497F9E68A50"] = loadfx( "_encstr_9E452BECCC875E96BB9BCBF5C9CA2EBAACE68E9BE55BE0F267993C7D9B59E63AC92FF5B90DF6D8B6D74C58CD95" );
    level._effect["_encstr_A21E14E35BE08B53234E9B3250767F09783B6C71C3A0"] = loadfx( "_encstr_B9A72DEB333A17AAAFDC858166A363F5219B7B77B27080F6F51C5889CE5B4ABCABC85F8F2068CB7A4F2E667F3B53D3" );
    level._effect["_encstr_8726179B56DCD1C9E5F59B1ADED8D6BEB2C31CB1BD6E96B737"] = loadfx( "_encstr_9C892E67CC1E795ABBDCCBAF39CA8B5D95B9E8DC97B51CBCB399F0AFB92BDCA3E4E5FAE634B76C6DEB56B946E2ECCC3C" );
    level._effect["_encstr_A29D135348BD43937AE03B2880418FC1E168FA4AA8"] = loadfx( "_encstr_B2DA35DB72F39840DB37A74F9A87587D2F9B13E38EDF6F3AB37EF157A3EFE845ABD3CE6B627F2E208140ED3FD259C00E8F4A20B82B83DB" );
    level._effect["_encstr_A4DA115B628B15B8787FFFC16726A8485FEBD1"] = loadfx( "_encstr_B7A32E731580E062DBE356A7539A29AB8DEFCC28AA9BF857AE33D098739FFA35E6B8B9F0BA6852A471911EB1821B3890" );
}

tryuseautosentry( var_0, var_1 )
{
    var_2 = givesentry( "_encstr_BA600F372BDCD1932FBEB5B4DCB4B3BA37" );

    if ( var_2 )
        scripts\common\utility::_id_13E0A( level._id_11B2A, level.sentrysettings["_encstr_BA600F372BDCD1932FBEB5B4DCB4B3BA37"].streakname, self.origin );

    return var_2;
}

tryusesam( var_0, var_1 )
{
    var_2 = givesentry( "_encstr_B42C0B130741603B676ABEF053" );

    if ( var_2 )
        scripts\common\utility::_id_13E0A( level._id_11B2A, level.sentrysettings["_encstr_B42C0B130741603B676ABEF053"].streakname, self.origin );

    return var_2;
}

tryuseshocksentry( var_0 )
{
    var_1 = givesentry( "_encstr_AB470D9B59738E275EAF9BD07BD8B6", undefined, var_0 );

    if ( var_1 )
        scripts\common\utility::_id_13E0A( level._id_11B2A, var_0.streakname, self.origin );
    else
        waitframe();

    return var_1;
}

tryusemanualturret( var_0 )
{
    var_1 = givesentry( "_encstr_8BD90EB62CB9EAC28DFAD1EAE49C56D1", undefined, var_0 );

    if ( var_1 )
        scripts\common\utility::_id_13E0A( level._id_11B2A, var_0.streakname, self.origin );
    else
        waitframe();

    return var_1;
}

givesentry( var_0, var_1, var_2 )
{
    self.last_sentry = var_0;

    if ( !isdefined( self.placedsentries ) )
        self.placedsentries = [];

    if ( !isdefined( self.placedsentries[var_0] ) )
        self.placedsentries[var_0] = [];

    var_3 = 1;

    if ( isdefined( var_1 ) )
        var_3 = var_1;

    var_4 = createsentryforplayer( var_0, self, var_3, var_2 );

    if ( isdefined( var_2 ) )
        var_2.sentrygun = var_4;

    removeperks();
    self.carriedsentry = var_4;
    var_5 = setcarryingsentry( var_4, 1, var_3 );
    self.carriedsentry = undefined;
    thread waitrestoreperks();
    self.iscarrying = 0;

    if ( isdefined( var_4 ) )
        return 1;
    else
        return 0;
}

setcarryingsentry( var_0, var_1, var_2, var_3 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    var_0 sentry_setcarried( self, var_2, var_3 );
    scripts\common\utility::allow_usability( 0 );
    allowweaponsforsentry( 0 );
    scripts\common\utility::allow_melee( 0 );

    if ( !isai( self ) )
    {
        self notifyonplayercommand( "_encstr_BE8C0D83368536B2FAB92B73E8935E", "_encstr_9DE608483AFB1D28C673" );
        self notifyonplayercommand( "_encstr_BE8C0D83368536B2FAB92B73E8935E", "_encstr_B6D21A59B0E88EC236DAEBC2D62DD631BDFA16D8B1566E9B5A31C62B" );
        self notifyonplayercommand( "_encstr_80E60EB12CDC1BCAD8D7375673D193CB", "_encstr_825C0E23CB1013B7A0D013EAD805CA5B" );

        if ( !self isconsoleplayer() )
        {
            self notifyonplayercommand( "_encstr_80E60EB12CDC1BCAD8D7375673D193CB", "_encstr_AA5C0E13FB2023E7F080639A8855FACB" );
            self notifyonplayercommand( "_encstr_80E60EB12CDC1BCAD8D7375673D193CB", "_encstr_AB5C0E86296FC9F83062830A50E34635" );
            self notifyonplayercommand( "_encstr_80E60EB12CDC1BCAD8D7375673D193CB", "_encstr_B15C0EB327F943D457F04BB210895E96" );
        }
    }

    for (;;)
    {
        var_4 = scripts\engine\utility::_id_143AF( "_encstr_BE8C0D83368536B2FAB92B73E8935E", "_encstr_80E60EB12CDC1BCAD8D7375673D193CB", "_encstr_A97817572058AB92107F371367254ADFF0E80E9E9948751ADD", "_encstr_97770CB13F4FE9A06B18358319BC" );

        if ( !isdefined( var_0 ) )
        {
            allowweaponsforsentry( 1 );
            scripts\common\utility::allow_usability( 1 );
            thread enablemeleeforsentry();
            return 1;
        }

        if ( var_4 == "_encstr_80E60EB12CDC1BCAD8D7375673D193CB" || var_4 == "_encstr_A97817572058AB92107F371367254ADFF0E80E9E9948751ADD" || var_4 == "_encstr_97770CB13F4FE9A06B18358319BC" )
        {
            if ( !var_1 && ( var_4 == "_encstr_80E60EB12CDC1BCAD8D7375673D193CB" || var_4 == "_encstr_97770CB13F4FE9A06B18358319BC" ) )
                continue;

            var_0 sentry_setcancelled( var_4 == "_encstr_A97817572058AB92107F371367254ADFF0E80E9E9948751ADD" && !isdefined( var_0.firstplacement ) );
            return 0;
        }

        if ( !var_0.canbeplaced )
            continue;

        var_0 sentry_setplaced( var_2 );
        return 1;
    }
}

enablemeleeforsentry()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    wait 0.25;
    scripts\common\utility::allow_melee( 1 );
}

removeweapons()
{
    if ( self hasweapon( "_encstr_BCF312D2EED8D7934BDEE8E6D02D95638CF5B51C" ) )
    {
        self.restoreweapon = "_encstr_BCF312D2EED8D7934BDEE8E6D02D95638CF5B51C";
        scripts\cp_mp\utility\inventory_utility::_takeweapon( "_encstr_BCF312D2EED8D7934BDEE8E6D02D95638CF5B51C" );
    }
}

removeperks()
{
    if ( scripts\mp\utility\perk::_hasperk( "_encstr_A4371BE6E0B28D9685B1D1977DB28783C6DECDD2D9594CABC6D859E86E" ) )
    {
        self.restoreperk = "_encstr_A4371BE6E0B28D9685B1D1977DB28783C6DECDD2D9594CABC6D859E86E";
        scripts\mp\utility\perk::removeperk( "_encstr_A4371BE6E0B28D9685B1D1977DB28783C6DECDD2D9594CABC6D859E86E" );
    }
}

restoreweapons()
{
    if ( isdefined( self.restoreweapon ) )
    {
        scripts\cp_mp\utility\inventory_utility::_giveweapon( self.restoreweapon );
        self.restoreweapon = undefined;
    }
}

restoreperks()
{
    if ( isdefined( self.restoreperk ) )
    {
        scripts\mp\utility\perk::giveperk( self.restoreperk );
        self.restoreperk = undefined;
    }
}

waitrestoreperks()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    waitframe();
    restoreperks();
}

createsentryforplayer( var_0, var_1, var_2, var_3 )
{
    var_4 = level.sentrysettings[var_0].weaponinfo;
    var_5 = spawnturret( "_encstr_88710C0763169AF7A3330A1229D8", var_1.origin, var_4 );
    var_5.angles = var_1.angles;
    var_5.streakinfo = var_3;
    var_5 sentry_initsentry( var_0, var_1, var_2 );
    var_5 thread sentry_destroyongameend();
    var_5 scripts\cp_mp\emp_debuff::allow_emp( 0 );
    var_5 scripts\cp_mp\emp_debuff::set_start_emp_callback( ::sentry_empstarted );
    var_5 scripts\cp_mp\emp_debuff::set_clear_emp_callback( ::sentry_empcleared );
    return var_5;
}

sentry_initsentry( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_3 ) )
        var_3 = 1;

    self.sentrytype = var_0;
    self.canbeplaced = 1;
    self setmodel( level.sentrysettings[var_0].modelbase );
    self setnodeploy( 1 );

    if ( level.sentrysettings[var_0].shouldsplash )
        self.shouldsplash = 1;
    else
        self.shouldsplash = 0;

    self.firstplacement = 1;
    self setcandamage( 1 );

    switch ( var_0 )
    {
        case "_encstr_8AF50CE218384BC3304DD5CC7F6A":
        case "_encstr_A2F50C578B911B6313A06F2D6FEB":
        case "_encstr_BCF50CCE8D7D1DAB93E4CAE8BE46":
        case "_encstr_98F50C30B2B1BBCB5543CD7BEFD9":
        case "_encstr_B4730AA7493FC3FDC3930F73":
        case "_encstr_970E1132607D686C5B20B95943AA435B185997":
        case "_encstr_9B0E11759BEDA25F93303783F02B022A61386A":
        case "_encstr_A90E116BCF0648AF0BCDE07D6313CDB1647F62":
        case "_encstr_B30E1108321B2BA0CBFE37690DF2F0E59BC90B":
        case "_encstr_AA040FD6D273A576BA9B7DE85DC927958E":
            self setleftarc( 80 );
            self setrightarc( 80 );
            self setbottomarc( 50 );
            self setdefaultdroppitch( 0.0 );
            self.originalowner = var_1;
            break;
        case "_encstr_AFD6107358A5668F79194D7F2DA3CB6A2378":
        case "_encstr_B42C0B130741603B676ABEF053":
            self maketurretinoperable();
            self setleftarc( 180 );
            self setrightarc( 180 );
            self settoparc( 80 );
            self setdefaultdroppitch( -89.0 );
            self.laser_on = 0;
            var_4 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", self gettagorigin( "_encstr_BC1E0A117F8A506069D2B953" ) );
            var_4 linkto( self );
            self.killcament = var_4;
            self.killcament setscriptmoverkillcam( "_encstr_97440AC1EBAB51188231BD83" );
            break;
        case "_encstr_AB470D9B59738E275EAF9BD07BD8B6":
            self maketurretinoperable();
            var_5 = anglestoforward( self.angles );
            var_6 = self gettagorigin( "_encstr_BC1E0A117F8A506069D2B953" ) + ( 0, 0, 10 );
            var_6 = var_6 - var_5 * 20;
            var_4 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_6 );
            var_4 linkto( self );
            self.killcament = var_4;
            break;
        case "_encstr_8BD90EB62CB9EAC28DFAD1EAE49C56D1":
            var_5 = anglestoforward( self.angles );
            var_6 = self gettagorigin( "_encstr_BC1E0A117F8A506069D2B953" ) + ( 0, 0, 10 );
            var_6 = var_6 - var_5 * 20;
            var_4 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_6 );
            var_4 linkto( self );
            self.killcament = var_4;
            break;
        default:
            self maketurretinoperable();
            self setdefaultdroppitch( -89.0 );
            break;
    }

    self setturretmodechangewait( 1 );
    sentry_setinactive();
    sentry_setowner( var_1 );

    if ( var_3 )
        thread sentry_timeout();

    switch ( var_0 )
    {
        case "_encstr_970E1132607D686C5B20B95943AA435B185997":
        case "_encstr_9B0E11759BEDA25F93303783F02B022A61386A":
        case "_encstr_A90E116BCF0648AF0BCDE07D6313CDB1647F62":
        case "_encstr_B30E1108321B2BA0CBFE37690DF2F0E59BC90B":
        case "_encstr_AA040FD6D273A576BA9B7DE85DC927958E":
            self.momentum = 0;
            self.heatlevel = 0;
            self.overheated = 0;
            thread sentry_heatmonitor();
            break;
        case "_encstr_8AF50CE218384BC3304DD5CC7F6A":
        case "_encstr_A2F50C578B911B6313A06F2D6FEB":
        case "_encstr_BCF50CCE8D7D1DAB93E4CAE8BE46":
        case "_encstr_98F50C30B2B1BBCB5543CD7BEFD9":
        case "_encstr_B4730AA7493FC3FDC3930F73":
            self.momentum = 0;
            self.heatlevel = 0;
            self.cooldownwaittime = 0;
            self.overheated = 0;
            thread turret_heatmonitor();
            thread turret_coolmonitor();
            break;
        case "_encstr_AFD6107358A5668F79194D7F2DA3CB6A2378":
        case "_encstr_B42C0B130741603B676ABEF053":
        case "_encstr_AB470D9B59738E275EAF9BD07BD8B6":
            self.momentum = 0;
            thread sentry_handleuse( var_2 );
            thread sentry_beepsounds();
            break;
        case "_encstr_8BD90EB62CB9EAC28DFAD1EAE49C56D1":
            self.momentum = 0;
            thread sentry_handlemanualuse();
            thread sentry_handlealteratepickup( var_2 );
            break;
        case "_encstr_AD2F0DD8973091DDC1331EA80A8AF3":
            thread sentry_handleuse( 0 );
            thread sentry_beepsounds();
            break;
        default:
            thread sentry_handleuse( var_2 );
            thread sentry_attacktargets();
            thread sentry_beepsounds();
            break;
    }
}

sentry_setteamheadicon()
{
    var_0 = level.sentrysettings[self.sentrytype].headiconoffset;

    if ( !isdefined( var_0 ) )
        return;

    if ( !isdefined( self.owner ) )
        return;

    var_1 = self.owner;
    var_2 = var_1.team;
    self.headiconid = thread scripts\cp_mp\entityheadicons::setheadicon_factionimage( 0, var_0, undefined, undefined, undefined, undefined, 1 );
}

sentry_clearteamheadicon()
{
    var_0 = level.sentrysettings[self.sentrytype].headiconoffset;

    if ( !isdefined( var_0 ) )
        return;

    scripts\cp_mp\entityheadicons::setheadicon_deleteicon( self.headiconid );
}

sentry_destroyongameend()
{
    self endon( "_encstr_A3750609A5E61883" );
    level scripts\engine\utility::_id_143A5( "_encstr_B35E0F98E4ED7DB934DE1DFA6EA30B39E8", "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_A3750609A5E61883" );
}

sentry_handledamage()
{
    self endon( "_encstr_9D3B0803A3F0FACFDDF9" );
    var_0 = level.sentrysettings[self.sentrytype].maxhealth;
    var_1 = 0;

    if ( self.owner scripts\mp\utility\perk::_hasperk( "_encstr_871415CD83AC1BB416C6A3CBD7395D3BB35919F52BE2E0" ) )
    {
        var_2 = self.weapon_name;

        if ( isdefined( var_2 ) )
        {
            switch ( var_2 )
            {
                default:
            }
        }
    }

    var_0 = var_0 + int( var_1 );
    scripts\mp\damage::monitordamage( var_0, "_encstr_AD1807EA95E028356F", ::sentryhandledeathdamage, ::sentrymodifydamage, 1 );
}

sentrymodifydamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflags;
    var_6 = var_4;

    if ( var_3 == "_encstr_8AED0A5719ED37B8FB512FD7" )
        var_6 = self.maxhealth * 0.34;

    var_6 = scripts\mp\utility\killstreak::getmodifiedantikillstreakdamage( var_1, var_2, var_3, var_6, self.maxhealth, 2, 3, 4 );
    return var_6;
}

sentryhandledeathdamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflags;
    var_6 = level.sentrysettings[self.sentrytype];

    if ( var_6.iskillstreak )
    {
        var_7 = scripts\mp\damage::onkillstreakkilled( var_6.streakname, var_1, var_2, var_3, var_4, var_6.scorepopup, var_6.vodestroyed, var_6.destroyedsplash );

        if ( var_7 )
        {
            var_1 notify( "_encstr_B6BB140AE56FC14D7781B0FDAF0869F3E818D827BDEB" );
            return;
        }
    }
    else
    {
        var_8 = undefined;
        var_9 = var_1;

        if ( isdefined( var_9 ) && isdefined( self.owner ) )
        {
            if ( isdefined( var_1.owner ) && isplayer( var_1.owner ) )
                var_9 = var_1.owner;

            if ( self.owner scripts\mp\utility\player::isenemy( var_9 ) )
                var_8 = var_9;
        }

        if ( isdefined( var_8 ) )
        {
            var_8 thread scripts\mp\events::supershutdown( self.owner );
            var_8 notify( "_encstr_B6BB140AE56FC14D7781B0FDAF0869F3E818D827BDEB" );
        }

        self notify( "_encstr_A3750609A5E61883" );
    }
}

sentry_empstarted( var_0 )
{
    self.disabled = 1;
    self setdefaultdroppitch( 40 );
    self setmode( level.sentrysettings[self.sentrytype].sentrymodeoff );
    self cleartargetentity();
    self setscriptablepartstate( "_encstr_A35B0718E35B92C8FF", "_encstr_9BA4080D39CFFB5AB7C1", 0 );
    self setscriptablepartstate( "_encstr_BAD908A3D3A5A0E08A73", "_encstr_B30B07E216CBFFC4C2" );
}

sentry_empcleared( var_0 )
{
    if ( var_0 )
        return;

    self setdefaultdroppitch( -89.0 );
    self setmode( level.sentrysettings[self.sentrytype].sentrymodeon );
    self setscriptablepartstate( "_encstr_BAD908A3D3A5A0E08A73", "_encstr_9BA4080D39CFFB5AB7C1" );
    self.disabled = undefined;
}

sentry_handledeath()
{
    self endon( "_encstr_9D3B0803A3F0FACFDDF9" );
    self waittill( "_encstr_A3750609A5E61883" );

    if ( isdefined( self.owner ) )
        self.owner.placedsentries[self.sentrytype] = scripts\engine\utility::array_remove( self.owner.placedsentries[self.sentrytype], self );

    if ( !isdefined( self ) )
        return;

    self cleartargetentity();
    self laseroff();
    self setmodel( level.sentrysettings[self.sentrytype].modeldestroyed );

    if ( isdefined( self.fxentdeletelist ) && self.fxentdeletelist.size > 0 )
    {
        foreach ( var_1 in self.fxentdeletelist )
        {
            if ( isdefined( var_1 ) )
                var_1 delete();
        }

        self.fxentdeletelist = undefined;
    }

    sentry_setinactive();
    self setdefaultdroppitch( 40 );
    self setsentryowner( undefined );

    if ( isdefined( self.inuseby ) )
        self useby( self.inuseby );

    self setturretminimapvisible( 0 );

    if ( isdefined( self.ownertrigger ) )
        self.ownertrigger delete();

    self playsound( "_encstr_BCCF138563572F531D0197C91AF02ACBEBEAE8AB98" );

    switch ( self.sentrytype )
    {
        case "_encstr_B4730AA7493FC3FDC3930F73":
        case "_encstr_AA040FD6D273A576BA9B7DE85DC927958E":
            self.forcedisable = 1;
            self turretfiredisable();
            break;
        default:
            break;
    }

    if ( isdefined( self.inuseby ) )
    {
        playfxontag( scripts\engine\utility::getfx( "_encstr_9B161272EF5843B3E2A822E3A313F77B87D95D9A" ), self, "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
        playfxontag( scripts\engine\utility::getfx( "_encstr_97821037D0307423FBA0CA4590E76A17F8E0" ), self, "_encstr_BA30088E16D97D162D6B" );
        self.inuseby.turret_overheat_bar scripts\mp\hud_util::destroyelem();
        self.inuseby restoreperks();
        self.inuseby restoreweapons();
        self notify( "_encstr_940D09DDB72A236B8963E8" );
        wait 1.0;
        stopfxontag( scripts\engine\utility::getfx( "_encstr_9B161272EF5843B3E2A822E3A313F77B87D95D9A" ), self, "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
        stopfxontag( scripts\engine\utility::getfx( "_encstr_97821037D0307423FBA0CA4590E76A17F8E0" ), self, "_encstr_BA30088E16D97D162D6B" );
    }
    else
    {
        self playsound( "_encstr_B9B2157BB5C8D3620B09BA6358091D2B0130E3EDD830DF" );
        self setscriptablepartstate( "_encstr_82320A46ACE68EC9DBE5CA32", "_encstr_81AC071FD808DA7FEB" );
        wait 5;
        playfx( scripts\engine\utility::getfx( "_encstr_9B161272EF5843B3E2A822E3A313F77B87D95D9A" ), self.origin + ( 0, 0, 10 ) );
        self notify( "_encstr_940D09DDB72A236B8963E8" );
    }

    scripts\mp\weapons::equipmentdeletevfx();

    if ( isdefined( self.killcament ) )
        self.killcament delete();

    if ( isdefined( self.airlookatent ) )
        self.airlookatent delete();

    if ( isdefined( self.manualpickuptrigger ) )
        self.manualpickuptrigger delete();

    scripts\mp\utility\print::printgameaction( "_encstr_971420D64BD8C66ED193B2165B0259DC8C9591044B08E6867BB16DD7CDCACD8E275E", self.owner );
    self delete();
}

sentry_handleuse( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_1 );

        if ( !scripts\mp\utility\player::isreallyalive( var_1 ) )
            continue;

        if ( self.sentrytype == "_encstr_B42C0B130741603B676ABEF053" || self.sentrytype == "_encstr_AFD6107358A5668F79194D7F2DA3CB6A2378" )
            self setmode( level.sentrysettings[self.sentrytype].sentrymodeoff );

        var_1.placedsentries[self.sentrytype] = scripts\engine\utility::array_remove( var_1.placedsentries[self.sentrytype], self );
        var_1 setcarryingsentry( self, 0, var_0 );
    }
}

turret_handlepickup( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 endon( "_encstr_A3750609A5E61883" );

    if ( !isdefined( var_0.ownertrigger ) )
        return;

    var_1 = 0;

    for (;;)
    {
        if ( isalive( self ) && self istouching( var_0.ownertrigger ) && !isdefined( var_0.inuseby ) && !isdefined( var_0.carriedby ) && self isonground() )
        {
            if ( self usebuttonpressed() )
            {
                var_1 = 0;

                while ( self usebuttonpressed() )
                {
                    var_1 = var_1 + level.framedurationseconds;
                    waitframe();
                }

                if ( var_1 >= 0.5 )
                    continue;

                var_1 = 0;

                while ( !self usebuttonpressed() && var_1 < 0.5 )
                {
                    var_1 = var_1 + level.framedurationseconds;
                    waitframe();
                }

                if ( var_1 >= 0.5 )
                    continue;

                if ( !scripts\mp\utility\player::isreallyalive( self ) )
                    continue;

                var_0 setmode( level.sentrysettings[var_0.sentrytype].sentrymodeoff );
                thread setcarryingsentry( var_0, 0 );
                var_0.ownertrigger delete();
                return;
            }
        }

        waitframe();
    }
}

turret_handleuse()
{
    self notify( "_encstr_9CA91005358B0B8353A118688A6F592357CD" );
    self endon( "_encstr_B95B113ABA9C93568EBED058B932D8CA57DC95" );
    self endon( "_encstr_940D09DDB72A236B8963E8" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.forcedisable = 0;
    var_0 = ( 1, 0.9, 0.7 );
    var_1 = ( 1, 0.65, 0 );
    var_2 = ( 1, 0.25, 0 );

    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_3 );

        if ( isdefined( self.carriedby ) )
            continue;

        if ( isdefined( self.inuseby ) )
            continue;

        if ( !scripts\mp\utility\player::isreallyalive( var_3 ) )
            continue;

        var_3 removeperks();
        var_3 removeweapons();
        self.inuseby = var_3;
        self setmode( level.sentrysettings[self.sentrytype].sentrymodeoff );
        sentry_setowner( var_3 );
        self setmode( level.sentrysettings[self.sentrytype].sentrymodeon );
        var_3 thread turret_shotmonitor( self );
        var_3.turret_overheat_bar = var_3 scripts\mp\hud_util::createbar( var_0, 100, 6 );
        var_3.turret_overheat_bar scripts\mp\hud_util::setpoint( "_encstr_B1C4073FFD25110DE3", "_encstr_A94607FEAFB36F77BD", 0, -70 );
        var_3.turret_overheat_bar.alpha = 0.65;
        var_3.turret_overheat_bar.bar.alpha = 0.65;
        var_4 = 0;

        for (;;)
        {
            if ( !scripts\mp\utility\player::isreallyalive( var_3 ) )
            {
                self.inuseby = undefined;
                var_3.turret_overheat_bar scripts\mp\hud_util::destroyelem();
                break;
            }

            if ( !var_3 isusingturret() )
            {
                self notify( "_encstr_A13A10387169A767DDC96AB280CBDD2F20E5" );
                self.inuseby = undefined;
                var_3.turret_overheat_bar scripts\mp\hud_util::destroyelem();
                var_3 restoreperks();
                var_3 restoreweapons();
                self sethintstring( level.sentrysettings[self.sentrytype].hintstring );
                self setmode( level.sentrysettings[self.sentrytype].sentrymodeoff );
                sentry_setowner( self.originalowner );
                self setmode( level.sentrysettings[self.sentrytype].sentrymodeon );
                break;
            }

            if ( self.heatlevel >= level.sentrysettings[self.sentrytype].overheattime )
                var_5 = 1;
            else
                var_5 = self.heatlevel / level.sentrysettings[self.sentrytype].overheattime;

            var_3.turret_overheat_bar scripts\mp\hud_util::updatebar( var_5 );

            if ( scripts\engine\utility::string_starts_with( self.sentrytype, "_encstr_AA040FD6D273A576BA9B7DE85DC927958E" ) )
                var_6 = "_encstr_AA040FD6D273A576BA9B7DE85DC927958E";

            if ( self.forcedisable || self.overheated )
            {
                self turretfiredisable();
                var_3.turret_overheat_bar.bar.color = var_2;
                var_4 = 0;
            }
            else if ( self.heatlevel > level.sentrysettings[self.sentrytype].overheattime * 0.75 && scripts\engine\utility::string_starts_with( self.sentrytype, "_encstr_AA040FD6D273A576BA9B7DE85DC927958E" ) )
            {
                var_3.turret_overheat_bar.bar.color = var_1;

                if ( randomintrange( 0, 10 ) < 6 )
                    self turretfireenable();
                else
                    self turretfiredisable();

                if ( !var_4 )
                {
                    var_4 = 1;
                    thread playheatfx();
                }
            }
            else
            {
                var_3.turret_overheat_bar.bar.color = var_0;
                self turretfireenable();
                var_4 = 0;
                self notify( "_encstr_BE690FE67B8EF5BDB35993D0AC85D1B246" );
            }

            wait 0.05;
        }

        self setdefaultdroppitch( 0.0 );
    }
}

sentry_handleownerdisconnect()
{
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_BC11136EB29BD1C92FD7862CCD32362B7AEEE6B24E" );
    self endon( "_encstr_BC11136EB29BD1C92FD7862CCD32362B7AEEE6B24E" );
    childthread sentry_watchownerstatus( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    childthread sentry_watchownerstatus( "_encstr_B2170C4AD884CDC823B9DB9D9F42" );
    childthread sentry_watchownerstatus( "_encstr_8CD0124A97D7F07BAD07C8C342FAA010C490DD5B" );
}

sentry_watchownerstatus( var_0 )
{
    self.owner waittill( var_0 );
    self notify( "_encstr_A3750609A5E61883" );
}

sentry_setowner( var_0 )
{
    self.owner = var_0;
    self setsentryowner( self.owner );
    self setturretminimapvisible( 1, self.sentrytype );

    if ( level.teambased )
    {
        self.team = self.owner.team;
        self setturretteam( self.team );
    }

    thread sentry_handleownerdisconnect();
}

sentry_moving_platform_death( var_0 )
{
    self notify( "_encstr_A3750609A5E61883" );
}

sentry_setplaced( var_0 )
{
    if ( isdefined( self.owner ) )
    {
        var_1 = self.owner.placedsentries[self.sentrytype].size;
        self.owner.placedsentries[self.sentrytype][var_1] = self;

        if ( var_1 + 1 > 2 )
            self.owner.placedsentries[self.sentrytype][0] notify( "_encstr_A3750609A5E61883" );

        self.owner allowweaponsforsentry( 1 );
        self.owner scripts\common\utility::allow_usability( 1 );
        self.owner thread enablemeleeforsentry();
        self.owner enableworldup( 1 );
    }

    self setmodel( level.sentrysettings[self.sentrytype].modelbase );

    if ( self getmode() == "_encstr_8190077059F813F2FC" )
        self setmode( level.sentrysettings[self.sentrytype].sentrymodeoff );

    if ( self.sentrytype == "_encstr_AB470D9B59738E275EAF9BD07BD8B6" )
    {

    }

    thread sentry_handledamage();
    thread sentry_handledeath();
    self setsentrycarrier( undefined );
    self setcandamage( 1 );

    switch ( self.sentrytype )
    {
        case "_encstr_8AF50CE218384BC3304DD5CC7F6A":
        case "_encstr_A2F50C578B911B6313A06F2D6FEB":
        case "_encstr_BCF50CCE8D7D1DAB93E4CAE8BE46":
        case "_encstr_98F50C30B2B1BBCB5543CD7BEFD9":
        case "_encstr_B4730AA7493FC3FDC3930F73":
        case "_encstr_970E1132607D686C5B20B95943AA435B185997":
        case "_encstr_9B0E11759BEDA25F93303783F02B022A61386A":
        case "_encstr_A90E116BCF0648AF0BCDE07D6313CDB1647F62":
        case "_encstr_B30E1108321B2BA0CBFE37690DF2F0E59BC90B":
        case "_encstr_AA040FD6D273A576BA9B7DE85DC927958E":
            if ( var_0 )
            {
                self.angles = self.carriedby.angles;

                if ( isalive( self.originalowner ) )
                    self.originalowner scripts\mp\utility\lower_message::setlowermessage( "_encstr_B3CB0C79F14EC8354B7170588AB3", level.sentrysettings[self.sentrytype].ownerhintstring, 3.0, undefined, undefined, undefined, undefined, undefined, 1 );

                self.ownertrigger = spawn( "_encstr_9E6B0FE8274B9DD92BC9D7278591B4D5E6", self.origin + ( 0, 0, 1 ), 0, 105, 64 );
                self.ownertrigger enablelinkto();
                self.ownertrigger linkto( self );
                self.originalowner thread turret_handlepickup( self );
                thread turret_handleuse();
            }

            break;
        case "_encstr_8BD90EB62CB9EAC28DFAD1EAE49C56D1":
            self setdefaultdroppitch( 30.0 );
            break;
        default:
            break;
    }

    sentry_makesolid();

    if ( isdefined( self.bombsquadmodel ) )
    {
        self.bombsquadmodel show();
        level notify( "_encstr_A1B41165C29A1B5BB5B7D0C007CAF373D32E55" );
    }

    self.carriedby forceusehintoff();
    self.carriedby = undefined;
    self.firstplacement = undefined;

    if ( isdefined( self.owner ) )
    {
        self.owner.iscarrying = 0;
        self.owner notify( "_encstr_AB680B5EFA68E1D80FDEA0F080", self );
    }

    sentry_setactive( var_0 );
    var_2 = spawnstruct();

    if ( isdefined( self.moving_platform ) )
        var_2.linkparent = self.moving_platform;

    var_2.endonstring = "_encstr_9D3B0803A3F0FACFDDF9";
    var_2.deathoverridecallback = ::sentry_moving_platform_death;
    thread scripts\mp\movers::handle_moving_platforms( var_2 );

    if ( self.sentrytype != "_encstr_A9EE0CB557D83A968EEA39C9AC8E" )
        self playsound( "_encstr_B31A11072A6A4118792904EB8576D3C829159B" );

    self notify( "_encstr_BDB00703157108A55A" );
}

sentry_setcancelled( var_0 )
{
    if ( isdefined( self.carriedby ) )
    {
        var_1 = self.carriedby;
        var_1 forceusehintoff();
        var_1.iscarrying = undefined;
        var_1.carrieditem = undefined;
        var_1 allowweaponsforsentry( 1 );
        var_1 scripts\common\utility::allow_usability( 1 );
        var_1 thread enablemeleeforsentry();
        var_1 enableworldup( 1 );

        if ( isdefined( self.bombsquadmodel ) )
            self.bombsquadmodel delete();
    }

    if ( isdefined( var_0 ) && var_0 )
        scripts\mp\weapons::equipmentdeletevfx();

    self delete();
}

sentry_setcarried( var_0, var_1, var_2 )
{
    if ( isdefined( self.originalowner ) )
    {

    }
    else
    {

    }

    if ( self.sentrytype == "_encstr_AB470D9B59738E275EAF9BD07BD8B6" )
        self setscriptablepartstate( "_encstr_A35B0718E35B92C8FF", "_encstr_9BA4080D39CFFB5AB7C1", 0 );

    self setmodel( level.sentrysettings[self.sentrytype].modelgood );
    self setsentrycarrier( var_0 );
    self setcandamage( 0 );
    sentry_makenotsolid();
    var_0 enableworldup( 0 );
    self.carriedby = var_0;
    var_0.iscarrying = 1;
    self.pickupenabled = var_1;
    thread sentry_oncarrierdeathoremp( var_0, var_2 );
    var_0 thread updatesentryplacement( self );
    thread sentry_oncarrierdisconnect( var_0 );
    thread sentry_oncarrierchangedteam( var_0 );
    thread sentry_ongameended();
    scripts\cp_mp\emp_debuff::allow_emp( 0 );
    self setdefaultdroppitch( -89.0 );
    sentry_setinactive();

    if ( isdefined( self getlinkedparent() ) )
        self unlink();

    self notify( "_encstr_9D3B0803A3F0FACFDDF9" );

    if ( isdefined( self.bombsquadmodel ) )
        self.bombsquadmodel hide();
}

updatesentryplacement( var_0 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 endon( "_encstr_BDB00703157108A55A" );
    var_0 endon( "_encstr_A3750609A5E61883" );
    var_0.canbeplaced = 1;
    var_1 = -1;

    for (;;)
    {
        var_2 = self canplayerplacesentry( 1, 40 );
        var_0.origin = var_2["_encstr_88FE07B07AAFE1C38D"];
        var_0.angles = var_2["_encstr_9B6107C2DC3B63B2E6"];
        var_3 = scripts\engine\utility::array_combine( level.turrets, level.microturrets, level.supertrophy.trophies, level.mines );
        var_4 = var_0 getistouchingentities( var_3 );
        var_0.canbeplaced = self isonground() && var_2["_encstr_AD7C0739959BAB1B47"] && abs( var_0.origin[2] - self.origin[2] ) < 30 && !scripts\mp\utility\entity::istouchingboundstrigger( self ) && var_4.size == 0;

        if ( isdefined( var_2["_encstr_B60E07C9FD1C2055E3"] ) )
            var_0.moving_platform = var_2["_encstr_B60E07C9FD1C2055E3"];
        else
            var_0.moving_platform = undefined;

        if ( var_0.canbeplaced != var_1 )
        {
            if ( var_0.canbeplaced )
            {
                var_0 setmodel( level.sentrysettings[var_0.sentrytype].modelgood );
                var_0 placehinton();
            }
            else
            {
                var_0 setmodel( level.sentrysettings[var_0.sentrytype].modelbad );
                var_0 cannotplacehinton();
            }
        }

        var_1 = var_0.canbeplaced;
        wait 0.05;
    }
}

sentry_oncarrierdeathoremp( var_0, var_1 )
{
    self endon( "_encstr_BDB00703157108A55A" );
    self endon( "_encstr_A3750609A5E61883" );
    var_0 endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_0 scripts\engine\utility::_id_143A5( "_encstr_A3750609A5E61883", "_encstr_97770CB13F4FE9A06B18358319BC" );

    if ( self.canbeplaced && !istrue( var_1 ) )
        sentry_setplaced( self.pickupenabled );
    else
        sentry_setcancelled( 0 );
}

sentry_oncarrierdisconnect( var_0 )
{
    self endon( "_encstr_BDB00703157108A55A" );
    self endon( "_encstr_A3750609A5E61883" );
    var_0 waittill( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self delete();
}

sentry_oncarrierchangedteam( var_0 )
{
    self endon( "_encstr_BDB00703157108A55A" );
    self endon( "_encstr_A3750609A5E61883" );
    var_0 scripts\engine\utility::_id_143A5( "_encstr_B2170C4AD884CDC823B9DB9D9F42", "_encstr_8CD0124A97D7F07BAD07C8C342FAA010C490DD5B" );
    self delete();
}

sentry_ongameended( var_0 )
{
    self endon( "_encstr_BDB00703157108A55A" );
    self endon( "_encstr_A3750609A5E61883" );
    level waittill( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self delete();
}

sentry_setactive( var_0 )
{
    self setmode( level.sentrysettings[self.sentrytype].sentrymodeon );

    if ( var_0 )
    {
        self setcursorhint( "_encstr_939A0CEC70DBF521459F5B47F73D" );
        self sethintstring( level.sentrysettings[self.sentrytype].hintstring );
        self makeusable();
    }

    foreach ( var_2 in level.players )
    {
        switch ( self.sentrytype )
        {
            case "_encstr_8AF50CE218384BC3304DD5CC7F6A":
            case "_encstr_A2F50C578B911B6313A06F2D6FEB":
            case "_encstr_BCF50CCE8D7D1DAB93E4CAE8BE46":
            case "_encstr_98F50C30B2B1BBCB5543CD7BEFD9":
            case "_encstr_B4730AA7493FC3FDC3930F73":
            case "_encstr_970E1132607D686C5B20B95943AA435B185997":
            case "_encstr_9B0E11759BEDA25F93303783F02B022A61386A":
            case "_encstr_A90E116BCF0648AF0BCDE07D6313CDB1647F62":
            case "_encstr_B30E1108321B2BA0CBFE37690DF2F0E59BC90B":
            case "_encstr_AA040FD6D273A576BA9B7DE85DC927958E":
                if ( var_0 )
                    self enableplayeruse( var_2 );

                break;
            default:
                scripts\mp\utility\killstreak::addtoactivekillstreaklist( self.sentrytype, "_encstr_A129125A5AC636B9A3C9B258DAF51D93B7EAB9C8", self.owner, 0, 1, 70, "_encstr_9D3B0803A3F0FACFDDF9" );

                if ( var_2 == self.owner && var_0 )
                    self enableplayeruse( var_2 );
                else
                    self disableplayeruse( var_2 );

                break;
        }
    }

    var_4 = level.sentrysettings[self.sentrytype].teamsplash;

    if ( self.shouldsplash )
    {
        level thread scripts\mp\hud_util::teamplayercardsplash( var_4, self.owner );
        self.shouldsplash = 0;
    }

    if ( self.sentrytype == "_encstr_B42C0B130741603B676ABEF053" )
        thread sam_attacktargets();

    if ( self.sentrytype == "_encstr_AFD6107358A5668F79194D7F2DA3CB6A2378" )
        thread scrambleturretattacktargets();

    if ( self.sentrytype == "_encstr_AB470D9B59738E275EAF9BD07BD8B6" )
        thread sentryshocktargets();

    scripts\cp_mp\emp_debuff::allow_emp( 1 );
}

sentry_setinactive()
{
    if ( self.sentrytype == "_encstr_8BD90EB62CB9EAC28DFAD1EAE49C56D1" )
    {
        self sethintstring( "_encstr_A40101" );
        self makeunusable();
    }

    self setmode( level.sentrysettings[self.sentrytype].sentrymodeoff );
    self makeunusable();
}

sentry_makesolid()
{
    self solid();
}

sentry_makenotsolid()
{
    self notsolid();
}

isfriendlytosentry( var_0 )
{
    if ( level.teambased && self.team == var_0.team )
        return 1;

    return 0;
}

sentry_attacktargets()
{
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.momentum = 0;
    self.heatlevel = 0;
    self.overheated = 0;
    thread sentry_heatmonitor();

    for (;;)
    {
        scripts\engine\utility::waittill_either( "_encstr_B67D12389F333E65FBF67B827829A648EA28BF2A", "_encstr_AF6A076CF6DE3656C8" );

        if ( self isfiringturret() )
        {
            thread sentry_burstfirestart();
            continue;
        }

        sentry_spindown();
        thread sentry_burstfirestop();
    }
}

sentry_timeout()
{
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 = level.sentrysettings[self.sentrytype].timeout;

    if ( isdefined( var_0 ) && var_0 == 0 )
        return;

    while ( var_0 )
    {
        wait 1.0;
        scripts\mp\hostmigration::waittillhostmigrationdone();

        if ( !isdefined( self.carriedby ) )
            var_0 = max( 0, var_0 - 1.0 );
    }

    if ( isdefined( self.owner ) )
    {
        if ( isdefined( level.sentrysettings[self.sentrytype].votimeout ) )
            self.owner scripts\mp\utility\dialog::playkillstreakdialogonplayer( level.sentrysettings[self.sentrytype].votimeout, undefined, undefined, self.owner.origin );
    }

    self notify( "_encstr_A3750609A5E61883" );
}

sentry_targetlocksound()
{
    self endon( "_encstr_A3750609A5E61883" );
    self playsound( "_encstr_A884109B07504BE32A1E7CC38377D132C26A" );
    wait 0.1;
    self playsound( "_encstr_A884109B07504BE32A1E7CC38377D132C26A" );
    wait 0.1;
    self playsound( "_encstr_A884109B07504BE32A1E7CC38377D132C26A" );
}

sentry_spinup()
{
    thread sentry_targetlocksound();

    while ( self.momentum < level.sentrysettings[self.sentrytype].spinuptime )
    {
        self.momentum = self.momentum + 0.1;
        wait 0.1;
    }
}

sentry_spindown()
{
    self.momentum = 0;
}

sentry_laser_burstfirestart()
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_94210E32B34F979E3A7810D2057350BA" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    sentry_spinup();
    var_0 = weaponfiretime( level.sentrysettings[self.sentrytype].weaponinfo );
    var_1 = level.sentrysettings[self.sentrytype].burstmin;
    var_2 = level.sentrysettings[self.sentrytype].burstmax;

    if ( isdefined( self.supportturret ) && self.supportturret )
    {
        var_0 = 0.05;
        var_3 = 50;
    }
    else
    {
        var_0 = 0.5 / ( self.listoffoundturrets.size + 1 );
        var_3 = var_1;
    }

    for ( var_4 = 0; var_4 < var_3; var_4++ )
    {
        var_5 = self getturrettarget( 1 );

        if ( !isdefined( var_5 ) )
            break;

        self shootturret();
        wait( var_0 );
    }

    self notify( "_encstr_9E580B8CDE372B194B394B37D9" );
    self cleartargetentity();
}

sentry_burstfirestart()
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_94210E32B34F979E3A7810D2057350BA" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    sentry_spinup();
    var_0 = weaponfiretime( level.sentrysettings[self.sentrytype].weaponinfo );
    var_1 = level.sentrysettings[self.sentrytype].burstmin;
    var_2 = level.sentrysettings[self.sentrytype].burstmax;
    var_3 = level.sentrysettings[self.sentrytype].pausemin;
    var_4 = level.sentrysettings[self.sentrytype].pausemax;

    for (;;)
    {
        var_5 = randomintrange( var_1, var_2 + 1 );

        for ( var_6 = 0; var_6 < var_5 && !self.overheated; var_6++ )
        {
            self shootturret();
            self notify( "_encstr_8BCA0DAA23A8D547ED36827ABB4D9B" );
            self.heatlevel = self.heatlevel + var_0;
            wait( var_0 );
        }

        wait( randomfloatrange( var_3, var_4 ) );
    }
}

sentry_burstfirestop()
{
    self notify( "_encstr_94210E32B34F979E3A7810D2057350BA" );
}

turret_shotmonitor( var_0 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 endon( "_encstr_A3750609A5E61883" );
    var_0 endon( "_encstr_A13A10387169A767DDC96AB280CBDD2F20E5" );
    var_1 = weaponfiretime( level.sentrysettings[var_0.sentrytype].weaponinfo );

    for (;;)
    {
        var_0 waittill( "_encstr_B7BA0C7308EBDAFA5918279CF613" );
        var_0.heatlevel = var_0.heatlevel + var_1;
        var_0.cooldownwaittime = var_1;
    }
}

sentry_heatmonitor()
{
    self endon( "_encstr_A3750609A5E61883" );
    var_0 = weaponfiretime( level.sentrysettings[self.sentrytype].weaponinfo );
    var_1 = 0;
    var_2 = 0;
    var_3 = level.sentrysettings[self.sentrytype].overheattime;
    var_4 = level.sentrysettings[self.sentrytype].cooldowntime;

    for (;;)
    {
        if ( self.heatlevel != var_1 )
            wait( var_0 );
        else
            self.heatlevel = max( 0, self.heatlevel - 0.05 );

        if ( self.heatlevel > var_3 )
        {
            self.overheated = 1;
            thread playheatfx();

            switch ( self.sentrytype )
            {
                case "_encstr_970E1132607D686C5B20B95943AA435B185997":
                case "_encstr_9B0E11759BEDA25F93303783F02B022A61386A":
                case "_encstr_A90E116BCF0648AF0BCDE07D6313CDB1647F62":
                case "_encstr_B30E1108321B2BA0CBFE37690DF2F0E59BC90B":
                case "_encstr_AA040FD6D273A576BA9B7DE85DC927958E":
                    playfxontag( scripts\engine\utility::getfx( "_encstr_97821037D0307423FBA0CA4590E76A17F8E0" ), self, "_encstr_BA30088E16D97D162D6B" );
                    break;
                default:
                    break;
            }

            while ( self.heatlevel )
            {
                self.heatlevel = max( 0, self.heatlevel - var_4 );
                wait 0.1;
            }

            self.overheated = 0;
            self notify( "_encstr_BE690FE67B8EF5BDB35993D0AC85D1B246" );
        }

        var_1 = self.heatlevel;
        wait 0.05;
    }
}

turret_heatmonitor()
{
    self endon( "_encstr_A3750609A5E61883" );
    var_0 = level.sentrysettings[self.sentrytype].overheattime;

    for (;;)
    {
        if ( self.heatlevel > var_0 )
        {
            self.overheated = 1;
            thread playheatfx();

            switch ( self.sentrytype )
            {
                case "_encstr_B4730AA7493FC3FDC3930F73":
                    playfxontag( scripts\engine\utility::getfx( "_encstr_97821037D0307423FBA0CA4590E76A17F8E0" ), self, "_encstr_BA30088E16D97D162D6B" );
                    break;
                default:
                    break;
            }

            while ( self.heatlevel )
                wait 0.1;

            self.overheated = 0;
            self notify( "_encstr_BE690FE67B8EF5BDB35993D0AC85D1B246" );
        }

        wait 0.05;
    }
}

turret_coolmonitor()
{
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        if ( self.heatlevel > 0 )
        {
            if ( self.cooldownwaittime <= 0 )
                self.heatlevel = max( 0, self.heatlevel - 0.05 );
            else
                self.cooldownwaittime = max( 0, self.cooldownwaittime - 0.05 );
        }

        wait 0.05;
    }
}

playheatfx()
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_BE690FE67B8EF5BDB35993D0AC85D1B246" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_B35C101CD82CE5B437CED743AC0BA3AFCCF0" );
    self endon( "_encstr_B35C101CD82CE5B437CED743AC0BA3AFCCF0" );

    for (;;)
    {
        playfxontag( scripts\engine\utility::getfx( "_encstr_A636139BB2DCD1C9E5D7F66795938656C2D1FAB5C1" ), self, "_encstr_A94F0AD158D9BECCD80BE6A1" );
        wait( level.sentrysettings[self.sentrytype].fxtime );
    }
}

playsmokefx()
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_BE690FE67B8EF5BDB35993D0AC85D1B246" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        playfxontag( scripts\engine\utility::getfx( "_encstr_97821037D0307423FBA0CA4590E76A17F8E0" ), self, "_encstr_BA30088E16D97D162D6B" );
        wait 0.4;
    }
}

sentry_beepsounds()
{
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        wait 3.0;

        if ( !isdefined( self.carriedby ) )
            self playsound( "_encstr_A884109B07504BE32A1E7CC38377D132C26A" );
    }
}

sam_attacktargets()
{
    self endon( "_encstr_9D3B0803A3F0FACFDDF9" );
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.samtargetent = undefined;
    self.sammissilegroups = [];

    for (;;)
    {
        self.samtargetent = sam_acquiretarget();
        sam_fireontarget();
        wait 0.05;
    }
}

sam_acquiretarget()
{
    var_0 = self gettagorigin( "_encstr_BC1E0A117F8A506069D2B953" );

    if ( !isdefined( self.samtargetent ) )
    {
        if ( level.teambased )
        {
            var_1 = [];
            var_2 = undefined;
            var_3 = scripts\mp\utility\teams::getenemyteams( self.team );

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "_encstr_A47205E8C28D13", "_encstr_B45B139B0B40B6635793415A39A93FAD48950C1549" ) )
                var_2 = level [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "_encstr_A47205E8C28D13", "_encstr_B45B139B0B40B6635793415A39A93FAD48950C1549" ) ]]();

            if ( istrue( var_2 ) && getdvarint( "_encstr_B8D817B673DBFEF34643D133CADAEF33AF0D37A5F707CD39A8", 1 ) )
            {
                foreach ( var_5 in var_3 )
                {
                    foreach ( var_12, var_7 in level.squaddata[var_5] )
                    {
                        var_8 = var_5 + var_12;

                        foreach ( var_10 in level.uavmodels[var_8] )
                            var_1[var_1.size] = var_10;
                    }
                }
            }
            else
            {
                foreach ( var_15 in var_3 )
                {
                    foreach ( var_17 in level.uavmodels[var_15] )
                        var_1[var_1.size] = var_17;
                }
            }

            foreach ( var_17 in var_1 )
            {
                if ( isdefined( var_17.isleaving ) && var_17.isleaving )
                    continue;

                if ( sighttracepassed( var_0, var_17.origin, 0, self ) )
                    return var_17;
            }

            foreach ( var_23 in level.littlebirds )
            {
                if ( isdefined( var_23.team ) && var_23.team == self.team )
                    continue;

                if ( sighttracepassed( var_0, var_23.origin, 0, self ) )
                    return var_23;
            }

            foreach ( var_26 in level.helis )
            {
                if ( isdefined( var_26.team ) && var_26.team == self.team )
                    continue;

                if ( sighttracepassed( var_0, var_26.origin, 0, self ) )
                    return var_26;
            }

            foreach ( var_17 in level.remote_uav )
            {
                if ( !isdefined( var_17 ) )
                    continue;

                if ( isdefined( var_17.team ) && var_17.team == self.team )
                    continue;

                if ( sighttracepassed( var_0, var_17.origin, 0, self, var_17 ) )
                    return var_17;
            }
        }
        else
        {
            foreach ( var_17 in level.uavmodels )
            {
                if ( isdefined( var_17.isleaving ) && var_17.isleaving )
                    continue;

                if ( isdefined( var_17.owner ) && isdefined( self.owner ) && var_17.owner == self.owner )
                    continue;

                if ( sighttracepassed( var_0, var_17.origin, 0, self ) )
                    return var_17;
            }

            foreach ( var_23 in level.littlebirds )
            {
                if ( isdefined( var_23.owner ) && isdefined( self.owner ) && var_23.owner == self.owner )
                    continue;

                if ( sighttracepassed( var_0, var_23.origin, 0, self ) )
                    return var_23;
            }

            foreach ( var_26 in level.helis )
            {
                if ( isdefined( var_26.owner ) && isdefined( self.owner ) && var_26.owner == self.owner )
                    continue;

                if ( sighttracepassed( var_0, var_26.origin, 0, self ) )
                    return var_26;
            }

            foreach ( var_17 in level.remote_uav )
            {
                if ( !isdefined( var_17 ) )
                    continue;

                if ( isdefined( var_17.owner ) && isdefined( self.owner ) && var_17.owner == self.owner )
                    continue;

                if ( sighttracepassed( var_0, var_17.origin, 0, self, var_17 ) )
                    return var_17;
            }
        }

        self cleartargetentity();
        return undefined;
    }
    else
    {
        if ( !sighttracepassed( var_0, self.samtargetent.origin, 0, self ) )
        {
            self cleartargetentity();
            return undefined;
        }

        return self.samtargetent;
    }
}

sam_fireontarget()
{
    if ( isdefined( self.samtargetent ) )
    {
        if ( self.samtargetent == level.gunship.planemodel && !isdefined( level.gunshipplayer ) )
        {
            self.samtargetent = undefined;
            self cleartargetentity();
            return;
        }

        self settargetentity( self.samtargetent );
        self waittill( "_encstr_888811AB43D63BAF58BF677EA78076F3F4F923" );

        if ( !isdefined( self.samtargetent ) )
            return;

        if ( !self.laser_on )
        {
            thread sam_watchlaser();
            thread sam_watchcrashing();
            thread sam_watchleaving();
            thread sam_watchlineofsight();
        }

        wait 2.0;

        if ( !isdefined( self.samtargetent ) )
            return;

        if ( self.samtargetent == level.gunship.planemodel && !isdefined( level.gunshipplayer ) )
        {
            self.samtargetent = undefined;
            self cleartargetentity();
            return;
        }

        var_0 = [];
        var_0[0] = self gettagorigin( "_encstr_A62F1093F964A7C5C8579D91E7904C939D1B" );
        var_0[1] = self gettagorigin( "_encstr_BC2F101CD7891F4593A99AD2A0D77CABA1E6" );
        var_0[2] = self gettagorigin( "_encstr_B877104856675F5B27B86DB1EF8F04B37942" );
        var_0[3] = self gettagorigin( "_encstr_A4771070C20F679347B7594373C738F9771F" );
        var_1 = self.sammissilegroups.size;

        for ( var_2 = 0; var_2 < 4; var_2++ )
        {
            if ( !isdefined( self.samtargetent ) )
                return;

            if ( isdefined( self.carriedby ) )
                return;

            self shootturret();
            var_3 = scripts\cp_mp\utility\weapon_utility::_magicbullet( getcompleteweaponname( "_encstr_971312E60BDAF50EC97B35561B475AD8AC7DB50E" ), var_0[var_2], self.samtargetent.origin, self.owner );
            var_3 missile_settargetent( self.samtargetent );
            var_3 missile_setflightmodedirect();
            var_3.samturret = self;
            var_3.sammissilegroup = var_1;
            self.sammissilegroups[var_1][var_2] = var_3;
            level notify( "_encstr_A181129B166BF5DAA56EB996B156EBCCB49CCA23", self.owner, var_3, self.samtargetent );

            if ( var_2 == 3 )
                break;

            wait 0.25;
        }

        level notify( "_encstr_A4340AF7FB81C156606B470F", self.owner, self.sammissilegroups[var_1], self.samtargetent );
        wait 3.0;
    }
}

sam_watchlineofsight()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A3750609A5E61883" );

    while ( isdefined( self.samtargetent ) && isdefined( self getturrettarget( 1 ) ) && self getturrettarget( 1 ) == self.samtargetent )
    {
        var_0 = self gettagorigin( "_encstr_BC1E0A117F8A506069D2B953" );

        if ( !sighttracepassed( var_0, self.samtargetent.origin, 0, self, self.samtargetent ) )
        {
            self cleartargetentity();
            self.samtargetent = undefined;
            break;
        }

        wait 0.05;
    }
}

sam_watchlaser()
{
    self endon( "_encstr_A3750609A5E61883" );
    self laseron();
    self.laser_on = 1;

    while ( isdefined( self.samtargetent ) && isdefined( self getturrettarget( 1 ) ) && self getturrettarget( 1 ) == self.samtargetent )
        waitframe();

    self laseroff();
    self.laser_on = 0;
}

sam_watchcrashing()
{
    self endon( "_encstr_A3750609A5E61883" );
    self.samtargetent endon( "_encstr_A3750609A5E61883" );

    if ( !isdefined( self.samtargetent.helitype ) )
        return;

    self.samtargetent waittill( "_encstr_ABBD09A7AB72DE2819ED91" );
    self cleartargetentity();
    self.samtargetent = undefined;
}

sam_watchleaving()
{
    self endon( "_encstr_A3750609A5E61883" );
    self.samtargetent endon( "_encstr_A3750609A5E61883" );

    if ( !isdefined( self.samtargetent.model ) )
        return;

    if ( self.samtargetent.model == "_encstr_B49D168343383C1070E5998DB725912BEB818C437B9FF5B8" )
    {
        self.samtargetent waittill( "_encstr_982D088DCA2CD95ADCB3" );
        self cleartargetentity();
        self.samtargetent = undefined;
    }
}

scrambleturretattacktargets()
{
    self endon( "_encstr_9D3B0803A3F0FACFDDF9" );
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.scrambletargetent = undefined;

    for (;;)
    {
        self.scrambletargetent = scramble_acquiretarget();

        if ( isdefined( self.scrambletargetent ) && isdefined( self.scrambletargetent.scrambled ) && !self.scrambletargetent.scrambled )
            scrambletarget();

        wait 0.05;
    }
}

scramble_acquiretarget()
{
    return sam_acquiretarget();
}

scrambletarget()
{
    if ( isdefined( self.scrambletargetent ) )
    {
        if ( self.scrambletargetent == level.gunship.planemodel && !isdefined( level.gunshipplayer ) )
        {
            self.scrambletargetent = undefined;
            self cleartargetentity();
            return;
        }

        self settargetentity( self.scrambletargetent );
        self waittill( "_encstr_888811AB43D63BAF58BF677EA78076F3F4F923" );

        if ( !isdefined( self.scrambletargetent ) )
            return;

        if ( !self.laser_on )
        {
            thread scramble_watchlaser();
            thread scramble_watchcrashing();
            thread scramble_watchleaving();
            thread scramble_watchlineofsight();
        }

        wait 2.0;

        if ( !isdefined( self.scrambletargetent ) )
            return;

        if ( self.scrambletargetent == level.gunship.planemodel && !isdefined( level.gunshipplayer ) )
        {
            self.scrambletargetent = undefined;
            self cleartargetentity();
            return;
        }

        if ( !isdefined( self.scrambletargetent ) )
            return;

        if ( isdefined( self.carriedby ) )
            return;

        self shootturret();
        thread setscrambled();
        self notify( "_encstr_A3750609A5E61883" );
    }
}

setscrambled()
{
    var_0 = self.scrambletargetent;
    var_0 notify( "_encstr_9F980F6EC6272CAD13B1ACFA339639CA8C", self.owner );
    var_0 endon( "_encstr_9F980F6EC6272CAD13B1ACFA339639CA8C" );
    var_0 endon( "_encstr_A3750609A5E61883" );
    var_0 thread scripts\mp\killstreaks\helicopter::heli_targeting();
    var_0.scrambled = 1;
    var_0.secondowner = self.owner;
    var_0 notify( "_encstr_A4F70EA5CF8A5D011DA30FA10AC7808D" );
    wait 30;

    if ( isdefined( var_0 ) )
    {
        var_0.scrambled = 0;
        var_0.secondowner = undefined;
        var_0 thread scripts\mp\killstreaks\helicopter::heli_targeting();
    }
}

scramble_watchlineofsight()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A3750609A5E61883" );

    while ( isdefined( self.scrambletargetent ) && isdefined( self getturrettarget( 1 ) ) && self getturrettarget( 1 ) == self.scrambletargetent )
    {
        var_0 = self gettagorigin( "_encstr_BC1E0A117F8A506069D2B953" );

        if ( !sighttracepassed( var_0, self.scrambletargetent.origin, 0, self, self.scrambletargetent ) )
        {
            self cleartargetentity();
            self.scrambletargetent = undefined;
            break;
        }

        wait 0.05;
    }
}

scramble_watchlaser()
{
    self endon( "_encstr_A3750609A5E61883" );
    self laseron();
    self.laser_on = 1;

    while ( isdefined( self.scrambletargetent ) && isdefined( self getturrettarget( 1 ) ) && self getturrettarget( 1 ) == self.scrambletargetent )
        wait 0.05;

    self laseroff();
    self.laser_on = 0;
}

scramble_watchcrashing()
{
    self endon( "_encstr_A3750609A5E61883" );
    self.scrambletargetent endon( "_encstr_A3750609A5E61883" );

    if ( !isdefined( self.scrambletargetent.helitype ) )
        return;

    self.scrambletargetent waittill( "_encstr_ABBD09A7AB72DE2819ED91" );
    self cleartargetentity();
    self.scrambletargetent = undefined;
}

scramble_watchleaving()
{
    self endon( "_encstr_A3750609A5E61883" );
    self.scrambletargetent endon( "_encstr_A3750609A5E61883" );

    if ( !isdefined( self.scrambletargetent.model ) )
        return;

    if ( self.scrambletargetent.model == "_encstr_B49D168343383C1070E5998DB725912BEB818C437B9FF5B8" )
    {
        self.scrambletargetent waittill( "_encstr_982D088DCA2CD95ADCB3" );
        self cleartargetentity();
        self.scrambletargetent = undefined;
    }
}

sentryshocktargets()
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_9D3B0803A3F0FACFDDF9" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    thread watchsentryshockpickup();
    self.airlookatent = scripts\engine\utility::spawn_tag_origin( self.origin, self.angles );
    self.airlookatent linkto( self, "_encstr_A94F0AD158D9BECCD80BE6A1" );

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_143B9( 1, "_encstr_888811AB43D63BAF58BF677EA78076F3F4F923" );

        if ( var_0 == "_encstr_945408D1B4B556B7BA3A" )
            continue;

        self.sentryshocktargetent = self getturrettarget( 1 );

        if ( isdefined( self.sentryshocktargetent ) && scripts\mp\utility\player::isreallyalive( self.sentryshocktargetent ) )
        {
            thread shocktarget( self.sentryshocktargetent );
            self waittill( "_encstr_B1310C5BB0CDB521156B7AB4C0CF" );
        }
    }
}

searchforshocksentryairtarget()
{
    if ( isdefined( level.uavmodels ) )
    {
        if ( level.teambased )
        {
            var_0 = undefined;
            var_1 = scripts\mp\utility\teams::getenemyteams( self.owner.team );

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "_encstr_A47205E8C28D13", "_encstr_B45B139B0B40B6635793415A39A93FAD48950C1549" ) )
                var_0 = level [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "_encstr_A47205E8C28D13", "_encstr_B45B139B0B40B6635793415A39A93FAD48950C1549" ) ]]();

            if ( istrue( var_0 ) && getdvarint( "_encstr_B8D817B673DBFEF34643D133CADAEF33AF0D37A5F707CD39A8", 1 ) )
            {
                foreach ( var_3 in var_1 )
                {
                    foreach ( var_10, var_5 in level.squaddata[var_3] )
                    {
                        var_6 = var_3 + var_10;

                        foreach ( var_8 in level.uavmodels[var_6] )
                        {
                            if ( targetvisibleinfront( var_8 ) )
                                return var_8;
                        }
                    }
                }
            }
            else
            {
                foreach ( var_3 in var_1 )
                {
                    foreach ( var_8 in level.uavmodels[var_3] )
                    {
                        if ( targetvisibleinfront( var_8 ) )
                            return var_8;
                    }
                }
            }
        }
        else
        {
            foreach ( var_8 in level.uavmodels )
            {
                if ( var_8.owner == self.owner )
                    continue;

                if ( targetvisibleinfront( var_8 ) )
                    return var_8;
            }
        }
    }

    if ( isdefined( level.helis ) )
    {
        foreach ( var_19 in level.helis )
        {
            if ( var_19.streakname != "_encstr_BD86075D3FD0DF78B5" )
                continue;

            if ( level.teambased && var_19.team == self.owner.team )
                continue;

            if ( !level.teambased && var_19.owner == self.owner )
                continue;

            if ( targetvisibleinfront( var_19 ) )
                return var_19;
        }
    }
}

targetvisibleinfront( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = 0;
    var_2 = self gettagorigin( "_encstr_A94F0AD158D9BECCD80BE6A1" );
    var_3 = var_0.origin;
    var_4 = vectornormalize( var_3 - var_2 );
    var_5 = anglestoforward( self.angles );
    var_6 = [ self, self.owner, var_0 ];
    var_7 = physics_createcontents( [ "_encstr_9E9C1638865EB95A6CE68DDEE64795B98E6EAF9BF6B1968C", "_encstr_941116D7F47B0FC88317C8B07BCC017DD35AD8D44D52D773", "_encstr_A18816F8C3E1EFFCFF5A92BF8363BBF55BCBD9C3538DF74D", "_encstr_B7D018B89C4B13AC473342305523920D607E50E3571038A69138", "_encstr_9DD6156A78B803FAD687D7EF95056246B86329B453E0D5" ] );

    if ( scripts\engine\trace::ray_trace_passed( var_2, var_3, var_6, var_7 ) && vectordot( var_5, var_4 ) > 0.25 && distance2dsquared( var_2, var_3 ) > 10000 )
        var_1 = 1;

    return var_1;
}

shootshocksentrysamtarget( var_0, var_1 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_9D3B0803A3F0FACFDDF9" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self setmode( "_encstr_8190077059F813F2FC" );
    thread setshocksamtargetent( var_0, var_1 );
    self.sentryshocksamtarget = undefined;
    self waittill( "_encstr_888811AB43D63BAF58BF677EA78076F3F4F923" );
    thread marktargetlaser( var_0 );
    self playsound( "_encstr_9D69173B0DB89FCCE1C74D5ED1D01027D67892B34905B78370" );
    playfxontag( scripts\engine\utility::getfx( "_encstr_A6AA14C720C06433EBB0FA348087FA070930075B9819" ), self, "_encstr_BC1E0A117F8A506069D2B953" );
    sentry_spinup();
    stopfxontag( scripts\engine\utility::getfx( "_encstr_A6AA14C720C06433EBB0FA348087FA070930075B9819" ), self, "_encstr_BC1E0A117F8A506069D2B953" );
    self notify( "_encstr_94570DCD3A85273AAF339639B4DC9D" );
    self setscriptablepartstate( "_encstr_BA9105B1DB2DD8", "_encstr_B30B07E216CBFFC4C2" );
    var_2 = 2;
    var_3 = 1;

    while ( isdefined( var_0 ) && targetvisibleinfront( var_0 ) )
    {
        var_4 = self gettagorigin( "_encstr_A94F0AD158D9BECCD80BE6A1" );
        var_5 = scripts\cp_mp\utility\weapon_utility::_magicbullet( getcompleteweaponname( "_encstr_948D18DCAC9B4793E5EB6E1AED36B5AFDA5AE6E62D8D2BEBD638" ), var_4, var_0.origin, self.owner );
        var_5 missile_settargetent( var_0 );
        var_5 missile_setflightmodedirect();
        var_5.killcament = self.killcament;
        var_5.streakinfo = self.streakinfo;
        self setscriptablepartstate( "_encstr_A35B0718E35B92C8FF", "_encstr_807805775B15A2" + var_3, 0 );
        level notify( "_encstr_98531D805663382E68F7FBF9AF02E9101BAAA818FFCB316B1287FFE3F78A34", self.owner, var_5, var_0 );
        var_3++;

        if ( var_3 > 2 )
            var_3 = 1;

        wait( var_2 );
    }

    self setscriptablepartstate( "_encstr_A35B0718E35B92C8FF", "_encstr_9BA4080D39CFFB5AB7C1", 0 );
    self notify( "_encstr_AB6F13DCB273A339CBBEB1F6DCD1AFE8C2E4762B47" );
    var_1 unlink();
    var_1.origin = self gettagorigin( "_encstr_A94F0AD158D9BECCD80BE6A1" );
    var_1 linkto( self, "_encstr_A94F0AD158D9BECCD80BE6A1" );
    self setmode( "_encstr_AD1807EA95E028356F" );
    self cleartargetentity();
    self setscriptablepartstate( "_encstr_BA9105B1DB2DD8", "_encstr_9BC505B4461BB2" );
    sentry_spindown();
    self notify( "_encstr_B1310C5BB0CDB521156B7AB4C0CF" );
}

sentry_handlemanualuse()
{
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_0 );

        while ( var_0 isusingturret() )
        {
            if ( var_0 attackbuttonpressed() )
                self shootturret();

            waitframe();
        }

        waitframe();
    }
}

sentry_handlealteratepickup( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self.owner endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.owner notifyonplayercommand( "_encstr_B18115E54B201517A17693FA7885038819116973F7985A", "_encstr_A8E60AFF77FA1F30D6E7CA43" );
    self.manualpickuptrigger = spawn( "_encstr_9E6B0FE8274B9DD92BC9D7278591B4D5E6", self.origin, 0, 128, 128 );
    self.manualpickuptrigger enablelinkto();
    self.manualpickuptrigger linkto( self, "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );

    for (;;)
    {
        if ( isdefined( self.carriedby ) )
            waitframe();

        if ( !self.owner istouching( self.manualpickuptrigger ) )
            waitframe();

        self.owner waittill( "_encstr_B18115E54B201517A17693FA7885038819116973F7985A" );
        self setmode( level.sentrysettings[self.sentrytype].sentrymodeoff );
        self.owner.placedsentries[self.sentrytype] = scripts\engine\utility::array_remove( self.owner.placedsentries[self.sentrytype], self );
        self.owner setcarryingsentry( self, 0, var_0 );
    }
}

setshocksamtargetent( var_0, var_1 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_9D3B0803A3F0FACFDDF9" );
    self endon( "_encstr_AB6F13DCB273A339CBBEB1F6DCD1AFE8C2E4762B47" );
    var_0 endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        var_2 = self gettagorigin( "_encstr_BA30088E16D97D162D6B" );
        var_3 = var_0.origin;
        var_4 = vectornormalize( var_3 - var_2 );
        var_5 = var_2 + var_4 * 500;
        var_1 unlink();
        var_1.origin = var_5;
        var_1 linkto( self );
        self settargetentity( var_1 );
        waitframe();
    }
}

watchsentryshockpickup()
{
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        self waittill( "_encstr_9D3B0803A3F0FACFDDF9" );

        if ( isdefined( self.sentryshocktargetent ) )
            self.sentryshocktargetent = undefined;

        if ( isdefined( self.sentryshocksamtarget ) )
            self.sentryshocksamtarget = undefined;

        self cleartargetentity();
    }
}

shocktarget( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_9D3B0803A3F0FACFDDF9" );

    if ( !isdefined( var_0 ) )
        return;

    thread marktargetlaser( var_0 );
    self playsound( "_encstr_9D69173B0DB89FCCE1C74D5ED1D01027D67892B34905B78370" );
    sentry_spinup();
    self notify( "_encstr_94570DCD3A85273AAF339639B4DC9D" );
    level thread scripts\mp\battlechatter_mp::saytoself( var_0, "_encstr_B6B216E01BE4F5B5B4D8C66EA3E42B166DFA3A85279D958E" );
    var_1 = weaponfiretime( level.sentrysettings[self.sentrytype].weaponinfo );

    while ( isdefined( var_0 ) && scripts\mp\utility\player::isreallyalive( var_0 ) && isdefined( self getturrettarget( 1 ) ) && self getturrettarget( 1 ) == var_0 && !scripts\mp\utility\outline::outlineoccluded( self gettagorigin( "_encstr_A94F0AD158D9BECCD80BE6A1" ), var_0 geteye() ) )
    {
        self shootturret();
        wait( var_1 );
    }

    self.sentryshocktargetent = undefined;
    self cleartargetentity();
    sentry_spindown();
    self notify( "_encstr_B1310C5BB0CDB521156B7AB4C0CF" );
}

missileburstfire( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_9D3B0803A3F0FACFDDF9" );
    var_1 = 3;
    var_2 = 1;

    while ( var_1 > 0 )
    {
        if ( !isdefined( var_0 ) )
            return;

        if ( !isdefined( self.owner ) )
            return;

        var_3 = scripts\cp_mp\utility\weapon_utility::_magicbullet( getcompleteweaponname( "_encstr_B30A18C3156A8BC603A94F4425F78CF1E79ACB1DC70B1A96D25B" ), self gettagorigin( "_encstr_A94F0AD158D9BECCD80BE6A1" ), var_0.origin, self.owner );
        var_3 missile_settargetent( var_0, gettargetoffset( var_0 ) );
        var_3.killcament = self.killcament;
        var_3.streakinfo = self.streakinfo;
        self setscriptablepartstate( "_encstr_A35B0718E35B92C8FF", "_encstr_807805775B15A2" + var_2, 0 );
        var_2++;

        if ( var_2 > 2 )
            var_2 = 1;

        var_3 thread watchtargetchange( var_0 );
        var_1--;
        wait 0.2;
    }
}

gettargetoffset( var_0 )
{
    var_1 = ( 0, 0, 40 );
    var_2 = var_0 getstance();

    switch ( var_2 )
    {
        case "_encstr_B1AD06374716DC8C":
            var_1 = ( 0, 0, 40 );
            break;
        case "_encstr_9C3D071B63023B26C3":
            var_1 = ( 0, 0, 20 );
            break;
        case "_encstr_9F24062875D5FD98":
            var_1 = ( 0, 0, 5 );
            break;
    }

    return var_1;
}

watchtargetchange( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    var_0 endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    for (;;)
    {
        if ( !scripts\mp\utility\player::isreallyalive( var_0 ) )
        {
            self missile_settargetent( var_0 getcorpseentity() );
            break;
        }

        waitframe();
    }
}

marktargetlaser( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self laseron();
    self.laser_on = 1;
    scripts\engine\utility::_id_143A5( "_encstr_B1310C5BB0CDB521156B7AB4C0CF", "_encstr_9D3B0803A3F0FACFDDF9" );
    self laseroff();
    self.laser_on = 0;
}

watchshockdamage( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_B1310C5BB0CDB521156B7AB4C0CF" );
    var_1 = undefined;

    for (;;)
    {
        self waittill( "_encstr_95B10F84E48A5198DDD7809027E991BB22", var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11 );

        if ( var_2 == var_0 )
        {
            var_12 = 100;
            var_13 = scripts\mp\utility\player::getplayersinradiusview( var_8, var_12, var_2.team, self.owner );
            playfx( scripts\engine\utility::getfx( "_encstr_8726179B56DCD1C9E5F59B1ADED8D6BEB2C31CB1BD6E96B737" ), var_8 );

            if ( var_13.size > 0 )
            {
                foreach ( var_15 in var_13 )
                {
                    if ( var_15.player != var_2 )
                    {
                        var_15.player dodamage( 5, var_8, self.owner, self, var_6, var_7 );
                        var_16 = undefined;
                        var_17 = undefined;

                        if ( var_15.visiblelocations.size > 1 )
                        {
                            var_17 = randomint( var_15.visiblelocations.size );
                            var_16 = var_15.visiblelocations[var_17];
                        }
                        else
                            var_16 = var_15.visiblelocations[0];

                        playfxbetweenpoints( scripts\engine\utility::getfx( "_encstr_A4DA115B628B15B8787FFFC16726A8485FEBD1" ), var_8, vectortoangles( var_16 - var_8 ), var_16 );
                    }
                }
            }
        }
    }
}

allowweaponsforsentry( var_0 )
{
    if ( var_0 )
    {
        scripts\common\utility::allow_weapon( 1 );
        thread scripts\mp\supers::unstowsuperweapon();
    }
    else
    {
        thread scripts\mp\supers::allowsuperweaponstow();
        scripts\common\utility::allow_weapon( 0 );
    }
}

placehinton()
{
    var_0 = self.sentrytype;

    if ( var_0 == "_encstr_AD2F0DD8973091DDC1331EA80A8AF3" )
    {
        self.owner forceusehinton( &"_encstr_A9CD1F315505BEA68AC9AAF55382791431148654F5A65528A294AF5125E941422B" );
        return;
    }
    else
        self.owner forceusehinton( &"_encstr_B1600DE9F145C39BE65090F40FCD8F" );
}

cannotplacehinton()
{
    var_0 = self.sentrytype;

    if ( var_0 == "_encstr_AD2F0DD8973091DDC1331EA80A8AF3" )
    {
        self.owner forceusehinton( &"_encstr_81E126141B90FF4FB5611D9F5D9368E61F0D2E050B81C7499817B57019831AC571F6BF49DF9B3BCB" );
        return;
    }
    else
        self.owner forceusehinton( &"_encstr_B81B14A19B8933DA770686399076F95720DBBD59FBFF" );
}
