// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( !isdefined( game["_encstr_9D310C54895F4117EBEA90A84207"] ) )
    {
        game["_encstr_97D60A855528370931F8DA12"] = "_encstr_BC9112ABDDE35DF7C0C936831EFD70FF2321400A";

        if ( level.multiteambased )
            game["_encstr_97D60A855528370931F8DA12"] = "_encstr_B14C108ECAC2DABEB5E87D7B83A34BF6CDDC";

        game["_encstr_A4330B8FF337636F30A846CA63"] = "_encstr_9E95066E81471B5F";
        game["_encstr_B2FA126219806F69D811B1AB0711AEB339307A0B"] = "_encstr_89D00EFB4190426F08ADA29BE8F84F3A";
        game["_encstr_9B30101AE0159BBFD181D1DB267E0F60A3F8"] = "_encstr_A6080C26F41FF347715A30883252";
        game["_encstr_82C718D6B2B9EABEB11A0BB9EC956CC6B06EE6F52C1B8DD2CACD"] = "_encstr_946B1436D0C2DCCE2BD8630BCDE6EBB585272D7359CD";
        game["_encstr_889116B5B2DCAEFA8D3458E6ECACC6B1B0E6CDEBC23CB49B"] = "_encstr_97E01226208F52674F2E68B28EF037109218B8D3";

        if ( level.multiteambased )
        {
            for ( var_0 = 0; var_0 < level.teamnamelist.size; var_0++ )
            {
                var_1 = "_encstr_AF570CD6569BEAD7B18DB06E6EF5" + level.teamnamelist[var_0];
                var_2 = "_encstr_9E8112E8A8C58D7997EB47254F2B26F199628A81" + level.teamnamelist[var_0];
                game[var_1] = game["_encstr_B2FA126219806F69D811B1AB0711AEB339307A0B"];
                game[var_2] = "_encstr_946B1436D0C2DCCE2BD8630BCDE6EBB585272D7359CD";
            }
        }

        game["_encstr_A4DA1198628B95D1FE48DBCD6FA7E8D15FFBD3"] = "_encstr_BCE90C9758314E52E39E2D66FEB7";
        game["_encstr_827C0EB513A8839F56ED12BB4BB8ABFA"] = "_encstr_A801100BAE5FE9139721C0980AEBE5E0AB5B";

        if ( level.splitscreen )
        {
            if ( level.multiteambased )
            {
                for ( var_0 = 0; var_0 < level.teamnamelist.size; var_0++ )
                {
                    var_1 = "_encstr_AF570CD6569BEAD7B18DB06E6EF5" + level.teamnamelist[var_0];
                    var_2 = "_encstr_9E8112E8A8C58D7997EB47254F2B26F199628A81" + level.teamnamelist[var_0];
                    game[var_1] = game[var_1] + "_encstr_B93F0D09A8A14B5B43EF7E40DAB810";
                    game[var_2] = game[var_2] + "_encstr_B93F0D09A8A14B5B43EF7E40DAB810";
                }
            }

            game["_encstr_97D60A855528370931F8DA12"] = game["_encstr_97D60A855528370931F8DA12"] + "_encstr_B93F0D09A8A14B5B43EF7E40DAB810";
            game["_encstr_B2FA126219806F69D811B1AB0711AEB339307A0B"] = game["_encstr_B2FA126219806F69D811B1AB0711AEB339307A0B"] + "_encstr_B93F0D09A8A14B5B43EF7E40DAB810";
            game["_encstr_9B30101AE0159BBFD181D1DB267E0F60A3F8"] = game["_encstr_9B30101AE0159BBFD181D1DB267E0F60A3F8"] + "_encstr_B93F0D09A8A14B5B43EF7E40DAB810";
            game["_encstr_82C718D6B2B9EABEB11A0BB9EC956CC6B06EE6F52C1B8DD2CACD"] = game["_encstr_82C718D6B2B9EABEB11A0BB9EC956CC6B06EE6F52C1B8DD2CACD"] + "_encstr_B93F0D09A8A14B5B43EF7E40DAB810";
            game["_encstr_889116B5B2DCAEFA8D3458E6ECACC6B1B0E6CDEBC23CB49B"] = game["_encstr_889116B5B2DCAEFA8D3458E6ECACC6B1B0E6CDEBC23CB49B"] + "_encstr_B93F0D09A8A14B5B43EF7E40DAB810";
            game["_encstr_827C0EB513A8839F56ED12BB4BB8ABFA"] = game["_encstr_827C0EB513A8839F56ED12BB4BB8ABFA"] + "_encstr_B93F0D09A8A14B5B43EF7E40DAB810";
            game["_encstr_B7A4261F1305CD019A346FC5079A3B3A8FEFCB49F08B4819AD1BDC8EB11A1B396BD0D8701B6D32E5"] = "_encstr_985F21F1A027C0D15D7F9B90777E6EB0527B88D54AB71528B0DBF941012749ABD5E3D3";
            game["_encstr_A2EC241F8060C5417F8B9E55642BDA942988EF4F58FB1B3B4F11690AD7D1B2343360532FF030"] = "_encstr_B8BB1FB14358E6ECACB1B10B9B37BE37E0D82D476E363959B2B9AFC6BAE63ADB5B";
        }

        precachestring( &"_encstr_B6AE139A145E84A7A9A8F5A872882A44EB3AA03554" );
        precachestring( &"_encstr_A1C5196031EFBC97CFB5C7D5A0F56F36C361C90931AFE2DF041EE5" );
    }

    level scripts\mp\utility\lui_game_event_aggregator::registeronluieventcallback( ::onleavegamecallback );
    level scripts\mp\utility\lui_game_event_aggregator::registeronluieventcallback( ::onteamchangecallback );
    level scripts\common\ui::lui_registercallback( "_encstr_80D00B4E1898E3BB284BEBD781", ::onclasseditcallback );
    level scripts\common\ui::lui_registercallback( "_encstr_B1EF0D7703A20E209F1A6158878B50", ::onclasschoicecallback );
    level thread setintrocamnetworkmodel();
}

onteamchangecallback( var_0, var_1 )
{
    if ( scripts\mp\utility\game::getgametype() != "_encstr_9507034B25" )
    {
        if ( var_0 != "_encstr_9CAC0C0525C7E8F7920238485A6B" )
            return;

        if ( scripts\mp\utility\game::matchmakinggame() )
            return;

        handleteamchange( var_0, var_1 );
    }
}

setintrocamnetworkmodel()
{
    setintrocameraactive( 1 );
    level waittill( "_encstr_8BF80EDBDA10705A600880871A60DF03" );
    setintrocameraactive( 0 );
}

update_enemies_remaining( var_0 )
{
    return var_0 >= 100;
}

getclasschoice( var_0 )
{
    var_0++;
    var_1 = undefined;

    if ( isdefined( level.set_systems_init_flag ) && level.set_systems_init_flag > 0 )
    {
        if ( scripts\mp\utility\game::matchmakinggame() )
            var_2 = scripts\mp\rank::getrank() >= 4;
        else
            var_2 = 1;

        if ( var_0 > 100 )
        {
            var_3 = var_0 - 100;
            var_1 = "_encstr_AB130FB183934054FA4733DBB752ADD15C" + var_3;
        }
        else if ( !var_2 )
            var_1 = "_encstr_A97A10166350BCB20F63271F7FA5DADF5043";
        else
            var_1 = "_encstr_9D0B0D0E6D3F9B87C980674F78817D" + var_0;
    }
    else if ( var_0 > 100 )
    {
        var_3 = var_0 - 100;
        var_1 = "_encstr_AA1608C07786F13312D3" + var_3;
    }
    else
        var_1 = "_encstr_B73407B68FAB1BAD91" + var_0;

    return var_1;
}

updateloadoutselect( var_0 )
{
    var_1 = isai( self ) || issubstr( self.name, "_encstr_B41706E88D48F61D" );

    if ( !var_1 )
        return;
}

executeclasschange( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    if ( isbot( self ) || initmaxspeedforpathlengthtable( self ) )
    {
        self.pers["_encstr_9E95066E81471B5F"] = var_0;
        self.class = var_0;
    }
    else
    {
        var_2 = getclasschoice( var_0 );

        if ( !isdefined( self.pers["_encstr_9E95066E81471B5F"] ) || var_2 != self.pers["_encstr_9E95066E81471B5F"] || var_1 )
        {
            self.pers["_encstr_9E95066E81471B5F"] = var_2;
            self.class = var_2;
            scripts\mp\class::preloadandqueueclass( var_2 );
        }

        var_3 = 1;
        var_4 = scripts\mp\gamelogic::generate_randomized_primary_weapon_objs( scripts\mp\utility\game::round_vehicle_logic() );

        if ( scripts\mp\utility\game::getgametype() == "_encstr_9507034B25" && !var_4 )
            var_3 = 0;

        if ( scripts\mp\class::shouldallowinstantclassswap() && var_3 )
        {
            scripts\cp_mp\utility\inventory_utility::getridofweapon( "_encstr_9B660D018F3841EE3A23DBEE3639F0" );
            thread scripts\mp\class::swaploadout();
        }
        else
        {
            var_5 = scripts\mp\utility\game::unset_relic_grounded() && self weaponswitchbuttonpressed( "_encstr_A203148BF829BFCB751DC703772FD2E7D0E389D61110" );

            if ( isalive( self ) && !var_5 )
                self iprintlnbold( game["_encstr_A9B10863D3ADDAF8974B"]["_encstr_811C0DF030B8A8097771334B705F87"] );

            if ( var_0 < 100 )
                self setclientomnvar( "_encstr_A4E613AB5AF5367BB0C8DEEAE8EBC60D853776B219", scripts\mp\class::getclassindex( self.pers["_encstr_9E95066E81471B5F"] ) );
        }
    }
}

setnextroundclass( var_0 )
{
    var_1 = var_0;

    if ( !isbot( self ) )
    {
        if ( isalive( self ) )
            self iprintlnbold( game["_encstr_A9B10863D3ADDAF8974B"]["_encstr_A4CA0DC9B2B35AEC2BD7B163C2DCE6"] );

        var_1 = getclasschoice( var_0 );
    }

    self.pers["_encstr_9E4311DCCA87E8F593B75DE691BE6C362CE66E"] = var_1;
}

onleavegamecallback( var_0, var_1 )
{
    if ( var_0 != "_encstr_AFAF0901C55BB78F17ED72" )
        return;

    if ( scripts\mp\utility\game::matchmakinggame() )
        return;

    if ( isdedicatedserver() )
        return;

    level thread scripts\mp\gamelogic::forceend( var_1 );
}

onclasseditcallback( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    waittillframeend;
    handleclassedit( var_0 );
}

onclasschoicecallback( var_0, var_1 )
{
    if ( scripts\mp\utility\game::usefloorrocks() )
    {
        if ( var_0 < 100 )
            var_0 = var_0 + 100;
    }

    if ( scripts\mp\utility\game::getgametype() == "_encstr_9507034B25" && var_0 == -1 && getdvarint( "_encstr_B32C1B5E321B715623777067CCAE10312B93308340E1E03733FB8C8EA3", 0 ) == 0 )
        return;

    self notify( "_encstr_A4C617B1B70B19DEAB1DAF1BD858E69BBECDB21BCAB11DAC46", var_0 );

    if ( level.systemlink && getdvarint( "_encstr_988A0B983D35A85AA8154A8A6A" ) && self ismlgspectator() )
        self setclientomnvar( "_encstr_82FB10DDD989C0419BF3886E8BD742E738CB", 0 );
    else
    {
        updateloadoutselect( var_0 );

        if ( istrue( self.waitingtoselectclass ) )
        {
            if ( isdefined( self.revive_chosenclass ) )
                setnextroundclass( var_0 );

            self setclientomnvar( "_encstr_82FB10DDD989C0419BF3886E8BD742E738CB", 0 );
            return;
        }

        if ( !scripts\mp\utility\game::allowclasschoice() || scripts\mp\utility\game::showfakeloadout() )
            return;

        if ( isdefined( self.revive_chosenclass ) && isdefined( self.instantclassswapallowed ) && !scripts\mp\class::shouldallowinstantclassswap() )
        {
            setnextroundclass( var_0 );
            return;
        }

        if ( "_encstr_A40101" + var_0 != "_encstr_9BAA097EB163581D86D2B0" )
        {
            executeclasschange( var_0, istrue( var_1 ) );
            return;
        }

        menuclass( "_encstr_9BAA097EB163581D86D2B0" );
    }
}

handleteamchange( var_0, var_1 )
{
    var_2 = 0;

    if ( var_1 >= 3 )
        var_2 = 1;

    if ( var_2 )
    {
        self setclientomnvar( "_encstr_AD18166B997810311FC94B9A3BD77BF1888F192B79B4C011", 1 );
        self.spectating_actively = 1;
    }
    else
    {
        self setclientomnvar( "_encstr_AD18166B997810311FC94B9A3BD77BF1888F192B79B4C011", -1 );
        self.spectating_actively = 0;
    }

    var_3 = self ismlgspectator();
    var_4 = !var_3 && isdefined( self.team ) && ( self.team == "_encstr_A68C0A5803A5D151A2B310A6" || self.team == "_encstr_B33E0979A77828123F58A2" );
    var_5 = var_3 && var_1 == 3 || var_4 && ( var_1 == 4 || var_1 == 5 );

    if ( var_1 == 4 || var_1 == 5 )
    {
        var_1 = 3;
        self setmlgspectator( 1 );
    }
    else
        self setmlgspectator( 0 );

    if ( var_1 == 0 )
        var_1 = "_encstr_BA840579D3F7F6";
    else if ( var_1 == 1 )
        var_1 = "_encstr_BC850785638DA59537";
    else if ( var_1 == 2 )
        var_1 = "_encstr_AF120712EF90CB8D8B";
    else
        var_1 = "_encstr_A68C0A5803A5D151A2B310A6";

    if ( !var_5 && isdefined( self.pers["_encstr_89EF05D46BA8FD"] ) && var_1 == self.pers["_encstr_89EF05D46BA8FD"] )
        return;

    if ( isdefined( self.operatorcustomization ) )
        self.operatorcustomization.rebuild = 1;

    thread logteamselection( var_1 );

    if ( var_1 != "_encstr_A68C0A5803A5D151A2B310A6" )
        self.pers["_encstr_BE08190F54BF128BDA7810205337DF8B07C3950FA45FBBA1472220"] = undefined;
    else
        self.pers["_encstr_BE08190F54BF128BDA7810205337DF8B07C3950FA45FBBA1472220"] = 1;

    if ( var_1 == "_encstr_BA840579D3F7F6" )
        thread setteam( "_encstr_BA840579D3F7F6" );
    else if ( var_1 == "_encstr_BC850785638DA59537" )
        thread setteam( "_encstr_BC850785638DA59537" );
    else if ( var_1 == "_encstr_AF120712EF90CB8D8B" )
        thread autoassign();
    else if ( var_1 == "_encstr_A68C0A5803A5D151A2B310A6" )
        thread setspectator( var_5 );
}

handleclassedit( var_0 )
{
    var_1 = getclasschoice( var_0 );
    var_2 = scripts\mp\class::loadout_editcachedclassstruct( var_1 );
    var_3 = scripts\mp\class::zombieregenratescaleoutgas();
    var_4 = var_2 || var_3;

    if ( isdefined( self.pers["_encstr_9E95066E81471B5F"] ) && var_1 == self.pers["_encstr_9E95066E81471B5F"] && var_4 )
        onclasschoicecallback( var_0, 1 );
}

autoassign()
{
    if ( scripts\mp\utility\game::getgametype() == "_encstr_87E507D23766566CD1" )
        thread setteam( "_encstr_BC850785638DA59537" );
    else if ( getdvarint( "_encstr_B767149B8D27BE573795829CDB33D21BB235E02CEE73", 0 ) != 0 )
        thread setteam( "_encstr_BC850785638DA59537" );
    else if ( brking_updateteamscore() )
        thread setteam( "_encstr_BC850785638DA59537" );
    else
    {
        if ( isbot( self ) && isdefined( self.bot_team ) && self.bot_team != "_encstr_8B4B0B493B1C10DF43B753472B" )
        {
            thread setteam( self.bot_team );
            return;
        }

        if ( self ismlgspectator() )
        {
            thread setspectator();
            return;
        }

        if ( istrue( level.teammaxfill ) )
        {
            foreach ( var_1 in level.teamnamelist )
            {
                if ( scripts\mp\teams::_id_132E6() && var_1 == "_encstr_ADDB113BC0C19D011144DDD923CBCA5C0B78F3" )
                    continue;

                var_2 = scripts\mp\utility\teams::getteamdata( var_1, "_encstr_97580AC41D811F767F3072CB" );

                if ( level.maxteamsize == 0 || var_2 < level.maxteamsize )
                {
                    thread setteam( var_1 );
                    break;
                }
            }

            return;
        }

        var_4 = 0;
        var_5 = [];

        foreach ( var_1 in level.teamnamelist )
        {
            if ( scripts\mp\teams::_id_132E6() && var_1 == "_encstr_ADDB113BC0C19D011144DDD923CBCA5C0B78F3" )
                continue;

            var_2 = scripts\mp\utility\teams::getteamdata( var_1, "_encstr_97580AC41D811F767F3072CB" );

            if ( isdefined( self.team ) && self.team == var_1 )
                var_2--;

            if ( !var_5.size || var_2 < var_4 )
            {
                var_4 = var_2;
                var_5 = [];
                var_5[var_5.size] = var_1;
                continue;
            }

            if ( var_2 == var_4 )
                var_5[var_5.size] = var_1;
        }

        if ( var_5.size == 1 )
        {
            if ( !isdefined( self.team ) || self.team != var_5[0] )
            {
                thread setteam( var_5[0] );
                return;
            }

            return;
        }

        if ( level.teambased )
        {
            var_8 = scripts\mp\gamescore::gethighestscoringteam();

            if ( scripts\engine\utility::array_contains( var_5, var_8 ) )
                var_5 = scripts\engine\utility::array_remove( var_5, var_8 );
        }

        if ( isdefined( self.team ) && scripts\engine\utility::array_contains( var_5, self.team ) )
            var_5 = scripts\engine\utility::array_remove( var_5, self.team );

        if ( var_5.size > 0 )
        {
            var_9 = randomint( var_5.size );

            if ( istrue( level.checkforlaststandfinish ) )
                var_9 = 0;

            thread setteam( var_5[var_9] );
        }
    }
}

setteam( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    if ( !isai( self ) && level.teambased && !scripts\mp\teams::getjointeampermissions( var_0 ) && !scripts\mp\utility\game::lobbyteamselectenabled() )
        return;

    if ( level.ingraceperiod && !self.hasdonecombat )
    {
        self.hasspawned = 0;
        self.pers["_encstr_A2AA0636969D2BE6"] = scripts\mp\utility\game::getgametypenumlives();
    }

    if ( self.sessionstate == "_encstr_8F7508BB18675378EBC7" )
    {
        self.switching_teams = 1;
        self.joining_team = var_0;
        self.leaving_team = self.pers["_encstr_89EF05D46BA8FD"];

        if ( scripts\mp\utility\game::getgametype() == "_encstr_9DB606854E567385" )
            self.switching_teams_arena = 1;
    }

    if ( istrue( game["_encstr_87010E111E3823354DC251C560F3ED0A"] ) && isbot( self ) == 0 )
        var_0 = "_encstr_BC850785638DA59537";

    addtoteam( var_0 );

    if ( shouldmodesetsquads() )
        thread setsquad( var_0 );

    if ( scripts\mp\utility\player::isragdollzerog() )
        self lockdeathcamera( 1 );

    if ( self.sessionstate == "_encstr_8F7508BB18675378EBC7" )
    {
        self suicide();
        scripts\mp\utility\player::updatesessionstate( "_encstr_A68C0A5803A5D151A2B310A6" );
        self.suicideswitched = 1;
    }

    if ( scripts\mp\utility\game::allowclasschoice() || scripts\mp\utility\game::showfakeloadout() && !isai( self ) )
    {
        if ( getdvarint( "_encstr_A6121C6EC64ED799ED93B1B2FAC62CD8BE37E456FAD8B0D8B16E470B6CB6", 0 ) == 1 && scripts\mp\utility\game::getgametype() == "_encstr_9507034B25" && scripts\mp\utility\game::round_vehicle_logic() != "_encstr_BE180432D63D" && scripts\mp\utility\game::round_vehicle_logic() != "_encstr_89E10946E1536E6DD6A2B0" && scripts\mp\utility\game::round_vehicle_logic() != "_encstr_AD1F058082CACF" && scripts\mp\utility\game::round_vehicle_logic() != "_encstr_943608AF02ED7706E041" && scripts\mp\utility\game::round_vehicle_logic() != "_encstr_B26E07FBDB98427952" )
        {
            var_1 = isdefined( level.allowclasschoicefunc ) && istrue( self [[ level.allowclasschoicefunc ]]() );
            scripts\mp\utility\script::laststand_dogtags( "_encstr_A4DD0B5B62E3052B7E4D494328" + self.name + "_encstr_AB2F2E105D2DBE7BE0475ADB379BF5B62BDCEA019E4023B04085D8B17BBBD0D8166ECD3443ED2D6C563257E6B1084F01" + var_1 );
        }

        self setclientomnvar( "_encstr_82FB10DDD989C0419BF3886E8BD742E738CB", 2 );
    }

    if ( isdefined( level._id_12065 ) )
        self thread [[ level._id_12065 ]]();

    waitforclassselect();
    endrespawnnotify();

    if ( ( self.sessionstate == "_encstr_A68C0A5803A5D151A2B310A6" || _id_125F1() ) && !istrue( self.suicideswitched ) )
    {
        if ( game["_encstr_A9AD064B0D19E377"] == "_encstr_B9E70983DEE6D1760BB5CA" )
            return;

        if ( game["_encstr_A9AD064B0D19E377"] == "_encstr_8F7508BB18675378EBC7" && !scripts\mp\utility\player::isinkillcam() )
        {
            if ( isdefined( self.waitingtospawnamortize ) && self.waitingtospawnamortize )
                return;

            thread scripts\mp\playerlogic::spawnclient();
        }

        thread scripts\mp\spectating::setspectatepermissions();
    }

    self.suicideswitched = undefined;
    self notify( "_encstr_95490A804AEBDF6FCB71AC28" );
}

_id_125F1()
{
    return isdefined( level._id_125F1 ) && self [[ level._id_125F1 ]]();
}

shouldmodesetsquads()
{
    switch ( scripts\mp\utility\game::getgametype() )
    {
        case "_encstr_A90C0748FF0E09BFBA":
        case "_encstr_8C0D05A9215D20":
        case "_encstr_B31D06435BCB61E0":
        case "_encstr_9DB606854E567385":
        case "_encstr_BD19047616EB":
            return 1;
        case "_encstr_9507034B25":
            return _id_13733();
        default:
            return 0;
    }
}

setsquad( var_0 )
{
    if ( !level.teambased )
        return;

    if ( !isdefined( level.squaddata ) )
        level initsquaddata();

    if ( scripts\mp\utility\game::matchmakinggame() )
    {
        var_1 = self getsquadindex();
        joinsquad( var_0, var_1 );
        return;
    }

    var_2 = issubstr( self.name, "_encstr_B41706E88D48F61D" ) || issubstr( self.name, "_encstr_A24305F5D063BE" );

    if ( !isai( self ) && !var_2 )
    {
        var_3 = self getlobbysquadindex();

        if ( var_3 != -1 )
        {
            self.squadassignedfromlobby = 1;
            joinsquad( var_0, var_3 );
            return;
        }
    }

    if ( istrue( scripts\mp\utility\game::matchmakinggame() ) )
    {
        var_4 = self getfireteammembers();

        if ( isdefined( var_4 ) && var_4.size > 0 )
        {
            var_1 = undefined;

            foreach ( var_6 in var_4 )
            {
                if ( isdefined( var_6 ) && isdefined( var_6.squadindex ) )
                {
                    var_1 = var_6.squadindex;
                    break;
                }
            }

            if ( isdefined( var_1 ) )
            {
                joinsquad( var_0, var_1 );
                return;
            }
            else
            {
                requestnewsquad( var_0, 1 );
                return;
            }
        }
    }

    if ( var_0 != "_encstr_A68C0A5803A5D151A2B310A6" )
    {
        foreach ( var_9 in level.squaddata[var_0] )
        {
            var_9.isfull = var_9.players.size == level.maxsquadsize;

            if ( var_9.inuse && !var_9.isfireteam && !var_9.isfull )
            {
                joinsquad( var_0, var_9.index );
                return;
            }
        }

        requestnewsquad( var_0, 0 );
    }
}

initsquaddata()
{
    if ( !isdefined( level.maxsquadsize ) )
        level.maxsquadsize = getdvarint( "_encstr_A61805573F9318" + scripts\mp\utility\game::getgametype() + "_encstr_8A2B0B5FE7885B8F3D7B8A8381", 4 );

    level.maxsquadwait = getdvarint( "_encstr_AF1913BE6BC3E6F74A4B2808C1658B5A1F07CF3BD4", 15 );
    level.squaddata = [];

    foreach ( var_1 in level.teamnamelist )
        level.squaddata[var_1] = [];

    level thread monitorsquads();

    if ( getdvarint( "_encstr_8F3B118BD186BFDFE015AD875768A2DFA7A903", 0 ) == 1 )
        level thread debugprintsquads();
}

createsquad( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = level.squaddata[var_0].size;

    var_2 = spawnstruct();
    var_2.index = var_1;
    var_2.formedtime = undefined;
    var_2.isfireteam = 0;
    var_2.isstale = 0;
    var_2.isfull = 0;
    var_2.inuse = 0;
    var_2.players = [];
    var_2.spawnpoint = undefined;
    level.squaddata[var_0][var_1] = var_2;
    return var_1;
}

checksquads()
{
    foreach ( var_1 in level.teamnamelist )
    {
        if ( !isdefined( level.squaddata[var_1] ) )
            continue;

        foreach ( var_3 in level.squaddata[var_1] )
        {
            if ( !var_3.inuse )
                continue;

            if ( !var_3.isstale && gettime() > var_3.formedtime + level.maxsquadwait * 1000 )
                var_3.isstale = 1;

            var_3.isfull = var_3.players.size == level.maxsquadsize;
            var_4 = 0;

            foreach ( var_6 in var_3.players )
            {
                if ( isdefined( var_6 ) )
                    var_4 = 1;
            }

            if ( !var_4 )
                freesquadindex( var_1, var_3.index );
        }
    }
}

monitorsquads()
{
    for (;;)
    {
        checksquads();
        waitframe();
    }
}

requestnewsquad( var_0, var_1 )
{
    var_2 = getavailablesquadindex( var_0 );
    var_3 = level.squaddata[var_0][var_2];
    var_3.index = var_2;
    var_3.formedtime = gettime();
    var_3.isfireteam = var_1;
    var_3.isstale = 0;
    var_3.isfull = 0;
    var_3.inuse = 1;
    var_3.players = [];
    var_3.squadstartlocationkey = undefined;
    var_3.infil = undefined;
    joinsquad( var_0, var_2 );
}

joinsquad( var_0, var_1 )
{
    if ( !isdefined( level.squaddata[var_0][var_1] ) )
        createsquad( var_0, var_1 );

    var_2 = isdefined( self.pers["_encstr_A6E90B9399CB39513B12FC8A98"] ) && self.pers["_encstr_A6E90B9399CB39513B12FC8A98"] == var_1;

    if ( isdefined( self.squadindex ) )
    {
        var_3 = 0;

        foreach ( var_9, var_5 in level.squaddata )
        {
            foreach ( var_8, var_7 in var_5 )
            {
                if ( scripts\engine\utility::array_contains( var_7.players, self ) )
                {
                    level.squaddata[var_9][var_8].players = scripts\engine\utility::array_remove( var_7.players, self );
                    var_3 = 1;
                    break;
                }
            }

            if ( var_3 )
                break;
        }
    }

    self.squadindex = var_1;
    self.pers["_encstr_A6E90B9399CB39513B12FC8A98"] = var_1;

    if ( !var_2 || !isdefined( self.pers["_encstr_9B3E1132C34089A2791367430B8E38CEB02968"] ) )
    {
        self.pers["_encstr_9B3E1132C34089A2791367430B8E38CEB02968"] = level.squaddata[var_0][var_1].players.size;

        if ( scripts\mp\utility\game::getgametype() == "_encstr_9507034B25" )
            self.pers["_encstr_9B3E1132C34089A2791367430B8E38CEB02968"]++;
    }

    if ( !istrue( scripts\mp\utility\game::matchmakinggame() ) )
        self setsquadindex( var_1 );

    level.squaddata[var_0][var_1].players[level.squaddata[var_0][var_1].players.size] = self;
    scripts\mp\utility\join_squad_aggregator::onplayerjoinsquad( self );
    self notify( "_encstr_81760DA6F6D2732BC8EBDCE2D55832" );

    if ( istrue( level.usesquadleader ) )
        choosesquadleader( var_0, var_1 );

    if ( scripts\mp\utility\game::getgametype() != "_encstr_9507034B25" )
        updatesquadomnvars( var_0, var_1 );
}

leavesquad( var_0, var_1 )
{
    if ( scripts\mp\utility\game::getgametype() == "_encstr_9507034B25" )
    {
        level.squaddata[var_0][var_1].players = scripts\engine\utility::array_remove( level.squaddata[var_0][var_1].players, self );
        return;
    }

    if ( isdefined( var_0 ) && isdefined( var_1 ) )
        thread scripts\mp\spawnselection::_id_12ACB( var_0, var_1 );

    var_2 = 0;
    var_3 = getsquadleader( var_0, var_1 );

    if ( istrue( level.usesquadleader ) && isdefined( var_3 ) && var_3 == self )
    {
        level.squaddata[var_0][var_1].squadleaderindex = undefined;
        var_2 = 1;
    }

    level.squaddata[var_0][var_1].players = scripts\engine\utility::array_remove( level.squaddata[var_0][var_1].players, self );

    for ( var_4 = 0; var_4 < level.squaddata[var_0][var_1].players.size; var_4++ )
        level.squaddata[var_0][var_1].players[var_4].pers["_encstr_9B3E1132C34089A2791367430B8E38CEB02968"] = var_4;

    if ( istrue( var_2 ) )
    {
        var_5 = scripts\engine\utility::array_randomize( level.squaddata[var_0][var_1].players );

        foreach ( var_7 in var_5 )
        {
            if ( isdefined( var_7 ) )
            {
                var_7 choosesquadleader( var_0, var_1 );
                break;
            }
        }
    }

    updatesquadomnvars( var_0, var_1 );
}

updatesquadomnvars( var_0, var_1 )
{
    var_2 = getsquadleader( var_0, var_1 );

    foreach ( var_4 in level.squaddata[var_0][var_1].players )
    {
        var_5 = var_1;
        var_5 = var_5 + ( level.squaddata[var_0][var_1].players.size << 5 );

        if ( isdefined( var_2 ) && var_2 == var_4 )
            var_5 = var_5 + 256;

        var_4 setclientomnvar( "_encstr_B3280E0B5FB0AFAF9029C96F72CA5BEE", var_5 );

        if ( scripts\mp\utility\game::getgametype() == "_encstr_BD19047616EB" || scripts\mp\utility\game::getgametype() == "_encstr_9DB606854E567385" || scripts\mp\utility\game::getgametype() == "_encstr_B31D06435BCB61E0" )
        {
            var_6 = var_4.game_extrainfo & 65528;
            var_4.game_extrainfo = var_6 | var_4.pers["_encstr_9B3E1132C34089A2791367430B8E38CEB02968"] + 1;

            if ( isdefined( var_2 ) && var_2 == var_4 )
                var_4.game_extrainfo = var_4.game_extrainfo | 64;
            else
                var_4.game_extrainfo = var_4.game_extrainfo & ~64;

            var_7 = var_4 getentitynumber();

            if ( isdefined( var_2 ) && var_2 == var_4 )
                var_7 = var_7 + 2048;

            if ( isalive( var_4 ) )
                var_7 = var_7 + 4096;

            var_4 setclientomnvar( "_encstr_8FFD15BAB4F5859C6BD79BE25D85325B59DA98CAC9FA06", var_7 );
            var_8 = scripts\engine\utility::array_remove( level.squaddata[var_0][var_1].players, var_4 );

            for ( var_9 = 0; var_9 < 3; var_9++ )
            {
                var_10 = var_8[var_9];

                if ( isdefined( var_10 ) )
                {
                    var_7 = var_10 getentitynumber();

                    if ( isdefined( var_2 ) && var_2 == var_10 )
                        var_7 = var_7 + 2048;

                    if ( isalive( var_10 ) )
                        var_7 = var_7 + 4096;
                }
                else
                    var_7 = -1;

                var_4 setclientomnvar( "_encstr_8BCF14337F296F7085399BD35B71389162F795ABBB71" + ( var_9 + 1 ), var_7 );
            }
        }
    }
}

getavailablesquadindex( var_0 )
{
    foreach ( var_2 in level.squaddata[var_0] )
    {
        if ( !var_2.inuse )
            return var_2.index;
    }

    return createsquad( var_0 );
}

freesquadindex( var_0, var_1 )
{
    level.squaddata[var_0][var_1].formedtime = undefined;
    level.squaddata[var_0][var_1].isfireteam = 0;
    level.squaddata[var_0][var_1].isstale = 0;
    level.squaddata[var_0][var_1].isfull = 0;
    level.squaddata[var_0][var_1].inuse = 0;
    level.squaddata[var_0][var_1].players = [];
    level.squaddata[var_0][var_1].squadstartlocationkey = undefined;
    level.squaddata[var_0][var_1].infil = undefined;
}

choosesquadleader( var_0, var_1 )
{
    if ( isdefined( getsquadleader( var_0, var_1 ) ) )
        return;

    if ( istrue( scripts\mp\utility\game::matchmakinggame() ) )
    {
        var_2 = self getfireteammembers();

        if ( isdefined( var_2 ) && var_2.size > 0 )
        {
            if ( self isfireteamleader() )
            {
                foreach ( var_5, var_4 in level.squaddata[self.team][self.squadindex].players )
                {
                    if ( var_4 == self )
                        level.squaddata[var_0][var_1].squadleaderindex = var_5;
                }
            }
            else
                return;
        }
    }

    foreach ( var_5, var_4 in level.squaddata[self.team][self.squadindex].players )
    {
        if ( var_4 == self )
            level.squaddata[var_0][var_1].squadleaderindex = var_5;
    }
}

getsquadleader( var_0, var_1 )
{
    var_2 = level.squaddata[var_0][var_1].squadleaderindex;

    if ( !isdefined( var_2 ) )
        return undefined;

    return level.squaddata[var_0][var_1].players[var_2];
}

_id_13733()
{
    return getdvarint( "_encstr_ADB10B0CAC4A94A121BBDF31E1", 0 ) != 0;
}

brking_updateteamscore()
{
    return getdvarint( "_encstr_B2550AF619212A83EF24E1D9", 0 ) != 0;
}

setspectator( var_0 )
{
    if ( ( !isdefined( var_0 ) || !var_0 ) && isdefined( self.pers["_encstr_89EF05D46BA8FD"] ) && self.pers["_encstr_89EF05D46BA8FD"] == "_encstr_A68C0A5803A5D151A2B310A6" )
        return;

    if ( isalive( self ) )
    {
        self.switching_teams = 1;
        self.joining_team = "_encstr_A68C0A5803A5D151A2B310A6";
        self.leaving_team = self.pers["_encstr_89EF05D46BA8FD"];

        if ( self.sessionstate == "_encstr_8F7508BB18675378EBC7" )
            self suicide();
    }

    self notify( "_encstr_95A410981FEBA95B2AA257D586138BB35FEB" );
    addtoteam( "_encstr_A68C0A5803A5D151A2B310A6" );
    self.pers["_encstr_9E95066E81471B5F"] = undefined;
    self.class = undefined;
    thread scripts\mp\playerlogic::spawnspectator();
}

setfollower( var_0 )
{
    if ( ( !isdefined( var_0 ) || !var_0 ) && isdefined( self.pers["_encstr_89EF05D46BA8FD"] ) && self.pers["_encstr_89EF05D46BA8FD"] == "_encstr_B33E0979A77828123F58A2" )
        return;

    if ( isalive( self ) )
    {
        self.switching_teams = 1;
        self.joining_team = "_encstr_B33E0979A77828123F58A2";
        self.leaving_team = self.pers["_encstr_89EF05D46BA8FD"];
        self suicide();
    }

    self notify( "_encstr_95A410981FEBA95B2AA257D586138BB35FEB" );
    addtoteam( "_encstr_B33E0979A77828123F58A2" );
    self.pers["_encstr_9E95066E81471B5F"] = undefined;
    self.class = undefined;
    thread scripts\mp\playerlogic::spawnspectator();
}

waitforclassselect()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.waitingtoselectclass = 1;

    if ( scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) && istrue( level.usespawnselection ) && !istrue( self.hasspawned ) )
    {
        self setclientomnvar( "_encstr_9C920EEB67072717935B23D9A21BD715", 1.0 );
        self setclientomnvar( "_encstr_BCC413ED98B753A841D8978FD628670B83D8802F57", 1 );
        self setclientomnvar( "_encstr_A83C1375F1D78BEBF9A3BAF05F78D6FE1F4277D2FF", 1 );
    }

    for (;;)
    {
        var_0 = scripts\mp\utility\game::getgametype() == "_encstr_9507034B25" && scripts\mp\utility\game::allowclasschoice() && ( !scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) || istrue( level._id_133E0 ) || istrue( level.dmztut_endgametransition ) );
        var_1 = scripts\mp\utility\game::teamhasinfil( self.team ) && !scripts\mp\flags::gameflag( "_encstr_A20D0EF9B8412F9D3FE0337AF0B117D3" ) && !isdefined( level.bypassclasschoicefunc );

        if ( var_0 || var_1 )
        {
            var_2 = "_encstr_B1EF0D7703A20E209F1A6158878B50";

            if ( !isai( self ) )
            {
                var_3 = scripts\mp\rank::getrank() >= 4;

                if ( var_3 && !scripts\mp\utility\game::tv_station_intro_camera() )
                    var_4 = self getplayerdata( level.loadoutsgroup, "_encstr_B93B17F7D013F472533B08C69D634AA61DE82BBF80084C1A87", "_encstr_94511534933BF0436831038910B7FA97DD2BB94B207B9B" );
                else
                    var_4 = 100;
            }
            else
                var_4 = "_encstr_9BAA097EB163581D86D2B0";
        }
        else if ( scripts\mp\utility\game::allowclasschoice() || scripts\mp\utility\game::showfakeloadout() && !isai( self ) )
        {
            if ( !self ismlgspectator() && getdvarint( "_encstr_8A9B1119CA895D76BE74896A0ECA6CA3858EAC", 0 ) == 0 && self.team != "_encstr_A68C0A5803A5D151A2B310A6" && scripts\mp\utility\game::getgametype() != "_encstr_BD19047616EB" )
                scripts\mp\utility\lower_message::setlowermessageomnvar( 15 );

            self waittill( "_encstr_A4C617B1B70B19DEAB1DAF1BD858E69BBECDB21BCAB11DAC46", var_4 );
        }
        else
        {
            bypassclasschoice();
            break;
        }

        if ( self.team == "_encstr_A68C0A5803A5D151A2B310A6" )
            continue;

        if ( "_encstr_A40101" + var_4 != "_encstr_9BAA097EB163581D86D2B0" )
        {
            if ( isbot( self ) )
            {
                self.pers["_encstr_9E95066E81471B5F"] = var_4;
                self.class = var_4;
            }
            else
            {
                var_4 = var_4;
                self.pers["_encstr_9E95066E81471B5F"] = getclasschoice( var_4 );
                self.class = getclasschoice( var_4 );
            }

            scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
            self.waitingtoselectclass = 0;
        }
        else
        {
            self.waitingtoselectclass = 0;
            menuclass( "_encstr_9BAA097EB163581D86D2B0" );
        }

        break;
    }
}

beginclasschoice( var_0 )
{
    var_1 = self.pers["_encstr_89EF05D46BA8FD"];

    if ( scripts\mp\utility\game::allowclasschoice() || scripts\mp\utility\game::showfakeloadout() && !isai( self ) )
    {
        if ( getdvarint( "_encstr_A6121C6EC64ED799ED93B1B2FAC62CD8BE37E456FAD8B0D8B16E470B6CB6", 0 ) == 1 && scripts\mp\utility\game::getgametype() == "_encstr_9507034B25" && scripts\mp\utility\game::round_vehicle_logic() != "_encstr_BE180432D63D" && scripts\mp\utility\game::round_vehicle_logic() != "_encstr_89E10946E1536E6DD6A2B0" && scripts\mp\utility\game::round_vehicle_logic() != "_encstr_AD1F058082CACF" && scripts\mp\utility\game::round_vehicle_logic() != "_encstr_943608AF02ED7706E041" && scripts\mp\utility\game::round_vehicle_logic() != "_encstr_B26E07FBDB98427952" )
        {
            var_2 = isdefined( level.allowclasschoicefunc ) && istrue( self [[ level.allowclasschoicefunc ]]() );
            scripts\mp\utility\script::laststand_dogtags( "_encstr_A686145E371ABBA823EB58D08F7B20FF82DE45F39CC6" + self.name + "_encstr_AB2F2E105D2DBE7BE0475ADB379BF5B62BDCEA019E4023B04085D8B17BBBD0D8166ECD3443ED2D6C563257E6B1084F01" + var_2 );
        }

        self setclientomnvar( "_encstr_82FB10DDD989C0419BF3886E8BD742E738CB", 2 );

        if ( !self ismlgspectator() )
            waitforclassselect();

        endrespawnnotify();

        if ( self.sessionstate == "_encstr_A68C0A5803A5D151A2B310A6" )
        {
            if ( game["_encstr_A9AD064B0D19E377"] == "_encstr_B9E70983DEE6D1760BB5CA" )
                return;

            if ( game["_encstr_A9AD064B0D19E377"] == "_encstr_8F7508BB18675378EBC7" && !scripts\mp\utility\player::isinkillcam() )
            {
                if ( isdefined( self.waitingtospawnamortize ) && self.waitingtospawnamortize )
                    return;

                thread scripts\mp\playerlogic::spawnclient();
            }

            thread scripts\mp\spectating::setspectatepermissions();
        }

        self.connecttime = gettime();
        self notify( "_encstr_95490A804AEBDF6FCB71AC28" );
    }
    else
        thread bypassclasschoice();
}

bypassclasschoice()
{
    self.selectedclass = 1;
    self.waitingtoselectclass = 0;

    if ( updatetimedrunhud() && level.enforceantiboosting && !isbot( self ) )
    {
        scripts\mp\utility\lower_message::setlowermessageomnvar( 1 );
        self notifyonplayercommand( "_encstr_B76C0D8BA317C6E0631FCF81399330", "_encstr_88410B02AB0E5F15AFB8A883DC" );
        self notifyonplayercommand( "_encstr_B76C0D8BA317C6E0631FCF81399330", "_encstr_A4C60AACB01B1DD2B3583A2B" );
        thread waitthensetspawnomnvar();
        self waittill( "_encstr_B76C0D8BA317C6E0631FCF81399330" );
    }

    if ( isdefined( level.bypassclasschoicefunc ) )
    {
        var_0 = self [[ level.bypassclasschoicefunc ]]();
        self.class = var_0;
    }
    else
        self.class = "_encstr_9780077798D1733369";
}

updatetimedrunhud()
{
    if ( scripts\mp\utility\game::getgametype() == "_encstr_87E507D23766566CD1" )
        return 1;
    else if ( scripts\mp\utility\game::getgametype() == "_encstr_8807031CC1" && istrue( level.aonrules ) )
        return 1;
    else if ( scripts\mp\utility\game::getgametype() == "_encstr_8918049D5DDC" )
        return 1;
    else if ( scripts\mp\utility\game::getgametype() == "_encstr_9DB606854E567385" )
        return 1;

    return 0;
}

waitthensetspawnomnvar()
{
    self endon( "_encstr_B76C0D8BA317C6E0631FCF81399330" );
    wait 1;

    if ( isdefined( self ) )
        scripts\mp\utility\lower_message::setlowermessageomnvar( 1 );
}

beginteamchoice()
{
    self setclientomnvar( "_encstr_82FB10DDD989C0419BF3886E8BD742E738CB", 1 );
}

menuspectator()
{
    if ( isdefined( self.pers["_encstr_89EF05D46BA8FD"] ) && self.pers["_encstr_89EF05D46BA8FD"] == "_encstr_A68C0A5803A5D151A2B310A6" )
        return;

    if ( isalive( self ) )
    {
        self.switching_teams = 1;
        self.joining_team = "_encstr_A68C0A5803A5D151A2B310A6";
        self.leaving_team = self.pers["_encstr_89EF05D46BA8FD"];
        self suicide();
    }

    addtoteam( "_encstr_A68C0A5803A5D151A2B310A6" );
    self.pers["_encstr_9E95066E81471B5F"] = undefined;
    self.class = undefined;
    thread scripts\mp\playerlogic::spawnspectator();
}

menuclass( var_0 )
{
    var_1 = self.pers["_encstr_89EF05D46BA8FD"];
    var_2 = scripts\mp\class::getclasschoice( var_0 );
    var_3 = scripts\mp\class::getweaponchoice( var_0 );

    if ( var_2 == "_encstr_82E00B033533D432292F946D31" )
    {
        beginclasschoice();
        return;
    }

    if ( isdefined( self.pers["_encstr_9E95066E81471B5F"] ) && self.pers["_encstr_9E95066E81471B5F"] == var_2 && ( isdefined( self.pers["_encstr_987F080E394BDAC2E45E"] ) && self.pers["_encstr_987F080E394BDAC2E45E"] == var_3 ) )
        return;

    if ( self.sessionstate == "_encstr_8F7508BB18675378EBC7" )
    {
        if ( isdefined( self.pers["_encstr_9F690A0DBF9F69AE0A510886"] ) && isdefined( self.pers["_encstr_9E95066E81471B5F"] ) )
        {
            self.pers["_encstr_9F690A0DBF9F69AE0A510886"] = self.pers["_encstr_9E95066E81471B5F"];
            self.lastclass = self.pers["_encstr_9F690A0DBF9F69AE0A510886"];
        }

        self.pers["_encstr_9E95066E81471B5F"] = var_2;
        self.class = var_2;
        self.pers["_encstr_987F080E394BDAC2E45E"] = var_3;

        if ( game["_encstr_A9AD064B0D19E377"] == "_encstr_B9E70983DEE6D1760BB5CA" )
            return;

        if ( level.ingraceperiod && !self.hasdonecombat )
        {
            scripts\mp\class::setclass( self.pers["_encstr_9E95066E81471B5F"] );
            self.tag_stowed_back = undefined;
            self.tag_stowed_hip = undefined;
            scripts\mp\class::giveloadout( self.pers["_encstr_89EF05D46BA8FD"], self.pers["_encstr_9E95066E81471B5F"] );
        }
        else
            self iprintlnbold( game["_encstr_A9B10863D3ADDAF8974B"]["_encstr_811C0DF030B8A8097771334B705F87"] );
    }
    else
    {
        if ( isdefined( self.pers["_encstr_9F690A0DBF9F69AE0A510886"] ) && isdefined( self.pers["_encstr_9E95066E81471B5F"] ) )
        {
            self.pers["_encstr_9F690A0DBF9F69AE0A510886"] = self.pers["_encstr_9E95066E81471B5F"];
            self.lastclass = self.pers["_encstr_9F690A0DBF9F69AE0A510886"];
        }

        self.pers["_encstr_9E95066E81471B5F"] = var_2;
        self.class = var_2;
        self.pers["_encstr_987F080E394BDAC2E45E"] = var_3;

        if ( game["_encstr_A9AD064B0D19E377"] == "_encstr_B9E70983DEE6D1760BB5CA" )
            return;

        if ( game["_encstr_A9AD064B0D19E377"] == "_encstr_8F7508BB18675378EBC7" && !scripts\mp\utility\player::isinkillcam() )
            thread scripts\mp\playerlogic::spawnclient();
    }

    thread scripts\mp\spectating::setspectatepermissions();
}

addtoteam( var_0, var_1, var_2 )
{
    if ( isdefined( self.team ) )
    {
        scripts\mp\playerlogic::removefromteamcount();

        if ( isdefined( var_2 ) && var_2 )
            scripts\mp\playerlogic::decrementalivecount( self.team, 0, "_encstr_8FB00A1646918AED51CAB0DA" );

        if ( shouldmodesetsquads() && isdefined( self.squadindex ) && self.team != "_encstr_A68C0A5803A5D151A2B310A6" )
            leavesquad( self.team, self.squadindex );
    }

    if ( isdefined( self.pers["_encstr_89EF05D46BA8FD"] ) && self.pers["_encstr_89EF05D46BA8FD"] != "_encstr_A40101" && self.pers["_encstr_89EF05D46BA8FD"] != "_encstr_A68C0A5803A5D151A2B310A6" )
        self.pers["_encstr_93AE0A433356ABB740718E95"] = self.pers["_encstr_89EF05D46BA8FD"];

    self.changedteams = isdefined( self.pers["_encstr_93AE0A433356ABB740718E95"] ) && self.pers["_encstr_93AE0A433356ABB740718E95"] != var_0;
    self.pers["_encstr_89EF05D46BA8FD"] = var_0;
    self.team = var_0;
    var_3 = isbot( self ) || initmaxspeedforpathlengthtable( self );

    if ( var_3 )
        setsessionteam( var_0 );
    else if ( !scripts\mp\utility\game::denysystemicteamchoice() )
    {
        if ( scripts\mp\utility\game::matchmakinggame() )
        {
            if ( !scripts\mp\utility\game::allowteamassignment() )
            {
                if ( scripts\mp\utility\game::getgametype() == "_encstr_87E507D23766566CD1" )
                    setsessionteam( var_0 );
                else
                    setemptysessionteam( var_0 );
            }
        }
        else if ( !_func_426() )
            setsessionteam( var_0 );
    }

    if ( game["_encstr_A9AD064B0D19E377"] != "_encstr_B9E70983DEE6D1760BB5CA" )
        scripts\mp\playerlogic::addtoteamcount( istrue( var_2 ) );

    scripts\mp\utility\game::updateobjectivetext();

    if ( isdefined( var_1 ) && var_1 )
        waittillframeend;

    if ( var_0 == "_encstr_A68C0A5803A5D151A2B310A6" || var_0 == "_encstr_B33E0979A77828123F58A2" )
    {
        self notify( "_encstr_8CD0124A97D7F07BAD07C8C342FAA010C490DD5B" );
        scripts\mp\teams::onjoinedspectators( self );
        scripts\mp\spectating::onjoinedspectators( self );
        scripts\mp\bounty::onplayerjoinedspectators( self );
        scripts\cp_mp\pet_watch::_id_12044();
    }
    else
        self notify( "_encstr_B2170C4AD884CDC823B9DB9D9F42" );

    scripts\mp\utility\join_team_aggregator::onplayerjointeam( self );
    scripts\mp\infilexfil\infilexfil::onjoinedteam( self );
    level notify( "_encstr_9C750C858C32EB8EF6F5D12B585B", self );
}

setsessionteam( var_0 )
{
    if ( level.teambased )
        self.sessionteam = var_0;
    else
        setemptysessionteam( var_0 );
}

setemptysessionteam( var_0 )
{
    if ( var_0 == "_encstr_A68C0A5803A5D151A2B310A6" )
        self.sessionteam = "_encstr_A68C0A5803A5D151A2B310A6";
    else if ( var_0 == "_encstr_B33E0979A77828123F58A2" )
        self.sessionteam = "_encstr_B33E0979A77828123F58A2";
    else
        self.sessionteam = "_encstr_AABA05236DC831";
}

endrespawnnotify()
{
    self.waitingtospawn = 0;
    self notify( "_encstr_A2BF0CF1C504995E3ABF99435772" );
}

logteamselection( var_0 )
{
    if ( getdvarint( "_encstr_9D0F0D1338C5C9DB98BF7174458333", 0 ) == 0 )
        return;

    if ( var_0 != "_encstr_AF120712EF90CB8D8B" )
        iprintlnbold( "_encstr_A40101" + self.name + "_encstr_B75F1CA1E207AD9A0DFF61C10B3763E5C77B29315B2B50BAE6DB77AB07DD" );
}

debugprintsquads()
{
    var_0 = 25;

    for (;;)
    {
        if ( isdefined( level.squaddata ) )
        {
            var_1 = 800;
            var_2 = 25;
            var_3 = 1;

            foreach ( var_13, var_5 in level.squaddata )
            {
                var_3 = 1;
                var_3++;

                foreach ( var_7 in var_5 )
                {
                    var_8 = ( 1, 1, 1 );

                    if ( isdefined( var_7.activemission ) )
                        var_8 = ( 1, 1, 0 );

                    var_3++;

                    foreach ( var_10 in var_7.players )
                    {
                        var_8 = ( 1, 1, 1 );

                        if ( istrue( var_10.squadassignedfromlobby ) )
                            var_8 = ( 0, 1, 0 );

                        var_3++;
                    }
                }

                var_1 = var_1 + 200;
            }
        }

        waitframe();
    }
}
