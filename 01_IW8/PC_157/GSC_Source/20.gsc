// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( isdefined( level.createfx_enabled ) && level.createfx_enabled )
        return;

    if ( getdvarint( "_encstr_8B7A0B3524F7A9F8501F910F6C" ) == 1 )
        return;

    setup_callbacks();
    scripts\mp\bots\bots_personality::setup_personalities();
    level.badplace_cylinder_func = ::badplace_cylinder;
    level.badplace_delete_func = ::badplace_delete;

    if ( isdefined( level.deactivate_laser_trap ) )
        [[ level.deactivate_laser_trap ]]();
    else
        scripts\mp\bots\bots_killstreaks::bot_killstreak_setup();

    scripts\mp\bots\bots_loadout::init();
    level thread init();
    load_gametype_scripts_for_scriptdev();
}

setup_callbacks()
{
    level.bot_funcs = [];
    level.bot_funcs["_encstr_9ED20BA21F601AB776DBCA9320"] = ::spawn_bots;
    level.bot_funcs["_encstr_BCDC17C4ED3A6EAF584646D7CDD816CE9537B35693D7268576"] = ::bot_add_scavenger_bag;
    level.bot_funcs["_encstr_81491A32F8C38791831872D980C7D9B359DCBDA4182B17E2A7787B13"] = scripts\mp\bots\bots_util::bot_add_to_bot_level_targets;
    level.bot_funcs["_encstr_B8381F89DB479BF5C956D6DBB3ACBE33C9DED6BEC6B23B5636AF8E2C27ECCA479B"] = scripts\mp\bots\bots_util::bot_remove_from_bot_level_targets;
    level.bot_funcs["_encstr_957206E843D2CDB5"] = ::bot_think;
    level.bot_funcs["_encstr_B4330AB79BF5B6B4B163B2C8"] = ::on_bot_killed;
    level.bot_funcs["_encstr_9F06126358E08F4540D714173FD0CC1399D1DA0A"] = ::bot_should_do_killcam;
    level.bot_funcs["_encstr_89BD11B90283E0405B34FBF7434780A86F0A53"] = scripts\mp\bots\bots_util::bot_get_known_attacker;
    level.bot_funcs["_encstr_935216AE70A7B3F93FD9B0707294B36B0FF73D2FC07F180F"] = ::bot_should_pickup_weapons;
    level.bot_funcs["_encstr_AAB20B6A503033FEC073DFA501"] = ::bot_damage_callback;
    level.bot_funcs["_encstr_9B610FCEC26B2B3AF20756BE3A435ADC5B"] = ::default_gametype_think;
    level.bot_funcs["_encstr_9FC10EA0929E01611B87ED53914BE8DF"] = scripts\mp\bots\bots_util::bot_leader_dialog;
    level.bot_funcs["_encstr_9E7F0F83E0068BA8D3374EA2490F65E339"] = ::bot_player_spawned;
    level.bot_funcs["_encstr_87071FC32A171DC087C77761E1EAC8F0DF529BAB82BF554011D179611A9538A65B"] = scripts\mp\bots\bots_strategy::should_start_cautious_approach_default;
    level.bot_funcs["_encstr_9E2F16DCF84770C743AB48F59B753BC07AA86E23FBB16B30"] = ::bot_know_enemies_on_start;
    level.bot_funcs["_encstr_A94310EE8F330E27B7B301901A8DF7C6DB38"] = ::bot_get_rank_xp;
    level.bot_funcs["_encstr_8F66152C4BF5CC23D79B5AD9D0D15ADCEC7D6BF6C85663"] = ::bot_3d_sighting_model;
    level.bot_funcs["_encstr_974515E14BD75FE0073CEFA7256EA8A8ABF17BE8427B1A"] = ::bot_think_seek_dropped_weapons;
    level.bot_funcs["_encstr_BA6C16E9EBD21FA8552FD6AB1739E0D89AF75F6B03FA6D90"] = ::should_stop_seeking_weapon;
    level.bot_funcs["_encstr_94EB0E1B270B3AB2BED80BB97DBA3756"] = ::crate_can_use_always;
    level.bot_funcs["_encstr_A1C9159F4537AB69F7E3B78BA9B07DC97B389FA0806FC3"] = ::crate_low_ammo_check;
    level.bot_funcs["_encstr_B8A713C627C24759D7DC0DDBEAB123D7C6D82C5AD6"] = ::crate_should_claim;
    level.bot_funcs["_encstr_AD600F6C4EC2A3597DBBB0A53AAF5DB9B2"] = ::crate_wait_use;
    level.bot_funcs["_encstr_BD430F6E60DE54058F537D611BF15BBF0A"] = ::crate_in_range;
    level.bot_funcs["_encstr_9E5B0E300FC32317E3C7A13D9A8A95EB"] = ::bot_post_teleport;
    level.bot_funcs["_encstr_9DCD1328874CDED77A3BB025546235C08307A01047"] = scripts\mp\bots\bots_util::bot_set_difficulty;
    level.bot_funcs["_encstr_947614C4DE47FA37593AD70EB24E9BF69BB036B4A32F"] = scripts\mp\bots\bots_util::bot_set_personality;
    level.bot_funcs["_encstr_8AA21620C22B87B3E32178E23FB75969561A51902A872B2A"] = ::bot_think_watch_enemy;
    level.bot_funcs["_encstr_AD8419DD770BE935AB923098193367D0A3D96753ECB960F0B7DA6B"] = scripts\mp\bots\bots_strategy::bot_think_tactical_goals;
    level.bot_funcs["_encstr_A35A1AF94263AFB87DD47F2FEDE57856EB1AB1C6EAC358E8D7DC6B41"] = scripts\mp\bots\bots_util::bot_bots_enabled_or_added;
    level.bot_funcs["_encstr_BCEC0D1A2930E91BC5CFBBC38B78F2"] = ::bot_think_revive;
    level.bot_random_path_function = scripts\mp\bots\bots_personality::bot_random_path_default;
    level.bot_find_defend_node_func["_encstr_9EEB08EFAF2B15984A67"] = scripts\mp\bots\bots_strategy::find_defend_node_capture;
    level.bot_find_defend_node_func["_encstr_AD6F0D87C7437DE0220FB62AB516A8"] = scripts\mp\bots\bots_strategy::find_defend_node_capture_zone;
    level.bot_find_defend_node_func["_encstr_A60808AFEA27136B7EEB"] = scripts\mp\bots\bots_strategy::find_defend_node_protect;
    level.bot_find_defend_node_func["_encstr_AB0B0D8BADF0032520BBF9B8F0606D"] = scripts\mp\bots\bots_strategy::find_defend_node_protect_zone;
    level.bot_find_defend_node_func["_encstr_A3A30AEE8F73CA27B3E26820"] = scripts\mp\bots\bots_strategy::find_defend_node_bodyguard;
    level.bot_find_defend_node_func["_encstr_B408071CB04739BDC6"] = scripts\mp\bots\bots_strategy::find_defend_node_patrol;
    _encstr_B41526E68D4E961C47E65E5BE0CB13DE47B97931DBA39BFAB32CAD563ACB83CAF5EE0B4E17CEE68D::setup_callbacks();
}

codecallback_leaderdialog( var_0, var_1 )
{
    if ( isdefined( level.bot_funcs ) && isdefined( level.bot_funcs["_encstr_9FC10EA0929E01611B87ED53914BE8DF"] ) )
        self [[ level.bot_funcs["_encstr_9FC10EA0929E01611B87ED53914BE8DF"] ]]( var_0, var_1 );
}

init()
{
    thread monitor_smoke_grenades();
    thread bot_triggers();
    initbotlevelvariables();

    if ( !shouldspawnbots() )
        return;

    refresh_existing_bots();
    var_0 = botsystemstatus();

    if ( var_0 == "_encstr_8704121D90EA252C5BB23F616162E910D0BBF7A6" || var_0 == "_encstr_8C4D162BDCC226365932F5334BC61BBEF60EACCDF5235667" )
    {
        setmatchdata( "_encstr_943508287AB2F598ABF3", 1 );

        if ( istrue( level.multiteambased ) )
            level thread bot_connect_monitor_multiteam();
        else
            level thread bot_connect_monitor();
    }
    else
        level thread bot_monitor_team_limits();
}

initbotlevelvariables()
{
    if ( !isdefined( level.crateownerusetime ) )
        level.crateownerusetime = 500;

    if ( !isdefined( level.cratenonownerusetime ) )
        level.cratenonownerusetime = 3000;

    level.bot_out_of_combat_time = 3000;
    level.bot_respawn_launcher_name = "_encstr_B21711491853816037AA3B9D16F2D3D3F8DB56";
    level.bot_fallback_weapon = "_encstr_8F610A500B9AD828F501AD93";
    level.zonecount = getzonecount();
    level.bot_light_volumes = getentarray( "_encstr_B18E0FFA30E59FFDA03F9074B71882BF87", "_encstr_B8CE0BE43FC317DF690862BA48" );
    level.bot_dark_volumes = getentarray( "_encstr_936F0E13E013FFE26B966C6977358A89", "_encstr_B8CE0BE43FC317DF690862BA48" );
    initbotmapextents();
    level.bot_variables_initialized = 1;
}

initbotmapextents()
{
    if ( isdefined( level.teleportgetactivenodesfunc ) )
    {
        var_0 = [[ level.teleportgetactivenodesfunc ]]();
        level.bot_map_min_x = 0;
        level.bot_map_max_x = 0;
        level.bot_map_min_y = 0;
        level.bot_map_max_y = 0;
        level.bot_map_min_z = 0;
        level.bot_map_max_z = 0;

        if ( var_0.size > 1 )
        {
            level.bot_map_min_x = var_0[0].origin[0];
            level.bot_map_max_x = var_0[0].origin[0];
            level.bot_map_min_y = var_0[0].origin[1];
            level.bot_map_max_y = var_0[0].origin[1];
            level.bot_map_min_z = var_0[0].origin[2];
            level.bot_map_max_z = var_0[0].origin[2];

            for ( var_1 = 1; var_1 < var_0.size; var_1++ )
            {
                var_2 = var_0[var_1].origin;

                if ( var_2[0] < level.bot_map_min_x )
                    level.bot_map_min_x = var_2[0];

                if ( var_2[0] > level.bot_map_max_x )
                    level.bot_map_max_x = var_2[0];

                if ( var_2[1] < level.bot_map_min_y )
                    level.bot_map_min_y = var_2[1];

                if ( var_2[1] > level.bot_map_max_y )
                    level.bot_map_max_y = var_2[1];

                if ( var_2[2] < level.bot_map_min_z )
                    level.bot_map_min_z = var_2[2];

                if ( var_2[2] > level.bot_map_max_z )
                    level.bot_map_max_z = var_2[2];
            }
        }

        level.bot_map_center = ( ( level.bot_map_min_x + level.bot_map_max_x ) / 2, ( level.bot_map_min_y + level.bot_map_max_y ) / 2, ( level.bot_map_min_z + level.bot_map_max_z ) / 2 );
    }
}

bot_post_teleport()
{
    level.bot_variables_initialized = undefined;
    level.bot_initialized_remote_vehicles = undefined;
    initbotmapextents();
    level.bot_variables_initialized = 1;
}

shouldspawnbots()
{
    return 1;
}

refresh_existing_bots()
{
    wait 1;

    foreach ( var_1 in level.players )
    {
        if ( isbot( var_1 ) )
        {
            if ( isalive( var_1 ) )
            {
                var_1.equipment_enabled = 1;
                var_1.bot_team = var_1.team;
                var_1.debug_ai_aggro = 1;
                var_1 thread [[ level.bot_funcs["_encstr_957206E843D2CDB5"] ]]();
                continue;
            }
        }
    }
}

bot_player_spawned()
{
    bot_set_loadout_class();
}

bot_set_loadout_class()
{
    if ( !isdefined( self.bot_class ) )
    {
        if ( !bot_gametype_chooses_class() )
        {
            while ( !isdefined( level.bot_loadouts_initialized ) )
                wait 0.05;

            if ( isdefined( self.override_class_function ) )
                self.bot_class = [[ self.override_class_function ]]();
            else
                self.bot_class = scripts\mp\bots\bots_personality::bot_setup_callback_class();
        }
        else
            self.bot_class = self.class;
    }
}

watch_players_connecting()
{
    for (;;)
    {
        level waittill( "_encstr_87940A7F075A88E8ABD37951", var_0 );

        if ( !isai( var_0 ) && level.players.size > 0 )
        {
            level.players_waiting_to_join = scripts\engine\utility::array_add( level.players_waiting_to_join, var_0 );
            childthread bots_notify_on_spawn( var_0 );
            childthread bots_notify_on_disconnect( var_0 );
            childthread bots_remove_from_array_on_notify( var_0 );
        }
    }
}

bots_notify_on_spawn( var_0 )
{
    var_0 endon( "_encstr_8041183E7FC37BA704734038DA919970A71B30A0C62FA109AF4A" );

    while ( !scripts\engine\utility::array_contains( level.players, var_0 ) )
        wait 0.05;

    var_0 notify( "_encstr_8C8F13AED89043D913CBAF97D550C398D02325F711" );
}

bots_notify_on_disconnect( var_0 )
{
    var_0 endon( "_encstr_8C8F13AED89043D913CBAF97D550C398D02325F711" );
    var_0 waittill( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_0 notify( "_encstr_8041183E7FC37BA704734038DA919970A71B30A0C62FA109AF4A" );
}

bots_remove_from_array_on_notify( var_0 )
{
    var_0 scripts\engine\utility::_id_143A5( "_encstr_8C8F13AED89043D913CBAF97D550C398D02325F711", "_encstr_8041183E7FC37BA704734038DA919970A71B30A0C62FA109AF4A" );
    level.players_waiting_to_join = scripts\engine\utility::array_remove( level.players_waiting_to_join, var_0 );
}

monitor_pause_spawning()
{
    level.players_waiting_to_join = [];
    childthread watch_players_connecting();

    for (;;)
    {
        if ( level.players_waiting_to_join.size > 0 )
            level.pausing_bot_connect_monitor = 1;
        else
            level.pausing_bot_connect_monitor = 0;

        wait 0.5;
    }
}

bot_can_join_team( var_0 )
{
    if ( scripts\mp\utility\game::matchmakinggame() )
        return 1;

    if ( !level.teambased )
        return 1;

    if ( scripts\mp\teams::getjointeampermissions( var_0 ) )
        return 1;

    return 0;
}

bot_allowed_to_switch_teams()
{
    if ( isdefined( level.bots_disable_team_switching ) && level.bots_disable_team_switching )
        return 0;

    if ( isdefined( level.matchrules_switchteamdisabled ) && level.matchrules_switchteamdisabled )
        return 0;

    return 1;
}

bot_connect_monitor_multiteam()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_95CD148115A429662A5B353B7743A07047AD68DBBD0A" );
    self endon( "_encstr_95CD148115A429662A5B353B7743A07047AD68DBBD0A" );
    level.pausing_bot_connect_monitor = 0;
    childthread monitor_pause_spawning();
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 0.5 );
    var_0 = 1.5;

    if ( !isdefined( level.bot_cm_spawned_bots ) )
        level.bot_cm_spawned_bots = 0;

    if ( !isdefined( level.bot_cm_waited_players_time ) )
        level.bot_cm_waited_players_time = 0;

    if ( !isdefined( level.bot_cm_human_picked ) )
        level.bot_cm_human_picked = 0;

    for (;;)
    {
        if ( level.pausing_bot_connect_monitor )
        {
            scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_0 );
            continue;
        }

        var_1 = isdefined( level.bots_ignore_team_balance ) || !level.teambased;
        var_2 = botgetteamlimit( 0 );
        var_3 = botgetteamlimit( 1 );
        var_4 = botgetteamdifficulty( 0 );
        var_5 = botgetteamdifficulty( 1 );
        var_9 = getdvarint( "_encstr_A61805573F9318" + scripts\mp\utility\game::getgametype() + "_encstr_A2040B015BF8B11A761F6F0B41", -1 );
        var_10 = var_3 + var_2;
        var_11 = "_encstr_BC850785638DA59537";

        if ( isdefined( level.bot_last_team_ally ) )
            var_11 = level.bot_last_team_ally;

        var_12 = "_encstr_BA840579D3F7F6";

        if ( isdefined( level.bot_last_team_enemy ) )
            var_12 = level.bot_last_team_enemy;

        var_13 = bot_client_counts();
        var_14 = cat_array_get( var_13, "_encstr_AA4407CC7BB8B12A7E" );

        if ( var_14 > 1 )
        {
            var_15 = bot_get_host_team();

            if ( !scripts\mp\utility\game::matchmakinggame() && isdefined( var_15 ) && var_15 != "_encstr_A68C0A5803A5D151A2B310A6" )
                var_11 = var_15;
            else
            {
                var_16 = cat_array_get( var_13, "_encstr_A9440EEB9557C9353201F060CA4CEB43" );
                var_17 = cat_array_get( var_13, "_encstr_8F2F0CD0EAADB0DC37F5161E2D6E" );

                if ( var_17 > var_16 )
                    var_11 = "_encstr_BA840579D3F7F6";
            }
        }
        else
        {
            var_18 = get_human_player();

            if ( isdefined( var_18 ) )
            {
                var_19 = var_18 bot_get_player_team();

                if ( isdefined( var_19 ) && var_19 != "_encstr_A68C0A5803A5D151A2B310A6" )
                    var_11 = var_19;
            }
        }

        level.bot_last_team_ally = var_11;
        var_20 = 0;

        foreach ( var_22 in level.allteamnamelist )
            var_20 = var_20 + cat_array_get( var_13, "_encstr_BDB20641D56488B8" + var_22 );

        if ( var_20 > 0 )
            level.bot_cm_spawned_bots = 1;

        var_24 = 0;

        if ( !level.bot_cm_human_picked )
            var_24 = !bot_get_human_picked_team();

        if ( var_24 )
        {
            var_25 = !getdvarint( "_encstr_BE9C0BCC55174365D31941E829" );
            var_26 = 0;

            if ( var_25 || var_26 )
            {
                level.bot_cm_waited_players_time = level.bot_cm_waited_players_time + var_0;
                scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_0 );
                continue;
            }
        }

        var_27 = var_10 - var_20;
        var_28 = var_27;
        var_29 = var_28 > 0;

        if ( var_29 )
        {
            if ( var_9 <= 6 )
            {
                for ( var_30 = []; var_28 > 0; var_28-- )
                {
                    var_31 = undefined;
                    var_32 = undefined;

                    foreach ( var_22 in level.teamnamelist )
                    {
                        var_34 = level.teamdata[var_22]["_encstr_97580AC41D811F767F3072CB"];

                        if ( !isdefined( var_31 ) || var_32 > var_34 )
                        {
                            var_31 = var_22;
                            var_32 = var_34;
                        }
                    }

                    if ( !isdefined( var_30[var_31] ) )
                        var_30[var_31] = 0;

                    var_30[var_31]++;
                }

                foreach ( var_22, var_37 in var_30 )
                {
                    level thread spawn_bots( var_30[var_22], var_22, undefined, undefined, "_encstr_8C0D10AF381EF808AF72C689FA87B1B0B793", var_5 );
                    level waittill( "_encstr_8C0D10AF381EF808AF72C689FA87B1B0B793" );
                }
            }
            else
            {
                foreach ( var_22 in level.teamnamelist )
                {
                    var_34 = level.teamdata[var_22]["_encstr_97580AC41D811F767F3072CB"];
                    var_39 = level.maxteamsize - var_34;

                    if ( var_39 == 0 )
                        continue;

                    var_40 = int( min( var_28, var_39 ) );
                    var_28 = var_28 - var_40;
                    level thread spawn_bots( var_40, var_22, undefined, undefined, "_encstr_8C0D10AF381EF808AF72C689FA87B1B0B793", var_5 );
                    level waittill( "_encstr_8C0D10AF381EF808AF72C689FA87B1B0B793" );

                    if ( var_28 == 0 )
                        break;
                }
            }
        }

        if ( var_5 != var_4 )
        {
            bots_update_difficulty( var_12, var_5 );
            bots_update_difficulty( var_11, var_4 );
        }

        scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_0 );
    }
}

bot_connect_monitor()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_95CD148115A429662A5B353B7743A07047AD68DBBD0A" );
    self endon( "_encstr_95CD148115A429662A5B353B7743A07047AD68DBBD0A" );
    level.pausing_bot_connect_monitor = 0;
    childthread monitor_pause_spawning();
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 0.5 );
    var_0 = 1.5;

    if ( !isdefined( level.bot_cm_spawned_bots ) )
        level.bot_cm_spawned_bots = 0;

    if ( !isdefined( level.bot_cm_waited_players_time ) )
        level.bot_cm_waited_players_time = 0;

    if ( !isdefined( level.bot_cm_human_picked ) )
        level.bot_cm_human_picked = 0;

    for (;;)
    {
        if ( level.pausing_bot_connect_monitor )
        {
            scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_0 );
            continue;
        }

        var_1 = isdefined( level.bots_ignore_team_balance ) || !level.teambased;
        var_2 = botgetteamlimit( 0 );
        var_3 = botgetteamlimit( 1 );
        var_4 = botgetteamdifficulty( 0 );
        var_5 = botgetteamdifficulty( 1 );
        var_9 = "_encstr_BC850785638DA59537";

        if ( isdefined( level.bot_last_team_ally ) )
            var_9 = level.bot_last_team_ally;

        var_10 = "_encstr_BA840579D3F7F6";

        if ( isdefined( level.bot_last_team_enemy ) )
            var_10 = level.bot_last_team_enemy;

        var_11 = bot_client_counts();
        var_12 = cat_array_get( var_11, "_encstr_AA4407CC7BB8B12A7E" );

        if ( var_12 > 1 )
        {
            var_13 = bot_get_host_team();

            if ( !scripts\mp\utility\game::matchmakinggame() && isdefined( var_13 ) && var_13 != "_encstr_A68C0A5803A5D151A2B310A6" && var_13 != "_encstr_B33E0979A77828123F58A2" )
            {
                var_9 = var_13;
                var_10 = scripts\mp\utility\game::getotherteam( var_13 )[0];
            }
            else
            {
                var_14 = cat_array_get( var_11, "_encstr_A9440EEB9557C9353201F060CA4CEB43" );
                var_15 = cat_array_get( var_11, "_encstr_8F2F0CD0EAADB0DC37F5161E2D6E" );

                if ( var_15 > var_14 )
                {
                    var_9 = "_encstr_BA840579D3F7F6";
                    var_10 = "_encstr_BC850785638DA59537";
                }
            }
        }
        else
        {
            var_16 = get_human_player();

            if ( isdefined( var_16 ) )
            {
                var_17 = var_16 bot_get_player_team();

                if ( isdefined( var_17 ) && var_17 != "_encstr_A68C0A5803A5D151A2B310A6" && var_17 != "_encstr_B33E0979A77828123F58A2" )
                {
                    var_9 = var_17;
                    var_10 = scripts\mp\utility\game::getotherteam( var_17 )[0];
                }
            }
        }

        level.bot_last_team_ally = var_9;
        level.bot_last_team_enemy = var_10;
        var_18 = scripts\mp\bots\bots_util::bot_get_team_limit();
        var_19 = scripts\mp\bots\bots_util::bot_get_team_limit();
        var_20 = scripts\mp\bots\bots_util::bot_get_client_limit();

        if ( var_18 + var_19 < var_20 )
        {
            if ( var_18 < var_2 )
                var_18++;
            else if ( var_19 < var_3 )
                var_19++;
        }

        var_21 = cat_array_get( var_11, "_encstr_A8C20871777217D8C361" + var_9 );
        var_22 = cat_array_get( var_11, "_encstr_A8C20871777217D8C361" + var_10 );
        var_23 = var_21 + var_22;
        var_24 = cat_array_get( var_11, "_encstr_A68C0A5803A5D151A2B310A6" );
        var_25 = 0;

        for ( var_26 = 0; var_24 > 0; var_24-- )
        {
            var_27 = var_21 + var_25 + 1 <= var_18;
            var_28 = var_22 + var_26 + 1 <= var_19;

            if ( var_27 && !var_28 )
            {
                var_25++;
                continue;
            }

            if ( !var_27 && var_28 )
            {
                var_26++;
                continue;
            }

            if ( var_27 && var_28 )
            {
                if ( var_24 % 2 == 1 )
                {
                    var_25++;
                    continue;
                }

                var_26++;
            }
        }

        var_29 = cat_array_get( var_11, "_encstr_BDB20641D56488B8" + var_9 );
        var_30 = cat_array_get( var_11, "_encstr_BDB20641D56488B8" + var_10 );
        var_31 = var_29 + var_30;

        if ( var_31 > 0 )
            level.bot_cm_spawned_bots = 1;

        var_32 = 0;

        if ( !level.bot_cm_human_picked )
        {
            var_32 = !bot_get_human_picked_team();

            if ( !var_32 )
                level.bot_cm_human_picked = 1;
        }

        if ( var_32 )
        {
            var_33 = !getdvarint( "_encstr_BE9C0BCC55174365D31941E829" );
            var_34 = var_3 != var_2;
            var_35 = !bot_get_human_picked_team() && !var_1 && var_34 && !level.bot_cm_spawned_bots && ( level.bot_cm_waited_players_time < 10 || !scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) );
            var_36 = 0;

            if ( var_33 || var_35 || var_36 )
            {
                level.bot_cm_waited_players_time = level.bot_cm_waited_players_time + var_0;
                scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_0 );
                continue;
            }
        }

        var_37 = int( min( var_18 - var_21 - var_25, var_2 ) );
        var_38 = int( min( var_19 - var_22 - var_26, var_3 ) );
        var_39 = 1;
        var_40 = var_37 + var_38 + var_12;
        var_41 = var_2 + var_3 + var_12;

        for ( var_42 = [ -1, -1 ]; var_40 < var_20 && var_40 < var_41; var_39 = !var_39 )
        {
            if ( var_39 && var_37 < var_2 && bot_can_join_team( var_9 ) )
                var_37++;
            else if ( !var_39 && var_38 < var_3 && bot_can_join_team( var_10 ) )
                var_38++;

            var_40 = var_37 + var_38 + var_12;

            if ( var_42[var_39] == var_40 )
                break;

            var_42[var_39] = var_40;
        }

        level.bot_max_players_on_team[var_9] = int( var_37 + var_21 + var_25 );
        level.bot_max_players_on_team[var_10] = int( var_38 + var_22 + var_26 );
        update_max_players_from_team_agents();

        if ( var_2 == var_3 && !var_1 && var_25 == 1 && var_26 == 0 && var_38 > 0 )
        {
            if ( !isdefined( level.bot_prematchdonetime ) && scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) )
                level.bot_prematchdonetime = gettime();

            if ( var_32 && ( !isdefined( level.bot_prematchdonetime ) || gettime() - level.bot_prematchdonetime < 10000 ) )
                var_38--;
        }

        var_44 = var_37 - var_29;
        var_45 = var_38 - var_30;
        var_46 = 1;

        if ( var_1 )
        {
            var_47 = var_18 + var_19;
            var_48 = var_2 + var_3;
            var_49 = var_21 + var_22;
            var_50 = var_29 + var_30;
            var_51 = int( min( var_47 - var_49, var_48 ) );
            var_52 = var_51 - var_50;

            if ( var_52 == 0 )
                var_46 = 0;
            else if ( var_52 > 0 )
            {
                var_44 = int( var_52 / 2 ) + var_52 % 2;
                var_45 = int( var_52 / 2 );
            }
            else if ( var_52 < 0 )
            {
                var_53 = var_52 * -1;
                var_44 = -1 * int( min( var_53, var_29 ) );
                var_45 = -1 * ( var_53 + var_44 );
            }
        }
        else if ( !scripts\mp\utility\game::matchmakinggame() && ( var_44 * var_45 < 0 && scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) && bot_allowed_to_switch_teams() ) )
        {
            var_54 = int( min( abs( var_44 ), abs( var_45 ) ) );

            if ( var_44 > 0 )
                move_bots_from_team_to_team( var_54, var_10, var_9, var_4 );
            else if ( var_45 > 0 )
                move_bots_from_team_to_team( var_54, var_9, var_10, var_5 );

            var_46 = 0;
        }

        if ( istrue( game["_encstr_87010E111E3823354DC251C560F3ED0A"] ) && istrue( level.launchchunkfreespawn ) )
        {
            var_45 = 2 - var_30;
            var_44 = 1 - var_29;
        }

        if ( var_46 )
        {
            if ( var_45 < 0 )
                drop_bots( var_45 * -1, var_10 );

            if ( var_44 < 0 )
                drop_bots( var_44 * -1, var_9 );

            if ( var_45 > 0 )
                level thread spawn_bots( var_45, var_10, undefined, undefined, "_encstr_8C0D10AF381EF808AF72C689FA87B1B0B793", var_5 );

            if ( var_44 > 0 )
                level thread spawn_bots( var_44, var_9, undefined, undefined, "_encstr_BAC50F9BA31F6F2D900997B10180B46FBE", var_4 );

            if ( var_45 > 0 && var_44 > 0 )
                level scripts\engine\utility::_id_1439F( "_encstr_8C0D10AF381EF808AF72C689FA87B1B0B793", "_encstr_BAC50F9BA31F6F2D900997B10180B46FBE" );
            else if ( var_45 > 0 )
                level waittill( "_encstr_8C0D10AF381EF808AF72C689FA87B1B0B793" );
            else if ( var_44 > 0 )
                level waittill( "_encstr_BAC50F9BA31F6F2D900997B10180B46FBE" );
        }

        if ( var_5 != var_4 )
        {
            bots_update_difficulty( var_10, var_5 );
            bots_update_difficulty( var_9, var_4 );
        }

        scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_0 );
    }
}

bot_monitor_team_limits()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_BC3B18C4B747D76B7B734B3ABDE4FAA359C25BEB1BD2B55AE8DC" );
    self endon( "_encstr_BC3B18C4B747D76B7B734B3ABDE4FAA359C25BEB1BD2B55AE8DC" );
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 0.5 );
    var_0 = 1.5;

    for (;;)
    {
        level.bot_max_players_on_team["_encstr_BC850785638DA59537"] = 0;
        level.bot_max_players_on_team["_encstr_BA840579D3F7F6"] = 0;

        foreach ( var_2 in level.players )
        {
            if ( isdefined( var_2.team ) && ( var_2.team == "_encstr_BC850785638DA59537" || var_2.team == "_encstr_BA840579D3F7F6" ) )
                level.bot_max_players_on_team[var_2.team]++;
        }

        update_max_players_from_team_agents();
        scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_0 );
    }
}

update_max_players_from_team_agents()
{
    if ( isdefined( level.agentarray ) )
    {
        foreach ( var_1 in level.agentarray )
        {
            if ( isdefined( var_1.isactive ) && var_1.isactive )
            {
                if ( scripts\mp\utility\entity::isteamparticipant( var_1 ) && isdefined( var_1.team ) && ( var_1.team == "_encstr_BC850785638DA59537" || var_1.team == "_encstr_BA840579D3F7F6" ) )
                    level.bot_max_players_on_team[var_1.team]++;
            }
        }
    }
}

bot_get_player_team()
{
    if ( isdefined( self.team ) )
        return self.team;

    if ( isdefined( self.pers["_encstr_89EF05D46BA8FD"] ) )
        return self.pers["_encstr_89EF05D46BA8FD"];

    return undefined;
}

bot_get_host_team()
{
    foreach ( var_1 in level.players )
    {
        if ( !isai( var_1 ) && var_1 ishost() )
            return var_1 bot_get_player_team();
    }

    return "_encstr_A68C0A5803A5D151A2B310A6";
}

bot_get_human_picked_team()
{
    var_0 = 0;
    var_1 = 0;
    var_2 = 0;

    foreach ( var_4 in level.players )
    {
        if ( !isai( var_4 ) )
        {
            if ( var_4 ishost() )
                var_0 = 1;

            if ( player_picked_team( var_4 ) )
            {
                var_1 = 1;

                if ( var_4 ishost() )
                    var_2 = 1;
            }
        }
    }

    return var_2 || var_1 && !var_0;
}

player_picked_team( var_0 )
{
    if ( isdefined( var_0.team ) && var_0.team != "_encstr_A68C0A5803A5D151A2B310A6" )
        return 1;

    if ( isdefined( var_0.spectating_actively ) && var_0.spectating_actively )
        return 1;

    if ( var_0 ismlgspectator() && isdefined( var_0.team ) && var_0.team == "_encstr_A68C0A5803A5D151A2B310A6" )
        return 1;

    return 0;
}

damageskipburndownlow()
{
    var_0 = 0;
    var_1 = 0;
    var_2 = 0;

    foreach ( var_4 in level.players )
    {
        if ( !isai( var_4 ) )
        {
            if ( var_4 ishost() )
                var_0 = 1;

            if ( isdefined( var_4.class ) )
            {
                var_1 = 1;

                if ( var_4 ishost() )
                    var_2 = 1;
            }
        }
    }

    return var_2 || var_1 && !var_0;
}

bot_client_counts()
{
    var_0 = [];

    for ( var_1 = 0; var_1 < level.players.size; var_1++ )
    {
        var_2 = level.players[var_1];

        if ( isdefined( var_2 ) && isdefined( var_2.team ) )
        {
            var_0 = cat_array_add( var_0, "_encstr_A61904730372" );
            var_0 = cat_array_add( var_0, var_2.team );

            if ( isbot( var_2 ) )
            {
                var_0 = cat_array_add( var_0, "_encstr_AD9B0595EF13EE" );
                var_0 = cat_array_add( var_0, "_encstr_BDB20641D56488B8" + var_2.team );
                continue;
            }

            var_0 = cat_array_add( var_0, "_encstr_AA4407CC7BB8B12A7E" );
            var_0 = cat_array_add( var_0, "_encstr_A8C20871777217D8C361" + var_2.team );
        }
    }

    return var_0;
}

cat_array_add( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = [];

    if ( !isdefined( var_0[var_1] ) )
        var_0[var_1] = 0;

    var_0[var_1] = var_0[var_1] + 1;
    return var_0;
}

cat_array_get( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    if ( !isdefined( var_0[var_1] ) )
        return 0;

    return var_0[var_1];
}

move_bots_from_team_to_team( var_0, var_1, var_2, var_3 )
{
    foreach ( var_5 in level.players )
    {
        if ( !isdefined( var_5.team ) )
            continue;

        if ( isdefined( var_5.connected ) && var_5.connected && isbot( var_5 ) && var_5.team == var_1 )
        {
            var_5.bot_team = var_2;

            if ( isdefined( var_3 ) )
                var_5 scripts\mp\bots\bots_util::bot_set_difficulty( var_3 );

            var_5 notify( "_encstr_8AEB10D3C848069A99C3E7D8365383C61158", "_encstr_9CAC0C0525C7E8F7920238485A6B", bot_lui_convert_team_to_int( var_2 ) );
            wait 0.05;
            var_5 notify( "_encstr_A4C617B1B70B19DEAB1DAF1BD858E69BBECDB21BCAB11DAC46", var_5.bot_class );
            var_0--;

            if ( var_0 <= 0 )
                break;
            else
                wait 0.1;
        }
    }
}

bots_update_difficulty( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        if ( !isdefined( var_3.team ) )
            continue;

        if ( isdefined( var_3.connected ) && var_3.connected && isbot( var_3 ) && var_3.team == var_0 )
        {
            if ( var_1 != var_3 botgetdifficulty() )
                var_3 scripts\mp\bots\bots_util::bot_set_difficulty( var_1 );
        }
    }
}

bot_drop()
{
    kick( self.entity_number, "_encstr_896D1DA20B515E419814B215945A528696A2447D90F4457D2428625072D0A2" );
    wait 0.1;
}

drop_bots( var_0, var_1 )
{
    var_2 = [];

    foreach ( var_4 in level.players )
    {
        if ( isdefined( var_4.connected ) && var_4.connected && isbot( var_4 ) && ( !isdefined( var_1 ) || isdefined( var_4.team ) && var_4.team == var_1 ) )
            var_2[var_2.size] = var_4;
    }

    for ( var_6 = var_2.size - 1; var_6 >= 0; var_6-- )
    {
        if ( var_0 <= 0 )
            break;

        if ( !var_2[var_6] scripts\cp_mp\utility\player_utility::_isalive() )
        {
            var_2[var_6] bot_drop();
            var_2 = scripts\engine\utility::array_remove( var_2, var_2[var_6] );
            var_0--;
        }
    }

    for ( var_6 = var_2.size - 1; var_6 >= 0; var_6-- )
    {
        if ( var_0 <= 0 )
            break;

        var_2[var_6] bot_drop();
        var_0--;
    }
}

bot_lui_convert_team_to_int( var_0 )
{
    if ( var_0 == "_encstr_BA840579D3F7F6" )
        return 0;
    else if ( var_0 == "_encstr_BC850785638DA59537" )
        return 1;
    else if ( var_0 == "_encstr_8B4B0B493B1C10DF43B753472B" || var_0 == "_encstr_AF120712EF90CB8D8B" )
        return 2;
    else
        return 3;
}

spawn_bot_latent( var_0, var_1, var_2 )
{
    var_3 = gettime() + 60000;

    while ( !self canspawnbotortestclient() )
    {
        if ( gettime() >= var_3 )
        {
            kick( self.entity_number, "_encstr_896D1DA20B515E419814B215945A528696A2447D90F4457D2428625072D0A2" );
            var_2.abort = 1;
            return;
        }

        wait 0.05;

        if ( !isdefined( self ) )
        {
            var_2.abort = 1;
            return;
        }
    }

    if ( !scripts\mp\bots\bots_util::dev_spawning_bots() )
    {
        var_4 = randomfloatrange( 0.25, 2.0 );
        scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_4 );
    }

    if ( !isdefined( self ) )
    {
        var_2.abort = 1;
        return;
    }

    self spawnbotortestclient();
    self.equipment_enabled = 1;
    self.bot_team = var_0;

    if ( isdefined( var_2.difficulty ) )
        scripts\mp\bots\bots_util::bot_set_difficulty( var_2.difficulty );

    if ( isdefined( var_1 ) )
        self [[ var_1 ]]();

    self thread [[ level.bot_funcs["_encstr_957206E843D2CDB5"] ]]();
    var_2.ready = 1;
}

spawn_bots( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = gettime() + 15000;
    var_7 = [];
    var_8 = var_7.size;

    while ( level.players.size < scripts\mp\bots\bots_util::bot_get_client_limit() && var_7.size < var_0 && gettime() < var_6 )
    {
        scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 0.05 );
        var_9 = undefined;

        if ( isbotmatchmakingenabled() )
        {
            if ( level.teambased )
                var_9 = addmpbottoteam( var_1 );
            else
                var_9 = addmpbottoteam( "_encstr_AABA05236DC831" );
        }
        else
            var_9 = addbot( "_encstr_A40101" );

        if ( !isdefined( var_9 ) )
        {
            if ( isdefined( var_3 ) && var_3 )
            {
                if ( isdefined( var_4 ) )
                    self notify( var_4 );

                return;
            }

            scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( 1 );
            continue;
        }
        else
        {
            var_10 = spawnstruct();
            var_10.bot = var_9;
            var_10.ready = 0;
            var_10.abort = 0;
            var_10.index = var_8;
            var_10.difficulty = var_5;
            var_7[var_7.size] = var_10;
            var_10.bot thread spawn_bot_latent( var_1, var_2, var_10 );
            var_8++;
        }
    }

    var_11 = 0;
    var_6 = gettime() + 60000;

    while ( var_11 < var_7.size && gettime() < var_6 )
    {
        var_11 = 0;

        foreach ( var_10 in var_7 )
        {
            if ( var_10.ready || var_10.abort )
                var_11++;
        }

        wait 0.05;
    }

    if ( isdefined( var_4 ) )
        self notify( var_4 );
}

bot_gametype_chooses_team()
{
    if ( scripts\mp\utility\game::matchmakinggame() && self.sessionteam != "_encstr_AABA05236DC831" )
        var_0 = 0;
    else if ( !scripts\mp\utility\game::matchmakinggame() && !scripts\mp\utility\game::denysystemicteamchoice() && scripts\mp\utility\game::doesmodesupportplayerteamchoice() )
        var_0 = 1;
    else
        var_0 = 0;

    return !var_0;
}

bot_gametype_chooses_class()
{
    return istrue( level.bots_gametype_handles_class_choice );
}

bot_is_ready_to_spawn()
{
    if ( !isdefined( self.classcallback ) )
    {
        if ( !bot_gametype_chooses_class() )
            return 0;
    }

    return 1;
}

bot_think()
{
    self notify( "_encstr_B6510AF3A74D81042848C58C" );
    self endon( "_encstr_B6510AF3A74D81042848C58C" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    while ( !isdefined( self.pers["_encstr_89EF05D46BA8FD"] ) )
        wait 0.05;

    level.hasbots = 1;

    if ( bot_gametype_chooses_team() )
        self.bot_team = self.pers["_encstr_89EF05D46BA8FD"];

    var_0 = self.bot_team;

    if ( !isdefined( var_0 ) )
        var_0 = self.pers["_encstr_89EF05D46BA8FD"];

    self.entity_number = self getentitynumber();
    var_1 = 0;

    if ( !isdefined( self.debug_ai_aggro ) )
    {
        var_1 = 1;
        self.debug_ai_aggro = 1;

        if ( !bot_gametype_chooses_team() )
        {
            var_2 = self.pers["_encstr_89EF05D46BA8FD"] != "_encstr_A68C0A5803A5D151A2B310A6" && !isdefined( self.bot_team );

            if ( !var_2 )
            {
                var_3 = isdefined( self.bot_team ) && self.bot_team != self.pers["_encstr_89EF05D46BA8FD"];

                if ( var_3 )
                    self notify( "_encstr_8AEB10D3C848069A99C3E7D8365383C61158", "_encstr_9CAC0C0525C7E8F7920238485A6B", bot_lui_convert_team_to_int( var_0 ) );

                wait 0.5;

                if ( self.pers["_encstr_89EF05D46BA8FD"] == "_encstr_A68C0A5803A5D151A2B310A6" )
                {
                    bot_drop();
                    return;
                }
            }
        }
    }

    for (;;)
    {
        scripts\mp\bots\bots_util::bot_set_difficulty( self botgetdifficulty() );
        self.difficulty = self botgetdifficulty();
        var_4 = self botgetdifficultysetting( "_encstr_9371141FB853C1426F1DAFAA7535EB873808A387906A" );

        if ( var_1 && isdefined( var_4 ) && var_4 != 0 )
            scripts\mp\bots\bots_personality::bot_balance_personality();

        scripts\mp\bots\bots_personality::bot_assign_personality_functions();

        if ( var_1 )
        {
            if ( isdefined( level.bot_funcs ) && isdefined( level.bot_funcs["_encstr_B740163F507A239B76B3171DD0378CAFBF568F2876F24DA5"] ) )
                self [[ level.bot_funcs["_encstr_B740163F507A239B76B3171DD0378CAFBF568F2876F24DA5"] ]]();
            else
            {
                bot_set_loadout_class();

                if ( !bot_gametype_chooses_class() )
                {
                    if ( isdefined( self.connecttime ) && self.connecttime == gettime() )
                    {
                        waittillframeend;
                        waittillframeend;
                    }

                    self notify( "_encstr_A4C617B1B70B19DEAB1DAF1BD858E69BBECDB21BCAB11DAC46", self.bot_class );
                }
            }

            if ( self.health == 0 )
            {
                self.bwaitingforteamselect = 1;
                self notify( "_encstr_B7EA13159863F9E22A8E291711A3D840B2B84ECCC0" );
                self waittill( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
                self.bwaitingforteamselect = undefined;
                self.bot_team = var_0;
            }

            if ( isdefined( level.bot_funcs ) && isdefined( level.bot_funcs["_encstr_9E2F16DCF84770C743AB48F59B753BC07AA86E23FBB16B30"] ) )
                self thread [[ level.bot_funcs["_encstr_9E2F16DCF84770C743AB48F59B753BC07AA86E23FBB16B30"] ]]();

            var_1 = 0;
        }

        scripts\mp\bots\bots_loadout::deactive_trophy_protection();
        dead_target_count();
        bot_restart_think_threads();
        wait 0.1;
        self waittill( "_encstr_A3750609A5E61883" );

        if ( isdefined( level.bot_funcs ) && isdefined( level.bot_funcs["_encstr_9CC41083B79BA3D7322B0BE80DEB99AEDCC6"] ) )
            self [[ level.bot_funcs["_encstr_9CC41083B79BA3D7322B0BE80DEB99AEDCC6"] ]]();

        respawn_watcher();
        self waittill( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    }
}

dead_target_count()
{
    if ( scripts\mp\tweakables::gettweakablevalue( "_encstr_A47205E8C28D13", "_encstr_8AEF0EDF10E811EABBC7675ABB47E3C3" ) )
        self botsetflag( "_encstr_94290FF6CD36F27DD0565832B9A1BDA36E", 1 );
}

respawn_watcher()
{
    self endon( "_encstr_8F1614200C576863C761B17F2817CB5549E902CA9D42" );

    while ( !self.waitingtospawn )
        wait 0.05;

    if ( scripts\mp\playerlogic::needsbuttontorespawn() )
    {
        while ( self.waitingtospawn )
        {
            if ( self.sessionstate == "_encstr_A68C0A5803A5D151A2B310A6" )
            {
                if ( getdvarint( "_encstr_87AE09780B0509AAF3D7EE" ) == 0 || self.pers["_encstr_A2AA0636969D2BE6"] > 0 )
                    self botpressbutton( "_encstr_971904D5B9B2", 0.5 );
            }

            wait 1.0;
        }
    }
}

bot_get_rank_xp()
{
    if ( scripts\mp\bots\bots_util::bot_israndom() == 0 )
    {
        if ( !isdefined( self.pers["_encstr_B6120728AA2517CA0B"] ) )
            self.pers["_encstr_B6120728AA2517CA0B"] = 0;

        return self.pers["_encstr_B6120728AA2517CA0B"];
    }

    var_0 = self botgetdifficulty();
    var_1 = "_encstr_AD340A6238A9E9F31918437F" + var_0;

    if ( isdefined( self.pers[var_1] ) && self.pers[var_1] > 0 )
        return self.pers[var_1];

    var_2 = bot_random_ranks_for_difficulty( var_0 );
    var_3 = var_2["_encstr_B11F058340803B"];
    var_4 = var_2["_encstr_A9ED09C127CAB9472DCEB2"];
    var_5 = scripts\mp\rank::getrankinfominxp( var_3 );
    var_6 = var_5 + scripts\mp\rank::getrankinfoxpamt( var_3 );
    var_7 = randomintrange( var_5, var_6 + 1 );
    self.pers[var_1] = var_7;
    return var_7;
}

bot_3d_sighting_model( var_0 )
{
    thread bot_3d_sighting_model_thread( var_0 );
}

bot_3d_sighting_model_thread( var_0 )
{
    var_0 endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        if ( isalive( self ) && !self botcanseeentity( var_0 ) && scripts\engine\utility::within_fov( self.origin, self getplayerangles(), var_0.origin, self botgetfovdot() ) )
            self botgetimperfectenemyinfo( var_0, var_0.origin );

        wait 0.1;
    }
}

bot_random_ranks_for_difficulty( var_0 )
{
    var_1 = [];
    var_1["_encstr_B11F058340803B"] = 0;
    var_1["_encstr_A9ED09C127CAB9472DCEB2"] = 0;

    if ( var_0 == "_encstr_AA1608C07786F13312D3" )
        return var_1;

    if ( !isdefined( level.bot_rnd_rank ) )
    {
        level.bot_rnd_rank = [];
        level.bot_rnd_rank["_encstr_809F08AA0ABB23B33B63"][0] = 0;
        level.bot_rnd_rank["_encstr_809F08AA0ABB23B33B63"][1] = 1;
        level.bot_rnd_rank["_encstr_B230080577925D88916A"][0] = 3;
        level.bot_rnd_rank["_encstr_B230080577925D88916A"][1] = 18;
        level.bot_rnd_rank["_encstr_9BD4090B6B9EE2C5E83997"][0] = 22;
        level.bot_rnd_rank["_encstr_9BD4090B6B9EE2C5E83997"][1] = 38;
        level.bot_rnd_rank["_encstr_98AF0873B92D8F8228F5"][0] = 40;
        level.bot_rnd_rank["_encstr_98AF0873B92D8F8228F5"][1] = 54;
    }

    if ( !isdefined( level.bot_rnd_prestige ) )
    {
        level.bot_rnd_prestige = [];
        level.bot_rnd_prestige["_encstr_809F08AA0ABB23B33B63"][0] = 0;
        level.bot_rnd_prestige["_encstr_809F08AA0ABB23B33B63"][1] = 0;
        level.bot_rnd_prestige["_encstr_B230080577925D88916A"][0] = 0;
        level.bot_rnd_prestige["_encstr_B230080577925D88916A"][1] = 0;
        level.bot_rnd_prestige["_encstr_9BD4090B6B9EE2C5E83997"][0] = 0;
        level.bot_rnd_prestige["_encstr_9BD4090B6B9EE2C5E83997"][1] = 0;
        level.bot_rnd_prestige["_encstr_98AF0873B92D8F8228F5"][0] = 0;
        level.bot_rnd_prestige["_encstr_98AF0873B92D8F8228F5"][1] = 9;
    }

    var_1["_encstr_B11F058340803B"] = randomintrange( level.bot_rnd_rank[var_0][0], level.bot_rnd_rank[var_0][1] + 1 );
    var_1["_encstr_A9ED09C127CAB9472DCEB2"] = randomintrange( level.bot_rnd_prestige[var_0][0], level.bot_rnd_prestige[var_0][1] + 1 );
    return var_1;
}

crate_can_use_always( var_0 )
{
    if ( isagent( self ) && !isdefined( var_0.boxtype ) )
        return 0;

    if ( isdefined( var_0.cratetype ) && !scripts\mp\bots\bots_killstreaks::bot_is_killstreak_supported( var_0.cratetype ) )
        return 0;

    return 1;
}

get_human_player()
{
    var_0 = undefined;
    var_1 = getentarray( "_encstr_AAB0079B102F47FF38", "_encstr_B9110A36362C3737732CDA59" );

    if ( isdefined( var_1 ) )
    {
        for ( var_2 = 0; var_2 < var_1.size; var_2++ )
        {
            if ( isdefined( var_1[var_2] ) && isdefined( var_1[var_2].connected ) && var_1[var_2].connected && !isai( var_1[var_2] ) && ( !isdefined( var_0 ) || var_0.team == "_encstr_A68C0A5803A5D151A2B310A6" ) )
                var_0 = var_1[var_2];
        }
    }

    return var_0;
}

bot_damage_callback( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( self ) || !isalive( self ) )
        return;

    if ( var_2 == "_encstr_8FA10CBC37F487A99F9C0DE438C7" || var_2 == "_encstr_97590CFD0825D7720BD1A018A1F3" )
        return;

    if ( var_1 <= 0 )
        return;

    if ( !isdefined( var_4 ) )
    {
        if ( !isdefined( var_0 ) )
            return;

        var_4 = var_0;
    }

    if ( isdefined( var_4 ) )
    {
        if ( isdefined( self.fnbotdamagecallback ) )
            self [[ self.fnbotdamagecallback ]]( var_0, var_1, var_2, var_3, var_4, var_5 );

        if ( level.teambased )
        {
            if ( isdefined( var_4.team ) && var_4.team == self.team )
                return;
            else if ( isdefined( var_0 ) && isdefined( var_0.team ) && var_0.team == self.team )
                return;
        }

        var_6 = scripts\mp\bots\bots_util::bot_get_known_attacker( var_0, var_4 );

        if ( isdefined( var_6 ) )
            self botsetattacker( var_6 );
    }

    if ( isagent( self ) )
        self notify( "_encstr_89C40CC671B0F6D3AD4B37FFBFD5" );
}

on_bot_killed( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    self botclearscriptenemy();
    self botclearscriptgoal();
    var_10 = scripts\mp\bots\bots_util::bot_get_known_attacker( var_1, var_0 );

    if ( isdefined( var_10 ) && ( var_10.classname == "_encstr_AB440F9BD8932D071DAFB3CA435A3663B2" || var_10.classname == "_encstr_93DC0DCD1B272D3847AF5BED23B2C6" ) && isdefined( var_10.helitype ) )
    {
        var_11 = self botgetdifficultysetting( "_encstr_87E216FA1185FB9E089B2A32A3E8620F2C688042F9D07757" );

        if ( randomfloat( 1.0 ) < var_11 )
            self.respawn_with_launcher = 1;
    }
}

bot_should_do_killcam()
{
    if ( istrue( game["_encstr_87010E111E3823354DC251C560F3ED0A"] ) )
        return 1;

    var_5 = 0.0;
    var_6 = self botgetdifficulty();

    if ( var_6 == "_encstr_809F08AA0ABB23B33B63" )
        var_5 = 0.1;
    else if ( var_6 == "_encstr_B230080577925D88916A" )
        var_5 = 0.4;
    else if ( var_6 == "_encstr_9BD4090B6B9EE2C5E83997" )
        var_5 = 0.7;
    else if ( var_6 == "_encstr_98AF0873B92D8F8228F5" )
        var_5 = 1.0;

    return randomfloat( 1.0 ) < 1.0 - var_5;
}

bot_should_pickup_weapons()
{
    return 1;
}

bot_restart_think_threads()
{
    self thread [[ level.bot_funcs["_encstr_8AA21620C22B87B3E32178E23FB75969561A51902A872B2A"] ]]();
    self thread [[ level.bot_funcs["_encstr_AD8419DD770BE935AB923098193367D0A3D96753ECB960F0B7DA6B"] ]]();
    self thread [[ level.bot_funcs["_encstr_974515E14BD75FE0073CEFA7256EA8A8ABF17BE8427B1A"] ]]();
    self thread [[ level.bot_funcs["_encstr_BCEC0D1A2930E91BC5CFBBC38B78F2"] ]]();
    thread bot_think_crate();
    thread bot_think_crate_blocking_path();
    thread scripts\mp\bots\bots_killstreaks::bot_think_killstreak();
    thread scripts\mp\bots\bots_killstreaks::bot_think_watch_aerial_killstreak();
    thread bot_think_gametype();
    thread bot_think_dynamic_doors();
    thread bot_think_nvg();
}

sortdoorsbydistance( var_0, var_1 )
{
    return distancesquared( var_0.origin, self.closestdoorpos ) < distancesquared( var_1.origin, self.closestdoorpos );
}

bot_think_dynamic_doors()
{
    self notify( "_encstr_98AE1832F82D670360FB5E53FF6808DBDFD01AAA468D6F3D68F7" );
    self endon( "_encstr_98AE1832F82D670360FB5E53FF6808DBDFD01AAA468D6F3D68F7" );
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        var_0 = self getmodifierlocationonpath( "_encstr_9C6705A90F85C8", 64 );

        if ( isdefined( var_0 ) )
        {
            self.closestdoorpos = var_0;
            var_1 = getentarrayinradius( "_encstr_B44E0D113F3A6F8881361E71DD7F88", "_encstr_B8CE0BE43FC317DF690862BA48", var_0, 64 );

            if ( var_1.size > 0 )
            {
                var_1 = scripts\engine\utility::array_sort_with_func( var_1, ::sortdoorsbydistance );
                var_2 = var_1[0];

                if ( isdefined( var_2.state ) && var_2 scripts\mp\door::door_can_open_check() )
                    var_2 thread scripts\mp\door::cheapopen( self );
            }

            self.closestdoorpos = undefined;
        }

        wait 0.05;
    }
}

bot_think_nvg()
{
    self notify( "_encstr_A4CE0EE9527330388CF9555727F5D0E4" );
    self endon( "_encstr_A4CE0EE9527330388CF9555727F5D0E4" );
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 = scripts\cp_mp\utility\game_utility::isnightmap();

    for (;;)
    {
        var_1 = 0;
        var_2 = 0;

        if ( isdefined( level.bot_light_volumes ) )
        {
            foreach ( var_4 in level.bot_light_volumes )
            {
                if ( self istouching( var_4 ) )
                {
                    var_2 = 1;
                    break;
                }
            }
        }

        if ( isdefined( level.bot_dark_volumes ) )
        {
            foreach ( var_4 in level.bot_dark_volumes )
            {
                if ( self istouching( var_4 ) )
                {
                    var_1 = 1;
                    break;
                }
            }
        }

        if ( istrue( self.inmotionlight ) )
            var_2 = 1;

        if ( var_1 || var_0 && !var_2 )
        {
            self botsetflag( "_encstr_8B1D0A192C27ADEB1627560B", 1 );
            self.indarkarea = 1;
        }
        else if ( !var_1 && istrue( self.indarkarea ) )
        {
            self botsetflag( "_encstr_8B1D0A192C27ADEB1627560B", 0 );
            self.indarkarea = 0;
        }

        wait 0.25;
    }
}

bot_think_watch_enemy( var_0 )
{
    var_1 = "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C";

    if ( isdefined( var_0 ) && var_0 )
        var_1 = "_encstr_A3750609A5E61883";

    self notify( "_encstr_8AA21620C22B87B3E32178E23FB75969561A51902A872B2A" );
    self endon( "_encstr_8AA21620C22B87B3E32178E23FB75969561A51902A872B2A" );
    self endon( var_1 );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.last_enemy_sight_time = 0;

    for (;;)
    {
        if ( isdefined( self.enemy ) )
        {
            if ( self botcanseeentity( self.enemy ) )
                self.last_enemy_sight_time = gettime();
        }

        wait 0.05;
    }
}

bot_think_seek_dropped_weapons()
{
    self notify( "_encstr_BEF81F1DB7CB29F56B5270D8596F25A0A42FA9B52F3298B563292B0182BBE830FA" );
    self endon( "_encstr_BEF81F1DB7CB29F56B5270D8596F25A0A42FA9B52F3298B563292B0182BBE830FA" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 = "_encstr_89F511713BBB2818C13559D05DB9E85501B7F1";

    for (;;)
    {
        var_1 = 0;

        if ( scripts\mp\bots\bots_util::damagestatedata( 0.33 ) )
        {
            if ( self [[ level.bot_funcs["_encstr_935216AE70A7B3F93FD9B0707294B36B0FF73D2FC07F180F"] ]]() && !scripts\mp\bots\bots_util::bot_is_remote_or_linked() )
            {
                var_2 = getentarray( "_encstr_A3580F88A8B0D79B791DD11355BBE04FB3", "_encstr_B8CE0BE43FC317DF690862BA48" );
                var_3 = scripts\engine\utility::get_array_of_closest( self.origin, var_2 );

                if ( var_3.size > 0 )
                {
                    var_4 = var_3[0];
                    bot_seek_dropped_weapon( var_4 );
                }
            }
        }

        if ( !scripts\mp\bots\bots_util::bot_in_combat() && !scripts\mp\bots\bots_util::bot_is_remote_or_linked() && self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" ) > 0 )
        {
            var_5 = self hasweapon( var_0 );
            var_6 = var_5 && self getammocount( var_0 ) == 0;

            if ( var_6 )
            {
                if ( isdefined( self.going_for_knife ) )
                {
                    wait 5.0;
                    continue;
                }

                var_7 = getentarray( "_encstr_AAB40E39965F09B07501F182A8FB5015", "_encstr_B8CE0BE43FC317DF690862BA48" );
                var_8 = scripts\engine\utility::get_array_of_closest( self.origin, var_7 );

                foreach ( var_10 in var_8 )
                {
                    if ( !isdefined( var_10 ) )
                        continue;

                    if ( !isdefined( var_10.calculated_closest_point ) )
                    {
                        var_11 = scripts\mp\bots\bots_util::bot_queued_process( "_encstr_BDD91CEE90D83F2255EFD3E7B7F50B4451399BAC09D8A26A2521D7F7E525", scripts\mp\bots\bots_util::func_bot_get_closest_navigable_point, var_10.origin, 32, self );

                        if ( isdefined( var_10 ) )
                        {
                            var_10.closest_point_on_grid = var_11;
                            var_10.calculated_closest_point = 1;
                        }
                        else
                            continue;
                    }

                    if ( isdefined( var_10.closest_point_on_grid ) )
                    {
                        self.going_for_knife = 1;
                        bot_seek_dropped_weapon( var_10 );
                    }
                }
            }
            else if ( var_5 )
                self.going_for_knife = undefined;
        }

        wait( randomfloatrange( 0.25, 0.75 ) );
    }
}

bot_seek_dropped_weapon( var_0 )
{
    if ( scripts\mp\bots\bots_strategy::bot_has_tactical_goal( "_encstr_9508140F0B0D0AE790E37D829BA0E481DC93CFFBF720", var_0 ) == 0 )
    {
        var_1 = undefined;

        if ( var_0.targetname == "_encstr_A3580F88A8B0D79B791DD11355BBE04FB3" )
        {
            var_2 = 1;
            var_3 = self getweaponslistprimaries();

            foreach ( var_5 in var_3 )
            {
                if ( var_0.model == getweaponmodel( var_5 ) )
                    var_2 = 0;
            }

            if ( var_2 )
                var_1 = ::bot_pickup_weapon;
        }

        var_7 = spawnstruct();
        var_7.object = var_0;
        var_7.script_goal_radius = 12;
        var_7.should_abort = level.bot_funcs["_encstr_BA6C16E9EBD21FA8552FD6AB1739E0D89AF75F6B03FA6D90"];
        var_7.action_thread = var_1;
        scripts\mp\bots\bots_strategy::bot_new_tactical_goal( "_encstr_9508140F0B0D0AE790E37D829BA0E481DC93CFFBF720", var_0.origin, 100, var_7 );
    }
}

bot_pickup_weapon( var_0 )
{
    self botpressbutton( "_encstr_971904D5B9B2", 2 );
    wait 2;
}

should_stop_seeking_weapon( var_0 )
{
    if ( !isdefined( var_0.object ) )
        return 1;

    if ( var_0.object.targetname == "_encstr_A3580F88A8B0D79B791DD11355BBE04FB3" )
    {
        if ( scripts\mp\bots\bots_util::bot_get_total_gun_ammo() > 0 )
            return 1;
    }
    else if ( var_0.object.targetname == "_encstr_AAB40E39965F09B07501F182A8FB5015" )
    {
        if ( scripts\mp\bots\bots_util::bot_in_combat() )
        {
            self.going_for_knife = undefined;
            return 1;
        }
    }

    return 0;
}

crate_in_range( var_0 )
{
    if ( !isdefined( var_0.owner ) || var_0.owner != self )
    {
        if ( distancesquared( self.origin, var_0.origin ) > 4194304 )
            return 0;
    }

    return 1;
}

bot_crate_valid( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = self [[ level.bot_funcs["_encstr_94EB0E1B270B3AB2BED80BB97DBA3756"] ]]( var_0 );

    if ( !var_1 )
    {
        if ( scripts\mp\utility\game::getgametype() == "_encstr_BC7205C8ABFDE7" )
            var_1 = 1;
    }

    if ( !var_1 )
        return 0;

    if ( !crate_landed_and_on_path_grid( var_0 ) )
        return 0;

    if ( level.teambased && isdefined( var_0.bomb ) && isdefined( var_0.team ) && var_0.team == self.team )
        return 0;

    if ( !self [[ level.bot_funcs["_encstr_BD430F6E60DE54058F537D611BF15BBF0A"] ]]( var_0 ) )
        return 0;

    if ( !isdefined( level.bot_can_use_box_by_type ) )
        return 0;

    if ( isdefined( var_0.boxtype ) )
    {
        if ( isdefined( level.boxsettings ) && isdefined( level.boxsettings[var_0.boxtype] ) && ![[ level.boxsettings[var_0.boxtype].canusecallback ]]() )
            return 0;

        if ( isdefined( var_0.disabled_use_for ) && isdefined( var_0.disabled_use_for[self getentitynumber()] ) && var_0.disabled_use_for[self getentitynumber()] )
            return 0;

        if ( !self [[ level.bot_can_use_box_by_type[var_0.boxtype] ]]( var_0 ) )
            return 0;
    }
    else if ( datakey( var_0 ) )
        return 0;

    return isdefined( var_0 );
}

datakey( var_0 )
{
    return 0;
}

crate_landed_and_on_path_grid( var_0 )
{
    if ( !crate_has_landed( var_0 ) )
        return 0;

    if ( !crate_is_on_path_grid( var_0 ) )
        return 0;

    return isdefined( var_0 );
}

crate_has_landed( var_0 )
{
    if ( isdefined( var_0.boxtype ) )
        return gettime() > var_0.birthtime + 1000;
    else
        return isdefined( var_0.droppingtoground ) && !var_0.droppingtoground;
}

crate_is_on_path_grid( var_0 )
{
    if ( !isdefined( var_0.on_path_grid ) )
        crate_calculate_on_path_grid( var_0 );

    return isdefined( var_0 ) && var_0.on_path_grid;
}

node_within_use_radius_of_crate( var_0, var_1 )
{
    if ( isdefined( var_1.boxtype ) && var_1.boxtype == "_encstr_BD7F0E8B3FF0639730E1423BCE1EBF9F" )
        return abs( var_0.origin[0] - var_1.origin[0] ) < 36 && abs( var_0.origin[0] - var_1.origin[0] ) < 36 && abs( var_0.origin[0] - var_1.origin[0] ) < 18;
    else
    {
        var_2 = getdvarfloat( "_encstr_B4AE0BD42A9E8AA8D2B4921435" );
        var_3 = distancesquared( var_1.origin, var_0.origin + ( 0, 0, 40 ) );
        return var_3 <= var_2 * var_2;
    }
}

crate_calculate_on_path_grid( var_0 )
{
    var_0 thread crate_monitor_position();
    var_0.on_path_grid = 0;
    var_1 = undefined;
    var_2 = undefined;

    if ( isdefined( var_0.forcedisconnectuntil ) )
    {
        var_1 = var_0.forcedisconnectuntil;
        var_2 = gettime() + 30000;
        var_0.forcedisconnectuntil = var_2;
        var_0 notify( "_encstr_BD1510E0588E867D324BB98DDBCD9BACC6E8" );
    }

    wait 0.05;

    if ( !isdefined( var_0 ) )
        return;

    var_3 = crate_get_nearest_valid_nodes( var_0 );

    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_3 ) && var_3.size > 0 )
    {
        var_0.nearest_nodes = var_3;
        var_0.on_path_grid = 1;
    }
    else
    {
        var_4 = getdvarfloat( "_encstr_B4AE0BD42A9E8AA8D2B4921435" );
        var_5 = getnodesinradiussorted( var_0.origin, var_4 * 2, 0 )[0];
        var_6 = var_0 getpointinbounds( 0, 0, -1 );
        var_7 = undefined;

        if ( isdefined( var_0.boxtype ) && var_0.boxtype == "_encstr_BD7F0E8B3FF0639730E1423BCE1EBF9F" )
        {
            if ( scripts\mp\bots\bots_util::bot_point_is_on_pathgrid( var_0.origin, var_4 ) )
                var_7 = var_0.origin;
        }
        else
            var_7 = botgetclosestnavigablepoint( var_0.origin, var_4 );

        if ( isdefined( var_5 ) && !var_5 nodeisdisconnected() && isdefined( var_7 ) && abs( var_5.origin[2] - var_6[2] ) < 30 )
        {
            var_0.nearest_points = [ var_7 ];
            var_0.nearest_nodes = [ var_5 ];
            var_0.on_path_grid = 1;
        }
    }

    if ( isdefined( var_0.forcedisconnectuntil ) )
    {
        if ( var_0.forcedisconnectuntil == var_2 )
            var_0.forcedisconnectuntil = var_1;
    }
}

crate_get_nearest_valid_nodes( var_0 )
{
    var_1 = getnodesinradiussorted( var_0.origin, 256, 0 );

    for ( var_2 = var_1.size; var_2 > 0; var_2-- )
        var_1[var_2] = var_1[var_2 - 1];

    var_1[0] = getclosestnodeinsight( var_0.origin );
    var_3 = undefined;

    if ( isdefined( var_0.forcedisconnectuntil ) )
        var_3 = getsentientcounts();

    var_4 = [];
    var_5 = 1;

    if ( !isdefined( var_0.boxtype ) )
        var_5 = 2;

    for ( var_2 = 0; var_2 < var_1.size; var_2++ )
    {
        var_6 = var_1[var_2];

        if ( !isdefined( var_6 ) || !isdefined( var_0 ) )
            continue;

        if ( var_6 nodeisdisconnected() )
            continue;

        if ( !node_within_use_radius_of_crate( var_6, var_0 ) )
        {
            if ( var_2 == 0 )
                continue;
            else
                break;
        }

        wait 0.05;

        if ( !isdefined( var_0 ) )
            break;

        if ( sighttracepassed( var_0.origin, var_6.origin + ( 0, 0, 55 ), 0, var_0 ) )
        {
            wait 0.05;

            if ( !isdefined( var_0 ) )
                break;

            if ( !isdefined( var_0.forcedisconnectuntil ) )
            {
                var_4[var_4.size] = var_6;

                if ( var_4.size == var_5 )
                    return var_4;
                else
                    continue;
            }

            var_7 = undefined;
            var_8 = 0;

            while ( !isdefined( var_7 ) && var_8 < 100 )
            {
                var_8++;
                var_9 = randomint( var_3 );
                var_10 = nvidiahighlightsrequestpermissions( var_9 );

                if ( isdefined( var_10 ) && distancesquared( var_6.origin, var_10.origin ) > 250000 )
                    var_7 = var_10;
            }

            if ( isdefined( var_7 ) )
            {
                var_11 = scripts\mp\bots\bots_util::bot_queued_process( "_encstr_877C14E8AC1D72F691566E9EB9412CD143A127C23A95", scripts\mp\bots\bots_util::func_get_nodes_on_path, var_6.origin, var_7.origin );

                if ( isdefined( var_11 ) )
                {
                    var_4[var_4.size] = var_6;

                    if ( var_4.size == var_5 )
                        return var_4;
                    else
                        continue;
                }
            }
        }
    }

    return undefined;
}

crate_get_bot_target( var_0 )
{
    if ( isdefined( var_0.nearest_points ) )
        return var_0.nearest_points[0];

    if ( isdefined( var_0.nearest_nodes ) && var_0.nearest_nodes.size > 0 )
    {
        if ( var_0.nearest_nodes.size > 1 )
        {
            var_1 = scripts\engine\utility::array_reverse( self botnodescoremultiple( var_0.nearest_nodes, "_encstr_B2D70DB032DF032647A0E750836F89" ) );
            return scripts\engine\utility::random_weight_sorted( var_1 ).origin;
        }
        else
            return var_0.nearest_nodes[0].origin;
    }
}

crate_get_bot_target_check_distance( var_0, var_1 )
{
    var_2 = crate_get_bot_target( var_0 );
    var_2 = getclosestpointonnavmesh( var_2, self );
    var_3 = var_1 * 0.9;
    var_3 = var_3 * var_3;

    if ( distancesquared( var_0.origin, var_2 ) <= var_3 )
        return var_2;
    else
        return undefined;
}

bot_think_crate()
{
    self notify( "_encstr_B12C108A4095CFABF813A6BB67F8727F3DB9" );
    self endon( "_encstr_B12C108A4095CFABF813A6BB67F8727F3DB9" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 = getdvarfloat( "_encstr_B4AE0BD42A9E8AA8D2B4921435" );

    for (;;)
    {
        var_1 = randomfloatrange( 2, 4 );
        scripts\engine\utility::waittill_notify_or_timeout( "_encstr_9EFF12E80FEF7E57ABDE45C5B92387A634B77838", var_1 );

        if ( isdefined( self.boxes ) && self.boxes.size == 0 )
            self.boxes = undefined;

        var_2 = level.carepackages;

        if ( !scripts\mp\bots\bots_util::bot_in_combat() && isdefined( self.boxes ) )
            var_2 = scripts\engine\utility::array_combine( var_2, self.boxes );

        if ( isdefined( level.bot_scavenger_bags ) && scripts\mp\utility\perk::_hasperk( "_encstr_9E57146EE0B21BA50B36A3BCD76EB1C23B5637765993" ) )
            var_2 = scripts\engine\utility::array_combine( var_2, level.bot_scavenger_bags );

        var_2 = scripts\engine\utility::array_removeundefined( var_2 );

        if ( var_2.size == 0 )
            continue;

        if ( scripts\mp\bots\bots_strategy::bot_has_tactical_goal( "_encstr_A4DA0E19A2FB1DB8FD50A7D77AA65055" ) || self botgetscriptgoaltype() == "_encstr_94C2099887BA24607BE134" || scripts\mp\bots\bots_util::bot_is_remote_or_linked() )
            continue;

        var_3 = [];

        foreach ( var_5 in var_2 )
        {
            if ( bot_crate_valid( var_5 ) )
                var_3[var_3.size] = var_5;
        }

        var_3 = scripts\engine\utility::array_remove_duplicates( var_3 );

        if ( var_3.size == 0 )
            continue;

        var_3 = scripts\engine\utility::get_array_of_closest( self.origin, var_3 );
        var_7 = self getnearestnode();

        if ( !isdefined( var_7 ) )
            continue;

        var_8 = self [[ level.bot_funcs["_encstr_A1C9159F4537AB69F7E3B78BA9B07DC97B389FA0806FC3"] ]]();
        var_9 = ( var_8 || randomint( 100 ) < 50 ) && !scripts\cp_mp\emp_debuff::is_empd();
        var_10 = undefined;

        foreach ( var_5 in var_3 )
        {
            var_12 = 0;

            if ( ( !isdefined( var_5.owner ) || var_5.owner != self ) && !isdefined( var_5.boxtype ) )
            {
                var_13 = [];

                foreach ( var_15 in level.players )
                {
                    if ( !isdefined( var_15.team ) )
                        continue;

                    if ( !isai( var_15 ) && level.teambased && var_15.team == self.team )
                    {
                        if ( distancesquared( var_15.origin, var_5.origin ) < 490000 )
                            var_13[var_13.size] = var_15;
                    }
                }

                if ( var_13.size > 0 )
                {
                    var_17 = var_13[0] getnearestnode();

                    if ( isdefined( var_17 ) )
                    {
                        var_12 = 0;

                        foreach ( var_19 in var_5.nearest_nodes )
                            var_12 = var_12 | nodesvisible( var_17, var_19, 1 );
                    }
                }
            }

            if ( !var_12 )
            {
                var_21 = isdefined( var_5.bots ) && isdefined( var_5.bots[self.team] ) && var_5.bots[self.team] > 0;
                var_22 = 0;

                foreach ( var_19 in var_5.nearest_nodes )
                    var_22 = var_22 | nodesvisible( var_7, var_19, 1 );

                if ( var_22 || var_9 && !var_21 )
                {
                    var_10 = var_5;
                    break;
                }
            }
        }

        if ( isdefined( var_10 ) )
        {
            if ( self [[ level.bot_funcs["_encstr_B8A713C627C24759D7DC0DDBEAB123D7C6D82C5AD6"] ]]() )
            {
                if ( !isdefined( var_10.boxtype ) )
                {
                    if ( !isdefined( var_10.bots ) )
                        var_10.bots = [];

                    var_10.bots[self.team] = 1;
                }
            }

            var_26 = spawnstruct();
            var_26.object = var_10;
            var_26.start_thread = ::watch_bot_died_during_crate;
            var_26.should_abort = ::crate_picked_up;
            var_27 = undefined;

            if ( isdefined( var_10.boxtype ) )
            {
                if ( isdefined( var_10.boxtouchonly ) && var_10.boxtouchonly )
                {
                    var_26.script_goal_radius = 16;
                    var_26.action_thread = undefined;
                    var_27 = var_10.origin;
                }
                else
                {
                    var_26.script_goal_radius = 50;
                    var_26.action_thread = ::use_box;
                    var_28 = crate_get_bot_target_check_distance( var_10, var_0 );

                    if ( !isdefined( var_28 ) )
                        continue;

                    var_28 = var_28 - var_10.origin;
                    var_29 = length( var_28 ) * randomfloat( 1.0 );
                    var_27 = var_10.origin + vectornormalize( var_28 ) * var_29 + ( 0, 0, 12 );
                }
            }
            else
            {
                var_26.action_thread = ::use_crate;
                var_26.end_thread = ::stop_using_crate;
                var_27 = crate_get_bot_target_check_distance( var_10, var_0 );

                if ( !isdefined( var_27 ) )
                    continue;

                var_26.script_goal_radius = var_0 - distance( var_10.origin, var_27 + ( 0, 0, 40 ) );
                var_27 = var_27 + ( 0, 0, 24 );
            }

            if ( isdefined( var_26.script_goal_radius ) )
            {

            }

            var_10 notify( "_encstr_BD1510E0588E867D324BB98DDBCD9BACC6E8" );
            wait 0.05;

            if ( !isdefined( var_10 ) )
                continue;

            scripts\mp\bots\bots_strategy::bot_new_tactical_goal( "_encstr_A4DA0E19A2FB1DB8FD50A7D77AA65055", var_27, 30, var_26 );
        }
    }
}

bot_should_use_ballistic_vest_crate( var_0 )
{
    return 1;
}

crate_should_claim()
{
    return 1;
}

crate_low_ammo_check()
{
    return 0;
}

bot_should_use_ammo_crate( var_0 )
{
    if ( createheadicon( self getcurrentweapon() ) == level.boxsettings[var_0.boxtype].minigunweapon )
        return 0;

    return 1;
}

bot_pre_use_ammo_crate( var_0 )
{
    scripts\cp_mp\utility\inventory_utility::_switchtoweapon( self.secondaryweapon );
    wait 1.0;
}

bot_post_use_ammo_crate( var_0 )
{
    scripts\cp_mp\utility\inventory_utility::_switchtoweapon( isundefinedweapon() );
    self.secondaryweapon = self getcurrentweapon();
}

bot_should_use_scavenger_bag( var_0 )
{
    if ( scripts\mp\bots\bots_util::bot_get_low_on_ammo( 0.66 ) )
    {
        var_1 = self getnearestnode();

        if ( isdefined( var_0.nearest_nodes ) && isdefined( var_0.nearest_nodes[0] ) && isdefined( var_1 ) )
        {
            if ( nodesvisible( var_1, var_0.nearest_nodes[0], 1 ) )
            {
                if ( scripts\engine\utility::within_fov( self.origin, self getplayerangles(), var_0.origin, self botgetfovdot() ) )
                    return 1;
            }
        }
    }

    return 0;
}

bot_should_use_grenade_crate( var_0 )
{
    var_1 = self getweaponslistoffhands();

    foreach ( var_3 in var_1 )
    {
        if ( self getweaponammostock( var_3 ) == 0 )
            return 1;
    }

    return 0;
}

bot_should_use_juicebox_crate( var_0 )
{
    return 1;
}

crate_monitor_position()
{
    self notify( "_encstr_ABD51788B3CE7131DFC51880A91B380539FB7080BA238388C3" );
    self endon( "_encstr_ABD51788B3CE7131DFC51880A91B380539FB7080BA238388C3" );
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        var_0 = self.origin;
        wait 0.5;

        if ( !isdefined( self ) )
            return;

        if ( !scripts\mp\bots\bots_util::bot_vectors_are_equal( self.origin, var_0 ) )
        {
            self.on_path_grid = undefined;
            self.nearest_nodes = undefined;
            self.nearest_points = undefined;
        }
    }
}

crate_wait_use()
{

}

crate_picked_up( var_0 )
{
    if ( !isdefined( var_0.object ) )
        return 1;

    return 0;
}

use_crate( var_0 )
{
    if ( isagent( self ) )
    {
        scripts\common\utility::allow_usability( 1 );
        var_0.object enableplayeruse( self );
        wait 0.05;
    }

    self [[ level.bot_funcs["_encstr_AD600F6C4EC2A3597DBBB0A53AAF5DB9B2"] ]]();

    if ( isdefined( var_0.object.owner ) && var_0.object.owner == self )
        var_1 = level.crateownerusetime / 1000 + 0.5;
    else
        var_1 = level.cratenonownerusetime / 1000 + 1.0;

    self botpressbutton( "_encstr_971904D5B9B2", var_1 );

    while ( var_1 > 0 && isdefined( var_0.object ) )
    {
        wait 0.05;
        var_1 = var_1 - 0.05;
    }

    if ( var_1 > 0 )
        wait( randomfloatrange( 0.05, 0.5 ) );

    if ( isagent( self ) )
    {
        scripts\common\utility::allow_usability( 0 );

        if ( isdefined( var_0.object ) )
            var_0.object disableplayeruse( self );
    }

    if ( isdefined( var_0.object ) )
    {
        if ( !isdefined( var_0.object.bots_used ) )
            var_0.object.bots_used = [];

        var_0.object.bots_used[var_0.object.bots_used.size] = self;
    }
}

use_box( var_0 )
{
    if ( isagent( self ) )
    {
        scripts\common\utility::allow_usability( 1 );
        var_0.object enableplayeruse( self );
        wait 0.05;
    }

    if ( isdefined( var_0.object ) && isdefined( var_0.object.boxtype ) )
    {
        var_1 = var_0.object.boxtype;

        if ( isdefined( level.bot_pre_use_box_of_type[var_1] ) )
            self [[ level.bot_pre_use_box_of_type[var_1] ]]( var_0.object );

        if ( isdefined( var_0.object ) )
        {
            var_2 = level.boxsettings[var_0.object.boxtype].usetime / 1000 + 0.5;
            self botpressbutton( "_encstr_971904D5B9B2", var_2 );
            wait( var_2 );

            if ( isdefined( level.bot_post_use_box_of_type[var_1] ) )
                self [[ level.bot_post_use_box_of_type[var_1] ]]( var_0.object );
        }
    }

    if ( isagent( self ) )
    {
        scripts\common\utility::allow_usability( 0 );

        if ( isdefined( var_0.object ) )
            var_0.object disableplayeruse( self );
    }
}

watch_bot_died_during_crate( var_0 )
{
    thread bot_watch_for_death( var_0.object );
}

stop_using_crate( var_0 )
{
    if ( isdefined( var_0.object ) )
        var_0.object.bots[self.team] = 0;
}

bot_watch_for_death( var_0 )
{
    var_0 endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    var_0 endon( "_encstr_BA4208CD533B40849B5B" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_1 = self.team;
    self waittill( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    if ( isdefined( var_0 ) )
        var_0.bots[var_1] = 0;
}

bot_think_crate_blocking_path()
{
    self notify( "_encstr_B7931E5307ED21A488E8256C46B8EA9A45BB1FDB99982A63B8101F799B7014C2" );
    self endon( "_encstr_B7931E5307ED21A488E8256C46B8EA9A45BB1FDB99982A63B8101F799B7014C2" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 = getdvarfloat( "_encstr_B4AE0BD42A9E8AA8D2B4921435" );

    for (;;)
    {
        wait 3;

        if ( self usebuttonpressed() )
            continue;

        if ( scripts\mp\utility\player::isusingremote() )
            continue;

        var_1 = level.carepackages;

        for ( var_2 = 0; var_2 < var_1.size; var_2++ )
        {
            var_3 = var_1[var_2];

            if ( !isdefined( var_3 ) )
                continue;

            var_4 = self getplayeruseentity();

            if ( !isdefined( var_4 ) || var_4 != var_3 )
                continue;

            if ( distancesquared( self.origin, var_3.origin ) < var_0 * var_0 )
            {
                if ( !datakey( var_3 ) )
                {
                    if ( isdefined( var_3.owner ) && var_3.owner == self )
                    {
                        self botpressbutton( "_encstr_971904D5B9B2", level.crateownerusetime / 1000 + 0.5 );
                        continue;
                    }

                    self botpressbutton( "_encstr_971904D5B9B2", level.cratenonownerusetime / 1000 + 0.5 );
                }
            }
        }
    }
}

bot_think_revive()
{
    self notify( "_encstr_89091170927BD7E3D3114832CF53095DE4ABF0" );
    self endon( "_encstr_89091170927BD7E3D3114832CF53095DE4ABF0" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( !level.teambased )
        return;

    if ( !scripts\mp\utility\game::islaststandenabled() && !scripts\mp\utility\game::isteamreviveenabled() )
        return;

    for (;;)
    {
        var_0 = 2.0;
        var_1 = getentarray( "_encstr_B2C90FDA156B07035369CBA330BFBFCF03", "_encstr_B8CE0BE43FC317DF690862BA48" );

        if ( var_1.size > 0 )
            var_0 = 0.05;

        level scripts\engine\utility::waittill_notify_or_timeout( "_encstr_B9BE12078DC25E59C9F51BC26EE8BE9B1D0BB919", var_0 );

        if ( !bot_can_revive() )
        {
            self.tutorial_lead_collected = 0;
            continue;
        }

        var_1 = getentarray( "_encstr_B2C90FDA156B07035369CBA330BFBFCF03", "_encstr_B8CE0BE43FC317DF690862BA48" );
        var_2 = 1;
        var_3 = scripts\mp\utility\teams::getteamdata( self.team, "_encstr_97580AC41D811F767F3072CB" );

        if ( var_3 < 4 )
            var_2 = 0;

        if ( var_1.size > var_2 )
        {
            var_1 = sortbydistance( var_1, self.origin );

            if ( isdefined( self.owner ) )
            {
                for ( var_4 = 0; var_4 < var_1.size; var_4++ )
                {
                    if ( var_1[var_4].owner != self.owner )
                        continue;

                    if ( var_4 == 0 )
                        break;

                    var_5 = var_1[var_4];
                    var_1[var_4] = var_1[0];
                    var_1[0] = var_5;
                    break;
                }
            }
        }

        for ( var_4 = 0; var_4 < var_1.size; var_4++ )
        {
            var_6 = var_1[var_4];
            var_7 = var_6.owner;

            if ( !isdefined( var_7 ) )
                continue;

            if ( var_7 == self )
                continue;

            if ( scripts\mp\utility\game::islaststandenabled() && !scripts\mp\utility\player::isreallyalive( var_7 ) )
                continue;

            if ( var_7.team != self.team )
                continue;

            if ( scripts\mp\utility\game::islaststandenabled() && ( !isdefined( var_7.inlaststand ) || !var_7.inlaststand ) )
                continue;

            if ( isdefined( var_7.bots ) && isdefined( var_7.bots[self.team] ) && var_7.bots[self.team] > 0 )
                continue;

            if ( scripts\mp\utility\game::islaststandenabled() )
                var_8 = var_7.origin;
            else
                var_8 = var_6.origin;

            if ( distancesquared( self.origin, var_8 ) < 4194304 )
            {
                var_9 = spawnstruct();
                var_9.object = var_6;
                var_9.script_goal_radius = 64;

                if ( isdefined( self.last_revive_fail_time ) && gettime() - self.last_revive_fail_time < 1000 )
                    var_9.script_goal_radius = 32;

                var_9.start_thread = ::watch_bot_died_during_revive;
                var_9.end_thread = ::stop_reviving;
                var_9.should_abort = ::player_revived_or_dead;
                var_9.action_thread = ::revive_player;
                var_10 = 60;

                if ( scripts\mp\utility\teams::getteamdata( self.team, "_encstr_892A0BA3D3F25C4033ADD34893" ) == 1 )
                    var_10 = 100;

                scripts\mp\bots\bots_strategy::bot_new_tactical_goal( "_encstr_B495074DCD3BE8A40F", var_8, var_10, var_9 );
                self.tutorial_lead_collected = 1;
                var_7.bots[self.team] = 1;
                break;
            }
        }
    }
}

watch_bot_died_during_revive( var_0 )
{
    if ( scripts\mp\utility\game::islaststandenabled() )
        thread bot_watch_for_death( var_0.object.owner );
}

stop_reviving( var_0 )
{
    if ( isdefined( var_0.object.owner ) )
        var_0.object.owner.bots[self.team] = 0;
}

player_revived_or_dead( var_0 )
{
    if ( scripts\mp\utility\game::islaststandenabled() )
    {
        if ( !isdefined( var_0.object.owner ) || var_0.object.owner.health <= 0 )
            return 1;

        if ( !isdefined( var_0.object.owner.inlaststand ) || !var_0.object.owner.inlaststand )
            return 1;
    }
    else if ( !isdefined( var_0.object.owner ) || var_0.object.owner.health > 0 )
        return 1;

    return 0;
}

revive_player( var_0 )
{
    if ( isdefined( var_0.object.owner ) )
        var_0.object.owner.bots[self.team] = 1;

    if ( scripts\mp\utility\game::islaststandenabled() )
        var_1 = var_0.object.owner.origin;
    else
        var_1 = var_0.object.origin;

    if ( distancesquared( self.origin, var_1 ) > 4096 )
    {
        self.last_revive_fail_time = gettime();
        return;
    }

    if ( isagent( self ) )
    {
        scripts\common\utility::allow_usability( 1 );
        var_0.object enableplayeruse( self );
        wait 0.05;
    }

    var_2 = self.team;
    self botpressbutton( "_encstr_971904D5B9B2", level.laststandrevivetimer + 0.5 );
    wait( level.laststandrevivetimer + 1.5 );

    if ( isdefined( var_0.object.owner ) )
        var_0.object.owner.bots[var_2] = 0;

    if ( isagent( self ) )
    {
        scripts\common\utility::allow_usability( 0 );

        if ( isdefined( var_0.object ) )
            var_0.object disableplayeruse( self );
    }
}

bot_can_revive()
{
    if ( isdefined( self.laststand ) && self.laststand == 1 )
        return 0;

    if ( scripts\mp\bots\bots_strategy::bot_has_tactical_goal( "_encstr_B495074DCD3BE8A40F" ) )
        return 0;

    if ( scripts\mp\bots\bots_util::bot_is_remote_or_linked() )
        return 0;

    if ( scripts\mp\bots\bots_util::bot_is_bodyguarding() )
        return 1;

    if ( isdefined( level.bot_funcs["_encstr_9830191379E68B0478AB1C2765A00B079411392A234DDBBA70990D"] ) )
    {
        var_0 = self [[ level.bot_funcs["_encstr_9830191379E68B0478AB1C2765A00B079411392A234DDBBA70990D"] ]]();

        if ( var_0 )
        {
            self.tutorial_lead_collected = 0;
            return 1;
        }
    }

    var_1 = self botgetscriptgoaltype();

    if ( var_1 == "_encstr_AABA05236DC831" || var_1 == "_encstr_BCCC058033936B" || var_1 == "_encstr_A622069755C123FF" )
        return 1;

    return 0;
}

revive_watch_for_finished( var_0 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_ABE5097DD9AF49972FE390" );
    self endon( "_encstr_AA7205F03A9609" );
    var_0 scripts\engine\utility::_id_143A5( "_encstr_A3750609A5E61883", "_encstr_BA4208CD533B40849B5B" );
    self notify( "_encstr_ABE5097DD9AF49972FE390" );
}

bot_know_enemies_on_start()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( gettime() > 15000 )
        return;

    while ( !scripts\mp\utility\game::gamehasstarted() || !scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) )
        wait 0.05;

    var_0 = undefined;
    var_1 = undefined;

    for ( var_2 = 0; var_2 < level.players.size; var_2++ )
    {
        var_3 = level.players[var_2];

        if ( isdefined( var_3 ) && isdefined( self.team ) && isdefined( var_3.team ) && !istestclient( self, var_3 ) )
        {
            if ( !isdefined( var_3.bot_start_known_by_enemy ) )
                var_0 = var_3;

            if ( isai( var_3 ) && !isdefined( var_3.bot_start_know_enemy ) )
                var_1 = var_3;
        }
    }

    if ( isdefined( var_0 ) )
    {
        self.bot_start_know_enemy = 1;
        var_0.bot_start_known_by_enemy = 1;
        self getenemyinfo( var_0 );
    }

    if ( isdefined( var_1 ) )
    {
        var_1.bot_start_know_enemy = 1;
        self.bot_start_known_by_enemy = 1;
        var_1 getenemyinfo( self );
    }
}

bot_think_gametype()
{
    self notify( "_encstr_80F4132278E9292BF85B868B782147ED63381B7B40" );
    self endon( "_encstr_80F4132278E9292BF85B868B782147ED63381B7B40" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 = 0;

    if ( level.gametype == "_encstr_9507034B25" )
        var_0 = 1;

    if ( !var_0 )
        scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );

    self thread [[ level.bot_funcs["_encstr_9B610FCEC26B2B3AF20756BE3A435ADC5B"] ]]();
}

default_gametype_think()
{

}

monitor_smoke_grenades()
{
    level.bot_smoke_sight_clip_large = getent( "_encstr_9C601D0A78A8BB9A680F7327752FD2ED8103049730884732D90B03D7F5ED3F", "_encstr_B8CE0BE43FC317DF690862BA48" );

    if ( !isdefined( level.bot_smoke_sight_clip_large ) )
        return;

    for (;;)
    {
        level waittill( "_encstr_BE72069FCF8ACAA8", var_0, var_1 );

        if ( var_1.basename == "_encstr_802311433F5F07C5494F1BE12DA911CD999558" )
            var_0 thread handle_smoke();
    }
}

handle_smoke()
{
    self endon( "_encstr_BDA00BB1164759AF23CAB0471A" );
    thread smoke_grenade_late_death();
    self waittill( "_encstr_AB0808DFB97F822F1899", var_0 );
    thread init_leave_cave( var_0 );
}

init_leave_cave( var_0 )
{
    var_1 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_0 );
    var_1 show();
    wait 1;
    var_1 clonebrushmodeltoscriptmodel( level.bot_smoke_sight_clip_large );
    var_1 setmovertransparentvolume();
    wait 8.75;
    var_1 delete();
}

smoke_grenade_late_death()
{
    self endon( "_encstr_AB0808DFB97F822F1899" );
    self waittill( "_encstr_A3750609A5E61883" );
    waittillframeend;
    self notify( "_encstr_BDA00BB1164759AF23CAB0471A" );
}

bot_add_scavenger_bag( var_0 )
{
    var_1 = 0;
    var_0.boxtype = "_encstr_BD7F0E8B3FF0639730E1423BCE1EBF9F";
    var_0.boxtouchonly = 1;

    if ( !isdefined( level.bot_scavenger_bags ) )
        level.bot_scavenger_bags = [];

    foreach ( var_4, var_3 in level.bot_scavenger_bags )
    {
        if ( !isdefined( var_3 ) )
        {
            var_1 = 1;
            level.bot_scavenger_bags[var_4] = var_0;
            break;
        }
    }

    if ( !var_1 )
        level.bot_scavenger_bags[level.bot_scavenger_bags.size] = var_0;

    foreach ( var_6 in level.participants )
    {
        if ( isai( var_6 ) && var_6 scripts\mp\utility\perk::_hasperk( "_encstr_9E57146EE0B21BA50B36A3BCD76EB1C23B5637765993" ) )
            var_6 notify( "_encstr_9EFF12E80FEF7E57ABDE45C5B92387A634B77838" );
    }
}

bot_triggers()
{
    var_0 = getentarray( "_encstr_AAC40DC3977DB1265819F7F173387C", "_encstr_B8CE0BE43FC317DF690862BA48" );

    foreach ( var_2 in var_0 )
    {
        if ( !isdefined( var_2.script_noteworthy ) )
            continue;

        var_2 thread bot_flag_trigger( var_2.script_noteworthy );
    }
}

bot_flag_trigger( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_1 );

        if ( scripts\mp\utility\entity::isaigameparticipant( var_1 ) )
        {
            var_1 notify( "_encstr_88BB128639E83F97D5BB6A72E1A5EBF9A0832C37" + var_0 );
            var_1 botsetflag( var_0, 1 );
            var_1 thread bot_flag_trigger_clear( var_0 );
        }
    }
}

bot_flag_trigger_clear( var_0 )
{
    self endon( "_encstr_88BB128639E83F97D5BB6A72E1A5EBF9A0832C37" + var_0 );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    waitframe();
    waittillframeend;
    self botsetflag( var_0, 0 );
}

load_gametype_scripts_for_scriptdev()
{

}
