// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

ai_request_gesture( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_2 ) )
        var_2 = 1000;

    ai_request_gesture_internal( var_0, var_1, var_2, var_3 );
}

ai_cancel_gesture()
{
    if ( !isdefined( self._blackboard.gesturerequest ) )
        return;

    if ( isdefined( self._blackboard.gesturerequest.notifyname ) )
        self notify( self._blackboard.gesturerequest.notifyname, "_encstr_B8F00F3FE53B8313AD68C90220FDCE9F70" );

    self._blackboard.gesturerequest = undefined;
}

handlegesturenotetrack( var_0 )
{
    self waittill( var_0, var_1 );

    if ( !isdefined( var_1 ) )
        var_1 = [ "_encstr_A2500A039865CFC728B5151C" ];

    if ( !isarray( var_1 ) )
        var_1 = [ var_1 ];

    var_2 = undefined;

    foreach ( var_4 in var_1 )
    {
        if ( var_4 == "_encstr_82AA0E8BFB8978D50167EBD583EA9C40" )
        {
            self.gunposeoverride_internal = undefined;
            continue;
        }
        else if ( var_4 == "_encstr_B3CB0D55F10DD8362B71D1594BD3EB" )
        {
            self._blackboard.partialgestureplaying = 0;
            continue;
        }
        else
            var_5 = [[ self.fnasm_handlenotetrack ]]( var_4, var_0 );

        if ( isdefined( var_5 ) )
            var_2 = var_5;
    }

    return var_2;
}

gesturedonotetracks( var_0 )
{
    self endon( "_encstr_A32D10ECAC9BA3BA27B2BEE8D26BCABDD5A3" );
    thread gesturenotetracktimeoutthread( var_0 );

    for (;;)
    {
        var_1 = handlegesturenotetrack( "_encstr_8B0508CE95DC1DEAC92B" );

        if ( isdefined( var_1 ) )
            return var_1;
    }

    self notify( "_encstr_8B8311A1EA43F913E058D927215BC7AAD3C013" );
}

gesturenotetracktimeoutthread( var_0 )
{
    self endon( "_encstr_8B8311A1EA43F913E058D927215BC7AAD3C013" );
    wait( var_0 );
    self notify( "_encstr_A32D10ECAC9BA3BA27B2BEE8D26BCABDD5A3" );
}

gesture( var_0 )
{
    self endon( "_encstr_A8F10F27EB2F7649FF8BD8F02296314963" );
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        if ( !isdefined( self._blackboard.gesturerequest ) )
            self waittill( "_encstr_8B84127AA1B6C34B88EB7742F3C813CFDEFBD2D2" );

        for (;;)
        {
            if ( !isdefined( self._blackboard.gesturerequest ) )
                break;

            if ( self._blackboard.gesturerequest.timeoutms < gettime() )
            {
                ai_cancel_gesture();
                break;
            }

            if ( scripts\asm\asm_bb::bb_moverequested() )
            {
                var_1 = self aigettargetspeed();

                if ( !istrue( self.allowrunninggesture ) && var_1 > 135 )
                {
                    wait 0.1;
                    continue;
                }

                if ( self pathdisttogoal() < var_1 * 2.5 )
                {
                    wait 0.1;
                    continue;
                }
            }

            self._blackboard.gesturerequest.latestalias = get_gesture_alias( self._blackboard.gesturerequest.gesture, self._blackboard.gesturerequest.target );
            var_2 = self aiplaygesture( self._blackboard.gesturerequest.latestalias );

            if ( !isdefined( var_2 ) )
            {
                wait 0.1;
                continue;
            }

            self.gunposeoverride_internal = "_encstr_B86508F138DE8E7D58FA";
            self.baimedataimtarget = 0;

            if ( self._blackboard.gesturerequest.disablelookat )
            {
                self.disableautolookat = 1;
                self stoplookat();
            }

            var_4 = self._blackboard.gesturerequest.notifyname;
            self._blackboard.gesturerequest = undefined;
            self._blackboard.partialgestureplaying = 1;
            gesturedonotetracks( getanimlength( var_2 ) );
            self._blackboard.partialgestureplaying = 0;

            if ( isdefined( var_4 ) )
                self notify( var_4, "_encstr_81F00F772D5A885D021579B8790529E878" );

            self.disableautolookat = 0;
            self.gunposeoverride_internal = undefined;
            self aicleargesture();
            wait 0.4;
        }
    }
}

gesture_should_disable_lookat( var_0 )
{
    var_1 = [ "_encstr_8F890D5BAB26C3A7DDC162CF53AB28", "_encstr_B67E0FA3116D3855EF4372BE4BFF835803", "_encstr_9F4507C81D9EA73DF0", "_encstr_BEB707FB2B2AD7DFED", "_encstr_8B9F081E548117BDAD68" ];

    if ( isdefined( self._blackboard.civilianfocuscurvalue ) && var_0 == "_encstr_9F4507C81D9EA73DF0" )
        return 0;

    if ( scripts\engine\utility::array_contains( var_1, var_0 ) )
        return 1;

    return 0;
}

ai_request_gesture_internal( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self._blackboard.gesturerequest ) )
        ai_cancel_gesture();

    self._blackboard.gesturerequest = spawnstruct();
    self._blackboard.gesturerequest.gesture = var_0;
    self._blackboard.gesturerequest.target = var_1;
    self._blackboard.gesturerequest.timeoutms = gettime() + var_2;
    self._blackboard.gesturerequest.notifyname = var_3;
    self._blackboard.gesturerequest.disablelookat = gesture_should_disable_lookat( var_0 );
    self notify( "_encstr_8B84127AA1B6C34B88EB7742F3C813CFDEFBD2D2" );
}

civisfocusingleft()
{
    return self._blackboard.civilianfocusstate == 3;
}

civisfocusingright()
{
    return self._blackboard.civilianfocusstate == 4;
}

get_gesture_alias( var_0, var_1 )
{
    if ( isdefined( self._blackboard.civilianfocuscurvalue ) )
    {
        if ( var_0 == "_encstr_9F4507C81D9EA73DF0" )
        {
            var_2 = randomint( 3 ) + 1;

            if ( civisfocusingleft() )
                var_0 = var_0 + "_encstr_984C028E" + var_2 + "_encstr_B107030932";
            else if ( civisfocusingright() )
                var_0 = var_0 + "_encstr_984C028E" + var_2 + "_encstr_9F0703A11B";
        }
        else if ( var_0 == "_encstr_B4C90757E938ADB78D" )
        {
            var_2 = randomint( 2 ) + 1;

            if ( civisfocusingleft() )
                var_0 = var_0 + "_encstr_984C028E" + var_2 + "_encstr_B107030932";
            else if ( civisfocusingright() )
                var_0 = var_0 + "_encstr_984C028E" + var_2 + "_encstr_9F0703A11B";
        }
    }

    if ( isdefined( var_1 ) && ( var_0 == "_encstr_8F890D5BAB26C3A7DDC162CF53AB28" || var_0 == "_encstr_B67E0FA3116D3855EF4372BE4BFF835803" || var_0 == "_encstr_9F4507C81D9EA73DF0" || var_0 == "_encstr_A419051B33CF57" || var_0 == "_encstr_AFAD0541FD7763" || var_0 == "_encstr_BECC05FC5321BA" ) )
    {
        var_3 = vectortoyaw( var_1.origin - self.origin );
        var_4 = angleclamp180( var_3 - self.angles[1] );
        var_5 = getangleindex( var_4, 22.5 );
        var_5 = scripts\asm\shared\utility::mapangleindextonumpad( var_5 );
        return var_0 + var_5;
    }

    return var_0;
}

ai_finish_gesture()
{
    if ( isdefined( self._blackboard.gesturerequest.notifyname ) )
        self notify( self._blackboard.gesturerequest.notifyname, "_encstr_8B8311A1EA43F913E058D927215BC7AAD3C013" );

    self._blackboard.gesturerequest = undefined;
}

chooseanim_gesture( var_0, var_1, var_2 )
{
    var_3 = scripts\asm\asm::asm_lookupanimfromalias( var_1, self._blackboard.gesturerequest.latestalias );
    return var_3;
}

playcoveranim_gesture( var_0, var_1, var_2 )
{
    self endon( var_1 + "_encstr_AFDB0A4E3FC1D81B831B0B01" );
    self._blackboard.activegesturenotify = self._blackboard.gesturerequest.notifyname;
    childthread scripts\asm\shared\utility::setuseanimgoalweight( var_1, 0.2 );
    var_3 = scripts\asm\asm::asm_getanim( var_0, var_1 );
    var_4 = scripts\asm\asm::asm_getxanim( var_1, var_3 );
    self orientmode( "_encstr_A1730DD68AA605093F0352631F43B9" );

    if ( scripts\asm\asm::asm_currentstatehasflag( var_0, "_encstr_A43B0DDCDE3A9547C9858DB605B4D6" ) )
    {
        var_5 = getangledelta( var_4, 0.0, 1.0 );
        self.stepoutyaw = self.angles[1] + var_5;
    }

    self._blackboard.gesturerequest = undefined;
    self aisetanim( var_1, var_3 );
    scripts\asm\asm::asm_playfacialanim( var_0, var_1, var_4 );
    scripts\asm\asm::asm_donotetracks( var_0, var_1, scripts\asm\asm::asm_getnotehandler( var_0, var_1 ) );
    self orientmode( "_encstr_A1730DD68AA605093F0352631F43B9" );

    if ( isdefined( self._blackboard.activegesturenotify ) )
    {
        self notify( self._blackboard.activegesturenotify, "_encstr_8B8311A1EA43F913E058D927215BC7AAD3C013" );
        self._blackboard.activegesturenotify = undefined;
    }
}

cleargestureanim( var_0, var_1, var_2 )
{
    if ( isdefined( self._blackboard.activegesturenotify ) )
    {
        self notify( self._blackboard.activegesturenotify, "_encstr_B8F00F3FE53B8313AD68C90220FDCE9F70" );
        self._blackboard.activegesturenotify = undefined;
    }
}

gesture_finishearly( var_0, var_1, var_2, var_3 )
{
    if ( scripts\asm\asm_bb::bb_moverequested() && istrue( self.gestureinterruptible ) )
    {
        if ( isdefined( self.gestureinterruptibleifplayerwithindist ) )
        {
            if ( distancesquared( self.origin, level.player.origin ) < self.gestureinterruptibleifplayerwithindist * self.gestureinterruptibleifplayerwithindist )
                return 1;
        }
        else
            return 1;
    }

    return scripts\asm\asm::asm_eventfired( var_0, "_encstr_B3CB0D55F10DD8362B71D1594BD3EB" ) && scripts\asm\asm_bb::bb_moverequested();
}
