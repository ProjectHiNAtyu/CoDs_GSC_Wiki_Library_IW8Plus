// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

registernotetracksifnot()
{
    if ( isdefined( anim.notetracks ) )
        return;

    anim.notetracks = [];
    registernotetracks();
}

registernotetracks()
{
    level._defaultnotetrackhandler = ::handlenotetrack;
    level.fnnotetrackprefixhandler = ::notetrack_prefix_handler_mp;
    _encstr_9E3E1C0BF8D219E3FC3E2FB96579DB3F3D688355B8AAF1068F6BA6F7F3DE::registernotetracks();
    anim.notetracks["_encstr_9C151591850FC0DE2BE7993F43022CE8CC1158C96A6F30"] = ::notetrackfootstep;
    anim.notetracks["_encstr_B4E015AA3F870C5B83C18B5FF6A83F70CBAF1B5A9F548D"] = ::notetrackfootstep;
    anim.notetracks["_encstr_8B1D1499EDF6D16E475607FA1B95993A7DC65827B3CA"] = ::notetrackfootstep;
    anim.notetracks["_encstr_B65814A44D6279E3FC17F889DB0599A1C9F2A9BFE52A"] = ::notetrackfootstep;
    anim.notetracks["_encstr_A841127FF6BB832F80207AD002E239F69582B5C4"] = ::notetrackposestand;
    anim.notetracks["_encstr_8FAA1349AD81E2990F72A2B3DEF61E69333F75D310"] = ::notetrackposecrouch;
    anim.notetracks["_encstr_B149122CDCD2DABEC1DECD2B01E901074EDB732B"] = ::notetrackposeprone;
    anim.notetracks["_encstr_885F098765105ACF35B0C3"] = ::notetrackgundrop;
    anim.notetracks["_encstr_B4C60854D5482AA78588"] = ::notetrackgundrop;
}

notetrackfootstep( var_0, var_1 )
{
    var_2 = issubstr( var_0, "_encstr_B1AD05C65666E8" );
    var_3 = issubstr( var_0, "_encstr_8AEC06D3682B0F3A" );
    var_4 = "_encstr_9353062E718710C9";

    if ( var_2 )
        var_4 = "_encstr_B1AD05C65666E8";

    if ( var_3 )
        self notify( "_encstr_BCA60FCBBB4E021591A9858DC3D84C7A27" );

    self.asm.footsteps.foot = var_4;
    self.asm.footsteps.time = gettime();
}

handlenotetrack( var_0, var_1, var_2, var_3 )
{
    if ( _encstr_9E3E1C0BF8D219E3FC3E2FB96579DB3F3D688355B8AAF1068F6BA6F7F3DE::hascustomnotetrackhandler( var_0 ) )
        return _encstr_9E3E1C0BF8D219E3FC3E2FB96579DB3F3D688355B8AAF1068F6BA6F7F3DE::handlecustomnotetrackhandler( var_0, var_1, var_2, var_3 );

    var_4 = _encstr_9E3E1C0BF8D219E3FC3E2FB96579DB3F3D688355B8AAF1068F6BA6F7F3DE::handlecommonnotetrack( var_0, var_1, var_2, var_3 );

    if ( isdefined( var_4 ) && var_4 == "_encstr_80840C48B73F2021AE1A20684207" )
    {
        var_4 = undefined;

        switch ( var_0 )
        {
            case "_encstr_BA031108431BCB61B347AE1159FBAE89070AD8":
                if ( weaponclass( self.weapon ) == "_encstr_98080F93DBB1B556D11B85ABB936D059E4" )
                    notetrackrocketlauncherammoattach();

                break;
            default:
                if ( isdefined( var_2 ) )
                {
                    if ( isdefined( var_3 ) )
                        return [[ var_2 ]]( var_0, var_3 );
                    else
                        return [[ var_2 ]]( var_0 );
                }

                break;
        }
    }

    return var_4;
}

notetrack_prefix_handler_mp( var_0 )
{
    return _encstr_9E3E1C0BF8D219E3FC3E2FB96579DB3F3D688355B8AAF1068F6BA6F7F3DE::notetrack_prefix_handler_common( var_0 );
}

notetrackrocketlauncherammoattach()
{
    if ( !isalive( self ) )
        return;

    if ( !_encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::usingrocketlauncher() )
        return;

    if ( self tagexists( "_encstr_8BD20B9DC93746556D8A98E093" ) )
        self showpart( "_encstr_8BD20B9DC93746556D8A98E093" );
}

notetrackgundrop( var_0, var_1 )
{
    if ( isdefined( self.playercleanupentondisconnect ) )
        self [[ self.playercleanupentondisconnect ]]();
}

setpose( var_0 )
{
    self.currentpose = var_0;
    scripts\asm\asm_bb::bb_requeststance( var_0 );
    self notify( "_encstr_BA4E0D8850BB2840A92571F0926F72" + var_0 );
}

notetrackposestand( var_0, var_1 )
{
    setpose( "_encstr_B1AD06374716DC8C" );
}

notetrackposecrouch( var_0, var_1 )
{
    setpose( "_encstr_9C3D071B63023B26C3" );
}

notetrackposeprone( var_0, var_1 )
{
    setpose( "_encstr_9F24062875D5FD98" );
}
