// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

gettargetangleoffset( var_0 )
{
    var_1 = self getshootatpos() + ( 0, 0, -3 );
    var_2 = ( var_1[0] - var_0[0], var_1[1] - var_0[1], var_1[2] - var_0[2] );
    var_2 = vectornormalize( var_2 );
    var_3 = var_2[2] * -1;
    return var_3;
}

getremainingburstdelaytime()
{
    var_0 = ( gettime() - self.a.lastshoottime ) / 1000;
    var_1 = getburstdelaytime();

    if ( var_1 > var_0 )
        return var_1 - var_0;

    return 0;
}

getburstdelaytime()
{
    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isusingsidearm() )
        return randomfloatrange( 0.15, 0.55 );
    else if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::weapon_pump_action_shotgun() )
        return randomfloatrange( 1.0, 1.7 );
    else if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::weapon_genade_launcher() )
        return scripts\asm\shared\utility::grenadelauncherfirerate();
    else if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isasniper() )
        return scripts\asm\shared\utility::getsniperburstdelaytime();
    else if ( self.fastburst )
        return randomfloatrange( 0.1, 0.35 );
    else
        return randomfloatrange( 0.2, 0.4 );
}

shootuntilshootbehaviorchange()
{

}

getuniqueflagnameindex()
{
    anim.animflagnameindex++;
    return anim.animflagnameindex;
}

#using_animtree("_encstr_B1AD0E7656E6CA4E5AD8D786AB5B85B9");

setupaim( var_0 )
{
    self setanim( %_encstr_A3650FAB8363D0F0156F96A9D4F5E898CA, 1, 0.2 );

    if ( scripts\engine\utility::actor_is3d() )
        self setflaggedanimknoblimited( "_encstr_93EB0CC00B9808078ACF6077E462", _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::animarray( "_encstr_A1450FFB23A26E7457DA21C8632F4DC240" ), 1, var_0 );
    else
        self setanimknoblimited( _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::animarray( "_encstr_A1450FFB23A26E7457DA21C8632F4DC240" ), 1, var_0 );

    self setanimknoblimited( _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::animarray( "_encstr_A21E0BF159B0411F2B0859E3B3" ), 1, var_0 );
    self setanimknoblimited( _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::animarray( "_encstr_8A030DDB23A9C1D64B9AAF1447137D" ), 1, var_0 );
    self setanimknoblimited( _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::animarray( "_encstr_9D440D578C7B0633AC2AF9684287C1" ), 1, var_0 );
    self setanimknoblimited( _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::animarray( "_encstr_AA7E0E4321C3596743D57140E418110B" ), 1, var_0 );
    self.facialidx = _encstr_B88216C2AEC5B258A3A886C738780D9EB5374EFFA007EB93::playfacialanim( undefined, "_encstr_8F19048F40A0", self.facialidx );
}

issingleshot()
{
    if ( weaponburstcount( self.weapon ) > 0 )
        return 0;
    else if ( weaponisauto( self.weapon ) || weaponisbeam( self.weapon ) )
        return 0;

    return 1;
}

shotgunpumpsound( var_0 )
{
    if ( !_encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::weapon_pump_action_shotgun() )
        return;

    self endon( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    self notify( "_encstr_808C1748520D3131378640CF75BF1B9FF2CAE0282AA95B682B" );
    self endon( "_encstr_808C1748520D3131378640CF75BF1B9FF2CAE0282AA95B682B" );
    thread stopshotgunpumpaftertime( 2.0 );
    self waittillmatch( var_0, "_encstr_A4430A93530A8442805A9F53" );
    self playsound( "_encstr_A3B81019C39EBF74B7C02A0338FF2AFFB037" );
    self notify( "_encstr_808C1748520D3131378640CF75BF1B9FF2CAE0282AA95B682B" );
}

stopshotgunpumpaftertime( var_0 )
{
    self endon( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    self endon( "_encstr_808C1748520D3131378640CF75BF1B9FF2CAE0282AA95B682B" );
    wait( var_0 );
    self notify( "_encstr_808C1748520D3131378640CF75BF1B9FF2CAE0282AA95B682B" );
}

rechamber( var_0 )
{

}

putgunbackinhandonkillanimscript()
{
    self endon( "_encstr_A22513EE59850E7BB9AF37EE4BA38D1AD791EDB9CA" );
    self endon( "_encstr_A3750609A5E61883" );
    self waittill( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    _encstr_81251843179D48BB7D835E93503BADB74B88F74DF1ED2810F3EA::placeweaponon( self.primaryweapon, "_encstr_9353062E718710C9" );
}

reload( var_0, var_1 )
{

}

addgrenadethrowanimoffset( var_0, var_1 )
{
    if ( !isdefined( anim.grenadethrowanims ) )
    {
        anim.grenadethrowanims = [];
        anim.grenadethrowoffsets = [];
    }

    var_2 = anim.grenadethrowanims.size;
    anim.grenadethrowanims[var_2] = var_0;
    anim.grenadethrowoffsets[var_2] = var_1;
}

initgrenadethrowanims()
{

}

getgrenadethrowoffset( var_0 )
{
    var_1 = ( 0, 0, 64 );
    return var_1;
}

throwgrenadeatplayerasap_combat_utility()
{
    for ( var_0 = 0; var_0 < level.players.size; var_0++ )
    {
        if ( level.players[var_0].numgrenadesinprogresstowardsplayer == 0 )
        {
            level.players[var_0].grenadetimers["_encstr_8978057DE339BF"] = 0;
            level.players[var_0].grenadetimers["_encstr_9BD70E33711793C8617912DFB0780C0A"] = 0;
            level.players[var_0].grenadetimers["_encstr_97BE07C31D0107FF45"] = 0;
        }
    }

    anim.throwgrenadeatplayerasap = 1;
}

setactivegrenadetimer( var_0 )
{
    self.activegrenadetimer = spawnstruct();

    if ( isplayer( var_0 ) )
    {
        self.activegrenadetimer.isplayertimer = 1;
        self.activegrenadetimer.player = var_0;
        self.activegrenadetimer.timername = self.grenadeweapon.basename;
    }
    else
    {
        self.activegrenadetimer.isplayertimer = 0;
        self.activegrenadetimer.timername = "_encstr_B6190428A4F5" + self.grenadeweapon.basename;
    }
}

usingplayergrenadetimer()
{
    return self.activegrenadetimer.isplayertimer;
}

setgrenadetimer( var_0, var_1 )
{
    if ( var_0.isplayertimer )
    {
        var_2 = var_0.player;
        var_3 = var_2.grenadetimers[var_0.timername];
        var_2.grenadetimers[var_0.timername] = max( var_1, var_3 );
    }
    else
    {
        var_3 = anim.grenadetimers[var_0.timername];
        anim.grenadetimers[var_0.timername] = max( var_1, var_3 );
    }
}

getdesiredgrenadetimervalue()
{
    var_0 = undefined;

    if ( usingplayergrenadetimer() )
    {
        var_1 = self.activegrenadetimer.player;
        var_0 = gettime() + var_1.gs.playergrenadebasetime + randomint( var_1.gs.playergrenaderangetime );
    }
    else
        var_0 = gettime() + 30000 + randomint( 30000 );

    return var_0;
}

getgrenadetimertime( var_0 )
{
    if ( var_0.isplayertimer )
        return var_0.player.grenadetimers[var_0.timername];
    else
        return anim.grenadetimers[var_0.timername];
}

maythrowdoublegrenade( var_0 )
{
    if ( scripts\engine\utility::player_died_recently() )
        return 0;

    if ( !var_0.gs.double_grenades_allowed )
        return 0;

    var_1 = gettime();

    if ( var_1 < var_0.grenadetimers["_encstr_8CBE0F4CF780B68385D6326BF968EF6FA8"] )
        return 0;

    if ( var_1 > var_0.lastfraggrenadetoplayerstart + 3000 )
        return 0;

    if ( var_1 < var_0.lastfraggrenadetoplayerstart + 500 )
        return 0;

    return var_0.numgrenadesinprogresstowardsplayer < 2;
}

mygrenadecooldownelapsed()
{
    return gettime() >= self.a.nextgrenadetrytime;
}

grenadecooldownelapsed( var_0 )
{
    if ( scripts\engine\utility::player_died_recently() )
        return 0;

    if ( self.script_forcegrenade == 1 )
        return 1;

    if ( !mygrenadecooldownelapsed() )
        return 0;

    if ( gettime() >= getgrenadetimertime( self.activegrenadetimer ) )
        return 1;

    if ( self.activegrenadetimer.isplayertimer && self.activegrenadetimer.timername == "_encstr_9E810CB0100684B8D3DFC0E64C2B" )
        return maythrowdoublegrenade( var_0 );

    return 0;
}

trygrenadeposproc( var_0, var_1, var_2, var_3 )
{
    if ( !self isgrenadepossafe( var_0, var_1 ) )
        return 0;
    else if ( distancesquared( self.origin, var_1 ) < 40000 )
        return 0;

    var_4 = physicstrace( var_1 + ( 0, 0, 1 ), var_1 + ( 0, 0, -500 ) );

    if ( var_4 == var_1 + ( 0, 0, -500 ) )
        return 0;

    var_4 = var_4 + ( 0, 0, 0.1 );
    return trygrenadethrow( var_0, var_4, var_2, var_3 );
}

trygrenadethrow( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{

}

reducegiptponkillanimscript( var_0 )
{
    self endon( "_encstr_B44A24ED8F5B6B5772A2D8A83A4F9FC19F386D5F2737500F1C4A906832A58BD85FD3F65B60E3" );
    self waittill( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    var_0.numgrenadesinprogresstowardsplayer--;
}

#using_animtree("_encstr_A40101");

#using_animtree("_encstr_A40101");

#using_animtree("_encstr_A40101");

dogrenadethrow( var_0, var_1, var_2, var_3 )
{
    self endon( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );

    if ( !self.arriving )
        self orientmode( "_encstr_B22A0F30AB8E47A211BAA8D2C985D8A838", var_1 );

    _encstr_80C92737B1272DC1E8E6E50BDCB4ADBC262CE81D36566CA1B08E8E59E47DDD278507C1B2C9B83BDC8D::evaluateattackevent( self.grenadeweapon.basename );
    self notify( "_encstr_A9EA15CD47DE38F52CD2B6A5CDEC7DC23AF5B2E6AC6BE5" );
    self setflaggedanimknoballrestart( "_encstr_ABCE0A3BE935120CC770C2B5", var_0, %_encstr_A39B05D63DA213, fasteranimspeed(), 0.1, 1 );
    thread _encstr_9E3E1C0BF8D219E3FC3E2FB96579DB3F3D688355B8AAF1068F6BA6F7F3DE::donotetracksforever( "_encstr_ABCE0A3BE935120CC770C2B5", "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    var_4 = _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::getgrenademodel();
    var_5 = "_encstr_AABA05236DC831";

    for (;;)
    {
        self waittill( "_encstr_ABCE0A3BE935120CC770C2B5", var_6 );

        if ( var_6 == "_encstr_B1B70DF2CB3533D6B053FFC47B88DB" || var_6 == "_encstr_9DD00E3BF35DF8F36A7FB02E54722963" )
        {
            var_5 = attachgrenademodel( var_4, "_encstr_AAC20B1BCBE4B109493C7EB595" );
            self.isholdinggrenade = 1;
        }

        if ( var_6 == "_encstr_88E30E7639AC9BB08CCAAF47A1C9BDDD" || var_6 == "_encstr_B7630EECE459CDC28CCA08A30DC9DBBB" )
            break;

        if ( var_6 == "_encstr_B41804CA7391" )
        {
            self.activegrenadetimer.player.numgrenadesinprogresstowardsplayer--;
            self notify( "_encstr_B44A24ED8F5B6B5772A2D8A83A4F9FC19F386D5F2737500F1C4A906832A58BD85FD3F65B60E3" );
            return 0;
        }
    }

    self notify( "_encstr_B44A24ED8F5B6B5772A2D8A83A4F9FC19F386D5F2737500F1C4A906832A58BD85FD3F65B60E3" );

    if ( usingplayergrenadetimer() )
        thread watchgrenadetowardsplayer( self.activegrenadetimer.player, var_2 );

    self throwgrenade();

    if ( !usingplayergrenadetimer() )
        setgrenadetimer( self.activegrenadetimer, var_2 );

    if ( var_3 && self.activegrenadetimer.isplayertimer )
    {
        var_13 = self.activegrenadetimer.player;

        if ( var_13.numgrenadesinprogresstowardsplayer > 1 || gettime() - var_13.lastgrenadelandednearplayertime < 2000 )
            var_13.grenadetimers["_encstr_8CBE0F4CF780B68385D6326BF968EF6FA8"] = gettime() + min( 5000, var_13.gs.playerdoublegrenadetime );
    }

    self notify( "_encstr_93F5136BD3E8A36E50951DEE4BB0C72A06C882D298" );

    if ( var_5 != "_encstr_AABA05236DC831" )
        self detach( var_4, var_5 );
    else
    {

    }

    self.isholdinggrenade = undefined;
    self.grenadeawareness = self.oldgrenawareness;
    self.oldgrenawareness = undefined;
    self waittillmatch( "_encstr_ABCE0A3BE935120CC770C2B5", "_encstr_B41804CA7391" );
    self notify( "_encstr_8A5313D58753414F2FDB28780207E3DE933866D8F7" );
    self notify( "_encstr_A22513EE59850E7BB9AF37EE4BA38D1AD791EDB9CA" );
    self setanim( %_encstr_A6C40FB23C07EDDCACC8F5B6B78C9539E6, 1, 0.2 );
    self setanim( %_encstr_A3650FAB8363D0F0156F96A9D4F5E898CA, 1 );
    self aiclearanim( var_0, 0.2 );
}

watchgrenadetowardsplayer( var_0, var_1 )
{
    var_0 endon( "_encstr_A3750609A5E61883" );
    watchgrenadetowardsplayerinternal( var_1 );
    var_0.numgrenadesinprogresstowardsplayer--;
}

watchgrenadetowardsplayerinternal( var_0 )
{
    var_1 = self.activegrenadetimer;
    var_2 = spawnstruct();
    var_2 thread watchgrenadetowardsplayertimeout( 5 );
    var_2 endon( "_encstr_82E021A33734C3B4070D85E83B2AF7FBDF7FBABA79EF38D2D838724609045D97627DFB" );
    var_3 = self.grenadeweapon.basename;
    var_4 = getgrenadeithrew();

    if ( !isdefined( var_4 ) )
        return;

    setgrenadetimer( var_1, min( gettime() + 5000, var_0 ) );
    var_5 = 62500;
    var_6 = 160000;

    if ( var_3 == "_encstr_9BD70E33711793C8617912DFB0780C0A" )
    {
        var_5 = 810000;
        var_6 = 1690000;
    }

    var_7 = level.players;
    var_8 = var_4.origin;

    for (;;)
    {
        wait 0.1;

        if ( !isdefined( var_4 ) )
            break;

        if ( distancesquared( var_4.origin, var_8 ) < 400 )
        {
            var_9 = [];

            for ( var_10 = 0; var_10 < var_7.size; var_10++ )
            {
                var_11 = var_7[var_10];
                var_12 = distancesquared( var_4.origin, var_11.origin );

                if ( var_12 < var_5 )
                {
                    var_11 grenadelandednearplayer( var_1, var_0 );
                    continue;
                }

                if ( var_12 < var_6 )
                    var_9[var_9.size] = var_11;
            }

            var_7 = var_9;

            if ( var_7.size == 0 )
                break;
        }

        var_8 = var_4.origin;
    }
}

grenadelandednearplayer( var_0, var_1 )
{
    var_2 = self;
    anim.throwgrenadeatplayerasap = undefined;

    if ( gettime() - var_2.lastgrenadelandednearplayertime < 3000 )
        var_2.grenadetimers["_encstr_8CBE0F4CF780B68385D6326BF968EF6FA8"] = gettime() + var_2.gs.playerdoublegrenadetime;

    var_2.lastgrenadelandednearplayertime = gettime();
    var_3 = var_2.grenadetimers[var_0.timername];
    var_2.grenadetimers[var_0.timername] = max( var_1, var_3 );
}

getgrenadeithrew()
{
    self endon( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    self waittill( "_encstr_AD620DEC4ECA7358912BAF99B43959", var_0 );
    return var_0;
}

watchgrenadetowardsplayertimeout( var_0 )
{
    wait( var_0 );
    self notify( "_encstr_82E021A33734C3B4070D85E83B2AF7FBDF7FBABA79EF38D2D838724609045D97627DFB" );
}

attachgrenademodel( var_0, var_1 )
{
    self attach( var_0, var_1 );
    thread detachgrenadeonscriptchange( var_0, var_1 );
    return var_1;
}

detachgrenadeonscriptchange( var_0, var_1 )
{
    self endon( "_encstr_93F5136BD3E8A36E50951DEE4BB0C72A06C882D298" );
    self waittill( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );

    if ( !isdefined( self ) )
        return;

    if ( isdefined( self.oldgrenawareness ) )
    {
        self.grenadeawareness = self.oldgrenawareness;
        self.oldgrenawareness = undefined;
    }

    self detach( var_0, var_1 );
}

offsettoorigin( var_0 )
{
    var_1 = anglestoforward( self.angles );
    var_2 = anglestoright( self.angles );
    var_3 = anglestoup( self.angles );
    var_1 = var_1 * var_0[0];
    var_2 = var_2 * var_0[1];
    var_3 = var_3 * var_0[2];
    return var_1 + var_2 + var_3;
}

grenadeline( var_0, var_1 )
{
    level notify( "_encstr_B9980A5893B5DB6633B92B47" );
    level endon( "_encstr_B9980A5893B5DB6633B92B47" );
    var_0 = self.origin + offsettoorigin( var_0 );

    for (;;)
        wait 0.05;
}

getgrenadedropvelocity()
{
    var_0 = randomfloat( 360 );
    var_1 = randomfloatrange( 30, 75 );
    var_2 = sin( var_1 );
    var_3 = cos( var_1 );
    var_4 = cos( var_0 ) * var_3;
    var_5 = sin( var_0 ) * var_3;
    var_6 = randomfloatrange( 100, 200 );
    var_7 = ( var_4, var_5, var_2 ) * var_6;
    return var_7;
}

dropgrenade()
{
    if ( isdefined( self.nodropgrenade ) )
        return;

    var_0 = self gettagorigin( "_encstr_B8AE14D3C34C0999E881BF02BBB0B223087D2FE7B96D" );
    var_1 = getgrenadedropvelocity();
    self magicgrenademanual( var_0, var_1, 3 );
}

shouldhelpadvancingteammate()
{
    if ( level.advancetoenemygroup[self.team] > 0 && level.advancetoenemygroup[self.team] < level.advancetoenemygroupmax )
    {
        if ( gettime() - level.lastadvancetoenemytime[self.team] > 4000 )
            return 0;

        var_0 = level.lastadvancetoenemyattacker[self.team];

        if ( var_0 == self )
            return 0;

        var_1 = isdefined( var_0 ) && distancesquared( self.origin, var_0.origin ) < 65536;

        if ( ( var_1 || distancesquared( self.origin, level.lastadvancetoenemysrc[self.team] ) < 65536 ) && ( !isdefined( self.enemy ) || distancesquared( self.enemy.origin, level.lastadvancetoenemydest[self.team] ) < 262144 ) )
            return 1;
    }

    return 0;
}

checkadvanceonenemyconditions()
{
    if ( !isdefined( level.lastadvancetoenemytime[self.team] ) )
        return 0;

    if ( shouldhelpadvancingteammate() )
        return 1;

    if ( gettime() - level.lastadvancetoenemytime[self.team] < level.advancetoenemyinterval )
        return 0;

    if ( !issentient( self.enemy ) )
        return 0;

    if ( level.advancetoenemygroup[self.team] )
        level.advancetoenemygroup[self.team] = 0;

    var_0 = isdefined( self.advance_regardless_of_numbers ) && self.advance_regardless_of_numbers;

    if ( !var_0 && getaicount( self.team ) < getaicount( self.enemy.team ) )
        return 0;

    return 1;
}

tryrunningtoenemy( var_0 )
{
    if ( !isdefined( self.enemy ) )
        return 0;

    if ( self.fixednode )
        return 0;

    if ( self.combatmode == "_encstr_B2240732C9CDEDCB2C" || self.combatmode == "_encstr_94DD12EA0972B32AA039DA586BE527E76A0378F3" )
        return 0;

    if ( !self isingoal( self.enemy.origin ) )
        return 0;

    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::islongrangeai() )
        return 0;

    if ( !checkadvanceonenemyconditions() )
        return 0;

    if ( isdefined( self.usingnavmesh ) && self.usingnavmesh )
        return 0;

    self findreacquiredirectpath( var_0 );

    if ( self reacquiremove() )
    {
        self.keepclaimednodeifvalid = 0;
        self.keepclaimednode = 0;
        self.a.magicreloadwhenreachenemy = 1;

        if ( level.advancetoenemygroup[self.team] == 0 )
        {
            level.lastadvancetoenemytime[self.team] = gettime();
            level.lastadvancetoenemyattacker[self.team] = self;
        }

        level.lastadvancetoenemysrc[self.team] = self.origin;
        level.lastadvancetoenemydest[self.team] = self.enemy.origin;
        level.advancetoenemygroup[self.team]++;
        return 1;
    }

    return 0;
}

getpitchtoshootspot( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = var_0 - self getshootatpos();
    var_1 = vectornormalize( var_1 );
    var_2 = vectortoangles( var_1 )[0];
    return angleclamp180( var_2 );
}

watchreloading()
{
    self.isreloading = 0;
    self.lastreloadstarttime = -1;

    for (;;)
    {
        self waittill( "_encstr_89730D399536DE1632F5378E85E41D" );
        self.isreloading = 1;
        self.lastreloadstarttime = gettime();
        _encstr_80C92737B1272DC1E8E6E50BDCB4ADBC262CE81D36566CA1B08E8E59E47DDD278507C1B2C9B83BDC8D::evaluatereloadevent();
        waittillreloadfinished();
        self.isreloading = 0;
    }
}

waittillreloadfinished()
{
    thread timednotify( 4, "_encstr_9D030E229B308DDF6DEBFAA2D1304783" );
    self endon( "_encstr_9D030E229B308DDF6DEBFAA2D1304783" );
    self endon( "_encstr_80A80DBB95C2C17B9BF5A3C2D65637" );

    for (;;)
    {
        self waittill( "_encstr_A64D0743C1D1370153" );
        var_0 = self getcurrentweapon();

        if ( nullweapon( var_0 ) )
            break;

        if ( self getcurrentweaponclipammo() >= weaponclipsize( var_0 ) )
            break;
    }

    self notify( "_encstr_9D030E229B308DDF6DEBFAA2D1304783" );
}

timednotify( var_0, var_1 )
{
    self endon( var_1 );
    wait( var_0 );
    self notify( var_1 );
}

checkgrenadethrowdist()
{
    var_0 = self.enemy.origin - self.origin;
    var_1 = lengthsquared( ( var_0[0], var_0[1], 0 ) );

    if ( self.grenadeweapon.basename == "_encstr_9BD70E33711793C8617912DFB0780C0A" )
        return var_1 < 589824;

    return var_1 >= 40000 && var_1 <= 1562500;
}

monitorflash()
{
    self endon( "_encstr_A3750609A5E61883" );

    if ( !isdefined( level.neverstopmonitoringflash ) )
        self endon( "_encstr_A3AD16371DF6E0D76BB7CD5A1D7BC996DCB3EB661BC29B34" );

    for (;;)
    {
        var_0 = undefined;
        var_1 = undefined;
        var_2 = undefined;
        var_3 = undefined;
        var_4 = undefined;
        self waittill( "_encstr_97E70ACC3616DC3489C29BEC", var_1, var_0, var_2, var_3, var_4 );

        if ( isdefined( self.flashbangimmunity ) && self.flashbangimmunity )
            continue;

        if ( isdefined( self.script_immunetoflash ) && self.script_immunetoflash != 0 )
            continue;

        if ( isdefined( self.team ) && isdefined( var_4 ) && self.team == var_4 )
        {
            var_0 = 3 * ( var_0 - 0.75 );

            if ( var_0 < 0 )
                continue;

            if ( isdefined( self.teamflashbangimmunity ) )
                continue;
        }

        var_5 = 0.2;

        if ( var_0 > 1 - var_5 )
            var_0 = 1.0;
        else
            var_0 = var_0 / ( 1 - var_5 );

        var_6 = 4.5 * var_0;

        if ( var_6 < 0.25 )
            continue;

        self.flashingteam = var_4;
        flashbangstart( var_6 );
        self notify( "_encstr_A1940EE710C994E25639EB5F0D74EAD4", var_1, var_3 );
    }
}

flashbangstart( var_0 )
{
    if ( isdefined( self.flashbangimmunity ) && self.flashbangimmunity )
        return;

    if ( isdefined( self.syncedmeleetarget ) )
        return;

    if ( self isinscriptedstate() || scripts\asm\asm_bb::bb_isanimscripted() )
        return;

    if ( !self.allowpain || !self.allowpain_internal )
        return;

    var_1 = gettime() + var_0 * 1000.0;

    if ( isdefined( self.flashendtime ) )
        self.flashendtime = max( self.flashendtime, var_1 );
    else
    {
        self.flashendtime = var_1;

        if ( isdefined( self.asm ) )
            scripts\asm\asm::asm_setstate( "_encstr_9FFD1873B898D6490DF1960AEB23B25F8388AF83D07004124798" );
    }

    self notify( "_encstr_BA4008CC8DC2B9345991" );
}

fasteranimspeed()
{
    return 1.5;
}

randomfasteranimspeed()
{
    return randomfloatrange( 1, 1.2 );
}

player_sees_my_scope()
{
    var_0 = self geteye();

    foreach ( var_2 in level.players )
    {
        if ( !self cansee( var_2 ) )
            continue;

        var_3 = var_2 geteye();
        var_4 = vectortoangles( var_0 - var_3 );
        var_5 = anglestoforward( var_4 );
        var_6 = var_2 getplayerangles();
        var_7 = anglestoforward( var_6 );
        var_8 = vectordot( var_5, var_7 );

        if ( var_8 < 0.805 )
            continue;

        if ( scripts\engine\utility::cointoss() && var_8 >= 0.996 )
            continue;

        return 1;
    }

    return 0;
}

combat_playfacialanim( var_0, var_1 )
{
    self.facialidx = _encstr_B88216C2AEC5B258A3A886C738780D9EB5374EFFA007EB93::playfacialanim( var_0, var_1, self.facialidx );
}

#using_animtree("_encstr_A40101");

combat_clearfacialanim()
{
    self.facialidx = undefined;
    self aiclearanim( %_encstr_B2CC0571402BC0, 0.2 );
}
