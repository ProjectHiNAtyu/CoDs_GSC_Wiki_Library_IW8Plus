// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

registernotetracks()
{
    anim.notetracks["_encstr_97D21789D0C8570903A8AB92D07B3D4B89E15042F6B3970A45"] = ::notetrackmovementstop;
    anim.notetracks["_encstr_A2691718F24CC3F6974714852DDF988966AF8A8ADBE6098872"] = ::notetrackmovementwalk;
    anim.notetracks["_encstr_9C64168E1898BD39711F6327732D72FC7ACA56C673807626"] = ::notetrackmovementrun;
    anim.notetracks["_encstr_98F0150B923C988E6BE0DE59DD8DD501D1E9D6776B384B"] = ::notetrackmovementstop;
    anim.notetracks["_encstr_9DD115308351988FFAFD24A555522563C026C20827FC10"] = ::notetrackmovementwalk;
    anim.notetracks["_encstr_897114B0CD5ADA7DDAF6EC955B2B9BE8409E02C95DE6"] = ::notetrackmovementrun;
    anim.notetracks["_encstr_94622F0BFA242DF75555DB4DE5A14544015023D8CFA250C8A1711F25E8A3835B19DDE19B76F2DD7D9F6FBBC801D197F3DE"] = ::notetrackmovementgunposeoverride;
    anim.notetracks["_encstr_984F1C21957978B82A9FC5FBF343F8C00D7E22917ED7786DD377F9F3CB2B"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_AAE91D59371887F9EF587B4298E12D2771DFFD902E60A33FB5C1039AC809A3"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_B7C81E5288F3FF994887160D95F85D5F2DA96FCEB158DB4FB8FF3B025708667B"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_AFD51D523093654759985E452E03BF2A23DA1FBEB0471BE713E8436C4F285B"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_AF2223F2903385A7B978BEA58EA31F4A437ABF5E50E7BB87B348BCDDAC0B1796D568A3E2F0"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_876D2403AEE4D0183F5A6B31B34BC8E83F7833794BCDB05D1331E3B80AC37DD1D6820F5BF374"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_A46B192C9BD2B6BE1BF6CE953938BD6EAC02E908B23C1CBDDCAC91"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_AB4A2085DC2DADBEC6DB67CA9383BDE6AC40D308CA0FC1DBE6B232FA36C9DBD56C0D"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_ABE6177BD6ECD8AF27525339AB43C0F007703B71509280D047"] = ::notetrackcoverposerequest;
    anim.notetracks["_encstr_958C1085732DD6EB8596ADA59B9D807A1062"] = ::notetrackalertnessaiming;
    anim.notetracks["_encstr_A88C104ED8587DF9B7D34F57356CD6F5BAAB"] = ::notetrackalertnessalert;
    anim.notetracks["_encstr_A15D18E64D89F9D748EB871398401FC70F42D7B649BF3BEBE1B9"] = ::notetrackalertnesscasual;
    anim.notetracks["_encstr_9F9517A95A9313FFCE317FC66C7AE5E01018434E0F6CD7C84B"] = ::notetrackalertnessalert;
    anim.notetracks["_encstr_B2EE18D1E024F59F3F74F9A68CF0480633484AD94132999F6807"] = ::notetrackalertnessaiming;
    anim.notetracks["_encstr_BDEF0B9F1DF063A73D2216EAE8"] = ::notetrackgravity;
    anim.notetracks["_encstr_8A550C0172914043BBE749CF8342"] = ::notetrackgravity;
    anim.notetracks["_encstr_AFBF0F1D2014F70F4149140A18D1D5309D"] = ::notetrackbodyfall;
    anim.notetracks["_encstr_BC650F267B235ECCB036B180DCAD588D36"] = ::notetrackbodyfall;
    anim.notetracks["_encstr_95B30A0E65FA735EDD1710B0"] = ::notetrackcodemove;
    anim.notetracks["_encstr_AA4F0B1C761AE3CE45A33860E7"] = ::notetrackfaceenemy;
    anim.notetracks["_encstr_8AC711B3980E6B65A077A2BD27A8AEB73EB10B"] = ::notetrackpistolrechamber;
    anim.notetracks["_encstr_BC6F0BD9BF1235F1630CB1A835"] = ::notetrackloadshell;
    anim.notetracks["_encstr_807805775B15A2"] = ::notetrackfire;
    anim.notetracks["_encstr_BCCB0BC38B6E020FD04BA26E02"] = ::notetrackfirespray;
    anim.notetracks["_encstr_BE650C76AE9BF546BEB1A1566ED1"] = ::notetrackguntochest;
    anim.notetracks["_encstr_B14F0B0CF52D9F6D161212AAD7"] = ::notetrackguntoback;
    anim.notetracks["_encstr_9F5C0CF73540F70A3FE8E21A20B1"] = ::notetrackguntoright;
    anim.notetracks["_encstr_89D50E422C23ECBFD889411C70D01FC0"] = ::notetrackpistolpickup;
    anim.notetracks["_encstr_9F830FEFB117533FFD1970504356F709D7"] = ::notetrackpistolputaway;
    anim.notetracks["_encstr_ABCB0C5B50B52CC3E0770334FB4B"] = ::notetrackrefillclip;
    anim.notetracks["_encstr_824A0C43A08DFF82518FBF75800B"] = ::notetrackrefillclip;
    anim.notetracks["_encstr_8FC906341DEBDBCD"] = ::notetrackhton0;
    anim.notetracks["_encstr_8C0C08993C9138084737"] = ::notetrackhton0;
    anim.notetracks["_encstr_9E0C0886D17DEDE6EBC4"] = ::notetrackhton1;
    anim.notetracks["_encstr_B49B07D03AEB7B6633"] = ::notetrackhtoff;

    if ( isdefined( level._notetrackfx ) )
    {
        var_0 = getarraykeys( level._notetrackfx );

        foreach ( var_2 in var_0 )
            anim.notetracks[var_2] = ::customnotetrackfx;
    }
}

notetrackstopanim( var_0, var_1 )
{

}

notetrackcoverposerequest( var_0, var_1 )
{
    var_2 = strtok( var_0, "_encstr_B81704CEC1D9" )[1];

    switch ( var_2 )
    {
        case "_encstr_8F970BB1B767B239AF635999A3":
        case "_encstr_B4BC0CD208DC7F72091F7469CD38":
        case "_encstr_8AE30DB740F32563F7FECA85DDB7FA":
        case "_encstr_B3460FBD100BD76B656B09F02BB7630732":
        case "_encstr_8A5413813586D8CE09CBDBDFBB6380203A8DCB199C":
        case "_encstr_BD0812063068BDF3601157235908AAE2F8DBBE4C":
        case "_encstr_A1280C1BDB67B239FAC9B4D91A47":
        case "_encstr_BA25082B3C0EDB37AC46":
        case "_encstr_9F24062875D5FD98":
            self.a.coverpose_request = var_2;
            break;
        default:
    }
}

notetrackmovementstop( var_0, var_1 )
{
    self.a.movement = "_encstr_A419051B33CF57";
}

notetrackmovementwalk( var_0, var_1 )
{
    self.a.movement = "_encstr_94F605738A2B22";
}

notetrackmovementrun( var_0, var_1 )
{
    self.a.movement = "_encstr_A419043B23CB";
}

notetrackmovementgunposeoverride( var_0, var_1 )
{
    self.asm.movementgunposeoverride = "_encstr_A4B80D8A1388299FBDC0E15AC89483";
}

notetrackalertnessaiming( var_0, var_1 )
{

}

notetrackalertnesscasual( var_0, var_1 )
{

}

notetrackalertnessalert( var_0, var_1 )
{

}

notetrackloadshell( var_0, var_1 )
{

}

notetrackpistolrechamber( var_0, var_1 )
{

}

notetrackgravity( var_0, var_1 )
{
    if ( issubstr( var_0, "_encstr_9707035F3B" ) )
        self animmode( "_encstr_89D60887EA31EEA7DBEB" );
    else if ( issubstr( var_0, "_encstr_9819045FD029" ) )
        self animmode( "_encstr_AA970ACDDBCEE4C267B4E8E5" );
}

customnotetrackfx( var_0, var_1 )
{
    if ( isdefined( self.groundtype ) )
        var_2 = self.groundtype;
    else
        var_2 = "_encstr_B467052947C3DD";

    var_3 = undefined;

    if ( isdefined( level._notetrackfx[var_0][var_2] ) )
        var_3 = level._notetrackfx[var_0][var_2];
    else if ( isdefined( level._notetrackfx[var_0]["_encstr_A61904730372"] ) )
        var_3 = level._notetrackfx[var_0]["_encstr_A61904730372"];

    if ( !isdefined( var_3 ) )
        return;

    if ( isai( self ) && isdefined( var_3.fx ) )
        playfxontag( var_3.fx, self, var_3.tag );

    if ( !isdefined( var_3.sound_prefix ) && !isdefined( var_3.sound_suffix ) )
        return;

    var_4 = "_encstr_A40101" + var_3.sound_prefix + var_2 + var_3.sound_suffix;

    if ( soundexists( var_4 ) )
        self playsound( var_4 );
}

notetrackcodemove( var_0, var_1 )
{
    return "_encstr_95B30A0E65FA735EDD1710B0";
}

notetrackfaceenemy( var_0, var_1 )
{
    self orientmode( "_encstr_A43B0BCCC2B1950295B995D6E5" );
}

notetrackbodyfall( var_0, var_1 )
{
    var_2 = "_encstr_B63507BEDCB6588D36";

    if ( issubstr( var_0, "_encstr_8AEC06D3682B0F3A" ) )
        var_2 = "_encstr_BC9207CE59E39A1780";

    if ( isdefined( self.groundtype ) )
        var_3 = self.groundtype;
    else
        var_3 = "_encstr_B467052947C3DD";

    if ( var_2 == "_encstr_BC9207CE59E39A1780" )
        self playsurfacesound( "_encstr_BE570FC4F646E5CC8536D8D7A3DBE4E6DB", var_3 );
    else
        self playsurfacesound( "_encstr_9CA2144E9803EBEAFFDBD406E963A84A4190312F9570", var_3 );
}

donotetracks( var_0, var_1, var_2 )
{
    for (;;)
    {
        self waittill( var_0, var_3 );

        if ( !isdefined( var_3 ) )
            var_3 = [ "_encstr_A2500A039865CFC728B5151C" ];

        if ( !isarray( var_3 ) )
            var_3 = [ var_3 ];

        scripts\common\notetrack::validatenotetracks( var_0, var_3 );

        foreach ( var_5 in var_3 )
        {
            var_6 = handlenotetrack( var_5, var_0, var_1 );

            if ( isdefined( var_6 ) )
                return var_6;
        }
    }
}

handlenotetrack( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self.fnasm_handlenotetrack ) )
        [[ self.fnasm_handlenotetrack ]]( var_0, var_1, var_2, var_3 );
    else if ( isdefined( level._defaultnotetrackhandler ) )
        [[ level._defaultnotetrackhandler ]]( var_0, var_1, var_2, var_3 );
    else
    {

    }
}

hascustomnotetrackhandler( var_0 )
{
    var_1 = anim.notetracks[var_0];

    if ( isdefined( var_1 ) )
        return 1;

    if ( isdefined( self.customnotetrackhandler ) )
        return 1;

    return 0;
}

handlecustomnotetrackhandler( var_0, var_1, var_2, var_3 )
{
    var_4 = anim.notetracks[var_0];

    if ( isdefined( var_4 ) )
        return [[ var_4 ]]( var_0, var_1 );
    else if ( isdefined( self.customnotetrackhandler ) )
    {
        if ( isdefined( var_3 ) )
            return [[ self.customnotetrackhandler ]]( var_0, var_1, var_2, var_3 );
        else
            return [[ self.customnotetrackhandler ]]( var_0, var_1, var_2 );
    }
}

handlecommonnotetrack( var_0, var_1, var_2, var_3 )
{
    switch ( var_0 )
    {
        case "_encstr_A2500A039865CFC728B5151C":
        case "_encstr_A4BA0733B473D2DCA1":
        case "_encstr_B41804CA7391":
            return var_0;
        case "_encstr_A2F40D559F82CAA37B326FA7DBB497":
            if ( isdefined( self.enemy ) )
                return var_0;

            break;
        case "_encstr_BCC00CEE5B6F3F88C9685F9355E8":
            thread scripts\engine\utility::play_sound_in_space( "_encstr_BC511279B563791309D350B81ADFAF739F597161", self gettagorigin( "_encstr_A1AC11BBE105AF81735F12DD309F0971AD1133" ) );
            break;
        case "_encstr_9D5B0CB9DDB437A1808D5893EC2B":
            thread scripts\engine\utility::play_sound_in_space( "_encstr_98FB12BAC159E72F8167FFF94598790B779B92A2", self gettagorigin( "_encstr_A1AC11BBE105AF81735F12DD309F0971AD1133" ) );
            break;
        case "_encstr_897F09E5DA12F567F74BF0":
            self.a.nodeath = 1;
            break;
        case "_encstr_AA2D087E578778329CAE":
            self.allowpain = 0;
            break;
        case "_encstr_A38F0BE74D928FA36883307893":
            self.allowpain = 1;
            break;
        case "_encstr_930915318D180D27E9C9AA22D1976696BA5DA1BF395886":
        case "_encstr_B321130BB95AB67D5BAC3659CA804F049C5A3BA1D1":
            self.a.meleestate = "_encstr_9353062E718710C9";
            break;
        case "_encstr_9C9014EE7B6B1327627F407A929981B70209CF6C3D2D":
        case "_encstr_A11412B0CDB4DA7DB6951BACB240A701C62BCC1D":
            self.a.meleestate = "_encstr_B1AD05C65666E8";
            break;
        case "_encstr_B9E21AC373D130A7FB4707014F2259D07C1EABD84E2C60CC523F0D31":
            if ( isdefined( self.hatmodel ) )
            {
                if ( isdefined( self.helmetsidemodel ) )
                {
                    self detach( self.helmetsidemodel, "_encstr_B1090F51E02747F41744A9B574671CC91F" );
                    self.helmetsidemodel = undefined;
                }

                self detach( self.hatmodel, "_encstr_A40101" );
                self attach( self.hatmodel, "_encstr_9D8C1015A08E7DEA1550143DE4FA31158C45" );
                self.hatmodel = undefined;
            }

            break;
        case "_encstr_BD050CA5AB32D73050AFF0A952EB":
            level notify( "_encstr_A26E0C9D8D0BE6B9EB26E49558D6", self );
            break;
        case "_encstr_B8050CC493B20B5BFA9D63C2B9CD":
            level notify( "_encstr_A26E0C9D8D0BE6B9EB26E49558D6", self );
            break;
        case "_encstr_A8700CEB9BE918B5610B457B2BFB":
            if ( !self.fixednode )
                self animmode( "_encstr_AAF30EE041584A3F2ECB59F2F3734BC3" );

            break;
        default:
            return "_encstr_80840C48B73F2021AE1A20684207";
    }
}

donotetracksintercept( var_0, var_1, var_2 )
{
    for (;;)
    {
        self waittill( var_0, var_3 );

        if ( !isdefined( var_3 ) )
            var_3 = [ "_encstr_A2500A039865CFC728B5151C" ];

        if ( !isarray( var_3 ) )
            var_3 = [ var_3 ];

        scripts\common\notetrack::validatenotetracks( var_0, var_3 );
        var_4 = [[ var_1 ]]( var_3 );

        if ( isdefined( var_4 ) && var_4 )
            continue;

        var_5 = undefined;

        foreach ( var_7 in var_3 )
        {
            var_8 = handlenotetrack( var_7, var_0 );

            if ( isdefined( var_8 ) )
            {
                var_5 = var_8;
                break;
            }
        }

        if ( isdefined( var_5 ) )
            return var_5;
    }
}

donotetrackspostcallback( var_0, var_1 )
{
    for (;;)
    {
        self waittill( var_0, var_2 );

        if ( !isdefined( var_2 ) )
            var_2 = [ "_encstr_A2500A039865CFC728B5151C" ];

        if ( !isarray( var_2 ) )
            var_2 = [ var_2 ];

        scripts\common\notetrack::validatenotetracks( var_0, var_2 );
        var_3 = undefined;

        foreach ( var_5 in var_2 )
        {
            var_6 = handlenotetrack( var_5, var_0 );

            if ( isdefined( var_6 ) )
            {
                var_3 = var_6;
                break;
            }
        }

        [[ var_1 ]]( var_2 );

        if ( isdefined( var_3 ) )
            return var_3;
    }
}

donotetracksfortimeout( var_0, var_1, var_2, var_3 )
{
    donotetracks( var_0, var_2, var_3 );
}

donotetracksforever( var_0, var_1, var_2, var_3 )
{
    donotetracksforeverproc( ::donotetracks, var_0, var_1, var_2, var_3 );
}

donotetracksforeverintercept( var_0, var_1, var_2, var_3 )
{
    donotetracksforeverproc( ::donotetracksintercept, var_0, var_1, var_2, var_3 );
}

donotetracksforeverproc( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_2 ) )
        self endon( var_2 );

    self endon( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );

    if ( !isdefined( var_4 ) )
        var_4 = "_encstr_A2500A039865CFC728B5151C";

    for (;;)
    {
        var_5 = gettime();
        var_6 = [[ var_0 ]]( var_1, var_3, var_4 );
        var_7 = gettime() - var_5;

        if ( var_7 < 0.05 )
        {
            var_5 = gettime();
            var_6 = [[ var_0 ]]( var_1, var_3, var_4 );
            var_7 = gettime() - var_5;

            if ( var_7 < 0.05 )
                wait( 0.05 - var_7 );
        }
    }
}

donotetrackswithtimeout( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4 thread donotetracksfortimeendnotify( var_1 );
    donotetracksfortimeproc( ::donotetracksfortimeout, var_0, var_2, var_3, var_4 );
}

donotetracksfortime( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4 thread donotetracksfortimeendnotify( var_0 );
    donotetracksfortimeproc( ::donotetracksforever, var_1, var_2, var_3, var_4 );
}

donotetracksfortimeintercept( var_0, var_1, var_2, var_3 )
{
    var_4 = spawnstruct();
    var_4 thread donotetracksfortimeendnotify( var_0 );
    donotetracksfortimeproc( ::donotetracksforeverintercept, var_1, var_2, var_3, var_4 );
}

donotetracksfortimeproc( var_0, var_1, var_2, var_3, var_4 )
{
    var_4 endon( "_encstr_A1C41083106FB2D76828ECF5BD33F7BE8FD0" );
    [[ var_0 ]]( var_1, undefined, var_2, var_3 );
}

donotetracksfortimeendnotify( var_0 )
{
    wait( var_0 );
    self notify( "_encstr_A1C41083106FB2D76828ECF5BD33F7BE8FD0" );
}

notetrack_prefix_handler( var_0 )
{
    return [[ level.fnnotetrackprefixhandler ]]( var_0 );
}

notetrack_prefix_handler_common( var_0 )
{
    return 0;
}

shootnotetrack()
{
    waittillframeend;

    if ( isdefined( self ) && gettime() > self.a.lastshoottime )
    {
        if ( istrue( self._blackboard.shootparams_valid ) )
            var_0 = self._blackboard.shootparams_shotsperburst == 1;
        else
            var_0 = 1;

        _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::shootenemywrapper( var_0 );
        scripts\asm\shared\utility::decrementbulletsinclip();

        if ( weaponclass( self.weapon ) == "_encstr_98080F93DBB1B556D11B85ABB936D059E4" )
            self.rocketammo--;
    }
}

notetrackfire( var_0, var_1 )
{
    if ( isdefined( self.script ) && isdefined( anim.fire_notetrack_functions[self.script] ) )
        thread [[ anim.fire_notetrack_functions[self.script] ]]();
    else
        thread shootnotetrack();
}

notetrackfirespray( var_0, var_1 )
{
    if ( !isalive( self ) && self isbadguy() )
    {
        if ( isdefined( self.changed_team ) )
            return;

        self.changed_team = 1;
        var_2["_encstr_BA840579D3F7F6"] = "_encstr_BD4806FB49E88DEF";
        var_2["_encstr_BD4806FB49E88DEF"] = "_encstr_BA840579D3F7F6";
        self.team = var_2[self.team];
    }

    if ( !issentient( self ) )
    {
        self notify( "_encstr_807805775B15A2" );
        return;
    }

    if ( getqueuedspleveltransients( self.a.weaponpos["_encstr_9353062E718710C9"] ) )
        return;

    var_3 = self getmuzzlepos();
    var_4 = anglestoforward( self getmuzzleangle() );
    var_5 = 10;

    if ( isdefined( self.isrambo ) )
        var_5 = 20;

    var_6 = 0;

    if ( isalive( self.enemy ) && issentient( self.enemy ) && self canshootenemy() )
    {
        var_7 = vectornormalize( self.enemy geteye() - var_3 );

        if ( vectordot( var_4, var_7 ) > cos( var_5 ) )
            var_6 = 1;
    }

    if ( var_6 )
        _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::shootenemywrapper();
    else
    {
        var_4 = var_4 + ( ( randomfloat( 2 ) - 1 ) * 0.1, ( randomfloat( 2 ) - 1 ) * 0.1, ( randomfloat( 2 ) - 1 ) * 0.1 );
        var_8 = var_3 + var_4 * 1000;
        self [[ anim.shootposwrapper_func ]]( var_8 );
    }

    scripts\asm\shared\utility::decrementbulletsinclip();
}

notetrackrefillclip( var_0, var_1 )
{
    _encstr_AA451C0AB940B9CBFD270637752B42A7C0C10652D058749256317A3777C6::refillclip();
    self.a.needstorechamber = 0;
}

getpreferredweapon()
{
    if ( isdefined( self.wantshotgun ) && self.wantshotgun )
    {
        if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isshotgun( self.primaryweapon ) )
            return self.primaryweapon;
        else if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isshotgun( self.secondaryweapon ) )
            return self.secondaryweapon;
    }

    return self.primaryweapon;
}

notetrackguntochest( var_0, var_1 )
{
    if ( isdefined( self.fnplaceweaponon ) )
        self [[ self.fnplaceweaponon ]]( self.weapon, "_encstr_BC7606E8E83F22AB" );
}

notetrackguntoback( var_0, var_1 )
{
    if ( isdefined( self.fnplaceweaponon ) )
        self [[ self.fnplaceweaponon ]]( self.weapon, "_encstr_959B05982C8DDA" );

    self.weapon = getpreferredweapon();
    self.bulletsinclip = weaponclipsize( self.weapon );
}

notetrackpistolpickup( var_0, var_1 )
{
    if ( isdefined( self.fnplaceweaponon ) )
        self [[ self.fnplaceweaponon ]]( self.sidearm, "_encstr_9353062E718710C9" );

    self.bulletsinclip = weaponclipsize( self.weapon );
    self notify( "_encstr_A22513EE59850E7BB9AF37EE4BA38D1AD791EDB9CA" );
}

notetrackpistolputaway( var_0, var_1 )
{
    if ( isdefined( self.fnplaceweaponon ) )
    {
        if ( isdefined( self.stowsidearmposition ) )
            self [[ self.fnplaceweaponon ]]( self.weapon, self.stowsidearmposition );
        else
            self [[ self.fnplaceweaponon ]]( self.weapon, "_encstr_AABA05236DC831" );
    }

    self.weapon = getpreferredweapon();
    self.bulletsinclip = weaponclipsize( self.weapon );
}

notetrackguntoright( var_0, var_1 )
{
    if ( isdefined( self.fnplaceweaponon ) )
        self [[ self.fnplaceweaponon ]]( self.weapon, "_encstr_9353062E718710C9" );

    self.bulletsinclip = weaponclipsize( self.weapon );
}

notetrackhton0( var_0, var_1 )
{
    if ( !self isinscriptedstate() )
        self enablestatelookat( 1, 0 );
}

notetrackhton1( var_0, var_1 )
{
    if ( !self isinscriptedstate() )
        self enablestatelookat( 1, 1 );
}

notetrackhtoff( var_0, var_1 )
{
    if ( !self isinscriptedstate() )
        self enablestatelookat( 0 );
}
