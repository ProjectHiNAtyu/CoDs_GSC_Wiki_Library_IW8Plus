// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

#using_animtree("_encstr_B1AD0E7656E6CA4E5AD8D786AB5B85B9");

#using_animtree("_encstr_A40101");

initanimtree( var_0 )
{
    self clearanim( %_encstr_A39B05D63DA213, 0.3 );
    self setanim( %_encstr_A39B05D63DA213, 1, 0 );

    if ( var_0 != "_encstr_950D05F8FF11B8" && var_0 != "_encstr_A3750609A5E61883" )
        self.a.special = "_encstr_AABA05236DC831";

    self.a.aimweight = 1.0;
    self.a.aimweight_start = 1.0;
    self.a.aimweight_end = 1.0;
    self.a.aimweight_transframes = 0;
    self.a.aimweight_t = 0;
    updateisincombattimer();
}

#using_animtree("_encstr_A40101");

#using_animtree("_encstr_A40101");

#using_animtree("_encstr_A40101");

#using_animtree("_encstr_A40101");

updateanimpose()
{
    if ( isdefined( self.desired_anim_pose ) && self.desired_anim_pose != self.currentpose )
    {
        if ( self.currentpose == "_encstr_9F24062875D5FD98" )
            exitpronewrapper( 0.5 );

        if ( self.desired_anim_pose == "_encstr_9F24062875D5FD98" )
        {
            self setproneanimnodes( -45, 45, %_encstr_B7CD10B81A40B0AFB7C222346FE9820F78F0, %_encstr_A3650FAB8363D0F0156F96A9D4F5E898CA, %_encstr_B9890E88C367C8CB09ED5D54022123B3 );
            enterpronewrapper( 0.5 );
            self setanimknoball( lookupanim( "_encstr_95DE0E4228CDA62F78D5B790EE207BEF", "_encstr_A1450FFB23A26E7457DA21C8632F4DC240" ), %_encstr_A39B05D63DA213, 1, 0.1, 1 );
        }
    }

    self.desired_anim_pose = undefined;
}

initialize( var_0 )
{
    self endon( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    self waittill( "_encstr_98631021ACB18DCCC9CA2BD3CA6EF69D5627" );
}

printdisplaceinfo()
{
    self endon( "_encstr_A3750609A5E61883" );
    self notify( "_encstr_BD3D0E38BF6B1BC91ADE4DCF72720543" );
    self endon( "_encstr_BD3D0E38BF6B1BC91ADE4DCF72720543" );

    for (;;)
        wait 0.05;
}

isincombat( var_0 )
{
    if ( ( !isdefined( var_0 ) || var_0 ) && self.alertlevelint > 1 )
        return 1;

    if ( isdefined( self.enemy ) )
        return 1;

    return self.a.combatendtime > gettime();
}

updateisincombattimer()
{
    if ( isdefined( self.enemy ) )
        self.a.combatendtime = gettime() + anim.combatmemorytimeconst + randomint( anim.combatmemorytimerand );
}

notifyaftertime( var_0, var_1, var_2 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( var_1 );
    wait( var_2 );
    self notify( var_0 );
}

drawstring( var_0 )
{
    self endon( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    self endon( "_encstr_980E0E9D5EA3B9DD6633D0F07B3CAD91" );

    for (;;)
        wait 0.05;
}

drawstringtime( var_0, var_1, var_2, var_3 )
{
    var_4 = var_3 * 20;

    for ( var_5 = 0; var_5 < var_4; var_5++ )
        wait 0.05;
}

showlastenemysightpos( var_0 )
{
    self notify( "_encstr_B38E1176F61D80B5B9BDDDB9012BB9566B9719" );
    self endon( "_encstr_B38E1176F61D80B5B9BDDDB9012BB9566B9719" );
    self endon( "_encstr_A3750609A5E61883" );

    if ( !isdefined( self.enemy ) )
        return;

    if ( self.enemy.team == "_encstr_BC850785638DA59537" )
        var_1 = ( 0.4, 0.7, 1 );
    else
        var_1 = ( 1, 0.7, 0.4 );

    for (;;)
    {
        wait 0.05;

        if ( !isdefined( self.lastenemysightpos ) )
            continue;
    }
}

hasenemysightpos()
{
    if ( isdefined( self.node ) )
        return _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::canseeenemyfromexposed() || _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::cansuppressenemyfromexposed();
    else
        return _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::canseeenemy() || _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::cansuppressenemy();
}

getenemysightpos()
{
    return self.goodshootpos;
}

debugtimeout()
{
    wait 5;
    self notify( "_encstr_945408D1B4B556B7BA3A" );
}

debugposinternal( var_0, var_1, var_2 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self notify( "_encstr_B80D0C4803BFC38982E786157F9E" + var_0 );
    self endon( "_encstr_B80D0C4803BFC38982E786157F9E" + var_0 );
    var_3 = spawnstruct();
    var_3 thread debugtimeout();
    var_3 endon( "_encstr_945408D1B4B556B7BA3A" );

    if ( self.enemy.team == "_encstr_BC850785638DA59537" )
        var_4 = ( 0.4, 0.7, 1 );
    else
        var_4 = ( 1, 0.7, 0.4 );

    for (;;)
        wait 0.05;
}

debugpos( var_0, var_1 )
{
    thread debugposinternal( var_0, var_1, 2.15 );
}

debugpossize( var_0, var_1, var_2 )
{
    thread debugposinternal( var_0, var_1, var_2 );
}

debugburstprint( var_0, var_1 )
{
    var_2 = var_0 / var_1;
    var_3 = undefined;

    if ( var_0 == self.bulletsinclip )
        var_3 = "_encstr_BEBF0B0BD863084EB7AB9B8CCD";
    else if ( var_2 < 0.25 )
        var_3 = "_encstr_BD9B0C0B908FF35D4A952D128FD0";
    else if ( var_2 < 0.5 )
        var_3 = "_encstr_A2DC0A8FF3053652806BC20B";
    else
        var_3 = "_encstr_8CDC0B78A776F9512A5BC64EF3";

    thread debugpossize( self.origin + ( 0, 0, 42 ), var_3, 1.5 );
    thread debugpos( self.origin + ( 0, 0, 60 ), "_encstr_8AAE0CD4AE1C834E2B9BB95ACDCE" );
}

printshootproc()
{
    self endon( "_encstr_A3750609A5E61883" );
    self notify( "_encstr_AD4F0C7751B7B39030A8454D0382" + self.export );
    self endon( "_encstr_AD4F0C7751B7B39030A8454D0382" + self.export );
    var_0 = 0.25;
    var_1 = var_0 * 20;

    for ( var_2 = 0; var_2 < var_1; var_2 = var_2 + 1 )
        wait 0.05;
}

printshoot()
{

}

showdebugproc( var_0, var_1, var_2, var_3 )
{
    self endon( "_encstr_A3750609A5E61883" );
    var_4 = var_3 * 20;

    for ( var_5 = 0; var_5 < var_4; var_5 = var_5 + 1 )
        wait 0.05;
}

showdebugline( var_0, var_1, var_2, var_3 )
{
    thread showdebugproc( var_0, var_1 + ( 0, 0, -5 ), var_2, var_3 );
}

shootenemywrapper_normal( var_0 )
{
    self.a.lastshoottime = gettime();
    scripts\common\gameskill::set_accuracy_based_on_situation();
    self notify( "_encstr_B38C093786DBBD3AA5B99D" );

    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isasniper() && istrue( self._blackboard.shootparams_valid ) && isdefined( self._blackboard.shootparams_pos ) )
        self shoot( 1, self._blackboard.shootparams_pos, 1, 0, 1 );
    else
    {
        if ( isagent( self ) )
            var_0 = 1;

        self shoot( 1, undefined, var_0 );
    }
}

shootenemywrapper_shootnotify( var_0 )
{
    level notify( "_encstr_B7AF0EC29BF5959B2BD6CB7DDCA17BE8", self );
    shootenemywrapper_normal( var_0 );
}

shootposwrapper( var_0, var_1 )
{
    self.a.lastshoottime = gettime();

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    self notify( "_encstr_B38C093786DBBD3AA5B99D" );

    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isasniper() )
        self shoot( 1, var_0, 1, 1, 1 );
    else
    {
        var_2 = 0;

        if ( isdefined( self.enemy ) && istrue( self.enemy.underlowcover ) )
            var_2 = 1;

        var_3 = bulletspread( self getmuzzlepos(), var_0, 4 );
        self shoot( 1, var_3, var_1, var_2 );
    }
}

throwgun()
{
    var_0 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", ( 0, 0, 0 ) );
    var_0 setmodel( "_encstr_A1EF059C2380F2" );
    var_0.origin = self gettagorigin( "_encstr_A1AC113BE001AF83334F1AD5209F0B51A910B3" ) + ( 50, 50, 0 );
    var_0.angles = self gettagangles( "_encstr_A1AC113BE001AF83334F1AD5209F0B51A910B3" );
    var_1 = anglestoright( var_0.angles );
    var_1 = var_1 * 15;
    var_2 = anglestoforward( var_0.angles );
    var_2 = var_2 * 15;
    var_0 movegravity( ( 0, 50, 150 ), 100 );
    var_3 = "_encstr_B80108EE2BB0837B737D" + createheadicon( self.weapon );
    var_4 = spawn( var_3, var_0.origin );
    var_4.angles = self gettagangles( "_encstr_A1AC113BE001AF83334F1AD5209F0B51A910B3" );
    var_4 linkto( var_0 );
    var_5 = var_0.origin;

    while ( isdefined( var_4 ) && isdefined( var_4.origin ) )
    {
        var_6 = var_5;
        var_7 = var_0.origin;
        var_8 = vectortoangles( var_7 - var_6 );
        var_2 = anglestoforward( var_8 );
        var_2 = var_2 * 4;
        var_9 = scripts\engine\trace::_bullet_trace( var_7, var_7 + var_2, 1, var_4 );

        if ( isalive( var_9["_encstr_B60E07C9FD1C2055E3"] ) && var_9["_encstr_B60E07C9FD1C2055E3"] == self )
        {
            wait 0.05;
            continue;
        }

        if ( var_9["_encstr_B130095358E1B3930B687D"] < 1.0 )
            break;

        var_5 = var_0.origin;
        wait 0.05;
    }

    if ( isdefined( var_4 ) && isdefined( var_4.origin ) )
        var_4 unlink();

    var_0 delete();
}

personalcoldbreath()
{
    var_0 = "_encstr_A93008E15097F7E5371D";
    self endon( "_encstr_A3750609A5E61883" );
    self notify( "_encstr_A69515374BEF98478BAD68AF9728F8E382627E25954E7C" );
    self endon( "_encstr_A69515374BEF98478BAD68AF9728F8E382627E25954E7C" );

    while ( isdefined( self ) )
    {
        wait 0.05;

        if ( !isdefined( self ) )
            break;

        if ( isdefined( self.a.movement ) && self.a.movement == "_encstr_A419051B33CF57" )
        {
            if ( isdefined( self.isindoor ) && self.isindoor == 1 )
                continue;

            playfxontag( level._effect["_encstr_825A0C6BD768176F2653723ABB0B"], self, var_0 );
            wait( 2.5 + randomfloat( 3 ) );
            continue;
        }

        wait 0.5;
    }
}

ispartiallysuppressedwrapper()
{
    if ( self.suppressionmeter <= self.suppressionthreshold * 0.25 )
        return 0;

    return self issuppressed();
}

showlines( var_0, var_1, var_2 )
{
    for (;;)
    {
        wait 0.05;
        wait 0.05;
    }
}

anim_array( var_0, var_1 )
{
    var_2 = var_0.size;
    var_3 = randomint( var_2 );

    if ( var_2 == 1 )
        return var_0[0];

    var_4 = 0;
    var_5 = 0;

    for ( var_6 = 0; var_6 < var_2; var_6++ )
        var_5 = var_5 + var_1[var_6];

    var_7 = randomfloat( var_5 );
    var_8 = 0;

    for ( var_6 = 0; var_6 < var_2; var_6++ )
    {
        var_8 = var_8 + var_1[var_6];

        if ( var_7 >= var_8 )
            continue;

        var_3 = var_6;
        break;
    }

    return var_0[var_3];
}

canthrowgrenade()
{
    if ( !self.grenadeammo )
        return 0;

    if ( self.script_forcegrenade )
        return 1;

    return isplayer( self.enemy );
}

usingboltactionweapon()
{
    return weaponisboltaction( self.weapon );
}

random_weight( var_0 )
{
    var_1 = randomint( var_0.size );

    if ( var_0.size > 1 )
    {
        var_2 = 0;

        for ( var_3 = 0; var_3 < var_0.size; var_3++ )
            var_2 = var_2 + var_0[var_3];

        var_4 = randomfloat( var_2 );
        var_2 = 0;

        for ( var_3 = 0; var_3 < var_0.size; var_3++ )
        {
            var_2 = var_2 + var_0[var_3];

            if ( var_4 < var_2 )
            {
                var_1 = var_3;
                break;
            }
        }
    }

    return var_1;
}

setfootstepeffect( var_0, var_1, var_2 )
{
    if ( !isdefined( anim.optionalstepeffects ) )
        anim.optionalstepeffects = [];

    anim.optionalstepeffects[var_1] = 1;
    level._effect["_encstr_A1AD062748418001" + var_1][var_0] = var_2;
}

setfootstepeffectsmall( var_0, var_1, var_2 )
{
    if ( !isdefined( anim.optionalstepeffectssmall ) )
        anim.optionalstepeffectssmall = [];

    anim.optionalstepeffectssmall[var_1] = 1;
    level._effect["_encstr_B9520CC373A8385FEAF382241551" + var_1][var_0] = var_2;
}

setfootprinteffect( var_0, var_1, var_2 )
{
    if ( !isdefined( anim.optionalfootprinteffects ) )
        anim.optionalfootprinteffects = [];

    if ( !isdefined( anim.flirfootprinteffects ) )
        anim.flirfootprinteffects = 0;

    anim.optionalfootprinteffects[var_1] = 1;
    level._effect["_encstr_B8E30BBF109D1BBA78B495C3A0" + var_1][var_0] = var_2;
}

unsetfootstepeffect( var_0 )
{
    if ( isdefined( anim.optionalstepeffects ) )
        anim.optionalstepeffects[var_0] = undefined;

    level._effect["_encstr_A1AD062748418001" + var_0] = undefined;
}

unsetfootstepeffectsmall( var_0 )
{
    if ( isdefined( anim.optionalstepeffectssmall ) )
        anim.optionalstepeffectssmall[var_0] = undefined;

    level._effect["_encstr_B9520CC373A8385FEAF382241551" + var_0] = undefined;
}

unsetfootprinteffect( var_0 )
{
    if ( isdefined( anim.optionalfootprinteffects ) )
        anim.optionalfootprinteffects[var_0] = undefined;

    level._effect["_encstr_B8E30BBF109D1BBA78B495C3A0" + var_0] = undefined;
}

setnotetrackeffect( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_2 ) )
        var_2 = "_encstr_A61904730372";

    if ( !isdefined( level._notetrackfx ) )
        level._notetrackfx = [];

    level._notetrackfx[var_0][var_2] = spawnstruct();
    level._notetrackfx[var_0][var_2].tag = var_1;
    level._notetrackfx[var_0][var_2].fx = var_3;
    setnotetracksound( var_0, var_2, var_4, var_5 );
}

setnotetracksound( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( var_1 ) )
        var_1 = "_encstr_A61904730372";

    if ( !isdefined( level._notetrackfx ) )
        level._notetrackfx = [];

    if ( isdefined( level._notetrackfx[var_0][var_1] ) )
        var_4 = level._notetrackfx[var_0][var_1];
    else
    {
        var_4 = spawnstruct();
        level._notetrackfx[var_0][var_1] = var_4;
    }

    if ( isdefined( var_2 ) )
        var_4.sound_prefix = var_2;

    if ( isdefined( var_3 ) )
        var_4.sound_suffix = var_3;
}

enterpronewrapper( var_0 )
{
    thread enterpronewrapperproc( var_0 );
}

enterpronewrapperproc( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self notify( "_encstr_A39812577D723B36A81BB0B02FEFC9499AE5DCED" );
    self endon( "_encstr_A39812577D723B36A81BB0B02FEFC9499AE5DCED" );
    self enterprone( var_0, isdefined( self.a.onback ) );
    self waittill( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );

    if ( self.currentpose != "_encstr_9F24062875D5FD98" && !isdefined( self.a.onback ) )
        self.currentpose = "_encstr_9F24062875D5FD98";
}

stoponback()
{
    exitpronewrapper( 1.0 );
    self.a.onback = undefined;
}

exitpronewrapper( var_0 )
{
    thread exitpronewrapperproc( var_0 );
}

exitpronewrapperproc( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self notify( "_encstr_A39812577D723B36A81BB0B02FEFC9499AE5DCED" );
    self endon( "_encstr_A39812577D723B36A81BB0B02FEFC9499AE5DCED" );
    self exitprone( var_0 );
    self waittill( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );

    if ( self.currentpose == "_encstr_9F24062875D5FD98" )
        self.currentpose = "_encstr_9C3D071B63023B26C3";
}

animarray( var_0 )
{
    return self.a.array[var_0];
}

animarrayanyexist( var_0 )
{
    return isdefined( self.a.array[var_0] ) && self.a.array[var_0].size > 0;
}

animarraypickrandom( var_0 )
{
    var_1 = randomint( self.a.array[var_0].size );
    return self.a.array[var_0][var_1];
}

array( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 )
{
    var_14 = [];

    if ( isdefined( var_0 ) )
        var_14[0] = var_0;
    else
        return var_14;

    if ( isdefined( var_1 ) )
        var_14[1] = var_1;
    else
        return var_14;

    if ( isdefined( var_2 ) )
        var_14[2] = var_2;
    else
        return var_14;

    if ( isdefined( var_3 ) )
        var_14[3] = var_3;
    else
        return var_14;

    if ( isdefined( var_4 ) )
        var_14[4] = var_4;
    else
        return var_14;

    if ( isdefined( var_5 ) )
        var_14[5] = var_5;
    else
        return var_14;

    if ( isdefined( var_6 ) )
        var_14[6] = var_6;
    else
        return var_14;

    if ( isdefined( var_7 ) )
        var_14[7] = var_7;
    else
        return var_14;

    if ( isdefined( var_8 ) )
        var_14[8] = var_8;
    else
        return var_14;

    if ( isdefined( var_9 ) )
        var_14[9] = var_9;
    else
        return var_14;

    if ( isdefined( var_10 ) )
        var_14[10] = var_10;
    else
        return var_14;

    if ( isdefined( var_11 ) )
        var_14[11] = var_11;
    else
        return var_14;

    if ( isdefined( var_12 ) )
        var_14[12] = var_12;
    else
        return var_14;

    if ( isdefined( var_13 ) )
        var_14[13] = var_13;

    return var_14;
}

getaiprimaryweapon()
{
    return self.primaryweapon;
}

getaisecondaryweapon()
{
    return self.secondaryweapon;
}

getaisidearmweapon()
{
    return self.sidearm;
}

getaicurrentweapon()
{
    return self.weapon;
}

getaicurrentweaponslot()
{
    if ( self.weapon == self.primaryweapon )
        return "_encstr_987F080E394BDAC2E45E";
    else if ( self.weapon == self.secondaryweapon )
        return "_encstr_B98F0AC7D5B99F4DDBA8353B";
    else if ( self.weapon == self.sidearm )
        return "_encstr_A653089B4B19ACC293DA";
    else
    {

    }
}

aihasweapon( var_0 )
{
    var_1 = createheadicon( var_0 );

    if ( isdefined( self.weaponinfo[var_1] ) )
        return 1;

    return 0;
}

getanimendpos( var_0 )
{
    var_1 = getmovedelta( var_0, 0, 1 );
    return self localtoworldcoords( var_1 );
}

ragdolldeath( var_0 )
{
    self endon( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    var_1 = self.origin;
    var_2 = ( 0, 0, 0 );

    for (;;)
    {
        wait 0.05;
        var_3 = distance( self.origin, var_1 );
        var_1 = self.origin;

        if ( self.health == 1 )
        {
            self.a.nodeath = 1;
            self startragdoll();
            self clearanim( var_0, 0.1 );
            wait 0.05;
            physicsexplosionsphere( var_1, 600, 0, var_3 * 0.1 );
            self notify( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
            return;
        }
    }
}

shouldcqb()
{
    return iscqbwalking() && !isdefined( self.grenade );
}

iscqbwalking()
{
    return isdefined( self.demeanoroverride ) && self.demeanoroverride == "_encstr_B31904476BAA";
}

iscqbwalkingorfacingenemy()
{
    return !self.facemotion || iscqbwalking();
}

randomizeidleset()
{
    self.a.idleset = randomint( 2 );
}

getrandomintfromseed( var_0, var_1 )
{
    var_2 = var_0 % anim.randominttablesize;
    return anim.randominttable[var_2] % var_1;
}

getcurrentweaponslotname()
{
    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isusingsecondary() )
        return "_encstr_B98F0AC7D5B99F4DDBA8353B";

    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isusingsidearm() )
        return "_encstr_A653089B4B19ACC293DA";

    return "_encstr_987F080E394BDAC2E45E";
}

lookupanim( var_0, var_1 )
{
    if ( isdefined( self.animarchetype ) )
    {
        if ( isdefined( anim.archetypes[self.animarchetype][var_0] ) && isdefined( anim.archetypes[self.animarchetype][var_0][var_1] ) )
            return anim.archetypes[self.animarchetype][var_0][var_1];
    }

    return anim.archetypes["_encstr_9E8C08F63FE3D98B0743"][var_0][var_1];
}

lookupanimarray( var_0 )
{
    if ( isdefined( self.animarchetype ) )
    {
        if ( isdefined( anim.archetypes[self.animarchetype][var_0] ) )
        {
            var_1 = anim.archetypes["_encstr_9E8C08F63FE3D98B0743"][var_0];

            foreach ( var_4, var_3 in anim.archetypes[self.animarchetype][var_0] )
                var_1[var_4] = var_3;

            return var_1;
        }
    }

    return anim.archetypes["_encstr_9E8C08F63FE3D98B0743"][var_0];
}

isenergyweapon( var_0 )
{
    return weaponusesenergybullets( var_0 );
}
