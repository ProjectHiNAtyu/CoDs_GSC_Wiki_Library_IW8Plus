// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

placeweaponon( var_0, var_1, var_2 )
{
    var_3 = undefined;
    var_4 = undefined;

    if ( issameweapon( var_0 ) )
    {
        var_3 = var_0;
        var_4 = createheadicon( var_0 );
    }
    else
    {
        var_3 = asmdevgetallstates( var_0 );
        var_4 = var_0;
    }

    self notify( "_encstr_B30417B8BD8B4BE04367E39013AB03486AD22FD7945F85E071" );
    var_5 = self.weaponinfo[var_4].position;

    if ( var_1 != "_encstr_AABA05236DC831" && isdefined( self.a.weaponpos[var_1] ) && self.a.weaponpos[var_1] == var_3 )
        return;

    detachallweaponmodels();

    if ( var_5 != "_encstr_AABA05236DC831" )
        detachweapon( var_3 );

    if ( var_1 == "_encstr_AABA05236DC831" )
    {
        updateattachedweaponmodels();
        return;
    }

    if ( !getqueuedspleveltransients( self.a.weaponpos[var_1] ) )
        detachweapon( self.a.weaponpos[var_1] );

    if ( !isdefined( var_2 ) )
        var_2 = 1;

    if ( var_2 && ( var_1 == "_encstr_B1AD05C65666E8" || var_1 == "_encstr_9353062E718710C9" ) )
    {
        attachweapon( var_3, var_1 );
        self.weapon = var_3;
    }
    else
        attachweapon( var_3, var_1 );

    updateattachedweaponmodels();
}

detachweapon( var_0 )
{
    var_1 = createheadicon( var_0 );
    self.a.weaponpos[self.weaponinfo[var_1].position] = undefined;
    self.weaponinfo[var_1].position = "_encstr_AABA05236DC831";
}

attachweapon( var_0, var_1 )
{
    var_2 = createheadicon( var_0 );
    self.weaponinfo[var_2].position = var_1;
    self.a.weaponpos[var_1] = var_0;

    if ( !getqueuedspleveltransients( self.a.weaponposdropping[var_1] ) )
    {
        self notify( "_encstr_89A011B9DB34413B750BFB60CEA71FBB1FF0EF" + var_1 );
        self.a.weaponposdropping[var_1] = undefined;
    }
}

getweaponforpos( var_0 )
{
    var_1 = self.a.weaponpos[var_0];

    if ( getqueuedspleveltransients( var_1 ) )
        return self.a.weaponposdropping[var_0];

    return var_1;
}

detachallweaponmodels()
{
    var_0 = [];
    var_0[var_0.size] = "_encstr_9353062E718710C9";
    var_0[var_0.size] = "_encstr_B1AD05C65666E8";
    var_0[var_0.size] = "_encstr_BC7606E8E83F22AB";
    var_0[var_0.size] = "_encstr_959B05982C8DDA";
    var_0[var_0.size] = "_encstr_AB72068B89E32238";
    self laseroff();

    foreach ( var_2 in var_0 )
    {
        var_3 = getweaponforpos( var_2 );

        if ( getqueuedspleveltransients( var_3 ) )
            continue;

        if ( weapontype( var_3 ) == "_encstr_B1450B73F050B4F3197B8FC5D5" && isdefined( self.shieldmodelvariant ) )
        {
            if ( isdefined( self.shieldbroken ) && self.shieldbroken )
            {
                playfxontag( scripts\engine\utility::getfx( "_encstr_80ED1063F9D0408FAF38618D3857B9406204" ), self, "_encstr_876E0A69816F4196FBB8CFF7" );
                self.shieldbroken = undefined;
            }
        }
    }

    self updateentitywithweapons();
}

updateattachedweaponmodels()
{
    var_0 = [];
    var_1 = [];
    var_2 = [];
    var_0[var_0.size] = "_encstr_9353062E718710C9";
    var_0[var_0.size] = "_encstr_B1AD05C65666E8";
    var_0[var_0.size] = "_encstr_BC7606E8E83F22AB";
    var_0[var_0.size] = "_encstr_959B05982C8DDA";
    var_0[var_0.size] = "_encstr_AB72068B89E32238";

    foreach ( var_4 in var_0 )
    {
        var_5 = var_1.size;
        var_6 = getweaponforpos( var_4 );

        if ( !getqueuedspleveltransients( var_6 ) && !nullweapon( var_6 ) )
        {
            var_7 = createheadicon( var_6 );

            if ( self.weaponinfo[var_7].useclip && !self.weaponinfo[var_7].hasclip )
                var_6 = var_6 withoutattachment( var_6.magazine );
        }

        if ( isdefined( var_6 ) )
        {
            var_8 = gettagforpos( var_4 );

            if ( self tagexists( var_8 ) )
            {
                var_1[var_5] = var_6;
                var_2[var_2.size] = var_8;
            }
        }
    }

    self updateentitywithweapons( var_1[0], var_2[0], var_1[1], var_2[1], var_1[2], var_2[2], var_1[3], var_2[3] );
    updatelaserstatus();
}

updatelaserstatus()
{
    if ( isdefined( self.custom_laser_function ) )
        [[ self.custom_laser_function ]]();
    else
    {
        if ( !isdefined( self.a.weaponpos ) || getqueuedspleveltransients( self.a.weaponpos["_encstr_9353062E718710C9"] ) )
            return;

        if ( canuselaser() )
        {
            self laseron();
            return;
        }

        self laseroff();
    }
}

canuselaser()
{
    if ( !self.a.laseron )
        return 0;

    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isshotgun( self.weapon ) )
        return 0;

    return isalive( self );
}

gettagforpos( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_BC7606E8E83F22AB":
            return "_encstr_9701116B59482F5B5DBF87C7819002403063E3";
        case "_encstr_959B05982C8DDA":
            return "_encstr_BC8610D10BEC7DCD47DB772BC8EBC40BB1B5";
        case "_encstr_B1AD05C65666E8":
            return "_encstr_9D8C101DB0CE7DEE95581CBDE6FAB195CC47";
        case "_encstr_9353062E718710C9":
            return "_encstr_A1AC113BE001AF83334F1AD5209F0B51A910B3";
        case "_encstr_B8CC05F83F401B":
            return "_encstr_B8AE14D3C34C0999E881BF02BBB0B223087D2FE7B96D";
        case "_encstr_AB72068B89E32238":
            return "_encstr_9D9611ABC15C8F2A58DF7F75D1D9339BF3B9E2";
        default:
            break;
    }
}

dropaiweaponinternal( var_0 )
{
    var_1 = createheadicon( var_0 );
    var_2 = self.weaponinfo[var_1].position;

    if ( self.dropweapon && var_2 != "_encstr_AABA05236DC831" )
        thread dropweaponwrapper( var_0, var_2 );

    detachweapon( var_0 );

    if ( var_0 == self.weapon )
        self.weapon = isundefinedweapon();

    if ( var_0 == self.primaryweapon )
        self.primaryweapon = isundefinedweapon();

    if ( var_0 == self.secondaryweapon )
        self.secondaryweapon = isundefinedweapon();

    if ( var_0 == self.sidearm )
    {
        if ( !nullweapon( self.primaryweapon ) )
            dropaiweaponinternal( self.primaryweapon );

        self.sidearm = isundefinedweapon();
    }
}

dropaiweapon( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = self.weapon;

    if ( nullweapon( var_0 ) )
        return;

    if ( isdefined( self.nodrop ) )
        return;

    detachallweaponmodels();
    dropaiweaponinternal( var_0 );

    if ( nullweapon( self.primaryweapon ) )
    {
        if ( !nullweapon( self.weapon ) )
            self.primaryweapon = self.weapon;
        else if ( !nullweapon( self.secondaryweapon ) )
            self.primaryweapon = self.secondaryweapon;
        else if ( !nullweapon( self.sidearm ) )
            self.primaryweapon = self.sidearm;

        if ( self.primaryweapon == self.secondaryweapon )
            self.secondaryweapon = isundefinedweapon();
    }

    updateattachedweaponmodels();
}

dropallaiweapons()
{
    if ( isdefined( self.nodrop ) )
        return "_encstr_AABA05236DC831";

    if ( !isdefined( self.a ) || !isdefined( self.a.weaponpos ) )
        return;

    var_0 = [];
    var_0[var_0.size] = "_encstr_B1AD05C65666E8";
    var_0[var_0.size] = "_encstr_9353062E718710C9";
    var_0[var_0.size] = "_encstr_BC7606E8E83F22AB";
    var_0[var_0.size] = "_encstr_959B05982C8DDA";
    var_0[var_0.size] = "_encstr_AB72068B89E32238";
    detachallweaponmodels();

    foreach ( var_2 in var_0 )
    {
        var_3 = self.a.weaponpos[var_2];

        if ( getqueuedspleveltransients( var_3 ) )
            continue;

        var_4 = createheadicon( var_3 );
        self.weaponinfo[var_4].position = "_encstr_AABA05236DC831";
        self.a.weaponpos[var_2] = undefined;

        if ( self.dropweapon )
            thread dropweaponwrapper( var_3, var_2 );
    }

    self.weapon = isundefinedweapon();
    updateattachedweaponmodels();
}

dropweaponwrapper( var_0, var_1 )
{
    if ( self isragdoll() )
        return "_encstr_AABA05236DC831";

    self.a.weaponposdropping[var_1] = var_0;
    var_2 = var_0;
    var_3 = var_0.basename;

    if ( issubstr( tolower( var_3 ), "_encstr_881A045F4FD0" ) )
    {
        var_3 = getsubstr( var_3, 0, var_3.size - 3 );
        var_2 = getcompleteweaponname( var_3, var_0.attachments );
    }

    thread setdroppedweaponammo( var_2 );

    if ( isagent( self ) )
    {
        if ( isdefined( level.dropped_weapon_func ) )
            self thread [[ level.dropped_weapon_func ]]( var_2, var_1 );
        else
            self dropweaponnovelocity( var_2, var_1 );
    }
    else if ( canaiflingweapon( self ) )
    {
        if ( var_1 == "_encstr_959B05982C8DDA" || var_1 == "_encstr_AB72068B89E32238" )
            var_4 = "_encstr_A4650C3A163BBEDC47BDBB2BC8D7" + var_1;
        else
            var_4 = "_encstr_B3120C034914D73B3DBAA8F22256" + var_1;

        if ( !scripts\engine\utility::hastag( self.model, var_4 ) )
        {
            self dropweapon( var_2, var_1, 0 );
            self endon( "_encstr_89A011B9DB34413B750BFB60CEA71FBB1FF0EF" + var_1 );
            waitframe();
            return;
        }

        var_5 = self gettagorigin( var_4 );
        self endon( "_encstr_89A011B9DB34413B750BFB60CEA71FBB1FF0EF" + var_1 );
        waitframe();

        if ( !isdefined( self ) )
            return;

        var_6 = self gettagorigin( var_4 );
        var_7 = self gettagangles( var_4 );
        var_8 = createheadicon( var_2 );
        var_9 = spawn( "_encstr_B80108EE2BB0837B737D" + var_8, var_6 );
        var_9.angles = var_7;
        var_10 = var_6 - var_5;
        var_11 = vectornormalize( var_10 );
        var_12 = 20;
        var_13 = 50;
        var_14 = min( length( var_10 ) * var_12, var_13 );
        var_15 = var_11 * var_14;
        var_16 = ( 0, 0, 950 );
        var_17 = var_6 + var_11 * -1;
        var_18 = var_15 + var_16;

        if ( weaponclass( var_2 ) == "_encstr_8A94070E2DCD8E7BB1" )
            var_18 = var_18 * 0.5;

        var_9 physicslaunchserveritem( var_17, var_18 );
    }
    else
    {
        self dropweapon( var_2, var_1, 0 );
        self endon( "_encstr_89A011B9DB34413B750BFB60CEA71FBB1FF0EF" + var_1 );
        waitframe();
    }

    if ( !isdefined( self ) )
        return;

    if ( isagent( self ) && !isalive( self ) )
        return;

    detachallweaponmodels();
    self.a.weaponposdropping[var_1] = undefined;
    updateattachedweaponmodels();
}

canaiflingweapon( var_0 )
{
    if ( !getdvarint( "_encstr_B9B5111B41164F6E70FF2E3C8B10B707343B42", 0 ) )
        return 0;

    if ( !scripts\common\utility::issp() )
        return 0;

    if ( !isdefined( var_0.lastattacker ) )
        return 0;

    if ( !isplayer( var_0.lastattacker ) )
        return 0;

    if ( isexplosivedamagemod( var_0.damagemod ) )
        return 1;

    var_1 = 300;

    if ( distance( var_0.lastattacker.origin, var_0.origin ) < var_1 )
        return 0;

    return 1;
}

setdroppedweaponammo( var_0 )
{
    self waittill( "_encstr_BDE20F7FF5D608303B89F923929B77682F", var_1 );
    var_1 endon( "_encstr_A3750609A5E61883" );

    if ( isdefined( var_0 ) && isvaliddroppedweapon( var_0 ) )
    {
        if ( isdefined( var_1 ) )
        {
            var_1 physics_registerforcollisioncallback();
            var_1 thread weapondrop_physics_callback_monitor( var_0 );
            var_2 = getsubstr( var_1.classname, 7, var_1.classname.size );
            var_1 setscriptammo( var_2, self );
        }
    }
}

isvaliddroppedweapon( var_0 )
{
    if ( var_0.ismelee )
        return 0;

    return 1;
}

weapondrop_physics_callback_monitor( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_945408D1B4B556B7BA3A" );
    thread weapondrop_physics_timeout( 2 );
    self waittill( "_encstr_B3510AD8BDD8C6A56ED2B737", var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8 );
    var_9 = physics_getsurfacetypefromflags( var_4 );
    var_10 = getsubstr( var_9["_encstr_81BA051A9AA88B"], 9 );

    if ( var_10 == "_encstr_A9140E55C708BA5715991B6361E3DB22" )
        var_10 = "_encstr_879D0FE30F92BBF7631A868B39686E413A";

    if ( isdefined( var_0.classname ) && isdefined( self ) )
    {
        var_11 = "_encstr_9DD30EABD97870995585E793F789624C";

        switch ( var_0.classname )
        {
            case "_encstr_B453063D7FBAE9C8":
                var_11 = "_encstr_9DD30EABD97870995585E793F789624C";
                break;
            case "_encstr_BE1904B9D6B3":
                var_11 = "_encstr_AA49106C8FC23126AC0BC030D7D3384BBA75";
                break;
            case "_encstr_BE0703815F":
                var_11 = "_encstr_870E114B3998E079B565C7B3D7639229A8C147";
                break;
            case "_encstr_A91007F0AB1AC9A31A":
                var_11 = "_encstr_97F310479D01EBF1E988E20BF921B62B3975";
                break;
            case "_encstr_B6070748328C39712B":
                var_11 = "_encstr_97F310479D01EBF1E988E20BF921B62B3975";
                break;
            case "_encstr_8A94070E2DCD8E7BB1":
                var_11 = "_encstr_B68E11D4377A898E049328C83F482DC753DDC1";
                break;
            case "_encstr_A28D080FA2D39DC7FAFA":
                var_11 = "_encstr_9EF413A329715061E8A5EF2B21C26133D00821C593";
                break;
            case "_encstr_98080F93DBB1B556D11B85ABB936D059E4":
                var_11 = "_encstr_9EF413A329715061E8A5EF2B21C26133D00821C593";
                break;
        }

        if ( soundexists( var_11 ) )
            self playsurfacesound( var_11, var_10 );
        else
        {

        }
    }
}

weapondrop_physics_timeout( var_0 )
{
    wait( var_0 );
    self notify( "_encstr_945408D1B4B556B7BA3A" );
}

getaimyawtoshootentorpos()
{
    if ( !isdefined( self.shootent ) )
    {
        if ( !isdefined( self.shootpos ) )
            return 0;

        return scripts\engine\utility::getaimyawtopoint( self.shootpos );
    }

    return scripts\engine\utility::getaimyawtopoint( self.shootent getshootatpos() );
}

getaimpitchtoshootentorpos()
{
    var_0 = getpitchtoshootentorpos();

    if ( self.script == "_encstr_8AE30DB740F32563F7FECA85DDB7FA" && isdefined( self.a.covermode ) && self.a.covermode == "_encstr_ADAD0562091713" )
        var_0 = var_0 - anim.covercrouchleanpitch;

    return var_0;
}

getpitchtoshootentorpos()
{
    if ( !isdefined( self.shootent ) )
    {
        if ( !isdefined( self.shootpos ) )
            return 0;

        return _encstr_8206204A267D0AD02B300E3FB0E0B516374855869FA9A11DF3D81B6778DA3E5AAFD6::getpitchtoshootspot( self.shootpos );
    }

    return _encstr_8206204A267D0AD02B300E3FB0E0B516374855869FA9A11DF3D81B6778DA3E5AAFD6::getpitchtoshootspot( self.shootent getshootatpos() );
}

ramboaim( var_0 )
{
    self endon( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    ramboaiminternal( var_0 );
}

ramboaiminternal( var_0 )
{

}

decidenumshotsforburst()
{
    var_0 = 0;
    var_1 = weaponburstcount( self.weapon );

    if ( var_1 )
        var_0 = var_1;
    else if ( _encstr_AA451C0AB940B9CBFD270637752B42A7C0C10652D058749256317A3777C6::usingsemiautoweapon() )
        var_0 = anim.semifirenumshots[randomint( anim.semifirenumshots.size )];
    else if ( self.fastburst )
        var_0 = anim.fastburstfirenumshots[randomint( anim.fastburstfirenumshots.size )];
    else
        var_0 = anim.burstfirenumshots[randomint( anim.burstfirenumshots.size )];

    if ( var_0 <= self.bulletsinclip )
        return var_0;

    if ( self.bulletsinclip <= 0 )
        return 1;

    return self.bulletsinclip;
}

decidenumshotsforfull()
{
    var_0 = self.bulletsinclip;

    if ( weaponclass( self.weapon ) == "_encstr_BE0703815F" )
    {
        var_1 = randomfloat( 10 );

        if ( var_1 < 3 )
            var_0 = randomintrange( 2, 6 );
        else if ( var_1 < 8 )
            var_0 = randomintrange( 6, 12 );
        else
            var_0 = randomintrange( 12, 20 );
    }

    return var_0;
}

hideweaponmagattachment( var_0 )
{
    self.weaponinfo[var_0].hasclip = 0;
    updateattachedweaponmodels();
}

showweaponmagattachment( var_0 )
{
    self.weaponinfo[var_0].hasclip = 1;
    updateattachedweaponmodels();
}

handledropclip( var_0 )
{
    self endon( "_encstr_89A00D39EB3F93FB682DAA78CF5F1F" );
    self endon( var_0 + "_encstr_AFDB0A4E3FC1D81B831B0B01" );
    var_1 = self.weapon;
    var_2 = createheadicon( var_1 );
    var_3 = undefined;

    if ( self.weaponinfo[var_2].useclip )
        var_3 = getweaponclipmodel( self.weapon );

    if ( self.weaponinfo[var_2].hasclip )
    {
        if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isusingsidearm() )
            self playsound( "_encstr_B8701FEB67486B41939D09476F61B7676CABF3A251018B3D806B7FCB89C1DB48B0" );
        else
            self playsound( "_encstr_981B1C3FC8C998191545E5DDBFD1D143907027E718A0D04223E521951F87" );

        if ( isdefined( var_3 ) )
        {
            hideweaponmagattachment( var_2 );
            thread dropclipmodel( var_3, "_encstr_A12309B3887707F0C8D398" );
        }
    }

    var_4 = 0;

    while ( !var_4 )
    {
        self waittill( var_0, var_5 );

        if ( !isarray( var_5 ) )
            var_5 = [ var_5 ];

        foreach ( var_7 in var_5 )
        {
            switch ( var_7 )
            {
                case "_encstr_97C5112C3AA316B14304D8D82DC104B195998E":
                    if ( isdefined( var_3 ) )
                        self attach( var_3, "_encstr_88D713DD1642E0FAB15275EB7AD78E7B778D827D28" );

                    _encstr_AA451C0AB940B9CBFD270637752B42A7C0C10652D058749256317A3777C6::refillclip();
                    break;
                case "_encstr_8B6812A7C9250A7B5009DEE5D868C0F373770B4B":
                    if ( isdefined( var_3 ) )
                        self attach( var_3, "_encstr_B8AE14D3C34C0999E881BF02BBB0B223087D2FE7B96D" );

                    _encstr_AA451C0AB940B9CBFD270637752B42A7C0C10652D058749256317A3777C6::refillclip();
                    break;
                case "_encstr_801E13321F6913C33A9E0AC023B89948959049E3CC":
                    if ( isdefined( var_3 ) )
                        self detach( var_3, "_encstr_B8AE14D3C34C0999E881BF02BBB0B223087D2FE7B96D" );

                    break;
                case "_encstr_A3E1128D71FBE2A6A8804E7B771B5AF330DFB0AC":
                    if ( isdefined( var_3 ) )
                    {
                        self detach( var_3, "_encstr_B8AE14D3C34C0999E881BF02BBB0B223087D2FE7B96D" );

                        if ( var_1 == self.weapon )
                            showweaponmagattachment( var_2 );
                        else
                        {
                            self.weaponinfo[createheadicon( self.weapon )].hasclip = 1;
                            self.weaponinfo[var_2].hasclip = 1;
                        }

                        self notify( "_encstr_ADB20E23E85BF37160F75B48E2234DF1" );
                    }

                    self.a.needstorechamber = 0;
                    var_4 = 1;
                    break;
                case "_encstr_87C111CC152B27464992BA4230916EEBE10C44":
                    if ( isdefined( var_3 ) )
                    {
                        self detach( var_3, "_encstr_88D713DD1642E0FAB15275EB7AD78E7B778D827D28" );

                        if ( var_1 == self.weapon )
                            showweaponmagattachment( var_2 );
                        else
                        {
                            self.weaponinfo[createheadicon( self.weapon )].hasclip = 1;
                            self.weaponinfo[var_2].hasclip = 1;
                        }

                        self notify( "_encstr_ADB20E23E85BF37160F75B48E2234DF1" );
                    }

                    self.a.needstorechamber = 0;
                    var_4 = 1;
                    break;
            }
        }
    }
}

dropclipmodel( var_0, var_1 )
{

}

movetonodeovertime( var_0, var_1 )
{
    self endon( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    var_2 = var_0.origin;
    var_3 = distancesquared( self.origin, var_2 );

    if ( var_3 < 1 )
    {
        self safeteleport( var_2 );
        return;
    }

    if ( var_3 > 256 && !self maymovetopoint( var_2, !scripts\engine\utility::actor_is3d() ) )
        return;

    self.keepclaimednodeifvalid = 1;
    var_4 = distance( self.origin, var_2 );
    var_5 = int( var_1 * 20 );

    for ( var_6 = 0; var_6 < var_5; var_6++ )
    {
        var_2 = var_0.origin;
        var_7 = self.origin - var_2;
        var_7 = vectornormalize( var_7 );
        var_8 = var_2 + var_7 * var_4;
        var_9 = var_8 + ( var_2 - var_8 ) * ( ( var_6 + 1 ) / var_5 );
        self safeteleport( var_9 );
        wait 0.05;
    }

    self.keepclaimednodeifvalid = 0;
}

returntrue()
{
    return 1;
}

#using_animtree("_encstr_B1AD0E7656E6CA4E5AD8D786AB5B85B9");

playlookanimation( var_0, var_1, var_2 )
{
    if ( !isdefined( var_2 ) )
        var_2 = ::returntrue;

    for ( var_3 = 0; var_3 < var_1 * 10; var_3++ )
    {
        if ( isalive( self.enemy ) )
        {
            if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::canseeenemy() && [[ var_2 ]]() )
                return;
        }

        if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::issuppressedwrapper() && [[ var_2 ]]() )
            return;

        self setanimknoball( var_0, %_encstr_A39B05D63DA213, 1, 0.1 );
        wait 0.1;
    }
}

throwdownweapon( var_0 )
{
    self endon( "_encstr_B6140FE02AA519E973B961668B3BD0E90B" );
    placeweaponon( self.secondaryweapon, "_encstr_9353062E718710C9" );
    scripts\common\gameskill::didsomethingotherthanshooting();
}

rpgplayerrepulsor()
{
    var_0 = rpgplayerrepulsor_getnummisses();

    if ( var_0 == 0 )
        return;

    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        level waittill( "_encstr_B7AF0EC29BF5959B2BD6CB7DDCA17BE8", var_1 );

        if ( var_1 != self )
            continue;

        if ( !isdefined( var_1.enemy ) )
            continue;

        if ( !isplayer( var_1.enemy ) )
            continue;

        if ( isdefined( level.createrpgrepulsors ) && level.createrpgrepulsors == 0 )
            continue;

        thread rpgplayerrepulsor_create( var_1.enemy );
        var_0--;

        if ( var_0 <= 0 )
            return;
    }
}

rpgplayerrepulsor_getnummisses()
{
    var_0 = scripts\common\utility::getdifficulty();

    switch ( var_0 )
    {
        case "_encstr_A67205D9965BC1":
        case "_encstr_8C6005CAC2CDBC":
            return 2;
        case "_encstr_8CCC0AAA8FEBF1632EAF3043":
        case "_encstr_82CC05C99F3B2D":
        case "_encstr_975E0745B1387143B9":
        case "_encstr_A20703C962":
            return 1;
        case "_encstr_93070336BB":
            return 0;
    }

    return 2;
}

rpgplayerrepulsor_create( var_0 )
{
    var_1 = missile_createrepulsorent( var_0, 5000, 800 );
    wait 4.0;
    missile_deleteattractor( var_1 );
}

pickandsetforceweapon()
{
    if ( isdefined( self.weaponoverride ) && self.weaponoverride )
        return;

    if ( scripts\engine\utility::within_fov( level.player.origin, level.player getplayerangles(), self.origin, 0.173648 ) )
        return;

    var_0 = undefined;

    if ( distancesquared( self.origin, self.enemy.origin ) < self.closeweaponmaxdist * self.closeweaponmaxdist )
        var_0 = self.forcedweaponclose;
    else
        var_0 = self.forcedweaponfar;

    if ( var_0 != self.weapon )
    {
        forceuseweapon( var_0, "_encstr_987F080E394BDAC2E45E" );
        self.weapon_stow setmodel( getweaponmodel( self.forcedweapon ) );
        self.forcedweapon = var_0;
    }
}

forceuseweapon( var_0, var_1 )
{
    var_2 = undefined;

    if ( issameweapon( var_0 ) )
        var_2 = var_0;
    else
        var_2 = [[ level.fnbuildweapon ]]( var_0 );

    if ( istrue( self.script_fakeactor ) || istrue( self.script_drone ) )
    {
        scripts\common\ai::gun_remove();
        scripts\common\ai::set_start_cash( getweaponattachmentworldmodels( var_2 ) );
        return;
    }

    if ( !scripts\common\utility::isweaponinitialized( var_2 ) )
        scripts\common\utility::initweapon( var_2 );

    var_3 = !nullweapon( self.weapon );
    var_4 = _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isusingsidearm();
    var_5 = var_1 == "_encstr_A653089B4B19ACC293DA";
    var_6 = var_1 == "_encstr_B98F0AC7D5B99F4DDBA8353B";

    if ( var_3 && var_4 != var_5 )
    {
        if ( var_4 )
            var_7 = "_encstr_AABA05236DC831";
        else if ( var_6 )
            var_7 = "_encstr_959B05982C8DDA";
        else
            var_7 = "_encstr_BC7606E8E83F22AB";

        placeweaponon( self.weapon, var_7 );
        self.lastweapon = self.weapon;
    }
    else
        self.lastweapon = var_2;

    placeweaponon( var_2, "_encstr_9353062E718710C9" );

    if ( var_5 )
        self.sidearm = var_2;
    else if ( var_6 )
        self.secondaryweapon = var_2;
    else
        self.primaryweapon = var_2;

    self.weapon = var_2;
    self.bulletsinclip = weaponclipsize( self.weapon );
    self notify( "_encstr_A22513EE59850E7BB9AF37EE4BA38D1AD791EDB9CA" );
    updateweaponarchetype( weaponclass( self.weapon ) );
}

updateweaponarchetype( var_0 )
{
    if ( !isdefined( self._blackboard ) || scripts\asm\asm_bb::bb_isanimscripted() || !isdefined( self.asm ) || !isdefined( self.asm.archetype ) )
        return;

    var_1 = scripts\asm\shared\utility::getbasearchetype();

    if ( var_0 == "_encstr_8A94070E2DCD8E7BB1" && archetypeassetloaded( var_1 + "_encstr_B1F008C15284E8EBEDD8" ) )
        scripts\asm\shared\utility::setoverridearchetype( "_encstr_B92007DDCA2C0EF6DC", var_1 + "_encstr_B1F008C15284E8EBEDD8" );
    else if ( var_0 == "_encstr_BE0703815F" && archetypeassetloaded( var_1 + "_encstr_8843054E4A80B7" ) )
        scripts\asm\shared\utility::setoverridearchetype( "_encstr_B92007DDCA2C0EF6DC", var_1 + "_encstr_8843054E4A80B7" );
    else
        scripts\asm\shared\utility::clearoverridearchetype( "_encstr_B92007DDCA2C0EF6DC" );
}

everusessecondaryweapon()
{
    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isshotgun( self.secondaryweapon ) )
        return 1;

    if ( weaponclass( self.primaryweapon ) == "_encstr_98080F93DBB1B556D11B85ABB936D059E4" )
        return 1;

    return 0;
}

default_weaponsetup( var_0 )
{
    if ( !isdefined( self.stowsidearmposition ) )
    {
        if ( istrue( self.bhasthighholster ) )
            self.stowsidearmposition = "_encstr_AB72068B89E32238";
        else
            self.stowsidearmposition = anim.stowsidearmpositiondefault;
    }

    if ( istrue( self.scriptedweaponfailed ) )
    {
        if ( isdefined( level.fnscriptedweaponassignment ) )
        {
            if ( isdefined( self.scriptedweaponfailed_primaryarray ) )
            {
                self.primaryweapon = [[ level.fnscriptedweaponassignment ]]( self.scriptedweaponfailed_primaryarray );
                self.scriptedweaponfailed_primaryarray = undefined;
            }

            if ( isdefined( self.scriptedweaponfailed_sidearmarray ) )
            {
                self.sidearm = [[ level.fnscriptedweaponassignment ]]( self.scriptedweaponfailed_sidearmarray, "_encstr_A653089B4B19ACC293DA" );
                self.scriptedweaponfailed_sidearmarray = undefined;
            }

            if ( isdefined( self.scriptedweaponfailed_secondaryarray ) )
            {
                self.secondaryweapon = [[ level.fnscriptedweaponassignment ]]( self.scriptedweaponfailed_secondaryarray );
                self.scriptedweaponfailed_secondaryarray = undefined;
            }
        }
    }
    else if ( !istrue( self.usescriptedweapon ) && ( !isdefined( self.agent_type ) || !( self.agent_type == "_encstr_8115266BCBBBD8A6E7C24029AA97C840521FD5CB6329C8650FFADBF391CF16E9AEB30741198A1836" || self.agent_type == "_encstr_BC2D2509D6EBDFC2E778AA1250C3F1970350829576563BCF6740737BD9EF7577BB250A0737DB6F" ) ) )
    {
        if ( !scripts\common\utility::issp() )
        {
            if ( issameweapon( self.primaryweapon ) )
            {
                var_1 = getweaponbasename( self.primaryweapon );

                if ( !scripts\common\utility::iscp() )
                    var_1 = [[ level.fngetweaponrootname ]]( var_1 );

                if ( var_1 != "_encstr_AABA05236DC831" )
                    self.primaryweapon = [[ level.fnbuildweapon ]]( var_1, [], "_encstr_AABA05236DC831", "_encstr_AABA05236DC831" );
            }
            else
                self.primaryweapon = [[ level.fnbuildweapon ]]( self.primaryweapon, [], "_encstr_AABA05236DC831", "_encstr_AABA05236DC831" );

            if ( issameweapon( self.secondaryweapon ) )
            {
                var_1 = getweaponbasename( self.secondaryweapon );

                if ( !scripts\common\utility::iscp() )
                    var_1 = [[ level.fngetweaponrootname ]]( var_1 );

                if ( var_1 != "_encstr_AABA05236DC831" )
                    self.secondaryweapon = [[ level.fnbuildweapon ]]( var_1, [], "_encstr_AABA05236DC831", "_encstr_AABA05236DC831" );
            }
            else
                self.secondaryweapon = [[ level.fnbuildweapon ]]( self.secondaryweapon, [], "_encstr_AABA05236DC831", "_encstr_AABA05236DC831" );

            if ( issameweapon( self.sidearm ) )
            {
                var_1 = getweaponbasename( self.sidearm );

                if ( !scripts\common\utility::iscp() )
                    var_1 = [[ level.fngetweaponrootname ]]( var_1 );

                if ( var_1 != "_encstr_AABA05236DC831" )
                    self.sidearm = [[ level.fnbuildweapon ]]( var_1, [], "_encstr_AABA05236DC831", "_encstr_AABA05236DC831" );
            }
            else
                self.sidearm = [[ level.fnbuildweapon ]]( self.sidearm, [], "_encstr_AABA05236DC831", "_encstr_AABA05236DC831" );
        }
        else
        {
            self.primaryweapon = [[ level.fnbuildweapon ]]( self.primaryweapon, [] );
            self.secondaryweapon = [[ level.fnbuildweapon ]]( self.secondaryweapon, [] );
            self.sidearm = [[ level.fnbuildweapon ]]( self.sidearm, [] );
        }
    }

    scripts\common\utility::initweapon( self.primaryweapon );
    scripts\common\utility::initweapon( self.secondaryweapon );
    scripts\common\utility::initweapon( self.sidearm );
    var_2 = self.classname;

    if ( isagent( self ) )
        var_2 = self.agent_type;

    self setdefaultaimlimits();
    self.a.weaponpos = [];
    self.a.weaponposdropping = [];
    self.lastweapon = self.weapon;
    var_3 = _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::usingrocketlauncher();
    self.a.neverlean = var_3;

    if ( var_3 )
        thread rpgplayerrepulsor();

    self.rocketammo = 100;
    placeweaponon( self.primaryweapon, "_encstr_9353062E718710C9" );

    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::isshotgun( self.secondaryweapon ) )
        placeweaponon( self.secondaryweapon, "_encstr_959B05982C8DDA" );

    if ( !nullweapon( self.sidearm ) && isdefined( self.stowsidearmposition ) )
        placeweaponon( self.sidearm, self.stowsidearmposition );

    if ( self.team != "_encstr_BC850785638DA59537" )
        self.has_no_ir = 1;

    _encstr_AA451C0AB940B9CBFD270637752B42A7C0C10652D058749256317A3777C6::refillclip();
}

initdeaths()
{
    anim.numdeathsuntilcrawlingpain = randomintrange( 0, 15 );
    anim.numdeathsuntilcornergrenadedeath = randomintrange( 0, 10 );
    anim.nextcrawlingpaintime = gettime() + randomintrange( 0, 20000 );
    anim.nextcrawlingpaintimefromlegdamage = gettime() + randomintrange( 0, 10000 );
    anim.nextcornergrenadedeathtime = gettime() + randomintrange( 0, 15000 );
    anim.nextbalconydeathtime = gettime() + randomintrange( 0, 1000 );
}

initadvancetoenemy()
{
    level.lastadvancetoenemytime = [];
    level.lastadvancetoenemytime["_encstr_BA840579D3F7F6"] = 0;
    level.lastadvancetoenemytime["_encstr_BC850785638DA59537"] = 0;
    level.lastadvancetoenemytime["_encstr_BD4806FB49E88DEF"] = 0;
    level.lastadvancetoenemytime["_encstr_9BA4080D39CFFB5AB7C1"] = 0;
    level.lastadvancetoenemydest = [];
    level.lastadvancetoenemydest["_encstr_BA840579D3F7F6"] = ( 0, 0, 0 );
    level.lastadvancetoenemydest["_encstr_BC850785638DA59537"] = ( 0, 0, 0 );
    level.lastadvancetoenemydest["_encstr_BD4806FB49E88DEF"] = ( 0, 0, 0 );
    level.lastadvancetoenemydest["_encstr_9BA4080D39CFFB5AB7C1"] = ( 0, 0, 0 );
    level.lastadvancetoenemysrc = [];
    level.lastadvancetoenemysrc["_encstr_BA840579D3F7F6"] = ( 0, 0, 0 );
    level.lastadvancetoenemysrc["_encstr_BC850785638DA59537"] = ( 0, 0, 0 );
    level.lastadvancetoenemysrc["_encstr_BD4806FB49E88DEF"] = ( 0, 0, 0 );
    level.lastadvancetoenemysrc["_encstr_9BA4080D39CFFB5AB7C1"] = ( 0, 0, 0 );
    level.lastadvancetoenemyattacker = [];
    level.advancetoenemygroup = [];
    level.advancetoenemygroup["_encstr_BA840579D3F7F6"] = 0;
    level.advancetoenemygroup["_encstr_BC850785638DA59537"] = 0;
    level.advancetoenemygroup["_encstr_BD4806FB49E88DEF"] = 0;
    level.advancetoenemygroup["_encstr_9BA4080D39CFFB5AB7C1"] = 0;
    level.advancetoenemyinterval = 2000;
    level.advancetoenemygroupmax = 3;
}

initmeleecharges()
{
    anim.meleechargetimers["_encstr_AD070397AA"] = 0;
    anim.meleechargeintervals["_encstr_AD070397AA"] = 9000;
    anim.meleechargeplayertimers["_encstr_AD070397AA"] = 0;
    anim.meleechargeplayerintervals["_encstr_AD070397AA"] = 15000;
    anim.meleechargetimers["_encstr_97BE07C31D0107FF45"] = 0;
    anim.meleechargeintervals["_encstr_97BE07C31D0107FF45"] = 9000;
    anim.meleechargeplayertimers["_encstr_97BE07C31D0107FF45"] = 0;
    anim.meleechargeplayerintervals["_encstr_97BE07C31D0107FF45"] = 15000;
}

init_squadmanager()
{
    if ( isdefined( anim.squadinitialized ) && anim.squadinitialized )
        return;

    anim.squadcreatefuncs = [];
    anim.squadcreatestrings = [];
    anim.squads = [];
    anim.squadindex = [];
    anim.squadrand = 0;
    anim.squadinitialized = 1;
}

initanimvars()
{
    anim.animflagnameindex = 0;
    anim.combatmemorytimeconst = 10000;
    anim.combatmemorytimerand = 6000;
    anim.weaponsetupfuncs = [];
    anim.weaponsetupfuncs["_encstr_B619046C9823"] = ::c12_weaponsetup;
    anim.dismemberheavyfx = [];
    anim.weaponstowfunction = ::pickandsetforceweapon;

    if ( !isdefined( anim.optionalstepeffects ) )
        anim.optionalstepeffects = [];

    if ( !isdefined( anim.optionalstepeffectssmall ) )
        anim.optionalstepeffectssmall = [];

    if ( !isdefined( anim.optionalfootprinteffects ) )
        anim.optionalfootprinteffects = [];

    if ( !isdefined( anim.shootenemywrapper_func ) )
        anim.shootenemywrapper_func = _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::shootenemywrapper_shootnotify;

    if ( !isdefined( anim.shootposwrapper_func ) )
        anim.shootposwrapper_func = _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::shootposwrapper;

    anim.fire_notetrack_functions = [];
    anim.lastcarexplosiontime = -100000;
    anim.burstfirenumshots = _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::array( 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5 );
    anim.fastburstfirenumshots = _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::array( 2, 3, 3, 3, 4, 4, 4, 5, 5 );
    anim.semifirenumshots = _encstr_8014199E4BE32DD12B0B3A40B204B39057E42B99A903CAA5D71320::array( 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5 );
    anim.badplaces = [];
    anim.badplaceint = 0;
}

c12_getweapontypeforweapon()
{
    if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::usingrocketlauncher() )
        return "_encstr_8A8A07277B36AD568E";
    else if ( _encstr_B43220B9D8279638D19B97C2374BD6E557479663D28E5ED71BDEADB5BD9BB8ECE6D8::usingriflelikeweapon() )
        return "_encstr_9EAD081DDBA0CFBF8B28";

    return undefined;
}

c12_weaponsetup()
{
    self.weapons = [];

    if ( !nullweapon( self.primaryweapon ) )
    {
        self.weapon = self.primaryweapon;
        self.weapons["_encstr_9353062E718710C9"] = c12_getweapontypeforweapon();
    }

    if ( !nullweapon( self.secondaryweapon ) )
    {
        self.weapon = self.secondaryweapon;
        self.weapons["_encstr_B1AD05C65666E8"] = c12_getweapontypeforweapon();
    }

    self.weapon = isundefinedweapon();
    self.bulletsinclip = 1;
}

initwindowtraverse()
{
    level.window_down_height[0] = -36.8552;
    level.window_down_height[1] = -27.0095;
    level.window_down_height[2] = -15.5981;
    level.window_down_height[3] = -4.37769;
    level.window_down_height[4] = 17.7776;
    level.window_down_height[5] = 59.8499;
    level.window_down_height[6] = 104.808;
    level.window_down_height[7] = 152.325;
    level.window_down_height[8] = 201.052;
    level.window_down_height[9] = 250.244;
    level.window_down_height[10] = 298.971;
    level.window_down_height[11] = 330.681;
}

setuprandomtable()
{
    anim.randominttablesize = 60;
    anim.randominttable = [];

    for ( var_0 = 0; var_0 < anim.randominttablesize; var_0++ )
        anim.randominttable[var_0] = var_0;

    for ( var_0 = 0; var_0 < anim.randominttablesize; var_0++ )
    {
        var_1 = randomint( anim.randominttablesize );
        var_2 = anim.randominttable[var_0];
        anim.randominttable[var_0] = anim.randominttable[var_1];
        anim.randominttable[var_1] = var_2;
    }
}

setupweapons()
{
    self endon( "_encstr_A3750609A5E61883" );
    scripts\engine\utility::flag_wait( "_encstr_81190E8808B8AD0E7BC03E5FE069DFA9" );

    if ( isdefined( anim.weaponsetupfuncs ) && isdefined( anim.weaponsetupfuncs[self.unittype] ) )
        self [[ anim.weaponsetupfuncs[self.unittype] ]]();
    else
        default_weaponsetup();
}

setscriptammo( var_0, var_1, var_2 )
{
    if ( isdefined( var_1.script_ammo_clip ) )
        self itemweaponsetammo( var_1.script_ammo_clip, var_1.script_ammo_extra );
    else if ( isdefined( var_1.script_ammo_extra ) )
        self itemweaponsetammo( var_1.script_ammo_clip, var_1.script_ammo_extra );

    if ( isdefined( var_1.script_ammo_alt_clip ) )
        self itemweaponsetammo( var_1.script_ammo_alt_clip, var_1.script_ammo_alt_extra, undefined, 1 );
    else if ( isdefined( var_1.script_ammo_alt_extra ) )
        self itemweaponsetammo( var_1.script_ammo_alt_clip, var_1.script_ammo_alt_extra, undefined, 1 );

    if ( isdefined( var_1.script_ammo_max ) )
        self itemweaponsetammo( weaponclipsize( self ), weaponmaxammo( self ) );

    if ( istrue( var_2 ) )
        self itemweaponsetammo( 1, 6, 0, 1 );
    else if ( issubstr( var_0, "_encstr_AB110D6D38F847E7F1F105FF89C3CA" ) || issubstr( var_0, "_encstr_BE780EAE267D6B5A6DCA466066FA9BE0" ) )
        self itemweaponsetammo( 1, 1, 0, 1 );
}
