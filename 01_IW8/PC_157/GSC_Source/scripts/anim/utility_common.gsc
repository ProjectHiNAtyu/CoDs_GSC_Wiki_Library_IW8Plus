// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

print3dtime( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = var_0 / 0.05;

    for ( var_7 = 0; var_7 < var_6; var_7++ )
        wait 0.05;
}

print3drise( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = 100.0;
    var_6 = 0;
    var_0 = var_0 + scripts\engine\utility::randomvector( 30 );

    for ( var_7 = 0; var_7 < var_5; var_7++ )
    {
        var_6 = var_6 + 0.5;
        wait 0.05;
    }
}

crossproduct( var_0, var_1 )
{
    return var_0[0] * var_1[1] - var_0[1] * var_1[0] > 0;
}

safemod( var_0, var_1 )
{
    var_2 = int( var_0 ) % var_1;
    var_2 = var_2 + var_1;
    return var_2 % var_1;
}

quadrantanimweights( var_0 )
{
    var_1 = cos( var_0 );
    var_2 = sin( var_0 );
    var_3["_encstr_875606482B58E505"] = 0;
    var_3["_encstr_9353062E718710C9"] = 0;
    var_3["_encstr_959B05982C8DDA"] = 0;
    var_3["_encstr_B1AD05C65666E8"] = 0;

    if ( isdefined( self.alwaysrunforward ) )
    {
        var_3["_encstr_875606482B58E505"] = 1;
        return var_3;
    }

    if ( var_1 > 0 )
    {
        if ( var_2 > var_1 )
            var_3["_encstr_B1AD05C65666E8"] = 1;
        else if ( var_2 < -1 * var_1 )
            var_3["_encstr_9353062E718710C9"] = 1;
        else
            var_3["_encstr_875606482B58E505"] = 1;
    }
    else
    {
        var_4 = -1 * var_1;

        if ( var_2 > var_4 )
            var_3["_encstr_B1AD05C65666E8"] = 1;
        else if ( var_2 < var_1 )
            var_3["_encstr_9353062E718710C9"] = 1;
        else
            var_3["_encstr_959B05982C8DDA"] = 1;
    }

    return var_3;
}

getquadrant( var_0 )
{
    var_0 = angleclamp( var_0 );

    if ( var_0 < 45 || var_0 > 315 )
        var_1 = "_encstr_875606482B58E505";
    else if ( var_0 < 135 )
        var_1 = "_encstr_B1AD05C65666E8";
    else if ( var_0 < 225 )
        var_1 = "_encstr_959B05982C8DDA";
    else
        var_1 = "_encstr_9353062E718710C9";

    return var_1;
}

isinset( var_0, var_1 )
{
    for ( var_2 = var_1.size - 1; var_2 >= 0; var_2-- )
    {
        if ( var_0 == var_1[var_2] )
            return 1;
    }

    return 0;
}

weapon_genade_launcher()
{
    return !nullweapon( self.weapon ) && weaponclass( self.weapon ) == "_encstr_A28D080FA2D39DC7FAFA";
}

weapon_pump_action_shotgun()
{
    return !nullweapon( self.weapon ) && weaponisboltaction( self.weapon ) && weaponclass( self.weapon ) == "_encstr_A91007F0AB1AC9A31A";
}

isshotgun( var_0 )
{
    return weaponclass( var_0 ) == "_encstr_A91007F0AB1AC9A31A";
}

issniperrifle( var_0 )
{
    return weaponclass( var_0 ) == "_encstr_B6070748328C39712B";
}

isshotgunai()
{
    return isshotgun( self.primaryweapon );
}

isasniper( var_0 )
{
    if ( istrue( self.disablesniperbehaviors ) )
        return 0;

    if ( !isdefined( var_0 ) )
        var_0 = 1;

    if ( !issniperrifle( self.primaryweapon ) )
        return 0;

    if ( var_0 )
    {
        if ( self.primaryweapon != self.weapon )
            return issniperrifle( self.weapon );
    }

    return 1;
}

islongrangeai()
{
    return isasniper() || usingrocketlauncher();
}

usingpistol()
{
    return weaponclass( self.weapon ) == "_encstr_8A94070E2DCD8E7BB1";
}

usingrocketlauncher()
{
    return weaponclass( self.weapon ) == "_encstr_98080F93DBB1B556D11B85ABB936D059E4";
}

usingmg()
{
    return weaponclass( self.weapon ) == "_encstr_BE0703815F";
}

isusingshotgun()
{
    return weaponclass( self.weapon ) == "_encstr_A91007F0AB1AC9A31A";
}

usingriflelikeweapon()
{
    var_0 = weaponclass( self.weapon );

    switch ( var_0 )
    {
        case "_encstr_BE1904B9D6B3":
        case "_encstr_B6070748328C39712B":
        case "_encstr_A91007F0AB1AC9A31A":
        case "_encstr_BE0703815F":
        case "_encstr_B453063D7FBAE9C8":
            return 1;
    }

    return 0;
}

repeater_headshot_ammo_passive( var_0, var_1, var_2 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_1 ) || !isdefined( var_2 ) )
        return;

    if ( !isplayer( var_1 ) )
        return;

    var_3 = var_0.basename;

    if ( !isdefined( var_3 ) || var_3 != "_encstr_87CF0D4B77E6F5E4B2C12BC2D12B27" )
        return;

    if ( !isdefined( var_2.damagelocation ) )
        return;

    if ( var_2.damagelocation != "_encstr_B2CC0571402BC0" && var_2.damagelocation != "_encstr_A8CC07EAC159C72FD8" )
        return;

    var_4 = weaponclipsize( var_0 );
    var_5 = var_4 * 1.0;
    var_6 = var_1 getweaponammoclip( var_0 );
    var_7 = min( var_6 + var_5, var_4 );
    var_1 setweaponammoclip( var_0, int( var_7 ) );
}

needtoreload( var_0 )
{
    if ( nullweapon( self.weapon ) )
        return 0;

    if ( istrue( self.disablereload ) )
    {
        if ( self.bulletsinclip < weaponclipsize( self.weapon ) * 0.5 )
            self.bulletsinclip = int( weaponclipsize( self.weapon ) * 0.5 );

        if ( self.bulletsinclip <= 0 )
            self.bulletsinclip = 0;

        return 0;
    }

    if ( self.bulletsinclip <= weaponclipsize( self.weapon ) * var_0 )
    {
        if ( var_0 == 0 )
        {
            if ( cheatammoifnecessary() )
                return 0;
        }

        return 1;
    }

    return 0;
}

cheatammoifnecessary()
{
    if ( !isdefined( self.enemy ) )
        return 0;

    if ( self.team != "_encstr_BC850785638DA59537" )
    {
        if ( !isplayer( self.enemy ) )
            return 0;
    }

    if ( isusingsidearm() || usingrocketlauncher() )
        return 0;

    if ( gettime() - self.ammocheattime < self.ammocheatinterval )
        return 0;

    if ( !self cansee( self.enemy ) && distancesquared( self.origin, self.enemy.origin ) > 65536 )
        return 0;

    self.bulletsinclip = int( weaponclipsize( self.weapon ) / 2 );

    if ( self.bulletsinclip > weaponclipsize( self.weapon ) )
        self.bulletsinclip = weaponclipsize( self.weapon );

    self.ammocheattime = gettime();
    return 1;
}

isusingprimary()
{
    return self.weapon == self.primaryweapon && !nullweapon( self.weapon );
}

isusingsecondary()
{
    return self.weapon == self.secondaryweapon && !nullweapon( self.weapon );
}

isusingsidearm()
{
    return self.weapon == self.sidearm && !nullweapon( self.weapon );
}

getclaimednode()
{
    return self.node;
}

shootenemywrapper( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 1;

    [[ anim.shootenemywrapper_func ]]( var_0 );
}

getnodeyawtoorigin( var_0 )
{
    if ( isdefined( self.node ) )
        var_1 = self.node.angles[1] - scripts\engine\utility::getyaw( var_0 );
    else
        var_1 = self.angles[1] - scripts\engine\utility::getyaw( var_0 );

    var_1 = angleclamp180( var_1 );
    return var_1;
}

getnodeyawtoenemy()
{
    var_0 = undefined;

    if ( isdefined( self.enemy ) )
        var_0 = self.enemy.origin;
    else
    {
        if ( isdefined( self.node ) )
            var_1 = anglestoforward( self.node.angles );
        else
            var_1 = anglestoforward( self.angles );

        var_1 = var_1 * 150;
        var_0 = self.origin + var_1;
    }

    if ( isdefined( self.node ) )
        var_2 = self.node.angles[1] - scripts\engine\utility::getyaw( var_0 );
    else
        var_2 = self.angles[1] - scripts\engine\utility::getyaw( var_0 );

    var_2 = angleclamp180( var_2 );
    return var_2;
}

getyawtoenemy()
{
    var_0 = undefined;

    if ( isdefined( self.enemy ) )
        var_0 = self.enemy.origin;
    else
    {
        var_1 = anglestoforward( self.angles );
        var_1 = var_1 * 150;
        var_0 = self.origin + var_1;
    }

    var_2 = self.angles[1] - scripts\engine\utility::getyaw( var_0 );
    var_2 = angleclamp180( var_2 );
    return var_2;
}

getyaw2d( var_0 )
{
    var_1 = vectortoangles( ( var_0[0], var_0[1], 0 ) - ( self.origin[0], self.origin[1], 0 ) );
    return var_1[1];
}

absyawtoenemy()
{
    var_0 = self.angles[1] - scripts\engine\utility::getyaw( self.enemy.origin );
    var_0 = angleclamp180( var_0 );

    if ( var_0 < 0 )
        var_0 = -1 * var_0;

    return var_0;
}

absyawtoenemy2d()
{
    var_0 = self.angles[1] - getyaw2d( self.enemy.origin );
    var_0 = angleclamp180( var_0 );

    if ( var_0 < 0 )
        var_0 = -1 * var_0;

    return var_0;
}

absyawtoorigin( var_0 )
{
    var_1 = self.angles[1] - scripts\engine\utility::getyaw( var_0 );
    var_1 = angleclamp180( var_1 );

    if ( var_1 < 0 )
        var_1 = -1 * var_1;

    return var_1;
}

absyawtoangles( var_0 )
{
    var_1 = self.angles[1] - var_0;
    var_1 = angleclamp180( var_1 );

    if ( var_1 < 0 )
        var_1 = -1 * var_1;

    return var_1;
}

getyawfromorigin( var_0, var_1 )
{
    var_2 = vectortoangles( var_0 - var_1 );
    return var_2[1];
}

getgrenademodel()
{
    return getweaponmodel( self.grenadeweapon );
}

getenemyeyepos()
{
    if ( isdefined( self.enemy ) )
    {
        self.a.lastenemypos = self.enemy getshootatpos();
        self.a.lastenemytime = gettime();
        return self.a.lastenemypos;
    }
    else if ( isdefined( self.a.lastenemytime ) && isdefined( self.a.lastenemypos ) && self.a.lastenemytime + 3000 < gettime() )
        return self.a.lastenemypos;
    else
    {
        var_0 = self getshootatpos();
        var_0 = var_0 + 196 * self.lookforward;
        return var_0;
    }
}

gettruenodeangles( var_0 )
{
    if ( !isdefined( var_0 ) )
        return ( 0, 0, 0 );

    if ( !isdefined( var_0.script_angles ) )
        return var_0.angles;

    var_1 = var_0.angles;
    var_2 = angleclamp180( var_1[0] + var_0.script_angles[0] );
    var_3 = var_1[1];
    var_4 = angleclamp180( var_1[2] + var_0.script_angles[2] );
    return ( var_2, var_3, var_4 );
}

getyawtoorigin( var_0 )
{
    if ( isdefined( self.type ) && scripts\engine\utility::isnode3d( self ) )
    {
        var_1 = gettruenodeangles( self );
        var_2 = anglestoforward( var_1 );
        var_3 = rotatepointaroundvector( var_2, var_0 - self.origin, var_1[2] * -1 );
        var_3 = var_3 + self.origin;
        var_4 = scripts\engine\utility::getyaw( var_3 ) - var_1[1];
        var_4 = angleclamp180( var_4 );
        return var_4;
    }

    var_4 = scripts\engine\utility::getyaw( var_0 ) - self.angles[1];
    var_4 = angleclamp180( var_4 );
    return var_4;
}

canseepointfromexposedatcorner( var_0, var_1 )
{
    var_2 = var_1 getyawtoorigin( var_0 );

    if ( var_2 > 60 || var_2 < -60 )
        return 0;

    if ( scripts\engine\utility::isnodecoverleft( var_1 ) && var_2 < -14 )
        return 0;

    if ( scripts\engine\utility::isnodecoverright( var_1 ) && var_2 > 12 )
        return 0;

    return 1;
}

getnodeoffset( var_0 )
{
    if ( isdefined( var_0.offset ) )
        return var_0.offset;

    var_1 = ( -26, 0.4, 36 );
    var_2 = ( -32, 7, 63 );
    var_3 = ( 43.5, 11, 36 );
    var_4 = ( 36, 8.3, 63 );
    var_5 = ( 3.5, -12.5, 45 );
    var_6 = ( -3.7, -22, 63 );
    var_7 = ( 0, 30, 13 );
    var_8 = 0;
    var_9 = ( 0, 0, 0 );
    var_10 = anglestoaxis( var_0.angles );
    var_11 = var_10["_encstr_9353062E718710C9"];
    var_12 = var_10["_encstr_A42E08DEC88B5BE9CD38"];
    var_13 = var_10["_encstr_8F070350FB"];
    var_14 = var_0.type;

    switch ( var_14 )
    {
        case "_encstr_9B760B2860F54FDB0921659ED5":
            var_15 = var_0 gethighestnodestance();

            if ( !isdefined( var_15 ) || var_15 == "_encstr_9C3D071B63023B26C3" )
                var_9 = calculatenodeoffset( var_11, var_12, var_13, var_1 );
            else
                var_9 = calculatenodeoffset( var_11, var_12, var_13, var_2 );

            break;
        case "_encstr_ABA30C3E581DA28AF991AF8F58AB":
            var_15 = var_0 gethighestnodestance();

            if ( !isdefined( var_15 ) || var_15 == "_encstr_9C3D071B63023B26C3" )
                var_9 = calculatenodeoffset( var_11, var_12, var_13, var_3 );
            else
                var_9 = calculatenodeoffset( var_11, var_12, var_13, var_4 );

            break;
        case "_encstr_9BAF0749A0ED9A9773":
        case "_encstr_89D80ECFFD42C7B17FB032211B011621":
        case "_encstr_9D700F4348336F6AB171A3CAA001B67E2D":
        case "_encstr_A6FF0C9F778B38368A3173D90A73":
            var_9 = calculatenodeoffset( var_11, var_12, var_13, var_6 );
            break;
        case "_encstr_BC520F6EBF6BB9138622EAE9DBDDFB718B":
        case "_encstr_B6471436BFA85DE3EA5B4E07B33248990F49DD697797":
        case "_encstr_8FAB0D6BED9E624B27B0E2A78B8F9A":
            var_9 = calculatenodeoffset( var_11, var_12, var_13, var_5 );
            break;
        case "_encstr_BEC8095DE8CB454B7ADA5D":
            var_9 = getcover3dnodeoffset( var_0 );
            break;
        case "_encstr_A67A0C687BB3B2C940A0E4F63759":
            var_9 = calculatenodeoffset( var_11, var_12, var_13, var_7 );
            break;
    }

    var_0.offset = var_9;
    return var_0.offset;
}

getcover3dnodeoffset( var_0, var_1 )
{
    var_2 = ( 2, -10, 35 );
    var_3 = ( -19, -10, 32 );
    var_4 = ( 16, -10, 32 );
    var_5 = anglestoright( var_0.angles );
    var_6 = anglestoforward( var_0.angles );
    var_7 = anglestoup( var_0.angles );
    var_8 = var_2;

    if ( isdefined( var_1 ) )
    {
        if ( var_1 == "_encstr_B1AD05C65666E8" )
            var_8 = var_3;
        else if ( var_1 == "_encstr_9353062E718710C9" )
            var_8 = var_4;
        else
        {

        }
    }

    return calculatenodeoffset( var_5, var_6, var_7, var_8 );
}

calculatenodeoffset( var_0, var_1, var_2, var_3 )
{
    return var_0 * var_3[0] + var_1 * var_3[1] + var_2 * var_3[2];
}

canseepointfromexposedatnode( var_0, var_1 )
{
    if ( scripts\engine\utility::isnodecoverleft( var_1 ) || scripts\engine\utility::isnodecoverright( var_1 ) )
    {
        if ( !canseepointfromexposedatcorner( var_0, var_1 ) )
            return 0;
    }

    var_2 = getnodeoffset( var_1 );
    var_3 = var_1.origin + var_2;

    if ( !checkpitchvisibility( var_3, var_0, var_1 ) )
        return 0;

    if ( !sighttracepassed( var_3, var_0, 0, self.enemy ) )
    {
        if ( scripts\engine\utility::isnodecovercrouch( var_1 ) )
        {
            var_3 = ( 0, 0, 64 ) + var_1.origin;
            return sighttracepassed( var_3, var_0, 0, self.enemy );
        }

        return 0;
    }

    return 1;
}

persistentdebugline( var_0, var_1 )
{
    self endon( "_encstr_A3750609A5E61883" );
    level notify( "_encstr_AF5A0D13631CE2C5883B579D50730D" );
    level endon( "_encstr_AF5A0D13631CE2C5883B579D50730D" );

    for (;;)
        wait 0.05;
}

canseeenemyfromexposed()
{
    if ( !isdefined( self.enemy ) )
        return 0;

    var_0 = getenemyeyepos();

    if ( !isdefined( self.node ) )
        var_1 = self cansee( self.enemy );
    else if ( scripts\engine\utility::actor_is3d() && scripts\engine\utility::isnode3d( self.node ) )
    {
        var_1 = canseepointfromexposedatnode( var_0, self.node );

        if ( !var_1 )
        {
            var_0 = ( self.enemy.origin + var_0 ) / 2;
            var_1 = canseepointfromexposedatnode( var_0, self.node );
        }
    }
    else
        var_1 = canseepointfromexposedatnode( var_0, self.node );

    if ( var_1 )
        dontgiveuponsuppressionyet();
    else
    {

    }

    return var_1;
}

checkpitchvisibility( var_0, var_1, var_2 )
{
    var_3 = self.upaimlimit - anim.aimpitchdifftolerance;
    var_4 = self.downaimlimit + anim.aimpitchdifftolerance;
    var_5 = var_1 - var_0;

    if ( scripts\engine\utility::actor_is3d() )
    {
        if ( isdefined( var_2 ) && scripts\engine\utility::isnode3d( var_2 ) )
            var_6 = var_2.angles;
        else
            var_6 = self.angles;

        var_5 = rotatevectorinverted( var_5, var_6 );
    }

    var_7 = angleclamp180( vectortopitch( var_5 ) );

    if ( var_7 < var_3 )
        return 0;

    if ( var_7 > var_4 )
    {
        if ( isdefined( var_2 ) && !scripts\engine\utility::isnodecovercrouch( var_2 ) )
            return 0;

        if ( var_7 > anim.covercrouchleanpitch + var_4 )
            return 0;
    }

    return 1;
}

dontgiveuponsuppressionyet()
{
    self.a.shouldresetgiveuponsuppressiontimer = 1;
}

cansuppressenemy()
{
    if ( !hassuppressableenemy() || self.doingambush )
    {
        self.goodshootpos = undefined;
        return 0;
    }

    if ( !isplayer( self.enemy ) )
        return aisuppressai();

    if ( !checkpitchvisibility( self geteye(), self.lastenemysightpos ) )
        return 0;

    var_0 = self getapproxeyepos();
    return findgoodsuppressspot( var_0 );
}

updategiveuponsuppressiontimer()
{
    if ( !isdefined( self.a.shouldresetgiveuponsuppressiontimer ) )
        self.a.shouldresetgiveuponsuppressiontimer = 1;

    if ( self.a.shouldresetgiveuponsuppressiontimer )
    {
        self.a.giveuponsuppressiontime = gettime() + randomintrange( 15000, 30000 );
        self.a.shouldresetgiveuponsuppressiontimer = 0;
    }
}

hassuppressableenemy()
{
    if ( !isdefined( self.enemy ) )
        return 0;

    if ( !isdefined( self.lastenemysightpos ) )
        return 0;

    if ( !istrue( self.dontgiveuponsuppression ) )
    {
        updategiveuponsuppressiontimer();

        if ( gettime() > self.a.giveuponsuppressiontime )
            return 0;
    }

    if ( !isdefined( self.goodshootpos ) && !needrecalculatesuppressspot() )
        return 0;

    return 1;
}

aisuppressai()
{
    if ( !self canattackenemynode() && !istrue( self.forcesuppressai ) )
        return 0;

    var_0 = undefined;

    if ( isdefined( self.enemy.covernode ) )
    {
        var_1 = getnodeoffset( self.enemy.covernode );
        var_0 = self.enemy.covernode.origin + var_1;
    }
    else
        var_0 = self.enemy getshootatpos();

    if ( !self canshoot( var_0 ) && !istrue( self.forcesuppressai ) )
        return 0;

    self.goodshootpos = var_0;
    return 1;
}

canseeandshootpoint( var_0 )
{
    if ( isdefined( self.a.weaponpos ) && getqueuedspleveltransients( self.a.weaponpos["_encstr_9353062E718710C9"] ) )
        return 0;

    if ( !sighttracepassed( self getshootatpos(), var_0, 0, undefined ) )
        return 0;

    var_1 = self getapproxeyepos();
    return sighttracepassed( var_1, var_0, 0, undefined );
}

needrecalculatesuppressspot()
{
    if ( isdefined( self.goodshootpos ) && !canseeandshootpoint( self.goodshootpos ) )
        return 1;

    return !isdefined( self.lastenemysightposold ) || distancesquared( self.lastenemysightposold, self.lastenemysightpos ) > 256 || distancesquared( self.lastenemysightposselforigin, self.origin ) > 1024;
}

findgoodsuppressspot( var_0 )
{
    var_1 = min( self.enemy.maxvisibledist, 1024 );

    if ( isdefined( self.enemy ) && distancesquared( self.origin, self.enemy.origin ) > squared( var_1 + 768.0 ) )
    {
        self.goodshootpos = undefined;
        return 0;
    }

    if ( needrecalculatesuppressspot() )
    {
        self.lastenemysightposselforigin = self.origin;
        self.lastenemysightposold = self.lastenemysightpos;

        if ( istrue( self.suppress_uselastenemysightpos ) )
        {
            self.goodshootpos = self.lastenemysightpos;
            return 1;
        }

        var_2 = getenemyeyepos();
        self.goodshootpos = self scriptabledooropen( var_0, var_2, self.suppress_numgoodtracesneeded );
        return isdefined( self.goodshootpos );
    }
    else if ( isdefined( self.goodshootpos ) && isdefined( self.pathgoalpos ) && distancesquared( self.origin, self.goodshootpos ) < 1024 )
        self.goodshootpos = undefined;

    return isdefined( self.goodshootpos );
}

cansuppressenemyfromexposed()
{
    if ( self.doingambush )
        return 0;

    if ( !hassuppressableenemy() )
        return 0;

    if ( !isplayer( self.enemy ) )
        return aisuppressai();

    if ( isdefined( self.node ) )
    {
        if ( scripts\engine\utility::isnodecoverleft( self.node ) || scripts\engine\utility::isnodecoverright( self.node ) )
        {
            if ( !canseepointfromexposedatcorner( getenemyeyepos(), self.node ) )
                return 0;
        }

        var_0 = getnodeoffset( self.node );
        var_1 = self.node.origin + var_0;
    }
    else
        var_1 = self getapproxeyepos();

    if ( !checkpitchvisibility( var_1, self.lastenemysightpos ) )
        return 0;

    return findgoodsuppressspot( var_1 );
}

canseeenemy( var_0 )
{
    if ( !isdefined( self.enemy ) )
        return 0;

    if ( isdefined( var_0 ) && self cansee( self.enemy, var_0 ) || self cansee( self.enemy ) )
    {
        if ( !checkpitchvisibility( self geteye(), self.enemy getshootatpos() ) )
            return 0;

        dontgiveuponsuppressionyet();
        return 1;
    }

    return 0;
}

recentlysawenemy()
{
    return isdefined( self.enemy ) && self seerecently( self.enemy, 5 );
}

issuppressedwrapper()
{
    if ( isdefined( self.forcesuppression ) )
        return self.forcesuppression;

    if ( self.suppressionmeter <= self.suppressionthreshold )
        return 0;

    return self issuppressed();
}

enemyishiding()
{
    if ( !isdefined( self.enemy ) )
        return 0;

    if ( self.enemy scripts\engine\utility::isflashed() )
        return 1;

    if ( isplayer( self.enemy ) )
    {
        if ( isdefined( self.enemy.health ) && self.enemy.health < self.enemy.maxhealth )
            return 1;
    }
    else if ( isai( self.enemy ) && self.enemy issuppressedwrapper() )
        return 1;

    if ( isdefined( self.enemy.isreloading ) && self.enemy.isreloading )
        return 1;

    return 0;
}

shouldshootenemyent()
{
    if ( !canseeenemy() )
        return 0;

    if ( !self canshootenemy() )
        return 0;

    return 1;
}

sortandcullanimstructarray( var_0 )
{
    var_1 = [];

    foreach ( var_3 in var_0 )
    {
        if ( var_3.weight <= 0 )
            continue;

        for ( var_4 = 0; var_4 < var_1.size; var_4++ )
        {
            if ( var_3.weight < var_1[var_4].weight )
            {
                for ( var_5 = var_1.size; var_5 > var_4; var_5-- )
                    var_1[var_5] = var_1[var_5 - 1];

                break;
            }
        }

        var_1[var_4] = var_3;
    }

    return var_1;
}

player_can_see_ai( var_0, var_1, var_2 )
{
    var_3 = gettime();

    if ( !isdefined( var_2 ) )
        var_2 = 0;

    if ( isdefined( var_1.playerseesmetime ) && var_1.playerseesmetime + var_2 >= var_3 )
        return var_1.playerseesme;

    var_1.playerseesmetime = var_3;

    if ( !scripts\engine\utility::within_fov( var_0.origin, var_0.angles, var_1.origin, 0.766 ) )
    {
        var_1.playerseesme = 0;
        return 0;
    }

    var_4 = var_0 geteye();
    var_5 = var_1.origin;

    if ( sighttracepassed( var_4, var_5, 1, var_0, var_1 ) )
    {
        var_1.playerseesme = 1;
        return 1;
    }

    var_6 = var_1 getapproxeyepos();

    if ( sighttracepassed( var_4, var_6, 1, var_0, var_1 ) )
    {
        var_1.playerseesme = 1;
        return 1;
    }

    var_7 = ( var_6 + var_5 ) * 0.5;

    if ( sighttracepassed( var_4, var_7, 1, var_0, var_1 ) )
    {
        var_1.playerseesme = 1;
        return 1;
    }

    var_1.playerseesme = 0;
    return 0;
}
