// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "_encstr_9E700851BEE33DF1B547" ) == "_encstr_8A510E519897A1332E4A3898E243F5B9" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 0, 0, 9 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 10 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 75 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    level.teambased = 1;
    level.onstartgametype = ::onstartgametype;
    level.getspawnpoint = ::getspawnpoint;
    level.onnormaldeath = ::onnormaldeath;
    level.onsuicidedeath = ::onsuicidedeath;
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_B87209485569642A072D68";

    if ( getdvarint( "_encstr_B8020A9E9AA69A6292517AA0" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_891904A1D8BE" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_93570B93F4A9629272A825B426" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_889708C9D0E7EBE819D9" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_B4050C8B3E9A11DD626FD1CBDB5A" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_B81804D2C101" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_A61805573F9318" + scripts\mp\utility\game::getgametype() + "_encstr_9EB909B928022745805102" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] + "_encstr_934305E6126268";

    game["_encstr_A9B10863D3ADDAF8974B"]["_encstr_B1EE0E6F6BE28E18A99D613EC48180C5"] = &"_encstr_8B180F530AF21929253545FA90313DA711";
    level thread watchplayerconnect();
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "_encstr_AF251586238BAE91163350994BAD6B400BDB0C73AC67F0", 0 );
    scripts\mp\utility\game::registerroundswitchdvar( "_encstr_82AD0568BE9EE0", 0, 0, 9 );
    setdynamicdvar( "_encstr_BA041498329AB780976EAF884287EB8D47AA30E00AB3", 1 );
    scripts\mp\utility\game::registerroundlimitdvar( "_encstr_82AD0568BE9EE0", 1 );
    setdynamicdvar( "_encstr_8BF3126F8695A1E05FF303F03F405859D8F3180C", 1 );
    scripts\mp\utility\game::registerwinlimitdvar( "_encstr_82AD0568BE9EE0", 1 );
    setdynamicdvar( "_encstr_943E125B1E129721CF8C3A560BC67AD613B4A501", 0 );
    scripts\mp\utility\game::registerhalftimedvar( "_encstr_82AD0568BE9EE0", 0 );
    setdynamicdvar( "_encstr_878B11E6B14EAF8D58ECB0F5E0C9BDAD7B32CA", 0 );
}

onstartgametype()
{
    setclientnamemode( "_encstr_95900C2EDBD01F99D6B1DFEB878D" );

    if ( !isdefined( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] ) )
        game["_encstr_A6D60EE09BF413B9945185CB4797C583"] = 0;

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
    {
        var_0 = game["_encstr_941C0A6AF345075ED05BEAD3"];
        var_1 = game["_encstr_95A70AA81FEE295D3A2F56DE"];
        game["_encstr_941C0A6AF345075ED05BEAD3"] = var_1;
        game["_encstr_95A70AA81FEE295D3A2F56DE"] = var_0;
    }

    foreach ( var_3 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_3, &"_encstr_8109101F8B202591C4C4570D7A97A16FB9EF" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"_encstr_8109101F8B202591C4C4570D7A97A16FB9EF" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"_encstr_8BC816874D999FDFFDF481B89F683B4691B31F03E709128F" );

        scripts\mp\utility\game::setobjectivehinttext( var_3, &"_encstr_ABED15C8FEC8E30D347FE1610F17A4A3715658C3842019" );
    }

    initspawns();
}

initspawns()
{
    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_A8E80F2F633A9549FE2228CDCB8CA0C052" );
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_A9C01AAD83BE1D91B5FA6E38587737FA8536365A59377DE63A58E4D1" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_89F7184A933073BFC00FCBB00B684597470A8213DEFE8B361071" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_B1090D98F3211171B757B62F41F7F8" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_B1090D98F3211171B757B62F41F7F8" );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

getspawnpoint()
{
    var_0 = self.pers["_encstr_89EF05D46BA8FD"];

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
        var_0 = scripts\mp\utility\game::getotherteam( var_0 )[0];

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        var_1 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_A9BD0ED638EBA391DAFACDC10BBB9BBE" + var_0 + "_encstr_A4810727CEFBF7F281" );
        var_2 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1 );
    }
    else
    {
        var_1 = scripts\mp\spawnlogic::getteamspawnpoints( var_0 );
        var_2 = undefined;
    }

    return var_2;
}

onsuicidedeath( var_0 )
{
    var_1 = scripts\mp\rank::getscoreinfovalue( "_encstr_A88210D6A90F3D25F8D0E6E26BA7DD9D3623" );
    level scripts\mp\gamescore::giveteamscoreforobjective( scripts\mp\utility\game::getotherteam( var_0.pers["_encstr_89EF05D46BA8FD"] )[0], var_1, 0 );
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
}

ontimelimit()
{
    var_0 = scripts\mp\gamescore::gethighestscoringteam();

    if ( game["_encstr_A96D0726D4272B4372"] == "_encstr_AA6D09DBD92B93E8D2D695" )
        var_0 = "_encstr_A1AB087390A396A22BC5";
    else if ( "_encstr_8A190423A45D" )
        var_0 = "_encstr_AA6D09DBD92B93E8D2D695";

    thread scripts\mp\gamelogic::endgame( var_0, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_A40B13A3B4AD56AFD896B5D28EF593AC0BC6A15632"] );
}

watchplayerconnect()
{
    for (;;)
    {
        level waittill( "_encstr_87940A7F075A88E8ABD37951", var_0 );
        var_0 watchplayeronground();
    }
}

watchplayeronground()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    for (;;)
    {
        if ( scripts\mp\utility\player::isreallyalive( self ) )
        {
            if ( self isonground() & !self iswallrunning() )
            {
                self dodamage( 8.0, self.origin, self, undefined, "_encstr_97590CFD0825D7720BD1A018A1F3" );
                wait 1.0;
            }
        }

        waitframe();
    }
}
