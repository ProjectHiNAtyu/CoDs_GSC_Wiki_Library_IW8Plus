// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "_encstr_9E700851BEE33DF1B547" ) == "_encstr_8A510E519897A1332E4A3898E243F5B9" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    var_0[1] = "_encstr_BD07030251";
    var_0[2] = "_encstr_889A09E530F7E918279537";
    var_0[3] = "_encstr_9318045AFDDD";
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 1, 0, 3 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 300 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 2 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    level.teambased = 1;
    level.objectivebased = 1;
    updategametypedvars();
    level.onstartgametype = ::onstartgametype;
    level.getspawnpoint = ::getspawnpoint;
    level.modeonspawnplayer = ::onspawnplayer;
    level.onnormaldeath = ::onnormaldeath;
    level.onplayerkilled = ::onplayerkilled;
    level.ondeadevent = ::ondeadevent;
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_A1A012AFE7B2D5C8096AD16E97FD901D5A5B130D";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9E240C10CE33016D6AEA39B0F244"] = "_encstr_A6980D1A5A371DF5B59636630B1BB1";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3420C3D576AC3C8736F09906BB2"] = "_encstr_A6980D1A5A371DF5B59636630B1BB1";
    level._effect["_encstr_9BB20F6B38F9D1CF5042AF9B6B3973E669"] = loadfx( "_encstr_A9162956EDE0ED5716992B13E1EEB3B20253E8F777C085673F9022DB804403A829177D5BEFE8CC27E829EA" );
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "_encstr_89ED11D3673071731BBB4942E1E17BF3B0D37D", 0 );
    scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    setdynamicdvar( "_encstr_B1D810AF782B370BA34FA99AB64772DF31E0", 0 );
}

updategametypedvars()
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::updatecommongametypedvars();
}

onstartgametype()
{
    setclientnamemode( "_encstr_95900C2EDBD01F99D6B1DFEB878D" );

    if ( !isdefined( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] ) )
        game["_encstr_A6D60EE09BF413B9945185CB4797C583"] = 0;

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
    {
        var_0 = game["_encstr_941C0A6AF345075ED05BEAD3"];
        var_1 = game["_encstr_95A70AA81FEE295D3A2F56DE"];
        game["_encstr_941C0A6AF345075ED05BEAD3"] = var_1;
        game["_encstr_95A70AA81FEE295D3A2F56DE"] = var_0;
    }

    scripts\mp\utility\game::setobjectivetext( "_encstr_BC850785638DA59537", &"_encstr_81660F403513993575FC4D8D3966836911" );
    scripts\mp\utility\game::setobjectivetext( "_encstr_BA840579D3F7F6", &"_encstr_81660F403513993575FC4D8D3966836911" );

    if ( level.splitscreen )
    {
        scripts\mp\utility\game::setobjectivescoretext( "_encstr_BC850785638DA59537", &"_encstr_81660F403513993575FC4D8D3966836911" );
        scripts\mp\utility\game::setobjectivescoretext( "_encstr_BA840579D3F7F6", &"_encstr_81660F403513993575FC4D8D3966836911" );
    }
    else
    {
        scripts\mp\utility\game::setobjectivescoretext( "_encstr_BC850785638DA59537", &"_encstr_A8DE153D8494A81A2A92595435F265250AF5351AD3492A" );
        scripts\mp\utility\game::setobjectivescoretext( "_encstr_BA840579D3F7F6", &"_encstr_A8DE153D8494A81A2A92595435F265250AF5351AD3492A" );
    }

    scripts\mp\utility\game::setobjectivehinttext( "_encstr_BC850785638DA59537", &"_encstr_8A7D1450BAD355871398A13111E5956C133F4BDBDEF3" );
    scripts\mp\utility\game::setobjectivehinttext( "_encstr_BA840579D3F7F6", &"_encstr_8A7D1450BAD355871398A13111E5956C133F4BDBDEF3" );
    initspawns();
    level.hostagestates = [];
    level.hostagecarrystates = [];
    seticonnames();
    thread waittoprocess();
    level thread votimeendingsoon();
}

waittoprocess()
{
    level endon( "_encstr_812909571FA3C907F55273" );
    level endon( "_encstr_BE7F0CD70B206421CFAB3A328589" );
    level thread extractionzone();
    level thread spawnvip();
    level thread createthreatbiasgroups();
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );
    scripts\mp\flags::gameflagwait( "_encstr_9B54115C82779933E2529858EA3F8FB1F736D5" );
    self notify( "_encstr_B1F60E9AA35F7FAFE1DF6560C10833AF" );
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_A205158DDB29A38A68277B3747A861E9D8E30696502B6A" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_B99A155B837DDC46AFB98316DDE6AF8CCA3359E6915627" );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

getspawnpoint()
{
    var_0 = "_encstr_B99A155B837DDC46AFB98316DDE6AF8CCA3359E6915627";

    if ( self.pers["_encstr_89EF05D46BA8FD"] == game["_encstr_941C0A6AF345075ED05BEAD3"] )
        var_0 = "_encstr_A205158DDB29A38A68277B3747A861E9D8E30696502B6A";

    var_1 = scripts\mp\spawnlogic::getspawnpointarray( var_0 );
    var_2 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1 );
    return var_2;
}

seticonnames()
{
    level.iconrecover = "_encstr_BCB4156B9143025572401977A3C7588D63CFA399CCD2D0";
    level.iconescort = "_encstr_87A114632B539B3724AA8559B92B63422063E9B343D3";
    level.iconextract = "_encstr_B3D215A77FE20B1D13C8F3598869934B59D62C170C08D3";
    level.icontakingextract = "_encstr_B3D218A77FE20B1D13C8F359A35B5427B8D4072D0BABDBA62F70";
    level.iconlosingextract = "_encstr_A18718C0E7E1E37DD71DE3DF8B0F9734FA49D947618DAB6B16C0";
    level.iconcontestingextract = "_encstr_89651CDD0BF2C1B79673A3EB8DDB378E569BA39673D9D7593CE893C2B13A";
    level.icondefendextract = "_encstr_9F01183F2363DBB798CDDB693980C6C2B0B117CFB90D0371E06B";
    level.iconcaptureextract = "_encstr_8B7819FB095788E83955D15FA9823B68F8360739DD3BC866C9B794";
    level.iconstoppingextract = "_encstr_9EFB1A3892D8696037F6A508C36B2831C27A8830E977B1DBA3E12695";
}

onspawnplayer()
{
    self.isvip = 0;
    self.usingobj = undefined;
    level notify( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", -1 );
    self setthreatbiasgroup( self.team );
    thread updatematchstatushintonspawn();

    if ( isdefined( level.vip ) )
        level.vip.trigger enableplayeruse( self );
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = scripts\mp\rank::getscoreinfovalue( "_encstr_97D70583536853" );
    var_7 = var_0.team;

    if ( isdefined( var_0.isvip ) && var_0.isvip )
    {
        level thread vip_endgame( game["_encstr_941C0A6AF345075ED05BEAD3"], &"_encstr_828F1239F0DF0D31FC60F1B1D8C36B65875EB30F" );
        var_1.finalkill = 1;
    }
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    thread checkallowspectating();
}

ontimelimit()
{
    if ( game["_encstr_A96D0726D4272B4372"] == "_encstr_AA6D09DBD92B93E8D2D695" )
        var_0 = "_encstr_A1AB087390A396A22BC5";
    else if ( game["_encstr_B4040B6BBF898046C247E5C3DF"]["_encstr_BC850785638DA59537"] == game["_encstr_B4040B6BBF898046C247E5C3DF"]["_encstr_BA840579D3F7F6"] )
        var_0 = "_encstr_AA6D09DBD92B93E8D2D695";
    else if ( game["_encstr_B4040B6BBF898046C247E5C3DF"]["_encstr_BA840579D3F7F6"] > game["_encstr_B4040B6BBF898046C247E5C3DF"]["_encstr_BC850785638DA59537"] )
        var_0 = "_encstr_BA840579D3F7F6";
    else
        var_0 = "_encstr_BC850785638DA59537";

    thread scripts\mp\gamelogic::endgame( var_0, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_A40B13A3B4AD56AFD896B5D28EF593AC0BC6A15632"] );
}

checkallowspectating()
{
    waitframe();
    var_0 = 0;

    if ( !scripts\mp\utility\teams::getteamdata( game["_encstr_941C0A6AF345075ED05BEAD3"], "_encstr_892A0BA3D3F25C4033ADD34893" ) )
    {
        level.spectateoverride[game["_encstr_941C0A6AF345075ED05BEAD3"]].allowenemyspectate = 1;
        var_0 = 1;
    }

    if ( !scripts\mp\utility\teams::getteamdata( game["_encstr_95A70AA81FEE295D3A2F56DE"], "_encstr_892A0BA3D3F25C4033ADD34893" ) )
    {
        level.spectateoverride[game["_encstr_95A70AA81FEE295D3A2F56DE"]].allowenemyspectate = 1;
        var_0 = 1;
    }

    if ( var_0 )
        scripts\mp\spectating::updatespectatesettings();
}

ondeadevent( var_0 )
{
    if ( var_0 == game["_encstr_941C0A6AF345075ED05BEAD3"] )
        level thread vip_endgame( game["_encstr_95A70AA81FEE295D3A2F56DE"], game["_encstr_94EA0B2BE623AF39CA589BBDB9"][tolower( game[game["_encstr_941C0A6AF345075ED05BEAD3"]] ) + "_encstr_ABE60C07DDADF8190F42B11BDA13"] );
    else if ( var_0 == game["_encstr_95A70AA81FEE295D3A2F56DE"] )
        level thread vip_endgame( game["_encstr_941C0A6AF345075ED05BEAD3"], game["_encstr_94EA0B2BE623AF39CA589BBDB9"][tolower( game[game["_encstr_95A70AA81FEE295D3A2F56DE"]] ) + "_encstr_ABE60C07DDADF8190F42B11BDA13"] );
}

vip_endgame( var_0, var_1 )
{
    thread scripts\mp\gamelogic::endgame( var_0, var_1 );
}

extractionzone()
{
    var_0 = getentarray( "_encstr_889A09E530F7E918279537", "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_0 = _encstr_BA601C371BE4A5838EE6BCB6E097B3B0B656A35E83CADCE5CD3217CEDC6C::removebombzonec( var_0 );
    level.objectives = [];
    var_1 = game["_encstr_941C0A6AF345075ED05BEAD3"];

    foreach ( var_3 in var_0 )
    {
        var_4[0] = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_3.origin );
        var_4[0].angles = ( 0, 270, 0 );
        var_4[0].team = var_1;
        var_4[0].visibleteam = "_encstr_BC19047780DA";
        var_4[0].ownerteam = var_1;
        var_4[0].type = "_encstr_A40101";
        var_5 = spawn( "_encstr_9E6B0FE8274B9DD92BC9D7278591B4D5E6", var_3.origin, 0, 120, 80 );
        var_5.team = var_1;
        var_6 = var_5.origin;
        var_7 = scripts\engine\trace::create_contents( 0, 1, 1, 0, 0, 1, 1 );
        var_8 = [];
        var_9 = scripts\engine\trace::ray_trace( var_4[0].origin + ( 0, 0, 20 ), var_4[0].origin - ( 0, 0, 4000 ), var_8, var_7, 0 );

        if ( isplayer( var_9["_encstr_B60E07C9FD1C2055E3"] ) )
            var_9["_encstr_B60E07C9FD1C2055E3"] = undefined;

        if ( isdefined( var_9 ) )
        {
            var_10 = randomfloat( 360 );
            var_11 = var_9["_encstr_B7260923C89E8F3378E72E"];

            if ( isdefined( self.visualgroundoffset ) )
                var_11 = var_11 + self.visualgroundoffset;

            var_12 = ( cos( var_10 ), sin( var_10 ), 0 );
            var_12 = vectornormalize( var_12 - var_9["_encstr_930E073E8FC00DDF69"] * vectordot( var_12, var_9["_encstr_930E073E8FC00DDF69"] ) );
            var_13 = vectortoangles( var_12 );
            var_4[0].origin = var_11;
            var_4[0] setmodel( "_encstr_8C2116338FD081EFEF2BDA2233285F46386BB8AC2BE815B7" );
            var_4[0] setscriptablepartstate( "_encstr_A12B07D13E43B7F12A", "_encstr_811904785890" );
            var_4[0] playloopsound( "_encstr_A92F11AD07F5CCC62CC9ACFA4CD54EE6F5B183" );
        }

        level.flagcapturetime = 0.05;

        if ( isdefined( var_5.objectivekey ) )
            var_14 = var_5.objectivekey;
        else
            var_14 = var_5.script_label;

        if ( isdefined( var_5.iconname ) )
            var_15 = var_5.iconname;
        else
            var_15 = var_5.script_label;

        var_5 = scripts\mp\gameobjects::createuseobject( var_1, var_5, var_4, ( 0, 0, 100 ) );
        var_5.team = var_1;
        var_5.ownerteam = game["_encstr_95A70AA81FEE295D3A2F56DE"];
        var_5.ownerteamcaps = 1;
        var_5.origin = var_5.curorigin;
        var_5 scripts\mp\gameobjects::allowuse( "_encstr_80BF06CA78A2226B" );
        var_5 scripts\mp\gameobjects::cancontestclaim( 1 );
        var_5 scripts\mp\gameobjects::setusetime( level.flagcapturetime );
        var_5.onuse = ::extractzone_onuse;
        var_5.onbeginuse = ::extractzone_onusebegin;
        var_5.onenduse = ::extractzone_onuseend;
        var_5.oncontested = ::extractzone_oncontested;
        var_5.onuncontested = ::extractzone_onuncontested;
        var_5 scripts\mp\gameobjects::pinobjiconontriggertouch();
        var_5.id = "_encstr_8FD9082F7548D1BB9A8F";
        var_5.extractionactive = 0;
        var_5 scripts\mp\gameobjects::setcapturebehavior( "_encstr_930E073E8FC00DDF69" );
        var_5.objectivekey = var_14;
        var_5.iconname = var_15;
        var_5 scripts\mp\gameobjects::setvisibleteam( "_encstr_BC19047780DA" );
        var_5.stompprogressreward = ::extractzone_stompprogressreward;
        var_5.nousebar = 1;
        var_5.id = "_encstr_8FD9082F7548D1BB9A8F";
        var_5.claimgracetime = level.flagcapturetime * 1000;
        var_5 scripts\mp\gameobjects::setobjectivestatusicons( level.icondefendextract, level.iconcaptureextract );
        waitframe();
    }

    var_17 = getentarray();

    foreach ( var_19 in var_17 )
    {
        var_20 = var_19.script_gameobjectname;

        if ( isdefined( var_20 ) )
        {
            if ( var_20 == "_encstr_889A09E530F7E918279537" )
                var_19 delete();
        }
    }
}

extractzone_onusebegin( var_0 )
{
    var_0.iscapturing = 1;
    level.canprocessot = 0;
    var_1 = scripts\mp\gameobjects::getownerteam();
    self.neutralizing = istrue( level.flagneutralization ) && var_1 != "_encstr_9BA4080D39CFFB5AB7C1";

    if ( !istrue( self.neutralized ) )
        self.didstatusnotify = 0;

    if ( istrue( level.capturedecay ) )
        thread scripts\mp\gameobjects::useobjectdecay( var_0.team );

    self.prevownerteam = scripts\mp\utility\game::getotherteam( var_0.team )[0];
    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::updateflagcapturestate( var_0.team );

    if ( var_1 == game["_encstr_941C0A6AF345075ED05BEAD3"] )
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconstoppingextract, level.iconlosingextract );
    else
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconlosingextract, level.icontakingextract );
}

extractzone_onuseend( var_0, var_1, var_2 )
{
    level.canprocessot = 1;

    if ( var_2 )
        scripts\mp\objidpoolmanager::objective_show_progress( self.objidnum, 0 );

    if ( isplayer( var_1 ) )
    {
        var_1.iscapturing = 0;
        var_1 setclientomnvar( "_encstr_8038139574D9F7694A8F08A8A78E415FE3DB079DCF", 0 );
        var_1.ui_dom_securing = undefined;
    }

    if ( !var_2 )
    {
        self.neutralized = 0;
        var_3 = scripts\mp\gameobjects::getownerteam();

        if ( var_3 == game["_encstr_941C0A6AF345075ED05BEAD3"] )
        {
            if ( self.extractionactive )
                scripts\mp\gameobjects::setobjectivestatusicons( "_encstr_B28C1B4BD8DBB9EBDDB0F20EF65A9BE87D2C36A35AB359AF2B87CCB4C6", "_encstr_A9301C08729D95A68F39E35F1FDF487949AB28E0BBB7DD9B57256B5CE113" );
            else
                scripts\mp\gameobjects::setobjectivestatusicons( "_encstr_9EA11CB436DB37D7EEC2E5E0F696B9D1EBEEB04B4799F64ED7CA3CCC2DB1", "_encstr_A9301C08729D95A68F39E35F1FDF487949AB28E0BBB7DD9B57256B5CE113" );
        }
        else
            scripts\mp\gameobjects::setobjectivestatusicons( level.icondefendextract, level.iconcaptureextract );
    }
}

extractzone_onuse( var_0 )
{
    level.canprocessot = 1;
    var_1 = var_0.team;
    var_2 = scripts\mp\gameobjects::getownerteam();
    self.capturetime = gettime();
    self.neutralized = 0;
    extractzone_setcaptured( var_1, var_0 );

    if ( !self.neutralized )
    {
        if ( isdefined( level.onobjectivecomplete ) )
            [[ level.onobjectivecomplete ]]( "_encstr_97ED09427BB05A38E7C0DB", self.objectivekey, var_0, var_1, var_2, self );
    }

    if ( var_1 == game["_encstr_941C0A6AF345075ED05BEAD3"] )
    {
        playfxontag( level._effect["_encstr_9BB20F6B38F9D1CF5042AF9B6B3973E669"], self.visuals[0], "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
        playannouncerbattlechatter( var_1, "_encstr_B3B824ACC3474E16C63AFAB1A5D18EC659985A9CC8EBCDE8584E8EBE857D664E5A59E6911B5E", 20 );
        var_0 vipextract( self );
    }
    else
    {
        stopfxontag( level._effect["_encstr_9BB20F6B38F9D1CF5042AF9B6B3973E669"], self.visuals[0], "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
        self.extractionactive = 0;
    }
}

extractzone_oncontested()
{
    scripts\mp\gameobjects::setobjectivestatusicons( level.iconcontestingextract );
    scripts\mp\objidpoolmanager::objective_set_progress_team( self.objidnum, undefined );
}

extractzone_onuncontested( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();

    if ( self.ownerteam == game["_encstr_941C0A6AF345075ED05BEAD3"] )
    {
        if ( self.extractionactive )
            scripts\mp\gameobjects::setobjectivestatusicons( "_encstr_B28C1B4BD8DBB9EBDDB0F20EF65A9BE87D2C36A35AB359AF2B87CCB4C6", "_encstr_A9301C08729D95A68F39E35F1FDF487949AB28E0BBB7DD9B57256B5CE113" );
        else
            scripts\mp\gameobjects::setobjectivestatusicons( "_encstr_9EA11CB436DB37D7EEC2E5E0F696B9D1EBEEB04B4799F64ED7CA3CCC2DB1", "_encstr_A9301C08729D95A68F39E35F1FDF487949AB28E0BBB7DD9B57256B5CE113" );
    }
    else
        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefendextract, level.iconcaptureextract );
}

extractzone_setcaptured( var_0, var_1 )
{
    scripts\mp\gameobjects::setownerteam( var_0 );

    if ( self.ownerteam == game["_encstr_941C0A6AF345075ED05BEAD3"] )
    {
        scripts\mp\gameobjects::setusetime( 5 );
        scripts\mp\gameobjects::setobjectivestatusicons( "_encstr_9EA11CB436DB37D7EEC2E5E0F696B9D1EBEEB04B4799F64ED7CA3CCC2DB1", "_encstr_A9301C08729D95A68F39E35F1FDF487949AB28E0BBB7DD9B57256B5CE113" );
    }
    else
    {
        scripts\mp\gameobjects::setusetime( 0.05 );
        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefendextract, level.iconcaptureextract );

        foreach ( var_3 in self.choppers )
        {
            var_3 notify( "_encstr_98FC071903CFE8E05B" );
            var_3 notify( "_encstr_9B4016B783F0B7226B31037B0B863AD2B06E2EFA1B08464A" );
            var_3 scripts\engine\utility::array_remove( self.choppers, var_3 );
            self.choppers = [];
            var_3 thread _encstr_95D52C67B0E3D9B351060D95EFBF9A99A838F3D7C0F91B8E559E698FD3E1032131D8E73798105043A3B63D07BEF7::littlebirdleave();
        }

        playannouncerbattlechatter( game["_encstr_941C0A6AF345075ED05BEAD3"], "_encstr_9F5F26F5B30343DE47D881AA28B153F39916717AC50E63E76B20EA82708F4E871186C9E568B1ABA8", 10 );
    }

    self notify( "_encstr_9EEB08EFAF2B15984A67", var_1 );
    self notify( "_encstr_973508BF93EFFBC363B3", var_1 );
    self.neutralized = 0;

    if ( self.touchlist[var_0].size == 0 )
        self.touchlist = self.oldtouchlist;

    thread giveflagcapturexp( self.touchlist[var_0], var_1 );
    scripts\mp\analyticslog::logevent_gameobject( self.analyticslogtype, self.analyticslogid, self.visuals[0].origin, -1, "_encstr_A3260A360BE0D15D4EB291EB" + var_0 );
}

extractzone_stompprogressreward( var_0 )
{
    var_0 thread scripts\mp\awards::givemidmatchaward( "_encstr_B3D80EB6ED91567DE17D91B2CC95CD23" );
}

getcapturetype()
{
    var_0 = "_encstr_930E073E8FC00DDF69";

    if ( level.capturetype == 2 )
        var_0 = "_encstr_A90F0B18FF1DEB854A4DFB7A67";
    else if ( level.capturetype == 3 )
        var_0 = "_encstr_9FFC0B7398FBCB2A27FD974DE5";

    return var_0;
}

giveflagcapturexp( var_0, var_1 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_2 = var_1;

    if ( isdefined( var_2.owner ) )
        var_2 = var_2.owner;

    level.lastcaptime = gettime();

    if ( isplayer( var_2 ) )
    {
        level thread scripts\mp\hud_util::teamplayercardsplash( "_encstr_95C5188B57685305337039F39077FB53214D700FF610FB4CDF98", var_2 );
        var_2 thread scripts\common\utility::_id_13E0A( level._id_11B29, "_encstr_9EEB08EFAF2B15984A67", var_2.origin );
    }

    var_3 = getarraykeys( var_0 );

    for ( var_4 = 0; var_4 < var_3.size; var_4++ )
    {
        var_5 = var_0[var_3[var_4]].player;

        if ( isdefined( var_5.owner ) )
            var_5 = var_5.owner;

        if ( !isplayer( var_5 ) )
            continue;

        var_5 scripts\mp\utility\stats::incpersstat( "_encstr_B2CF0967600940A373E78A", 1 );
        var_5 scripts\mp\persistence::statsetchild( "_encstr_A2460627DEABDC23", "_encstr_B2CF0967600940A373E78A", var_5.pers["_encstr_B2CF0967600940A373E78A"] );
        var_5 scripts\mp\utility\stats::setextrascore0( var_5.pers["_encstr_B2CF0967600940A373E78A"] );
        var_5 thread scripts\mp\awards::givemidmatchaward( "_encstr_82A2105DD2FBB7C6B10DF058AB55C3BD13D3" );
        wait 0.05;
    }
}

vipextract( var_0 )
{
    if ( !isdefined( var_0.choppers ) )
        var_0.choppers = [];

    var_1 = anglestoforward( self getplayerangles( 1 ) );
    var_2 = getgroundposition( self geteye() + ( 0, 0, 60 ) + var_1 * 80, 60 ) + ( 0, 0, 8 );
    var_3 = _encstr_95D52C67B0E3D9B351060D95EFBF9A99A838F3D7C0F91B8E559E698FD3E1032131D8E73798105043A3B63D07BEF7::spawnextractchopper( var_0, var_0.origin );
    var_0.choppers[var_0.choppers.size] = var_3;
    self iprintlnbold( "_encstr_BDB61C2AC31D4EB0C6D15AEDDC016CF638E82BE404AC374039B7AB3A5990" );
    var_3.extractzone = var_0;
    var_3.extractteam = self.team;
    var_0.curorigin = var_0.origin;
    var_0.offset3d = ( 0, 0, 30 );
    var_0 thread extracttriggerwatcher( var_3 );
}

extracttriggerwatcher( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 endon( "_encstr_98FC071903CFE8E05B" );
    var_0 waittill( "_encstr_9B4016B783F0B7226B31037B0B863AD2B06E2EFA1B08464A" );
    self.extractionactive = 1;
    playannouncerbattlechatter( var_0.extractteam, "_encstr_BA2D249A5843F25093BB8109ABD3CBAB318589829F18E19A98800F5F08F0C6F5A85BFEF37820", 10 );

    if ( self.stalemate )
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconcontestingextract );
    else
        scripts\mp\gameobjects::setobjectivestatusicons( "_encstr_B28C1B4BD8DBB9EBDDB0F20EF65A9BE87D2C36A35AB359AF2B87CCB4C6", "_encstr_A9301C08729D95A68F39E35F1FDF487949AB28E0BBB7DD9B57256B5CE113" );

    for (;;)
    {
        self.trigger waittill( "_encstr_8B5C081B58E0B7A213E6", var_1 );

        if ( !istrue( self.stalemate ) )
        {
            if ( istrue( var_1.isagentvip ) && self.numtouching[game["_encstr_95A70AA81FEE295D3A2F56DE"]] == 0 )
            {
                level thread vip_endgame( var_1.team, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_B22214F6314DAC361DB4D9B27D1BDB6BE0639547B291"] );
                break;
            }
            else if ( var_1.team == self.team && isdefined( var_1.carryobject ) )
            {
                level thread vip_endgame( var_1.team, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_B22214F6314DAC361DB4D9B27D1BDB6BE0639547B291"] );
                break;
            }
        }
    }
}

createthreatbiasgroups()
{
    waitframe();
    createthreatbiasgroup( "_encstr_9E19042B0359" );

    foreach ( var_1 in level.teamnamelist )
    {
        createthreatbiasgroup( var_1 );
        setignoremegroup( var_1, "_encstr_9E19042B0359" );
    }
}

spawnvip()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    wait 2;
    var_0 = getent( "_encstr_97F214431DC6A3FDFB08E10B483F3437DB68CCDA2369", "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_1 = undefined;
    var_2 = undefined;
    level.allowhvtspawn = 1;

    while ( !isdefined( var_1 ) )
    {
        var_1 = scripts\mp\agents\agent_common::connectnewagent( "_encstr_AAB0079B102F47FF38", game["_encstr_941C0A6AF345075ED05BEAD3"] );

        if ( isdefined( var_1 ) )
        {
            var_2 = var_0.origin;
            var_0 delete();
            var_1 thread [[ var_1 scripts\mp\agents\agent_utility::agentfunc( "_encstr_BA8A06D740769010" ) ]]( var_2, ( 0, 0, 0 ) );
            var_3 = var_1 getnearestnode();
            var_1 setorigin( var_3.origin );
            var_1.team = game["_encstr_941C0A6AF345075ED05BEAD3"];
            var_1 scripts\mp\bots\bots_util::bot_set_difficulty( "_encstr_809F08AA0ABB23B33B63" );
            var_1.outlineid = scripts\mp\utility\outline::outlineenableforteam( var_1, var_1.team, "_encstr_9D01163FBBF04DFF68C9999290B50782086997BF0DD0579B", "_encstr_9B4407C817DF0947DB" );
            var_1.nocorpse = 1;
            var_1.isdowned = 0;
            var_1.isagentvip = 1;
            var_4 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_1.origin + ( 0, 0, 30 ) );
            var_4.team = game["_encstr_941C0A6AF345075ED05BEAD3"];
            var_4.destination = var_1.origin;
            var_4 linkto( var_1 );
            var_4 scripts\mp\utility\usability::maketeamusable( var_4.team );
            var_4 sethintstring( &"_encstr_80D3163541CB21D362117DA83DAF51A668F4942AF5AC4A14" );
            var_4 setusepriority( -3 );
            var_1.trigger = var_4;
            var_1.ownerteam = var_4.team;
            var_1.interactteam = "_encstr_B9FC095F8BCCFF02D92B43";
            var_1.requireslos = 1;
            var_1.exclusiveuse = 0;
            var_1.curprogress = 0;
            var_1.usetime = 0;
            var_1.userate = 1;
            var_1.id = "_encstr_98E50D36B03956BE1C851BDAC2D9CA";
            var_1.skiptouching = 1;
            var_1.onuse = ::agent_onuse;
            var_1 thread scripts\mp\gameobjects::useobjectusethink();
            var_1.trackedobject = var_1 scripts\mp\gameobjects::createtrackedobject( var_1, ( 0, 0, 70 ) );
            var_1.trackedobject.objidpingfriendly = 0;
            var_1.trackedobject.objidpingenemy = 0;
            var_1.trackedobject.objpingdelay = 0.05;
            var_1.trackedobject.visibleteam = "_encstr_B9FC095F8BCCFF02D92B43";
            var_1.invulnerable = 1;
            var_1.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.iconescort );
            continue;
        }

        waitframe();
    }

    var_1 setthreatbiasgroup( "_encstr_9E19042B0359" );
    var_1 thread hvtclearmove( var_2 );
    var_1 thread hvtdeathwatcher();
    var_1 takeallweapons();
    waitframe();
    var_1 scripts\cp_mp\utility\inventory_utility::_giveweapon( "_encstr_9B660D018F3841EE3A23DBEE3639F0", undefined, undefined, 1 );
    level.vip = var_1;
}

hvtclearmove( var_0 )
{
    self botsetscriptgoal( var_0, 20, "_encstr_94CC09C69C5AE82D368536" );
    var_1 = scripts\mp\bots\bots_util::bot_waittill_goal_or_fail();

    while ( !isdefined( self.tetherplayer ) )
    {
        self botsetflag( "_encstr_9B92112947D357F89CAF16A8D56E08996AF3B1", 1 );
        wait 0.1;
    }
}

agent_onuse( var_0 )
{
    scripts\mp\utility\print::printboldonteam( "_encstr_8B91123C51633F60FA20D5CF64E5885C7F2A51A9" + var_0.name, var_0.team );
    self.following = 1;
    self.usetime = 1000;
    thread followplayer( var_0 );
    var_0 thread watchownerdeath( self );
    self.trigger scripts\mp\utility\usability::maketeamusable( self.team );
    self.trigger disableplayeruse( var_0 );
}

followplayer( var_0 )
{
    self endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.tetherplayer = var_0;
    level.tetherplayer = var_0;
    self botsetflag( "_encstr_9B92112947D357F89CAF16A8D56E08996AF3B1", 0 );
    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( var_0.team, 11, 12, level.tetherplayer, 9 );

    while ( isdefined( self.tetherplayer ) )
    {
        var_1 = self.tetherplayer getstance();
        self botsetstance( var_1 );

        if ( self.tetherplayer issprinting() )
        {
            self botsetflag( "_encstr_829A09CF90D5C36CE76BE7", 0 );
            self botsetflag( "_encstr_A81A0D524893C755414348EDB90B01", 1 );
        }
        else
        {
            self botsetflag( "_encstr_A81A0D524893C755414348EDB90B01", 0 );
            self botsetflag( "_encstr_829A09CF90D5C36CE76BE7", 1 );
        }

        if ( distance2dsquared( self.tetherplayer.origin, self.origin ) < 10000 )
            level.vipdist = distance2dsquared( self.tetherplayer.origin, self.origin );
        else if ( distance2dsquared( self.tetherplayer.origin, self.origin ) > 10000 )
        {
            level.vipdist = distance2dsquared( self.tetherplayer.origin, self.origin );
            var_2 = botgetclosestnavigablepoint( self.tetherplayer.origin, 40, self );

            if ( isdefined( var_2 ) )
            {
                self botsetpathingstyle( "_encstr_A95906DB9823BE4F" );
                self botsetscriptgoal( var_2, 32, "_encstr_94C2099887BA24607BE134" );
                var_3 = scripts\mp\bots\bots_util::bot_waittill_goal_or_fail( 3 );

                if ( var_3 == "_encstr_AA7205F03A9609" )
                {

                }
            }
        }

        wait 0.15;
    }

    level.tetherplayer = undefined;
}

watchownerdeath( var_0 )
{
    self endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 endon( "_encstr_AAB70C3B1D3339A5FE7733432FC9" );
    self waittill( "_encstr_A3750609A5E61883" );
    var_0.following = 0;
    var_0.usetime = 0;
    var_0.tetherplayer = undefined;
    level.tetherplayer = undefined;
    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( var_0.team, 10, 12 );
}

hvtdeathwatcher()
{
    self endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A61D0C616BF31818A99D6138839C" );
    self waittill( "_encstr_A3750609A5E61883" );
    self.trackedobject scripts\mp\gameobjects::releaseid();
    self.trigger scripts\mp\utility\usability::setallunusable();
    level.hostages[0] = scripts\mp\tac_ops\hostage_utility::spawnhostage( self.origin, self.team, 1 );
    level.hostages[0].outlineid = scripts\mp\utility\outline::outlineenableforteam( level.hostages[0].body, level.hostages[0].team, "_encstr_BCBD15F0DB9349B823C50898D7536139FB72F908B36E95", "_encstr_A34214771A396A17A9730F01D2B902A85E0B7810C8AA" );
}

updatematchstatushintonspawn()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );

    if ( !isdefined( self ) )
        return;

    if ( isdefined( level.vip ) )
    {
        if ( isdefined( level.tetherplayer ) )
        {
            if ( isdefined( level.tetherplayer.team ) && level.tetherplayer.team == self.team )
            {
                if ( level.tetherplayer == self )
                    self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 9 );
                else
                    self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 11 );
            }
            else
                self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 12 );
        }
        else if ( isdefined( self.team ) && level.vip.team == self.team )
            self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 10 );
        else
            self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 12 );
    }
    else if ( isdefined( level.hostagecarrier ) )
    {
        if ( level.hostagecarrier.team == self.team )
        {
            if ( level.hostagecarrier == self )
                self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 13 );
            else
                self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 11 );
        }
        else
            self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 12 );
    }
    else if ( level.hostages[0].team == self.team )
        self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 10 );
    else
        self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 12 );
}

playannouncerbattlechatter( var_0, var_1, var_2 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_3 = "_encstr_BAE405ABF74834";
    var_4 = "_encstr_B26908191EF56B1CB0D7" + var_3 + "_encstr_984C028E" + var_1 + "_encstr_984C028E" + var_2;

    if ( soundexists( var_4 ) )
    {
        foreach ( var_6 in level.players )
        {
            if ( var_6.team == var_0 )
                var_6 queuedialogforplayer( var_4, var_1, 2 );
        }
    }
}

votimeendingsoon()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level waittill( "_encstr_A95F17D62C8E360DF52BB9464B73D9D7D956272FBE37BD7B9B" );
    playannouncerbattlechatter( game["_encstr_941C0A6AF345075ED05BEAD3"], "_encstr_A6822BD06B73D2EE0BAB89AC032B93C5F58E13A3A4A9C94F226692AA98681FCA50260FFF8114DEB0DF6E0B6B22", 10 );
}
