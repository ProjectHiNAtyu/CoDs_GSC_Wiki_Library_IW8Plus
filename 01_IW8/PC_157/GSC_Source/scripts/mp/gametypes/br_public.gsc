// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

iswaitingtoentergulag( var_0 )
{
    return istrue( var_0.entergulagwait );
}

update_current_solution( var_0 )
{
    return istrue( var_0.set_relic_steelballs_perks );
}

use_csm( var_0 )
{
    return istrue( var_0.respawningfromtoken );
}

isplayeringulag()
{
    var_0 = self;
    return isdefined( var_0 ) && ( istrue( var_0.jailed ) || istrue( var_0.gulagarena ) );
}

updateinstantclassswapallowedinternal()
{
    var_0 = self;
    return isdefined( var_0 ) && ( istrue( var_0.jailed ) || istrue( var_0.gulagarena ) || istrue( var_0.gulag ) );
}

_id_1443C()
{
    var_0 = self;
    return isdefined( var_0 ) && istrue( var_0._id_14439 );
}

_encstr_B1711E7B12CB11E9B92F201027F1035392BF6EF5AEB2F573801B90384B11BBE5()
{
    var_0 = self;
    return isdefined( var_0 ) && isdefined( var_0._id_12CA1 ) && var_0._id_12CA1 > 0;
}

unlockscriptabledoors()
{
    var_0 = self;
    return ( istrue( var_0.delay_enter_combat_after_investigating_grenade ) && !isalive( var_0 ) || var_0 _id_125F3() ) && !istrue( var_0.gulag );
}

_id_125F3()
{
    return istrue( self.iszombie );
}

_id_125EC()
{
    return istrue( self.unset_relic_gun_game ) || istrue( self.scn_infil_tango_npc_2_sfx );
}

watchhealend()
{
    self endon( "_encstr_AAA809D88257F9319FAE71" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_931614A60A6153C3E53FE889AB0C79A16AF92DB865BA" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    childthread heal_removeonplayernotifies();
    childthread heal_removeondamage();
}

heal_removeonplayernotifies()
{
    self notifyonplayercommand( "_encstr_9B1210B32ABA261261B7B2709227F56787EA", "_encstr_A8E60AFF77FA1F30D6E7CA43" );
    self notifyonplayercommand( "_encstr_9B1210B32ABA261261B7B2709227F56787EA", "_encstr_9DE608483AFB1D28C673" );
    self notifyonplayercommand( "_encstr_9B1210B32ABA261261B7B2709227F56787EA", "_encstr_887F0F0AA6737939C0D08833333EC0C5EB" );
    scripts\engine\utility::_id_143A5( "_encstr_A3750609A5E61883", "_encstr_9B1210B32ABA261261B7B2709227F56787EA" );
    healend();
}

heal_removeondamage()
{
    for (;;)
    {
        self waittill( "_encstr_B8BE07320B5B16ECAC", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

        if ( level.gametype == "_encstr_9507034B25" && ( var_4 == "_encstr_A43E119D6859218C97A9F7EFD14F4F98831E53" || var_4 == "_encstr_B7B50CA138DF6F7FE3ABC048AF3B" ) )
            continue;

        healend();
    }
}

healend()
{
    self notifyonplayercommandremove( "_encstr_9B1210B32ABA261261B7B2709227F56787EA", "_encstr_A8E60AFF77FA1F30D6E7CA43" );
    self notifyonplayercommandremove( "_encstr_9B1210B32ABA261261B7B2709227F56787EA", "_encstr_9DE608483AFB1D28C673" );
    self notifyonplayercommandremove( "_encstr_9B1210B32ABA261261B7B2709227F56787EA", "_encstr_887F0F0AA6737939C0D08833333EC0C5EB" );
    self notify( "_encstr_AAA809D88257F9319FAE71" );
}

removeitemfrominventory( var_0 )
{
    self.br_inventory_slots[var_0] = undefined;
}

ishelmet( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "_encstr_9BB6062FDE751D33" && issubstr( var_0, "_encstr_A8CC07EAC159C72FD8" );
}

isarmor( var_0 )
{
    return ishelmet( var_0 );
}

isarmorplate( var_0 )
{
    return var_0 == "_encstr_93A813FA2690BFB58BC67986B50A93F14031D1AB0B";
}

ishealitem( var_0 )
{
    return var_0 == "_encstr_8C4A1713E4D8F6B71DAF862B0BC61DD0F54C2CCD460B7656DC" || var_0 == "_encstr_BD3C1708D374F8CF4BD1CB45B62231C09F2BE8934F04719B72" || var_0 == "_encstr_984719984ED8ED7BE8F586CA858D47D0FA2C8C93B2738563A59B95";
}

isequipment( var_0 )
{
    return isarmorplate( var_0 ) || ishealitem( var_0 ) || isdefined( level.br_pickups.br_itemtype[var_0] ) && ( level.br_pickups.br_itemtype[var_0] == "_encstr_9C1607D0071420D7AA" || level.br_pickups.br_itemtype[var_0] == "_encstr_94C2099887BA24607BE134" );
}

isammo( var_0 )
{
    return isdefined( level.br_pickups.br_itemtype[var_0] ) && level.br_pickups.br_itemtype[var_0] == "_encstr_A4830519C1D8CF";
}

_id_12518()
{
    if ( self isswitchingweapon() || self isreloading() || self ismantling() || self isthrowinggrenade() || self israisingweapon() || self ismeleeing() || self [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "_encstr_AAB0079B102F47FF38", "_encstr_A2140CEBAB92A893CBC55397A3D3" ) ]]() || istrue( self.tracking_max_health ) )
        return 0;

    var_0 = self getcurrentweapon();

    if ( nullweapon( var_0 ) )
        return 0;

    return 1;
}

_id_12616( var_0, var_1 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    var_2 = getcompleteweaponname( var_0 );
    self giveandfireoffhand( var_2 );
    wait( var_1 );

    if ( self hasweapon( var_2 ) )
        self takeweapon( var_2 );
}

hasrespawntoken()
{
    var_0 = self;
    return istrue( var_0.hasrespawntoken );
}

shouldgetnewspawnpoint()
{
    var_0 = self;
    return istrue( var_0.shouldgetnewspawnpoint );
}

should_use_velo_forward()
{
    var_0 = self;
    return istrue( var_0.should_use_velo_forward );
}

shouldlink()
{
    var_0 = self;
    return istrue( var_0.should_enter_combat_after_checking_decoy_grenade );
}

should_damage_pavelow_boss( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_0 ) || !isdefined( var_1.armorylights ) )
        return isdefined( var_1.armorylights );
    else
        return var_0 == var_1.armorylights;
}

isusinginfilselection()
{
    if ( istrue( level.infilcanusemap ) )
    {
        switch ( level.infilselectionmethod )
        {
            case "_encstr_AFD70A12808725EF5B9B474E":
                return 1;
            default:
                return 0;
        }
    }

    return 0;
}

handleinfilspawnselectstart()
{
    var_0 = level.infilselectionmethod;
    var_1 = getinfilspawnselectstartfunc( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    return level [[ var_1 ]]();
}

handleinfilspawnselectend()
{
    var_0 = level.infilselectionmethod;
    var_1 = getinfilspawnselectendfunc( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    return level [[ var_1 ]]();
}

getinfilspawnselectstartfunc( var_0 )
{
    if ( !isdefined( level.br_infillocationselectionhandlers ) )
        return undefined;

    var_1 = level.br_infillocationselectionhandlers[var_0];

    if ( !isdefined( var_1 ) )
        return undefined;

    return var_1.spawnselectstartfunc;
}

getinfilspawnselectendfunc( var_0 )
{
    if ( !isdefined( level.br_infillocationselectionhandlers ) )
        return undefined;

    var_1 = level.br_infillocationselectionhandlers[var_0];

    if ( !isdefined( var_1 ) )
        return undefined;

    return var_1.spawnselectendfunc;
}

cleanac130struct( var_0 )
{
    if ( isdefined( var_0.playerslot1 ) )
    {
        if ( isdefined( var_0.playerslot1.head ) )
            var_0.playerslot1.head delete();

        if ( isdefined( var_0.playerslot1.helmet ) )
            var_0.playerslot1.helmet delete();

        var_0.playerslot1 delete();
    }

    if ( isdefined( var_0.playerslot2 ) )
    {
        if ( isdefined( var_0.playerslot2.head ) )
            var_0.playerslot2.head delete();

        var_0.playerslot2 delete();
    }

    if ( isdefined( var_0.playerslot3 ) )
        var_0.playerslot3 delete();

    if ( isdefined( var_0.playerslot4 ) )
        var_0.playerslot4 delete();

    if ( isdefined( var_0.aidoorchief ) )
        var_0.aidoorchief delete();

    if ( isdefined( var_0.cameraent ) )
        var_0.cameraent delete();

    if ( isdefined( var_0.gas_trigger ) )
        var_0.gas_trigger delete();

    if ( isdefined( var_0.playerpositionents ) )
    {
        foreach ( var_2 in var_0.playerpositionents )
            var_2 delete();
    }

    if ( isdefined( var_0.helicratedelete ) )
        var_0.helicratedelete delete();

    if ( isdefined( var_0.staticc130 ) && istrue( var_0.staticc130.cleanme ) )
        var_0.staticc130 delete();

    if ( isdefined( var_0.movingc130 ) && istrue( var_0.movingc130.cleanme ) )
    {
        if ( isdefined( var_0.movingc130.innards ) && istrue( var_0.movingc130.innards.cleanme ) )
            var_0.movingc130.innards delete();

        var_0.movingc130 delete();
    }
}

_id_1264D()
{
    var_0 = self;
    var_0 _meth_87A8();
}

updatebrscoreboardstat( var_0, var_1 )
{
    var_2 = self;
    var_3 = 0;
    var_4 = 0;
    var_5 = 0;

    switch ( var_0 )
    {
        case "_encstr_89C70C4EB2D9B4CEB2D0DEEAB9A3":
            [var_3, var_4, var_5] = [ 0, 8, 0 ];
            break;
        case "_encstr_B9F50890960B9B01773F":
            [var_3, var_4, var_5] = [ 0, 12, 0 ];
            break;
        case "_encstr_828F102FD217484DBA72B0609A063F43437C":
            [var_3, var_4, var_5] = [ 12, 4, 0 ];
            break;
        case "_encstr_A34E113327F38337FB2B0B7DE7E20EB0B6FF9B":
            [var_3, var_4, var_5] = [ 0, 7, 1 ];
            break;
        case "_encstr_972A0F59D779AD1F0889DA925751F7E5A0":
            [var_3, var_4, var_5] = [ 7, 1, 1 ];
            break;
        case "_encstr_9DB315B9AC63591BD12B23A52D1B8D37A3E459C2B62591":
            [var_3, var_4, var_5] = [ 8, 4, 1 ];
            break;
        case "_encstr_94F40E1AC23728C658E8CA82F6BAB186":
            [var_3, var_4, var_5] = [ 12, 1, 1 ];
            break;
        case "_encstr_977D118593B5BD2712561663E81A2985A3B4B7":
            [var_3, var_4, var_5] = [ 0, 8, 2 ];
            break;
        case "_encstr_89D912777C93E73047A0A820DD0D08315549EF69":
            [var_3, var_4, var_5] = [ 8, 4, 2 ];
            break;
        case "_encstr_9E3812BE9D372C21D3F4D5E7A3D9A6BB4BF05035":
            [var_3, var_4, var_5] = [ 12, 4, 2 ];
            break;
        case "_encstr_9BB10C4A0BD35E9F51D59589E95B":
            [var_3, var_4, var_5] = [ 0, 16, 3 ];
            break;
        case "_encstr_A4420FFF7F18C7C2E05F522246086480F0":
        case "_encstr_9C99092927DD4AA34E1729":
        case "_encstr_9FA1110BC64796CEAC9A1CACC64785D1F6E4B9":
        case "_encstr_9D7810504BAF2F79567BE9338232787F13E2":
        case "_encstr_A9500DA5DC94CA6EE00BEEB99673D9":
        case "_encstr_A34109C663B2B0CDBA389B":
        case "_encstr_BE100E0229E3B34D63A82BFFF098052A":
            return;
        default:
            return;
    }

    var_2 packstatintoextrainfo( var_1, var_3, var_4, var_5 );
}

packstatintoextrainfo( var_0, var_1, var_2, var_3 )
{
    var_4 = self;
    var_5 = [ var_4.extrascore0, var_4.extrascore1, var_4.extrascore2, var_4.extrascore3 ];
    var_6 = int( pow( 2, var_2 ) ) - 1;
    var_7 = ( var_0 & var_6 ) << var_1;
    var_8 = ~( var_6 << var_1 );
    var_9 = var_5[var_3];
    var_10 = var_9 & var_8;
    var_11 = var_10 + var_7;

    switch ( var_3 )
    {
        case 0:
            var_4.extrascore0 = var_11;
            break;
        case 1:
            var_4.extrascore1 = var_11;
            break;
        case 2:
            var_4.extrascore2 = var_11;
            break;
        case 3:
            var_4.extrascore3 = var_11;
            break;
        default:
            break;
    }
}

_id_1319E( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 512;
    else
        self.game_extrainfo = self.game_extrainfo & ~512;
}

_id_1319C( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 1024;
    else
        self.game_extrainfo = self.game_extrainfo & ~1024;
}

_id_131A6( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 2048;
    else
        self.game_extrainfo = self.game_extrainfo & ~2048;
}

_id_131A4( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 8192;
    else
        self.game_extrainfo = self.game_extrainfo & ~8192;
}

updatelootleadersonfixedinterval( var_0 )
{
    return isdefined( var_0.game_extrainfo ) && var_0.game_extrainfo & 8192;
}

_id_1315C( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 16384;
    else
        self.game_extrainfo = self.game_extrainfo & ~16384;
}

_id_1315B( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 32768;
    else
        self.game_extrainfo = self.game_extrainfo & ~32768;
}

incrementplayersdownedstat()
{
    var_0 = self;

    if ( !isdefined( var_0.br_playersdowned ) )
        var_0.br_playersdowned = 0;

    var_0.br_playersdowned++;
    var_0 updatebrscoreboardstat( "_encstr_BE100E0229E3B34D63A82BFFF098052A", var_0.br_playersdowned );
    var_0 scripts\mp\utility\stats::incpersstat( "_encstr_9DAB06C05F97103F", 1 );
}

_encstr_806A17B959D10DC26EEC2CCDDA58CDADB21ED19C2C5ADCCCF6( var_0 )
{
    if ( istrue( var_0 ) )
        self.game_extrainfo = self.game_extrainfo | 65536;
    else
        self.game_extrainfo = self.game_extrainfo & ~65536;
}

updatedragonsbreath()
{
    var_0 = self;
    return istrue( var_0.tutorial_usingparachute ) && var_0.game_extrainfo & 64;
}

brbroadcastplayercardsplash( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        if ( !isplayer( var_3 ) )
            continue;

        if ( var_3 isplayeringulag() )
            continue;

        var_3 thread scripts\mp\hud_message::showsplash( var_0, var_1, var_3 );
    }
}

dmztutdropcash( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    foreach ( var_7 in level.teamdata[var_1]["_encstr_8875080E3685E52B93B9"] )
    {
        if ( !isdefined( var_7 ) )
            continue;

        if ( var_7 != var_2 )
            dmztut_endgamewithreward( var_0, var_7, var_3, var_4, var_5 );
    }
}

dmztut_luicallback( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    brleaderdialog( var_0, var_2, level.teamdata[var_1]["_encstr_8875080E3685E52B93B9"], var_5, var_3, var_4 );
}

brleaderdialog( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( game["_encstr_B8DA073D799798C7C7"][var_0] ) )
        return;

    var_6 = level.players;

    if ( isdefined( var_2 ) )
        var_6 = var_2;

    for ( var_7 = 0; var_7 < var_6.size; var_7++ )
    {
        var_8 = var_6[var_7];
        thread dmztut_endgamewithreward( var_0, var_8, var_1, var_3, var_4, var_5 );
    }
}

_id_11C7D( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = 1;

    if ( istrue( var_1 ) && isplayeringulag() )
        return 1;

    if ( istrue( self._id_12742 ) )
        return 1;

    if ( tutorial_playsound() )
    {
        if ( istrue( self._id_12749 ) )
            return 1;

        if ( var_0 == "_encstr_8F25141CB3F8653F3B66A38B0B1F2B11B02B9164DBB0" || var_0 == "_encstr_AF710F7BE8B32DF7E3D60807FD88EB77C5" )
            return 1;

        if ( ( var_0 == "_encstr_A8820FDEE87B1F2CE516EB12BA22D9963F" || var_0 == "_encstr_94CB0D7B13EBE2EB7F80088B26AA9D" ) && !istrue( level._id_126D5 ) )
            return 1;
    }

    var_2 = level.maxteamsize == 1;

    if ( var_2 )
    {
        switch ( var_0 )
        {
            case "_encstr_8F25141CB3F8653F3B66A38B0B1F2B11B02B9164DBB0":
                return 1;
        }
    }

    return 0;
}

disableannouncer( var_0 )
{
    var_1 = var_0.defaultoperatorteam;

    if ( isai( var_0 ) )
        var_1 = var_0.botoperatorteam;

    if ( validtousesticker() || tutorial_playsound() )
        var_1 = "_encstr_BC850785638DA59537";

    if ( !isplayer( var_0 ) )
        var_1 = "_encstr_BA840579D3F7F6";

    return var_1;
}

dmztut_endgamewithreward( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_1 endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( !isdefined( var_1 ) )
        return;

    if ( !isalive( var_1 ) && !istrue( var_3 ) )
        return;

    if ( var_1 issplitscreenplayer() && !var_1 issplitscreenplayerprimary() )
        return;

    if ( var_1 _id_11C7D( var_0, var_2 ) )
        return;

    if ( validtousesticker() || tutorial_playsound() )
    {
        if ( var_0 == "_encstr_A9D214708AC2C708975E98862BD793D72EB28888B3DB" || var_0 == "_encstr_93011A2B57C34EB06F9DE6F88642C9081ABB81C7339B95C8AA37A993" )
            return;
    }

    if ( var_1 scripts\cp_mp\utility\game_utility::_id_140A8() )
        var_6 = "_encstr_BD9B051A510B8B";
    else
    {
        var_7 = disableannouncer( var_1 );
        var_6 = game["_encstr_8B8206834A2DD711"][var_7];
    }

    var_8 = "_encstr_977508916BD813382F61" + var_6 + "_encstr_984C028E" + game["_encstr_B8DA073D799798C7C7"][var_0];

    if ( istrue( level.vehicle_collision_getleveldata ) )
    {
        var_9 = "_encstr_BA750891E1EBC427B5EB" + var_6 + "_encstr_984C028E" + game["_encstr_B8DA073D799798C7C7"][var_0];

        if ( soundexists( var_9 ) )
            var_8 = var_9;
    }

    if ( isdefined( game["_encstr_98371274C3180DA7ACEDDA131571E34B40BBE5EB"] ) && istrue( game["_encstr_98371274C3180DA7ACEDDA131571E34B40BBE5EB"][var_0] ) )
        var_8 = game["_encstr_B8DA073D799798C7C7"][var_0];

    var_8 = tolower( var_8 );
    var_10 = lookupsoundlength( var_8, 1 ) / 1000.0;

    if ( isdefined( var_4 ) )
        wait( var_4 );

    var_1 queuedialogforplayer( var_8, var_0, var_10 );
}

endgamevo( var_0, var_1 )
{
    game["_encstr_B8DA073D799798C7C7"][var_0] = var_1;

    if ( !isdefined( game["_encstr_98371274C3180DA7ACEDDA131571E34B40BBE5EB"] ) )
        game["_encstr_98371274C3180DA7ACEDDA131571E34B40BBE5EB"] = [];

    game["_encstr_98371274C3180DA7ACEDDA131571E34B40BBE5EB"][var_0] = 1;
}

uniquelootitemid()
{
    return isdefined( level.script ) && level.script == "_encstr_B7230A1F490882CD611BD39B";
}

validtousesticker()
{
    var_0 = getdvar( "_encstr_BAF5107B0841CB8B732FE39F19117E21A7F0", "_encstr_B3BA0BAD0E7D13E4D71DAB47C8" );
    return isdefined( level.script ) && ( level.script == var_0 || level.script == "_encstr_943E0DBA973F5B3FD0860B567BC3FB" );
}

tutorial_playsound()
{
    return isdefined( level.script ) && level.script == "_encstr_81E70D6B38AF26E4FAB8BA58279CF2";
}

uniquelootcallbacks()
{
    return isdefined( level.script ) && level.script == "_encstr_98C50CAD07D7C4E4EB5BF6DC2BCB";
}

turret_headicon()
{
    return validtousesticker() || uniquelootitemid() || tutorial_playsound() || uniquelootcallbacks();
}

_id_12570()
{
    var_0 = self getweaponslistprimaries();

    foreach ( var_2 in var_0 )
    {
        var_3 = var_2.basename;

        if ( weaponclass( var_2 ) == "_encstr_8A94070E2DCD8E7BB1" && var_3 != "_encstr_9B660D018F3841EE3A23DBEE3639F0" && var_3 != "_encstr_ABF5154BEEC1FAB695FAE45ADB1DDC1AA5CA6332D76BC1" && var_3 != "_encstr_A6BB11E88FA23FAA7BCCC6D996433B6249AD7B" && var_3 != "_encstr_952020890F22313BDBBB0A732020BFF4489B3E0DC7B8C47B7536225AA88DCFA1F851" && var_3 != "_encstr_B3C2244B471F30A3C03258539CBEE05212A7DDEB4F126140E38BE3E806A7789D8AFF43177FEB" && var_3 != "_encstr_A90A2162A3BA579B794A72C7A87828C21A50A63ADF316283056BC16D6FF1D31DF12D48" )
            return var_2;
    }
}

_id_126ED()
{
    if ( istrue( self._id_12875 ) )
        self waittill( "_encstr_8FA2182B3D49E09D137BA5839F1B5E58E1D5F540E5A080454BB7" );
}

_id_126B8( var_0, var_1 )
{
    if ( !isdefined( var_1 ) )
        var_1 = _encstr_A32A236E6C934B3847B95EDAE079CE85B52BE8BC38569BCB2639FAD29B995A639BC5CE9B36::getinfilspawnoffset();

    var_2 = getdvarint( "_encstr_B77D1CE6369CEBC493D7B9479C560BB5882DCDD11927DBB61D39EDEA37C8", 4500 );

    if ( var_2 >= 0 )
    {
        var_3 = var_1 - var_2;
        var_4 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 0, 1 );
        var_0 = scripts\engine\utility::drop_to_ground( var_0, 0, -1 * var_3, undefined, var_4 );
    }

    return var_0;
}

_id_126B9( var_0, var_1, var_2, var_3, var_4 )
{
    thread _id_126BA( var_0, var_1, var_2, var_3, var_4 );
}

_id_126BA( var_0, var_1, var_2, var_3, var_4 )
{
    self notify( "_encstr_9CD01C0F2D22C3815A638838C774BB23CA959918469A91483F83990B57AC" );
    self endon( "_encstr_9CD01C0F2D22C3815A638838C774BB23CA959918469A91483F83990B57AC" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_5 = !self calloutmarkerping_getactive();

    if ( !isdefined( var_1 ) )
        var_1 = relic_nuketimer_gettimeformission();

    var_6 = gettime() + var_1;
    self._id_12875 = 1;

    if ( !self ispredictedstreamposready() )
        self clearpredictedstreampos();

    var_7 = gettime();

    if ( var_5 )
    {
        while ( !istrue( self.pers["_encstr_B7A81327B422900707998A50A287C8187A3483D14D"] ) && gettime() < var_6 )
            waitframe();
    }

    self predictstreampos( var_0, 1 );

    if ( istrue( var_2 ) )
        self loadcustomizationplayerview( self );

    if ( var_5 )
    {
        waitframe();

        while ( ( !self ispredictedstreamposready() || istrue( var_2 ) && !self hasloadedcustomizationplayerview( self ) ) && gettime() < var_6 )
            waitframe();

        if ( istrue( var_3 ) )
        {
            var_9 = gettime() + getdvarint( "_encstr_B1EA1E573F9318A8B211A35B428DF849F9BBFBE59BA9DD40EC32E936EB7940F5", 5000 );

            while ( gettime() < var_9 )
                waitframe();
        }

        if ( isdefined( var_4 ) )
        {
            var_10 = getdvarint( "_encstr_BA4417FF53778810937BACBB8271DDDFD04EECDBB733C217F5", 2000 );
            var_6 = gettime() + var_4;
            var_11 = 0;

            while ( gettime() < var_6 )
            {
                if ( gettime() > var_11 )
                {
                    self predictstreampos( var_0, 1 );
                    var_11 = gettime() + var_10;
                }

                waitframe();
            }
        }
    }

    self._id_12875 = undefined;
    self notify( "_encstr_8FA2182B3D49E09D137BA5839F1B5E58E1D5F540E5A080454BB7" );
}

relic_nuketimer_gettimeformission()
{
    return getdvarint( "_encstr_87DF1B0B51063FDED8EF2B148D58263F38A822225B482B5448F33F1D69", 9000 );
}

_id_1252B()
{
    self notify( "_encstr_9CD01C0F2D22C3815A638838C774BB23CA959918469A91483F83990B57AC" );
    self clearpredictedstreampos();
}

_id_1264C()
{
    self cancelmantle();

    if ( self isskydiving() )
        self skydive_interrupt();

    if ( istrue( self.inlaststand ) )
        scripts\mp\laststand::playanim_aibegindismountturret( "_encstr_9DDE142F87F488BE2D30CBB7832D390F8B7666634043", self );

    if ( isdefined( self.burninginfo ) )
        scripts\mp\equipment\molotov::molotov_clear_burning();

    if ( istrue( self.usingascender ) )
        scripts\cp_mp\auto_ascender::canseesafecircleui();

    if ( scripts\cp_mp\utility\player_utility::isinvehicle( 1 ) )
    {
        var_0 = spawnstruct();
        var_0.allowairexit = 1;
        var_0.onprematchfadedone2 = "_encstr_95690CE1806F9F8D33E1C990E9C3";
        thread scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_exit( self.vehicle, undefined, self, var_0, 1 );
    }

    if ( isdefined( self.remoteuav ) )
        self.remoteuav scripts\mp\killstreaks\remoteuav::remoteuav_leave();

    if ( isdefined( self.currentturret ) )
        scripts\cp_mp\killstreaks\manual_turret::manualturret_endplayeruse( self.currentturret );

    if ( isdefined( self.usingremote ) )
    {
        var_1 = vehicle_getarray();

        foreach ( var_3 in var_1 )
        {
            if ( isdefined( var_3.owner ) && var_3.owner == self )
            {
                if ( isdefined( var_3.helperdronetype ) )
                    var_3 scripts\cp_mp\killstreaks\helper_drone::helperdroneexplode( 1 );
            }
        }
    }

    scripts\mp\javelin::vehicle_damage_deregistervisualpercentcallback();
}

forcedisablelaststand()
{
    var_0 = self.origin - anglestoforward( self.angles ) * 150;
    return var_0;
}

hasarmor()
{
    return isdefined( self.br_armorhealth ) && self.br_armorhealth > 0;
}

hashelmet()
{
    return isdefined( self.br_helmetlevel );
}

damagearmor( var_0, var_1 )
{
    if ( !hasarmor() )
        return var_0;

    var_2 = int( min( self.br_armorhealth, var_0 ) );
    var_3 = var_0 - var_2;
    var_4 = self.br_armorhealth / self.br_maxarmorhealth;
    self.br_armorhealth = self.br_armorhealth - var_2;
    scripts\cp\vehicles\vehicle_compass_cp::_id_12000( var_2 );
    self.br_armorhealth = max( 0, self.br_armorhealth );
    var_5 = self.br_armorhealth / self.br_maxarmorhealth;

    if ( isplayer( self ) )
    {
        if ( !istrue( var_1 ) )
        {
            if ( self.br_armorhealth == 0 && var_2 > 0 )
            {
                self playsoundtoplayer( "_encstr_9C7B1A196F8B60B8B94288416A5F9225D1B7A58BDF532888C29FF198", self );

                if ( scripts\mp\utility\perk::_hasperk( "_encstr_894D18C7F015EF68F3DAA9C857EBF37EE8AB5FF51F106DEE8768" ) )
                    self setscriptablepartstate( "_encstr_93590C5827B67B93FAC42756B0D6", "_encstr_BD79172B9051BE94E705A0D573B703223DB0A2CFE832E7D97F", 0 );
                else
                    self setscriptablepartstate( "_encstr_93590C5827B67B93FAC42756B0D6", "_encstr_93590C5827B67B93FAC42756B0D6", 0 );
            }
        }

        self setclientomnvar( "_encstr_B771132B12FF4EE8A1118DBB37D2B905AFCA2111BA", var_5 );
        scripts\mp\equipment\armor_plate::debug_state( self.br_armorhealth );
        var_6 = spawnstruct();
        var_6.is_spawner_position_valid = var_2;
        var_6.isaccesscard = var_3;
        var_6.stack_patch_waittill_stack = var_1;
        _encstr_AD64266E6CE44B1CD19B97B53897D9B0B62B1DBC389537F2139CBE7658D6AC8E2F3895DC17B3DC8D::_id_12E05( "_encstr_B4D415681DD8E83F030F452B7B6A7040A4B65021C75560", var_6 );
    }

    return var_3;
}

ishelmetpopenabled()
{
    if ( getdvarint( "_encstr_AF9F126E0EF36F81BABFF8981BCD39618972E877", 1 ) )
        return 1;

    return 0;
}

breakhelmet()
{
    self.br_helmetlevel = undefined;
}

damagehelmet( var_0, var_1, var_2 )
{
    if ( !isdefined( var_1 ) || !ishelmetpopenabled() )
        var_1 = 0;

    var_3 = 1;

    switch ( self.br_helmetlevel )
    {
        case 1:
            var_3 = 0.85;
            break;
        case 2:
            var_3 = 0.7;
            break;
        case 3:
            var_3 = 0.7;
            break;
        default:
    }

    if ( var_1 )
    {
        breakhelmet();

        if ( isdefined( level._id_1203E ) )
            [[ level._id_1203E ]]( self, var_2 );
    }

    return var_3;
}

_id_1285E( var_0 )
{
    setglobalsoundcontext( "_encstr_B3FD0BCD38C0B25B680D3F2363", "_encstr_9707035F3B", 3 );

    if ( !isdefined( level._id_133B4 ) )
        level._id_133B4 = 1;

    level thread _encstr_A32A236E6C934B3847B95EDAE079CE85B52BE8BC38569BCB2639FAD29B995A639BC5CE9B36::stop_priming_gesture();

    if ( level.matchcountdowntime > 13 )
    {
        var_1 = level.matchcountdowntime - 13;
        wait( var_1 );
        var_2 = scripts\mp\utility\teams::getteamdata( var_0, "_encstr_8875080E3685E52B93B9" );

        if ( istrue( level.vehicle_collision_getleveldata ) )
            setmusicstate( "_encstr_97C514AC3B2BE63A8126D7D8ED894CE57DBDAEE8E47B" );
        else
        {
            foreach ( var_4 in var_2 )
            {
                var_5 = game["_encstr_B23F062A5346A7DE"]["_encstr_B7290F026B889BF520FD39178FF07BBBC8"].size;
                var_6 = randomint( var_5 );
                var_4 setplayermusicstate( game["_encstr_B23F062A5346A7DE"]["_encstr_B7290F026B889BF520FD39178FF07BBBC8"][var_6] );
                var_4 setsoundsubmix( "_encstr_8884113AE3407B6A01D96772DDE8F9A3F7D932", 8 );
            }
        }

        wait( level.matchcountdowntime );

        if ( !istrue( level._encstr_8FEA164C9CEBA5E699D2B1F5D6D5E6B4D8D70E36B0CB2B32 ) )
        {
            foreach ( var_4 in var_2 )
                var_4 setplayermusicstate( "_encstr_A40101" );
        }

        var_10 = istrue( level.br_infils_disabled );

        if ( var_10 )
        {
            foreach ( var_4 in var_2 )
                var_4 clearsoundsubmix( "_encstr_8884113AE3407B6A01D96772DDE8F9A3F7D932", 1.5 );

            return;
        }
    }
    else
    {

    }
}

_id_12854( var_0 )
{
    if ( validtousesticker() )
        return;

    if ( level.matchcountdowntime > 3 )
    {
        var_1 = level.matchcountdowntime - 3;
        wait( var_1 );
        dmztut_luicallback( "_encstr_8F8B0DA0037FF301E35B0BE835E3E9", var_0 );
    }
}

loadoutcustomfiresalediscount( var_0 )
{
    if ( !getdvarint( "_encstr_B276202F27E629A840619DE63BB0C861B5ABA7DF8D01724FD0EA976E332001BA18F7", 1 ) )
        return;

    if ( istrue( level._id_12856 ) )
        return;

    level._id_12856 = 1;
    var_1 = getdvarint( "_encstr_982D266EC64E7D1CE4B2DA0B47C643FA915ADC1626B1ACF5B2E1568DBAD15ADEDCFA13BA33CCB293", 2 );
    var_2 = level.players;
    var_3 = [ "_encstr_800811A2303B363F6B6BB7BE689163BB5B90CA", "_encstr_B84E11CA1E56D8AB3A5A7BE6D79DA56CD12D6B" ];

    foreach ( var_5 in var_2 )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_5 scripts\common\utility::allow_array( var_3, 0 );
    }

    wait( var_0 + var_1 );

    foreach ( var_5 in var_2 )
    {
        if ( !isdefined( var_5 ) || var_5 scripts\common\utility::can_execute() )
            continue;

        var_5 scripts\common\utility::allow_array( var_3, 1 );
    }

    level._id_12856 = undefined;
}

calculateeventstarttime()
{
    if ( getdvarint( "_encstr_B37B16D3FA15CEF138A7A1ABD6CB21DF08B2334A1761224B", 1 ) == 0 )
        return;

    var_0 = 5;
    var_1 = level.matchcountdowntime - var_0;

    if ( var_1 > 0 )
        wait( var_1 );

    foreach ( var_3 in level.players )
        var_3.plotarmor = 1;

    level thread loadoutcustomfiresalediscount( var_0 );
}

delay_then_run_wave_override()
{
    var_0 = self;
    var_0 damagearmor( 150, 1 );
}

defend_wave_1()
{
    if ( !_encstr_AD64266E6CE44B1CD19B97B53897D9B0B62B1DBC389537F2139CBE7658D6AC8E2F3895DC17B3DC8D::unset_relic_aggressive_melee_params( "_encstr_95031185D88DF6EE620B8E9529EDB49B95939B" ) )
    {
        level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
        var_0 = getdvarint( "_encstr_B3B5136E1B27EB26E4AF73BDA9A50EF519591B58F2", 30 );
        wait( var_0 );
        setnojipscore( 1, 1 );
        setnojiptime( 1, 1 );
        level.nojip = 1;
    }
}

_id_12A1C( var_0, var_1, var_2, var_3, var_4, var_5, var_6 )
{
    var_7 = scripts\engine\trace::ray_trace( var_0 + ( var_1, var_2, var_3 ), var_0 + ( var_1, var_2, var_4 ), var_6, var_5 );
    return var_7;
}

reset_button_init( var_0, var_1 )
{
    if ( !isdefined( level.cratedata ) || !isdefined( level.cratedata.crates ) )
        return;

    var_2 = var_1 * var_1;
    var_3 = [];

    foreach ( var_5 in level.cratedata.crates )
    {
        if ( !isdefined( var_5 ) )
            continue;

        var_6 = distance2dsquared( var_5.origin, var_0 );

        if ( var_6 < var_2 )
            var_3[var_3.size] = var_5;
    }

    return var_3;
}

semtex_used()
{
    var_0 = 4000;

    if ( isdefined( level.br_level ) && isdefined( level.br_level.spawn_exfil_enemies ) )
        var_0 = level.br_level.spawn_exfil_enemies;

    return var_0;
}

send_all_ai_to_players()
{
    var_0 = -1200;

    if ( isdefined( level.br_level ) && isdefined( level.br_level._id_11A5B ) )
        var_0 = level.br_level._id_11A5B;

    return var_0;
}

modifyplayer_damage( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = modifyscenenode( var_0, var_1, var_2, var_3, var_4 );
    return var_5["_encstr_B7260923C89E8F3378E72E"];
}

modifytriggerlocation( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = modifyscenenode( var_0, var_1, var_2, var_3, var_4 );
    return var_5;
}

modifyscenenode( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = send_all_ai_to_players();
    var_6 = semtex_used();
    var_7 = 2500;
    var_8 = -19000 + var_5;
    var_9 = 15;

    if ( !isdefined( var_1 ) )
        var_1 = getdvarint( "_encstr_938B10CB06FBCF364D59DBB380472F17F377", var_7 );

    if ( !isdefined( var_2 ) )
        var_2 = getdvarint( "_encstr_8BC712BB0F58195BEE36A3CBD94E9FC123EF373E", var_8 );

    var_10 = getdvarint( "_encstr_808C1148E24A67912BB7D5CE6187B99F35CAF0", var_5 );
    var_11 = getdvarint( "_encstr_B762126EC69CEBC44EBE1D932C8D59AF0DD23B43", var_6 );
    var_12 = undefined;

    if ( isdefined( var_3 ) )
        var_12 = var_3;
    else
        var_12 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 0, 0, 1 );

    if ( !isdefined( var_4 ) )
        var_4 = [];

    var_13 = scripts\cp_mp\vehicles\vehicle_spawn::vehicle_spawn_getleveldata();

    if ( isdefined( var_13.instancesbyref["_encstr_BC8F0CED4311BB6CA9F19BBFB0A1"] ) )
        var_4 = scripts\engine\utility::array_combine( var_4, var_13.instancesbyref["_encstr_BC8F0CED4311BB6CA9F19BBFB0A1"] );

    if ( isdefined( var_13.instancesbyref["_encstr_A4E90F635A473A63B2BEC4D2E48CBEAD9D"] ) )
        var_4 = scripts\engine\utility::array_combine( var_4, var_13.instancesbyref["_encstr_A4E90F635A473A63B2BEC4D2E48CBEAD9D"] );

    var_14 = reset_button_init( var_0, 100 );

    if ( isdefined( var_14 ) && var_14.size > 0 )
        var_4 = scripts\engine\utility::array_combine( var_4, var_14 );

    var_15 = _id_12A1C( var_0, 0, 0, var_1, var_2, var_12, var_4 );

    if ( _id_13C32( var_15, var_10 ) )
        return var_15;

    var_15 = _id_12A1C( var_0, var_9, 0, var_1, var_2, var_12, var_4 );

    if ( _id_13C32( var_15, var_10 ) )
        return var_15;

    var_15 = _id_12A1C( var_0, 0, var_9, var_1, var_2, var_12, var_4 );

    if ( _id_13C32( var_15, var_10 ) )
        return var_15;

    var_15 = _id_12A1C( var_0, -1 * var_9, 0, var_1, var_2, var_12, var_4 );

    if ( _id_13C32( var_15, var_10 ) )
        return var_15;

    var_15 = _id_12A1C( var_0, 0, -1 * var_9, var_1, var_2, var_12, var_4 );

    if ( _id_13C32( var_15, var_10 ) )
        return var_15;

    var_15 = [];
    var_15["_encstr_B7260923C89E8F3378E72E"] = ( var_0[0], var_0[1], var_11 );
    var_15["_encstr_B130095358E1B3930B687D"] = 0;
    return var_15;
}

_id_13C32( var_0, var_1 )
{
    return var_0["_encstr_B130095358E1B3930B687D"] != 1 && var_0["_encstr_B7260923C89E8F3378E72E"][2] > var_1;
}

timeoutonabandonedcallback()
{
    if ( !getdvarint( "_encstr_93661D48E24A67912BB7D94367AB9BCF77AA70182BAF53082F9FD6CA7DBFC3", 1 ) )
        return;

    if ( self.triggertype == "_encstr_82650A035028B05A0B63C3B8" && !self.usetime )
    {
        self.touchlist = [];
        self.touchlist["_encstr_9BA4080D39CFFB5AB7C1"] = [];
        self.touchlist["_encstr_AABA05236DC831"] = [];
        self.assisttouchlist = undefined;
    }
}

_id_1266C( var_0, var_1 )
{
    var_2 = self weaponswitchbuttonpressed( "_encstr_9FBC1219732FFFD89E28EBDD4D07E9344BFA31A3" );

    if ( istrue( var_1 ) )
        var_2 = var_2 | var_0;
    else
        var_2 = var_2 & ~var_0;

    self setclientomnvar( "_encstr_9FBC1219732FFFD89E28EBDD4D07E9344BFA31A3", var_2 );
}

_id_125CF( var_0 )
{
    _id_1266C( 1, var_0 );
}

round_enemy_stuck_logic( var_0, var_1 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        if ( !isdefined( var_1 ) && scripts\mp\menus::brking_updateteamscore() )
            return [];
        else
            return level.squaddata[var_0][var_1].players;
    }
    else
        return level.teamdata[var_0]["_encstr_8875080E3685E52B93B9"];
}

rotationrefsbyseatandweapon( var_0, var_1 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        var_2 = [];

        foreach ( var_4 in level.squaddata[var_0][var_1].players )
        {
            if ( isalive( var_4 ) )
                var_2[var_2.size] = var_4;
        }

        return var_2;
    }
    else
        return level.teamdata[var_0]["_encstr_A31C0D41AACF5C484A3493BB25AAB0"];
}

rotationids( var_0, var_1 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        var_2 = 0;

        foreach ( var_4 in level.squaddata[var_0][var_1].players )
        {
            if ( isalive( var_4 ) )
                var_2++;
        }

        return var_2;
    }
    else
        return level.teamdata[var_0]["_encstr_892A0BA3D3F25C4033ADD34893"];
}

round_enemies_fallback_logic( var_0 )
{
    if ( scripts\mp\menus::_id_13733() )
        return getarraykeys( level.squaddata[var_0] );
    else
        return [ 0 ];
}

replace_sat_piece_on_deathordisconnect()
{
    if ( scripts\mp\menus::_id_13733() )
        return level.maxsquadsize;
    else
        return level.maxteamsize;
}

_id_131C3( var_0, var_1, var_2, var_3 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        if ( !isdefined( level.squaddata[var_0][var_1].difficultytabledata ) )
            level.squaddata[var_0][var_1].difficultytabledata = [];

        level.squaddata[var_0][var_1].difficultytabledata[var_2] = var_3;
    }
    else
        level.teamdata[var_0][var_2] = var_3;
}

round_at_max( var_0, var_1, var_2 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        if ( !isdefined( level.squaddata[var_0][var_1].difficultytabledata ) || !isdefined( level.squaddata[var_0][var_1].difficultytabledata[var_2] ) )
            return;

        return level.squaddata[var_0][var_1].difficultytabledata[var_2];
    }
    else
        return level.teamdata[var_0][var_2];
}

_id_1276A( var_0, var_1, var_2, var_3, var_4 )
{
    if ( scripts\mp\menus::_id_13733() )
    {
        var_5 = round_enemy_stuck_logic( var_2.team, var_2.squadindex );

        foreach ( var_7 in var_5 )
        {
            if ( !isdefined( var_3 ) || var_7 != var_3 )
                self playsoundtoplayer( var_0, var_7, var_4 );
        }
    }
    else
        self playsoundtoteam( var_0, var_1, var_3, var_4 );
}

updatesquadmemberlaststandreviveprogress( var_0, var_1, var_2 )
{
    var_3 = ( var_0[0], var_0[1], 0 );
    var_4 = ( var_1[0], var_1[1], 0 );
    var_5 = ( var_2[0], var_2[1], 0 );
    var_6 = vectornormalize( var_3 - var_4 );
    var_7 = vectornormalize( var_5 - var_4 );
    var_8 = vectordot( var_6, var_7 );
    return var_8 > 0;
}

woods_two_death_func( var_0, var_1, var_2, var_3 )
{
    var_4 = var_0[0] - var_2[0];
    var_5 = var_0[1] - var_2[1];
    var_6 = var_1[0] - var_2[0];
    var_7 = var_1[1] - var_2[1];
    var_8 = float( var_3 );
    var_9 = var_6 - var_4;
    var_10 = var_7 - var_5;
    var_11 = var_9 * var_9 + var_10 * var_10;
    var_12 = var_4 * var_7 - var_6 * var_5;
    var_13 = var_8 * var_8 * var_11 - var_12 * var_12;

    if ( var_13 < 0 )
        return;
    else if ( var_13 == 0 )
    {
        var_14 = var_12 * var_10 / var_11 + var_2[0];
        var_15 = -1 * var_12 * var_9 / var_11 + var_2[1];
        return ( var_14, var_15, 0 );
    }
    else
    {
        var_16 = sqrt( var_13 );
        var_17 = var_12 * var_10;
        var_18 = scripts\engine\utility::sign( var_10 ) * var_9 * var_16;
        var_19 = ( var_17 + var_18 ) / var_11 + var_2[0];
        var_20 = ( var_17 - var_18 ) / var_11 + var_2[0];
        var_21 = -1 * var_12 * var_9;
        var_22 = abs( var_10 ) * var_16;
        var_23 = ( var_21 + var_22 ) / var_11 + var_2[1];
        var_24 = ( var_21 - var_22 ) / var_11 + var_2[1];
        return [ ( var_19, var_23, 0 ), ( var_20, var_24, 0 ) ];
    }
}

registersuperextraweapon( var_0, var_1, var_2 )
{
    var_3 = woods_two_death_func( var_0, var_1, var_2.origin, var_2.radius );

    if ( !isdefined( var_3 ) )
        return;
    else if ( !isarray( var_3 ) )
    {
        if ( updatesquadmemberlaststandreviveprogress( var_3, var_0, var_1 ) )
            return var_3;
    }
    else
    {
        var_4 = updatesquadmemberlaststandreviveprogress( var_3[0], var_0, var_1 );
        var_5 = updatesquadmemberlaststandreviveprogress( var_3[1], var_0, var_1 );

        if ( !var_4 && !var_5 )
            return;
        else if ( var_4 && !var_5 )
            return var_3[0];
        else if ( var_5 && !var_4 )
            return var_3[1];
        else
        {
            var_6 = distance2dsquared( var_0, var_3[0] );
            var_7 = distance2dsquared( var_0, var_3[1] );

            if ( var_6 < var_7 )
                return var_3[0];
            else
                return var_3[1];
        }
    }
}

safehouse_struct( var_0, var_1, var_2 )
{
    var_3 = var_1[0] - var_0[0];
    var_4 = var_1[1] - var_0[1];
    var_5 = var_1[2] - var_0[2];

    if ( var_3 != 0 )
        var_6 = ( var_2[0] - var_0[0] ) / var_3;
    else
        var_6 = ( var_2[1] - var_0[1] ) / var_4;

    var_7 = var_0[2] + var_5 * var_6;
    return var_7;
}

updaterectangularzone( var_0, var_1 )
{
    var_2 = var_1.origin[2];
    var_3 = var_2 + var_1.height;
    return var_0[2] >= var_2 && var_0[2] <= var_3;
}

registertabletinit( var_0, var_1, var_2 )
{
    var_3 = woods_two_death_func( var_0, var_1, var_2.origin, var_2.radius );

    if ( !isdefined( var_3 ) )
        return;
    else if ( !isarray( var_3 ) )
    {
        if ( updatesquadmemberlaststandreviveprogress( var_3, var_0, var_1 ) )
        {
            var_4 = safehouse_struct( var_0, var_1, var_3 );
            var_3 = ( var_3[0], var_3[1], var_4 );

            if ( updaterectangularzone( var_3, var_2 ) )
                return var_3;
        }
    }
    else
    {
        var_5 = updatesquadmemberlaststandreviveprogress( var_3[0], var_0, var_1 );
        var_6 = updatesquadmemberlaststandreviveprogress( var_3[1], var_0, var_1 );

        if ( !var_5 && !var_6 )
            return;
        else if ( var_5 && !var_6 )
        {
            var_4 = safehouse_struct( var_0, var_1, var_3[0] );
            var_3[0] = ( var_3[0][0], var_3[0][1], var_4 );

            if ( updaterectangularzone( var_3[0], var_2 ) )
                return var_3[0];
        }
        else if ( var_6 && !var_5 )
        {
            var_4 = safehouse_struct( var_0, var_1, var_3[1] );
            var_3[1] = ( var_3[1][0], var_3[1][1], var_4 );

            if ( updaterectangularzone( var_3[1], var_2 ) )
                return var_3[1];
        }
        else
        {
            var_4 = safehouse_struct( var_0, var_1, var_3[0] );
            var_3[0] = ( var_3[0][0], var_3[0][1], var_4 );
            var_7 = updaterectangularzone( var_3[0], var_2 );
            var_4 = safehouse_struct( var_0, var_1, var_3[1] );
            var_3[1] = ( var_3[1][0], var_3[1][1], var_4 );
            var_8 = updaterectangularzone( var_3[1], var_2 );

            if ( !var_7 && !var_8 )
                return;
            else if ( var_7 && !var_8 )
                return var_3[0];
            else if ( var_8 && !var_7 )
                return var_3[1];
            else
            {
                var_9 = distance2dsquared( var_0, var_3[0] );
                var_10 = distance2dsquared( var_0, var_3[1] );

                if ( var_9 < var_10 )
                    return var_3[0];
                else
                    return var_3[1];
            }
        }
    }
}

_id_12A18( var_0, var_1, var_2 )
{
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        var_6 = registersuperextraweapon( var_0, var_1, var_5 );

        if ( isdefined( var_6 ) )
            var_3[var_3.size] = var_6;
    }

    var_8 = undefined;
    var_9 = 0;

    foreach ( var_6 in var_3 )
    {
        var_11 = distance2dsquared( var_0, var_6 );

        if ( !isdefined( var_8 ) || var_11 < var_9 )
        {
            var_8 = var_6;
            var_9 = var_11;
        }
    }

    return var_8;
}

_id_12A19( var_0, var_1, var_2 )
{
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        var_6 = registertabletinit( var_0, var_1, var_5 );

        if ( isdefined( var_6 ) )
            var_3[var_3.size] = var_6;
    }

    var_8 = undefined;
    var_9 = 0;

    foreach ( var_6 in var_3 )
    {
        var_11 = distancesquared( var_0, var_6 );

        if ( !isdefined( var_8 ) || var_11 < var_9 )
        {
            var_8 = var_6;
            var_9 = var_11;
        }
    }

    return var_8;
}

nuke_vault_suicidebombers()
{
    return isalive( self ) && ( scripts\common\vehicle::isvehicle() || isdefined( self.classname ) && self.classname == "_encstr_AB440F9BD8932D071DAFB3CA435A3663B2" );
}
