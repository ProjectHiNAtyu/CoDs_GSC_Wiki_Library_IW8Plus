// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "_encstr_9E700851BEE33DF1B547" ) == "_encstr_8A510E519897A1332E4A3898E243F5B9" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = "_encstr_9C19043E5009";
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 1200 );

        if ( 1 )
            scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 5 );
        else
            scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 0 );

        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 2 );
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 0, 0, 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::setovertimelimitdvar( 300 );
    }

    updategametypedvars();
    level.objectivebased = 1;
    level.teambased = 1;
    level.disablebuddyspawn = 1;
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.ontimelimit = ::ontimelimit;
    level.getspawnpoint = ::getspawnpoint;
    level.onplayerkilled = ::onplayerkilled;
    level.lastcaptime = gettime();
    level.resetuiomnvargamemode = _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::resetuiomnvargamemode;
    level.alliescapturing = [];
    level.axiscapturing = [];
    level.cmdattackingteam = "_encstr_9BA4080D39CFFB5AB7C1";
    level.cmddefendingteam = "_encstr_9BA4080D39CFFB5AB7C1";
    level.timerstoppedforgamemode = 0;
    level.extratime = 0;
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_8F420C1215E495DF41536C99F515";

    if ( getdvarint( "_encstr_B8020A9E9AA69A6292517AA0" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_891904A1D8BE" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_93570B93F4A9629272A825B426" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_889708C9D0E7EBE819D9" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];

    game["_encstr_B8DA073D799798C7C7"]["_encstr_B8C30DA1CFF70D476FE78C6F8DF3DD"] = "_encstr_B8C30DA1CFF70D476FE78C6F8DF3DD";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_95260BFB08D81A89693754CFA8"] = "_encstr_95260BFB08D81A89693754CFA8";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_8B850A2AE0B99BC178FF5B44"] = "_encstr_9E7D0F98DED698D72B7359ADBCBDBB73DC";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_8C4E0EC2983B46A7597DAEB50E801B4F"] = "_encstr_B32B13D6F2EAA21952B31147CB3D5836EB932B8630";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B9A10DD145CDB008EA27752B0782ED"] = "_encstr_B9A10DD145CDB008EA27752B0782ED";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_973D0D13EDAD13EBC1D8C29BA32B91"] = "_encstr_973D0D13EDAD13EBC1D8C29BA32B91";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_98920D450E453F191976AF77C17142"] = "_encstr_B4D50DC95DE59820C2236B73574977";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9E920DEF8057054BC1E10AF0C2D742"] = "_encstr_80D50D89BD5B89D72B9B95DAE5AF98";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3E613CAB956B62FAF4CF6DA89EB912B6657E6CA32"] = "_encstr_BA0612823F887E975D38AAD22225B7B790AF3D0C";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_81B513CD23B9F0B371FBB55B76A80B10817E0B05E5"] = "_encstr_B7AF12C4DBD689D72BE62BB55EC163C237E8AC23";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9E240C10CE33016D6AEA39B0F244"] = "_encstr_AB660E535A50E138CEDAF9782840C738";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3420C3D576AC3C8736F09906BB2"] = "_encstr_AB660E535A50E138CEDAF9782840C738";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B6A115FF873B90382AD4BE5BB11DF828F227551343F2C3"] = "_encstr_AFA20CD7AD5291053019169A53F8";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_BAF21CF94D3801BFF63B31FADE0B1BADA7E3EC27E511CFFDEE880B4959C8"] = "_encstr_8CE80F2BDA98C2B9B92F7D0B8E1DB06CB5";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B47A175E9F331E2766A2F192E97DD1D6DF2D5F43FA1F230B0A"] = "_encstr_9C970D2F631849A64F15018FDB38D5";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9B071EE17A4B28F8E612CF093F0EE805B71278EE22236090FBE0A9852933384E"] = "_encstr_9D4A106CBDD638BD5DE68CBE2C3AE885C6B6";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A805150EAF032E175672216A19ADE1E683490EF33CEF70"] = "_encstr_88650BDE13D4BE37D834BDED8D";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A34D1C36B738D7B726A6EB62EBC23A3A2C36D6D75B38F5330B275A3216D0"] = "_encstr_89740EB98D34DEF636F5168ED1C2D8D6";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_BDBA1CE750CA30C8BAFA31BBA9A21F7AAD0A11E19D230FEBE7F3CCCA5141"] = "_encstr_A8C20E472F2210D0DC61316957BD90DD";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_AD221F08E20AA7F0AB4280AF1FDF98AB35EB7180BAA26F483B4F148F2AD7016BDC"] = "_encstr_8957141A76193ABF58217753D8507122E317231366BB";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A88420992F93E73249B8604B474D503242288EE83FD17D8EC058B1E4A7C3DBF160B8"] = "_encstr_A982156EB10DEDED1BFA5637ACB65ED80B0E8EAE93CA8C";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A9AF176162A9B9D883522882A049C891D0A3F38808B3DD999A"] = "_encstr_BD0E0A8FF51AD94A88734FD2";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3031E18B7A9B9E0730D116296AF03A08A024727D5D7E7F073DBF2128133BD68"] = "_encstr_AB010D31AE9B95DCBE858EA32CC65B";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_BC451EF85F903607F254682761EA6B59EDC348A1FF48CEDBABFAFB8EC6C3A323"] = "_encstr_8B4C0D293B1B40D681EB4B45077A95";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_BDCC214F378B20E8FA044E8B61A5B8653217BFD7A733E8307051311BD28090AF7BCF9F"] = "_encstr_8CCB139EAB9865CB583B53770373F2D92813D3E2C1";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A8062226BABB09BF46F8BF59B9E5DE3DB1137F433D9483C8E598B7A31B0BAB5BFF43A50B"] = "_encstr_898D1413BACD2BCDBE59B9596BCB1B2C3847AE4EACC8";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_BC4215F85F903607F25468A6617A417EEEFFF810DB5928"] = "_encstr_80D50ABD899A7DD863DB8DD6";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_8BCD1C1F67DB70988A741EBBD171B81D22CF87DFC7833898A14AC0894650"] = "_encstr_B4D50DE99DE7903A611F4941378A72";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_89AB1CDFFA0BB148162A5F420FB16BB210CBB1AF357AF0174F88EAF5B169"] = "_encstr_88CC0DD836ED36DAF519563356E691";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_952A1768CF7086B742C4F85691EAD1CE7DDF78A813A93B6BBB"] = "_encstr_B9240EED8953AFD5E691954E0E0BDCB9";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_81231E42984F07A5905DCFAA1FA0AB137FB15A09A0274F1FF091E0D27B70B7C7"] = "_encstr_B3A71157E646959C0716B937F516D147B01BB6";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B65C1EF75F32D190ABBAFE4BF16B5DD08FA67117F59A89ED9F33104BFA03059B"] = "_encstr_872611ABE6C895C9C1169BDCBE19CACCB27319";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9C9B2123575B49A542D45FD25160D0F1B15307B1FF2B7F2AB091934BF398B08745459F"] = "_encstr_A90D17C0D30CC9855B0EF6FEE962F5B17DE7E8E813B4037DD2";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_AFCD22E6E713AFFF9A9AB9328E0A163340C33F2C871C45C1EA87B9F89BAA8B501E9B75BF"] = "_encstr_BC3D189F95751232B819F2FAF63866AA59135F4751A5DB0A48C1";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A47715C822CA67306B82406E5FBF1B9FB72AD8102A2641"] = "_encstr_A8960EAD46AD89F7A918073BD803CB92";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9B871C3E408A2768B2E2B786C9865DC8B24608E15B18BFD90BE672091FC8"] = "_encstr_B36F11170BFE92A8C01B72FF7698FC3BDFA7FF";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A82A1CE00AE2BFE8837AB88677A391850F82507942BA0701678ABB1521FB"] = "_encstr_B2C711DF17EB37844738BBD281B93FC3E10854";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_82FA1FCBDFF0C67F59728E33A7A372E7B94AD999DE232850333F4009BA84220F42"] = "_encstr_89C41743B108FD1238634FEFCFD5BA35281AFE4E0B5095EB05";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_8BE3206CF6E0EBDB9835AF66BE59B9565B5EAF86BD1B91F55B1CF5CC0B932DC816D0"] = "_encstr_A9B918DD16E42B34DEAECD567DB237CAB6E5D8B0E0D1AE275932";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9D191739778AAE65E6BC19068FF07019FD28FA728BA703AAE0"] = "_encstr_9E3D1117F0CA2F81E7B073AC5D65C789FC6805";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A46C1E36DE0EFAED269AFA66EBB0D1D116B1B6AF5B1CAF95BA38A12785A3569B"] = "_encstr_9E6314CB77D872638E13F28BF868532108F954518708";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_BDD81EA690F827825EBD1F96EF756A5608D81F2148509FFA2D61CB9BFB25529B"] = "_encstr_BEDE141BEDCD9BE839D5B18E5ABD73FA322B66959B8C";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_BE3C2192489FD775A06D9FFB6FF07D674922E91A11771F2D081FDDA5094082BF6DD9A3"] = "_encstr_B1031ADE1FCB1B91E2D390300A7D6D565FB65541719701A14B3B10B0";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_AB7522D7876FA13F5808E9FAC608765A49039F731F99DAD718539177BB7888E31761FF87"] = "_encstr_9F031B6F3FE8EBAC40631EA398D0CE6135A5FFEFBB863260584B52EF11";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A30A15D29801096799FA97F418AD634145704BCA68FB3C"] = "_encstr_9C970D2F631849A64F15018FDB38D5";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_80021C63DF80D1B73E58E967C605D7D770B51CD74328694B57B3826A696B"] = "_encstr_B6A910FF576DB098FFC291FE4A97C4C045B4";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1AD1736F607BEED989AD743FA5BC17D56AE38D039168EB29B"] = "_encstr_BE9D08EF4E3007EFAF78";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A2DE1E118ABBD808F602DF310F1E9815A722681E32131080CBF0B9B55903285E"] = "_encstr_95C70B66DE26EB0BA3D1B08D5B";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_87901E7F07BB10B8AA543E5B3194D034429BF9FFE763D8A0D5AAC0ABA66C18F6"] = "_encstr_8B450B33DE98AF46953359E632";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1FC1277458FA67B091AF2EDFC6E0BB7D3FA7B75"] = "_encstr_A3F81747AFB08FCAF90B43AA0901861B2905DCF936FBC7D3F3";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A36A124A7B99A1CF21523F3BF888EB77C7B052B2"] = "_encstr_9C9C0E7B4C4DAFD87B374795B9A35623";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A3DC0E7BA01B6F57D5282A6311078F47"] = "_encstr_A9ED1795E6CAB697EBC6B0C18EAEC9D237763756AEA3C95836";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B87F09C6A8C1D140C050AB"] = "_encstr_B37216AE2F4D02E3C2C547C89FC726B7275B20073BCF6343";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_8CAB1466082131A763701B5F707B631AF91D6BDAE5A1"] = "_encstr_A385158FF7AA7C182A058E01ADF010259267251B07A2BE";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_97F618C6B70EF598B76B13C1C6B0B9E8CA8CAFC2E8AC9BACB6F2"] = "_encstr_BDD617897BB61338B12CCD8EB28CBE0B1DCADC595BBCB1BDC1";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9F391BA7D743BFBD072A5BA88DA3F820AAC18F019C86636357C8DABB93"] = "_encstr_BE5D1A4CF66BC483632C9BD1B246AF161D6639B42B9B32632F1BB7E0";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B2D710D832DA77816FB5EED59563ABF7476A"] = "_encstr_8C49151BDEDA07B75D3746FA13F65BC446ACCCAE372B46";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_874A14F3D37D0AB13BD7822F255071392203A2E51390"] = "_encstr_87E0100B10058B1FC8EF3D0DADE8620F2C68";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A30314DF47F91A1D18C11371F080092BF1ADC1A366DC"] = "_encstr_AA25139E7C63C5B1686F90185B9F0801FBA21F2415";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_BEA41462137C0BC7D96FE3A7F92B9FAB492ACA29F07A"] = "_encstr_93431263546480A51B5FEFE98772FAC0182E6B58";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_97711492FBB9733D5399A60F108BCFFA6B8E9CCF5729"] = "_encstr_989E0FB996A327561CAFBB86B9C1C2BB73";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_93DF146E5A3A395683EB86FA6B387D99B0E4D29116D0"] = "_encstr_A24B10A3C120DAA0B77F4A98889E2BF76F70";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B18216FB5B281207AF76A7591887B78F48116862E3901F97"] = "_encstr_A24B10A3C120DAA0B77F4A98889E2BF76F70";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_AD9A16B7F7136E7010B14B9E25F8692DFB7B193D6FBBBDB8"] = "_encstr_B9591257DBB863C9316F51630B8777DFB2AFABB5";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_872116EB231B5BD769795F816B8181DF931748624F634F1A"] = "_encstr_A6B510B9D28E275683AFD5DC8C37E02CBBE6";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_809216338BB3F36FD1D117E978E929674BEFA0CA171B17B2"] = "_encstr_9ED012EB231B5BD769794A8218874B87339F577E";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_810F16CBB7B322C5137793AF1F3BD1B39B83C953C1E1CF2F"] = "_encstr_BA9010B95A8EE49538EB337B31CD830BBBCD";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9DF111F77B73DF726DBDCF020873FBBCF9F85F"] = "_encstr_B70E0D2FCB0BE592270AC143411952";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_89E213CEEF436E5712D2B030592F03406B8A47B673"] = "_encstr_A1EF0F870DC8B73B583112CA982EAFEE18";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_8868170E65BB07D8D91BC09B43FAD1B3D281760E7E52D941A1"] = "_encstr_941B13CA5049335A2875FDC17F492603676932523A";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_80971222377F2158763F7390F83232A7257A3118"] = "_encstr_8AA80E95B9ACDA5EFA139C0B461BAC97";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B8A814D8F6C1F5347B9B8E85D9B2BEB1DBB1C2A39519"] = "_encstr_9E9910D0B7DB63F667886952F0472EBBF17D";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9B8B17BAE0CFBF80FFF301F1CFE3F85028D31347EFD0801D72"] = "_encstr_93E1130DDBB93A163BACEB2BC33AC985B1E8D2BDE6";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_892C11A7DF63C878022F51E994C72099AA7331"] = "_encstr_8CB70DCE95883EA078C7F1611A4589";
    thread ongameended();
    level._effect["_encstr_9BB20F6B38F9D1CF5042AF9B6B3973E669"] = loadfx( "_encstr_A9162956EDE0ED5716992B13E1EEB3B20253E8F777C085673F9022DB804403A829177D5BEFE8CC27E829EA" );
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "_encstr_81D511070FFE31A3D039797E30B0DA2B59AB9F", getmatchrulesdata( "_encstr_B14F080EED39F3CB7322", "_encstr_B10909E822EF5D53B36DB6" ) );
    setdynamicdvar( "_encstr_B1B91EB3E9BEF756F851FFC977189C0B6F636AFAD00DD74D6073DBD51540A7D3", getmatchrulesdata( "_encstr_B14F080EED39F3CB7322", "_encstr_AF4A1668EF1470B54253F388AD68EB98691FF1F073CC0975" ) );
    setdynamicdvar( "_encstr_81CD1CCD8D9CD71B5B917DC2B18E5A3BB03A96F6E644CAC6B0BC24583699", getmatchrulesdata( "_encstr_B14F080EED39F3CB7322", "_encstr_98F2140B427B18AB7383C118DEACC331F9F850536819" ) );
    setdynamicdvar( "_encstr_989C1CB93693F5365B32FA16B1D1D2B30BD14BF6DC22AC1B2C2F212C6E95", getmatchrulesdata( "_encstr_B14F080EED39F3CB7322", "_encstr_ABC11409A7DB6B9339F3D4177231C88DF14320F23E75" ) );
    setdynamicdvar( "_encstr_9B401E328178B7D26911AF47038FEBD59329673B1B48448AB02DD75775B5222A", getmatchrulesdata( "_encstr_B14F080EED39F3CB7322", "_encstr_98DF16D9A27395AB3AC5117BFA26D0D3E7AA5581FADB4570" ) );
    setdynamicdvar( "_encstr_A6211C835EA3973E3BF821FAC859B377DB353C1D6E69E344D78058D2C85D", getmatchrulesdata( "_encstr_B14F080EED39F3CB7322", "_encstr_BC5F142EC1632B4332E29968EB8E09C04766339754D3" ) );
    setdynamicdvar( "_encstr_ADF01CCD36E4AF1BDA91BE8D5883A35DC92B225739B0D1B4B7B990C2DC59", getmatchrulesdata( "_encstr_B14F080EED39F3CB7322", "_encstr_A22E144FC8CBBC9B3565CFBBD63B4379F05833CFC0C1" ) );
    setdynamicdvar( "_encstr_ADB41BA3573DA81870379860C808F9F73B4E3FCD3C2832531FE0795F35", getmatchrulesdata( "_encstr_B14F080EED39F3CB7322", "_encstr_BA6A13C03A7BF5E1E3CA7341C94DF8DEE782DBE913" ) );
    setdynamicdvar( "_encstr_A2B819DCD827EBC6DA46F5D0EDD823445D9C854796EDB99016B199", getmatchrulesdata( "_encstr_B14F080EED39F3CB7322", "_encstr_B2D111711031C0EF6FBB0E1CABFF65C1C9903B" ) );
    setdynamicdvar( "_encstr_AD8819FF7B8AE9BEBF4216F81A53E5E9E3C26379E9B52866B72BA9", getmatchrulesdata( "_encstr_B14F080EED39F3CB7322", "_encstr_BA2111AAC019A32790A529248B18F57337FBF2" ) );
    setdynamicdvar( "_encstr_A3A61A66832B0E2FB5B201505BCFEF47FB29EC503A1F90735B4A8898", getmatchrulesdata( "_encstr_B14F080EED39F3CB7322", "_encstr_9DDE121DC7FF803F2910CFAB532DF42B4B73654D" ) );
    setdynamicdvar( "_encstr_9ED118EB26DBEF5653A0891208A38F4711175465C6418B9C6BB0", getmatchrulesdata( "_encstr_ADEB084BD085F96F98AE", "_encstr_A6BB1009B968DFBE478AD4DB160751D26AAF" ) );
    setdynamicdvar( "_encstr_AF091B8ED973A7EF40FA562B60987FD4A02DAB6336C1EFF243B3BA3728", getmatchrulesdata( "_encstr_ADEB084BD085F96F98AE", "_encstr_8A23138D6896BC27D09390DB7E19B96A87F3C7F7E8" ) );
    setdynamicdvar( "_encstr_A9A8194B867B4FF6F323E9220BE1EB3F937D83DFA801DF7B8340C2", getmatchrulesdata( "_encstr_A3FC08C1EB3385A883F9", "_encstr_8F2E11C6C20E3AEA275634DBCD8C96472DB773" ) );
    setdynamicdvar( "_encstr_97E611E6B127D732BDDAD70D85D8CC1DA56BAC", 0 );
    scripts\mp\utility\game::registerhalftimedvar( "_encstr_9318045AFDDD", 0 );
}

updategametypedvars()
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::updatecommongametypedvars();
    level.cmdrules = scripts\mp\utility\dvars::dvarintvalue( "_encstr_B10909E822EF5D53B36DB6", 1, 1, 3 );
    level.tieractivationdelay = [];
    level.tieractivationdelay[0] = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_AF4A1668EF1470B54253F388AD68EB98691FF1F073CC0975", 15, 0, 60 );
    level.tieractivationdelay[1] = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_98F2140B427B18AB7383C118DEACC331F9F850536819", 15, 0, 60 );
    level.tieractivationdelay[2] = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_ABC11409A7DB6B9339F3D4177231C88DF14320F23E75", 15, 0, 60 );
    level.tiercapturetime = [];
    level.tiercapturetime[0] = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_98DF16D9A27395AB3AC5117BFA26D0D3E7AA5581FADB4570", 10, 0, 60 );
    level.tiercapturetime[1] = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_BC5F142EC1632B4332E29968EB8E09C04766339754D3", 10, 0, 60 );
    level.tiercapturetime[2] = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_A22E144FC8CBBC9B3565CFBBD63B4379F05833CFC0C1", 10, 0, 60 );
    level.tierholdtime = [];
    level.tierholdtime[0] = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_BA6A13C03A7BF5E1E3CA7341C94DF8DEE782DBE913", 30, 0, 60 );
    level.tierholdtime[1] = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_B2D111711031C0EF6FBB0E1CABFF65C1C9903B", 30, 0, 60 );
    level.tierholdtime[2] = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_BA2111AAC019A32790A529248B18F57337FBF2", 45, 0, 60 );
    level.juggspawnbehavior = scripts\mp\utility\dvars::dvarintvalue( "_encstr_9DDE121DC7FF803F2910CFAB532DF42B4B73654D", 1, 0, 3 );
    level.flagcapturetime = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_A6BB1009B968DFBE478AD4DB160751D26AAF", 10, 0, 30 );
    level.flagneutralization = scripts\mp\utility\dvars::dvarintvalue( "_encstr_8A23138D6896BC27D09390DB7E19B96A87F3C7F7E8", 0, 0, 1 );
    level.hvtspawnpos = scripts\mp\utility\dvars::dvarintvalue( "_encstr_8F2E11C6C20E3AEA275634DBCD8C96472DB773", 1, 0, 2 );
    level.overtime = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_B6ED0E6FC6F7389D074A390412CFDBC0", 300, 0, 300 );
    scripts\mp\utility\game::setovertimelimitdvar( level.overtime );
    level.persistentbombtimer = 0;
    level.persistentdomtimer = 1;

    if ( istrue( level.persistentbombtimer ) )
        level.bombtimer = 60;
    else
        level.bombtimer = 30;

    if ( level.cmdrules == 1 )
    {
        level.planttime = 2;
        level.defusetime = 2;
    }
    else
    {
        level.planttime = level.tiercapturetime[2];
        level.defusetime = level.tiercapturetime[2];
        level.bombtimer = 3;
    }

    level.controltoprogress = 1;
    setdvar( "_encstr_B3D40B9E6624FF155BD17078C1", 200.0 );
    level.forcedobjectiveindex = getdvarint( "_encstr_8FD714D389DE973698315F6ECF88FEA79060BA2AD1B3", -1 );

    if ( level.forcedobjectiveindex != -1 )
    {
        setdynamicdvar( "_encstr_A61805573F9318" + scripts\mp\utility\game::getgametype() + "_encstr_BE630CF54EDB57CDC826A5D62DD1", 2 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 2 );
        setdynamicdvar( "_encstr_A61805573F9318" + scripts\mp\utility\game::getgametype() + "_encstr_B6730D20E22F3B45879310F8FB1E01", 1 );
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 1, 0, 1 );
    }
}

ontimelimit()
{
    if ( level.cmdrules == 2 )
    {
        if ( level.cmddefendingteam != "_encstr_9BA4080D39CFFB5AB7C1" )
            cmd_endgame( level.cmddefendingteam, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_8B6E11BDABD11CDB9B1DAFC82B66ACCD465623"] );
        else
            level thread scripts\mp\gamelogic::endgame( "_encstr_8A190423A45D", game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_A40B13A3B4AD56AFD896B5D28EF593AC0BC6A15632"] );
    }
    else if ( scripts\mp\utility\game::inovertime() )
        level thread scripts\mp\gamelogic::endgame( "_encstr_8A190423A45D", game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_A40B13A3B4AD56AFD896B5D28EF593AC0BC6A15632"] );
    else
        level thread scripts\mp\gamelogic::endgame( "_encstr_AA6D09DBD92B93E8D2D695", game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_A40B13A3B4AD56AFD896B5D28EF593AC0BC6A15632"] );
}

seticonnames()
{
    level.iconcapture = "_encstr_B46916336F12D01187AED20BD5715015C9C79B89ABDBA698";
    level.iconcontested = "_encstr_B8C518C0FFFF154764EFC80B8710581C6746704D8BB2E8C06968";
    level.icondefend = "_encstr_B2471503DB07707F1BDA185812B4258B6F449D0C35DBF9";
    level.icondefusing = "_encstr_A3CE1719DE80D3B18F50C34B38EBB5F3FE359D8E6DAB170547";
    level.iconlosing = "_encstr_9775153007C060517790700F58B170ED870C2A4F8B68FA";
    level.iconneutral = "_encstr_9E6C16533E123D36AF57CB4007D9687179E5DDE5531BEB98";
    level.iconplanting = "_encstr_B333175F3F4012AF50C980CA2088D6EB307133F7BD75AA4628";
    level.icontaking = "_encstr_87FE15A51BDEDCD7EE16CB1C7BB437D1FA470BB5A5B93B";
    level.icontarget = "_encstr_8CBC1541EF50B54F8C11D34BB8EBD36B7979C1C20FF8FB";
}

onstartgametype()
{
    seticonnames();

    if ( !isdefined( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] ) )
        game["_encstr_A6D60EE09BF413B9945185CB4797C583"] = 0;

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
    {
        var_0 = game["_encstr_941C0A6AF345075ED05BEAD3"];
        var_1 = game["_encstr_95A70AA81FEE295D3A2F56DE"];
        game["_encstr_941C0A6AF345075ED05BEAD3"] = var_1;
        game["_encstr_95A70AA81FEE295D3A2F56DE"] = var_0;
    }

    foreach ( var_3 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_3, &"_encstr_AD670FC4BE7A19967967E5DB17964D01C5" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"_encstr_AD670FC4BE7A19967967E5DB17964D01C5" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"_encstr_B44615F49092A2868AA42B5135CB883D53F5D41AE92515" );

        scripts\mp\utility\game::setobjectivehinttext( var_3, &"_encstr_A40414608105DF870FDB2E35CEB84395A3D198988941" );
    }

    setclientnamemode( "_encstr_95900C2EDBD01F99D6B1DFEB878D" );
    initspecatatorcameras();
    thread loopspectatorlocations();
    setupobjectives();
    initspawns();
    setupdestructibledoors();

    if ( level.mapname == "_encstr_ABC80BAAF8C7EFF723D304397B" )
        init_mp_faridah();

    thread startgame();
    _encstr_A1E429F852FABB63A30BE831E0264973E59A7820FB57C7D0C312C7BDC457F247CA3358C872EF3D38BF3BDE::inittankspawns();
}

init_mp_faridah()
{
    initschoolmgturret();
    thread initksbonuscrates();
    thread initpropaganda();
}

initpropaganda()
{
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );
    var_0 = ( 435, 0, 625 );
    var_1 = ( 0, 0, 0 );
    level.propagandaent = scripts\engine\utility::spawn_tag_origin( var_0, var_1 );
    level.propagandaent show();
    level.propagandaent playloopsound( "_encstr_95192148C8C3B131C8D591615B97753B5B1F78F1FACFCB885F6B8FD75710ED08A985C9" );
}

initschoolmgturret()
{
    var_0 = ( 260, -1415, 150 );
    var_1 = ( 0, 90, 0 );
    var_2 = scripts\engine\utility::spawn_tag_origin( var_0, var_1 );
    var_3 = spawnturret( "_encstr_88710C0763169AF7A3330A1229D8", var_2.origin, "_encstr_821C13BC2358194F6D10118AD9C6AF0F28E11F3D81", 0 );
    var_3.angles = var_2.angles;
    var_3 linkto( var_2, "_encstr_8CB40B4BB398B1C0A81FDF6BEA", ( 0, 0, 16 ), ( 0, 0, 0 ) );
    var_3 setmodel( "_encstr_88361A0BED77B37F08A83DB79F91134243FF33C267E17A948EA2A8E2" );
    var_3 makeunusable();
    var_3 setnodeploy( 1 );
    var_3 setdefaultdroppitch( 0 );
    var_4 = getcompleteweaponname( "_encstr_821C13BC2358194F6D10118AD9C6AF0F28E11F3D81" );
    var_3.objweapon = var_4;
    var_5 = var_3 gettagorigin( "_encstr_9BB511A5577F11F363C8CEEF2DD14842041361" );
    var_6 = scripts\mp\gameobjects::createhintobject( var_5, "_encstr_98110C0B790BBF87AE11E9F1A8F5", "_encstr_9F2B107B130AF768238740D1F36D43E5A2FB", &"_encstr_BCD120A3F01B8B718D3A0D28E841214C8CF8A3C7C2E907E10BDA9B89854E878EFD51" );
    var_6 linkto( var_3, "_encstr_9BB511A5577F11F363C8CEEF2DD14842041361", ( 0, 0, 5 ), ( 0, 0, 0 ) );
    var_6 thread turretthink( var_3 );
    var_3.killcament = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", ( 255, -1425, 210 ) );
}

turretthink( var_0 )
{
    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_1 );
        self makeunusable();
        var_1.prevweapon = var_1 getcurrentweapon();
        var_1.useweapon = "_encstr_821C13BC2358194F6D10118AD9C6AF0F28E11F3D81";
        var_1 scripts\cp_mp\utility\inventory_utility::_giveweapon( var_1.useweapon, undefined, undefined, 1 );

        while ( var_1 scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_1.useweapon, 1 ) == 0 )
            waitframe();

        var_1 controlturreton( var_0 );
        thread endturretusewatch( var_1, var_0 );
        thread endturretonplayer( var_1 );
        self waittill( "_encstr_A2850F5AC03D6F0BB0C55A55D1B91397D5" );

        if ( isdefined( var_1 ) )
        {
            var_1 controlturretoff( var_0 );
            var_1 switchtoweaponimmediate( var_1.prevweapon );
            var_1 scripts\cp_mp\utility\inventory_utility::_takeweapon( var_1.useweapon );
        }

        self makeusable();
    }
}

endturretusewatch( var_0, var_1 )
{
    var_0 endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    while ( var_0 usebuttonpressed() )
        waitframe();

    for (;;)
    {
        if ( var_0 usebuttonpressed() )
        {
            self notify( "_encstr_A2850F5AC03D6F0BB0C55A55D1B91397D5" );
            break;
        }

        waitframe();
    }
}

endturretonplayer( var_0 )
{
    var_0 waittill( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self notify( "_encstr_A2850F5AC03D6F0BB0C55A55D1B91397D5" );
}

initksbonuscrates()
{
    wait 2.0;
    var_0 = ( 1125, -1675, 100 );
    givekscratetoteam( "_encstr_BC850785638DA59537", var_0, "_encstr_B87010AA3BE80F83CFA7075A6D614F65EDBB" );
    var_0 = ( -1150, -575, 100 );
    givekscratetoteam( "_encstr_BC850785638DA59537", var_0, "_encstr_AF330F47C0F793D23B32CF4A6D0E7592DA" );
}

initspecatatorcameras()
{
    level.spectatorcameras = [];
    level.currentspectatorcamref = "_encstr_AD8E0640AA42DF23";
    var_0 = scripts\engine\utility::getstructarray( "_encstr_9BB2134B0BCFD1BFF34EAF856FDBB7666FD0F21248", "_encstr_B8CE0BE43FC317DF690862BA48" );

    foreach ( var_2 in var_0 )
    {
        var_3 = var_2.script_noteworthy;
        var_4 = scripts\engine\utility::getstructarray( var_2.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        foreach ( var_6 in var_4 )
        {
            switch ( var_6.script_label )
            {
                case "_encstr_A91E112B10D73ED3D0E3353B9059AF45DB90E2":
                    setteammapposition( var_3, game["_encstr_941C0A6AF345075ED05BEAD3"], var_6 );
                    break;
                case "_encstr_A2500F13B8F8DF40288F2F1B43E0CF6B1F":
                    setteammapposition( var_3, game["_encstr_95A70AA81FEE295D3A2F56DE"], var_6 );
                    break;
            }
        }
    }
}

setteammapposition( var_0, var_1, var_2 )
{
    if ( !isdefined( level.spectatorcameras[var_0] ) )
        level.spectatorcameras[var_0] = [];

    level.spectatorcameras[var_0][var_1] = var_2;
}

loopspectatorlocations()
{
    var_0 = 0;

    for (;;)
    {
        if ( getdvarint( "_encstr_810915670FA32890FD8F76C9F6D5E8F6CA9731C3937B8C", 0 ) == 1 )
        {
            if ( isalive( level.players[0] ) )
                level.players[0] suicide();

            var_1 = getdvarint( "_encstr_A26E15CD6C93BEB1AD46BE8D58DAB2392C7DA5CD46953C", -1 );

            if ( var_1 != -1 )
                var_0 = var_1;

            updatespectatorcamera( "_encstr_B891058DBD0EEB" + var_0 );
            var_2 = getdvarfloat( "_encstr_A90915C3E2E8575E735C71D3E818384EEA96A43AEC91A0", 1.0 );
            wait( var_2 );
            var_0++;

            if ( var_0 > 4 )
                var_0 = 0;

            if ( getdvarint( "_encstr_810915670FA32890FD8F76C9F6D5E8F6CA9731C3937B8C", 0 ) == 0 )
                level.players[0] notify( "_encstr_AFD50C2238A5E6AFDE965841ACC0" );

            continue;
        }

        waitframe();
    }
}

setupdestructibledoors()
{
    if ( !isdefined( level.destructibles ) || !isdefined( level.destructibles["_encstr_9B7D1278CF2BDBB51B9E0583B6E2D3E6644F9840"] ) )
        return;

    foreach ( var_1 in level.destructibles["_encstr_9B7D1278CF2BDBB51B9E0583B6E2D3E6644F9840"] )
    {
        var_2 = getdoorowner( var_1.ents[0].origin );
        var_1 scripts\mp\destructible::assigninteractteam( scripts\mp\utility\teams::getenemyteams( var_2 ) );
    }
}

getdoorowner( var_0 )
{
    var_1 = undefined;
    var_2 = undefined;

    foreach ( var_4 in level.objectives )
    {
        if ( !isdefined( var_4.defaultownerteam ) )
            continue;

        var_5 = distance2dsquared( var_0, var_4.curorigin );

        if ( !isdefined( var_1 ) || var_5 < var_2 )
        {
            var_1 = var_4;
            var_2 = var_5;
        }
    }

    return var_1.defaultownerteam;
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_A8201A2F1876C37261AF6AA2773F3AB7D960A387182B075B692732DB" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_8C3D18B638D78D5B19D76E0716BBCDBEB01E2DE6F537E80BC9D1" );
    scripts\mp\spawnlogic::addspawnpoints( game["_encstr_941C0A6AF345075ED05BEAD3"], "_encstr_801E14A24B3F17CDFA410B4333BF05D0169444FFCD77", 1 );
    scripts\mp\spawnlogic::addspawnpoints( game["_encstr_95A70AA81FEE295D3A2F56DE"], "_encstr_9F0912825BF8D70540D7030843300DDF1FB25AEB", 1 );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );

    foreach ( var_1 in level.objectives )
    {
        var_1.spawnpoints = [];
        var_1.spawnpoints[game["_encstr_941C0A6AF345075ED05BEAD3"]] = [];
        var_1.spawnpoints[game["_encstr_95A70AA81FEE295D3A2F56DE"]] = [];
    }

    foreach ( var_4 in level.spawnpoints )
    {
        if ( isdefined( var_4.script_noteworthy ) )
        {
            var_5 = var_4.script_noteworthy;

            if ( var_4.classname == "_encstr_801E14A24B3F17CDFA410B4333BF05D0169444FFCD77" )
                level.objectives[var_5].spawnpoints[game["_encstr_941C0A6AF345075ED05BEAD3"]][level.objectives[var_5].spawnpoints[game["_encstr_941C0A6AF345075ED05BEAD3"]].size] = var_4;
            else if ( var_4.classname == "_encstr_9F0912825BF8D70540D7030843300DDF1FB25AEB" )
                level.objectives[var_5].spawnpoints[game["_encstr_95A70AA81FEE295D3A2F56DE"]][level.objectives[var_5].spawnpoints[game["_encstr_95A70AA81FEE295D3A2F56DE"]].size] = var_4;
        }
    }

    foreach ( var_8, var_1 in level.objectives )
    {
        var_1.spawnsets = [];
        var_1.spawnsets[game["_encstr_941C0A6AF345075ED05BEAD3"]] = "_encstr_9BA1117B5AE4278B0FE7A030C903301B8FD309" + var_8;
        scripts\mp\spawnlogic::registerspawnset( var_1.spawnsets[game["_encstr_941C0A6AF345075ED05BEAD3"]], var_1.spawnpoints[game["_encstr_941C0A6AF345075ED05BEAD3"]] );
        var_1.spawnsets[game["_encstr_95A70AA81FEE295D3A2F56DE"]] = "_encstr_B79A0F4AB9B2D3AA993CB8E748E032E001" + var_8;
        scripts\mp\spawnlogic::registerspawnset( var_1.spawnsets[game["_encstr_95A70AA81FEE295D3A2F56DE"]], var_1.spawnpoints[game["_encstr_95A70AA81FEE295D3A2F56DE"]] );
    }
}

getspawnpoint()
{
    var_0 = self.pers["_encstr_89EF05D46BA8FD"];

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
            var_0 = scripts\mp\utility\game::getotherteam( var_0 )[0];

        var_1 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_89290E8DF107982860E78248C9141B4E" + var_0 + "_encstr_A4810727CEFBF7F281" );
        var_2 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1 );
        self.startspawnpoint = var_2;
    }
    else
        var_2 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, level.currentobjective.spawnsets[var_0] );

    return var_2;
}

setupobjectives()
{
    level.currentobjective = undefined;
    level.objectives = [];
    setupbombzones();
    setupflags();
    setupareabrushes();
    setupteamoobtriggers();
    validateobjectives();
    thread ui_updatecmdprogress();
    thread disableobjectiveongameended();
    thread setupcaptureflares();
}

setupbombzones()
{
    var_0 = getentarray( "_encstr_A6690DDBB7BBCF3677C8BA33F05D2F", "_encstr_B8CE0BE43FC317DF690862BA48" );

    if ( var_0.size == 0 )
        return;

    level._effect["_encstr_BC8C0F6E4023DA5FA9C8D3AB584351B28D"] = loadfx( "_encstr_9BCE34EB333A17AAAF5B990D673702E120B01F07E871DF63D5139182C5538BABE8F9ABFF08C9DB5A19A5E97F3D5FA362D0A02213C822" );
    level._effect["_encstr_ADF6124C2FF2A30104F7A178AB30B8F72B5448D8"] = loadfx( "_encstr_94452E933ABBC048953A8B6755389839BEC348F9020330382F089BF774A719754B8BE0A01BAF50B049169BC72E4B9843" );
    level._effect["_encstr_9F9013C9EB9311C4CC35FF507D1B6F18F04BEBBA88"] = loadfx( "_encstr_95F42BB399879796EE9B5EAFE456B8AEB26E1DE65E6B0E5E9D331E7D235698BA3BAFBBC24EB92DDC3B8B3B66E1" );
    level._effect["_encstr_8BEA176616E4D2C80B1AAF26ED5B26F5ACC3C18DEDCD5AEDCD"] = loadfx( "_encstr_B70B4066DDD0DDBFA422D9E233D0FF0408A1FBEC4D90964F60C342BBBEDE43FB8807657FA1F0DF3B7F7BEA63862523F278970BC10778E9C31793621A6EA642AB4041" );
    level.ddbombmodel = [];
    level.multibomb = 1;
    level.bombsplanted = 0;
    level.bombexploded = 0;
    level.bombplanted = 0;
    level.aplanted = 0;
    level.bplanted = 0;

    foreach ( var_2 in var_0 )
    {
        var_3 = var_2.script_noteworthy;

        if ( var_3 == "_encstr_BD4C02AB" )
            var_3 = "_encstr_A40703FA31";
        else
            var_3 = "_encstr_B80703EB16";

        var_2.objectivekey = var_3;
        var_2 mapobjectiveicon();
        var_4 = _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::setupobjective( var_2 );
        var_4 bombzone_ondisableobjective();
        var_4 scripts\mp\gameobjects::releaseid();
        level.objectives[var_4.objectivekey] = var_4;
        var_4.onbeginuse = ::bombzone_onbeginuse;
        var_4.onenduse = ::bombzone_onenduse;
        var_4.onuse = ::bombzone_onuseplantobject;
        var_4.ondisableobjective = ::bombzone_ondisableobjective;
        var_4.onenableobjective = ::bombzone_onenableobjective;
        var_4.onactivateobjective = ::bombzone_onactivateobjective;

        if ( var_3 == "_encstr_B80703EB16" )
        {
            var_4 scripts\mp\gameobjects::setownerteam( game["_encstr_941C0A6AF345075ED05BEAD3"] );
            continue;
        }

        var_4 scripts\mp\gameobjects::setownerteam( game["_encstr_95A70AA81FEE295D3A2F56DE"] );
    }
}

setupflags()
{
    var_0 = getentarray( "_encstr_9C91096E7F59771E726F18", "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_1 = getentarray( "_encstr_BC1412278FC221E463DA295642732D931A11A193", "_encstr_B8CE0BE43FC317DF690862BA48" );

    if ( var_0.size == 0 )
        return;

    var_2 = [];

    for ( var_3 = 0; var_3 < var_0.size; var_3++ )
        var_2[var_2.size] = var_0[var_3];

    var_4 = [];

    if ( var_1.size > 0 )
    {
        foreach ( var_6 in var_1 )
        {
            var_7 = var_6.script_noteworthy;
            var_4[var_7] = var_6;
        }
    }

    foreach ( var_6 in var_2 )
    {
        var_7 = var_6.script_noteworthy;

        if ( isdefined( var_4[var_7] ) )
            var_6 = var_4[var_7];

        var_6.objectivekey = var_7;
        var_6 mapobjectiveicon( var_7 );
        var_10 = _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::setupobjective( var_6 );
        var_10.flagmodel delete();
        var_10.flagmodel = undefined;
        var_10.outlineent = undefined;
        var_10 dompoint_ondisableobjective();
        level.objectives[var_10.objectivekey] = var_10;
        var_10.onbeginuse = ::dompoint_onbeginuse;
        var_10.onuse = ::dompoint_onuse;
        var_10.onenduse = ::dompoint_onenduse;
        var_10.oncontested = ::dompoint_oncontested;
        var_10.onuncontested = ::dompoint_onuncontested;
        var_10.ondisableobjective = ::dompoint_ondisableobjective;
        var_10.onenableobjective = ::dompoint_onenableobjective;
        var_10.onactivateobjective = ::dompoint_onactivateobjective;
        var_10 thread _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::updateflagstate( "_encstr_9819045FD029", 0 );
    }
}

disabledomflagscriptable()
{
    thread _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::updateflagstate( "_encstr_9819045FD029", 0 );
}

setupareabrushes()
{
    var_0 = getentarray( "_encstr_8A42102E1870AF4B503D4FAF250B83DD908D", "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_1 = getentarray( "_encstr_824E18D8DBC17DE9F6DC597DD92DCDAEC21BD7C6B7B98EAC6EA3", "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_2 = getentarray( "_encstr_805F174008906758C0C32DC14CF873FDCE52410FFAA07A3065", "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_3 = getentarray( "_encstr_9405166790E3AF5327C85FD92CF31B4D69301FE7F039C52B", "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_4 = getentarray( "_encstr_A6CC1DD208DF977088256557FD50FAE78FC0A90A333B372DE85F8865F1D807", "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_5 = getentarray( "_encstr_93C61CD8DE07D7E9ED73ACFAB32D6E578536F5B2B9B2B5F27D1C5D1BCD56", "_encstr_B8CE0BE43FC317DF690862BA48" );

    foreach ( var_7 in level.objectives )
    {
        if ( isdefined( var_7.scriptable ) )
        {
            var_7.scriptable delete();
            var_7.scriptable = undefined;
        }
    }

    if ( isdefined( var_0 ) )
    {
        foreach ( var_10 in var_0 )
        {
            var_11 = var_10.script_noteworthy;

            if ( !isdefined( level.objectives[var_11].neutralbrush ) )
                level.objectives[var_11].neutralbrush = [];

            level.objectives[var_11].neutralbrush[level.objectives[var_11].neutralbrush.size] = var_10;
            var_10 hide();
        }

        foreach ( var_10 in var_1 )
        {
            var_11 = var_10.script_noteworthy;

            if ( !isdefined( level.objectives[var_11].contestedbrush ) )
                level.objectives[var_11].contestedbrush = [];

            level.objectives[var_11].contestedbrush[level.objectives[var_11].contestedbrush.size] = var_10;
            var_10 hide();
        }

        foreach ( var_10 in var_2 )
        {
            var_11 = var_10.script_noteworthy;

            if ( !isdefined( level.objectives[var_11].friendlybrush ) )
                level.objectives[var_11].friendlybrush = [];

            level.objectives[var_11].friendlybrush[level.objectives[var_11].friendlybrush.size] = var_10;
            var_10 hide();
        }

        foreach ( var_10 in var_3 )
        {
            var_11 = var_10.script_noteworthy;

            if ( !isdefined( level.objectives[var_11].enemybrush ) )
                level.objectives[var_11].enemybrush = [];

            level.objectives[var_11].enemybrush[level.objectives[var_11].enemybrush.size] = var_10;
            var_10 hide();
        }

        foreach ( var_10 in var_4 )
        {
            var_11 = var_10.script_noteworthy;

            if ( !isdefined( level.objectives[var_11].friendlypulsebrush ) )
                level.objectives[var_11].friendlypulsebrush = [];

            level.objectives[var_11].friendlypulsebrush[level.objectives[var_11].friendlypulsebrush.size] = var_10;
            var_10 hide();
        }

        foreach ( var_10 in var_5 )
        {
            var_11 = var_10.script_noteworthy;

            if ( !isdefined( level.objectives[var_11].enemypulsebrush ) )
                level.objectives[var_11].enemypulsebrush = [];

            level.objectives[var_11].enemypulsebrush[level.objectives[var_11].enemypulsebrush.size] = var_10;
            var_10 hide();
        }
    }
}

setupteamoobtriggers()
{
    var_0 = getentarray( "_encstr_8FB410E3F870EE072D13FD6C413850AB0513", "_encstr_B8CE0BE43FC317DF690862BA48" );

    if ( !isdefined( var_0 ) )
        return;

    foreach ( var_2 in var_0 )
    {
        var_3 = var_2.script_noteworthy;

        if ( !isdefined( level.objectives[var_3].oobtriggers ) )
            level.objectives[var_3].oobtriggers = [];

        if ( isdefined( var_2.target ) )
        {
            var_4 = getscriptablearray( var_2.target, "_encstr_B8CE0BE43FC317DF690862BA48" );
            var_5 = [];

            foreach ( var_7 in var_4 )
            {
                var_8 = var_5.size;
                var_5[var_8] = var_7;

                if ( isdefined( var_7.script_noteworthy ) )
                {
                    var_5[var_8].drawcount = int( var_7.script_noteworthy );
                    continue;
                }

                var_5[var_8].drawcount = 1;
            }

            var_2.visuals = var_5;
            var_2 thread updateoobvisuals( "_encstr_9819045FD029" );
        }

        level.objectives[var_3].oobtriggers[var_2.script_label] = var_2;
    }
}

validateobjectives()
{
    if ( level.objectives.size == 0 )
    {

    }
    else if ( ( level.objectives.size - 2 ) % 2 == 0 )
    {

    }

    level.midpointobjectiveindex = int( floor( ( level.objectives.size - 2 ) / 2 ) );
    level.currentobjectiveindex = level.midpointobjectiveindex;
    level.previousobjectiveindex = level.currentobjectiveindex;

    foreach ( var_1 in level.objectives )
    {
        if ( level.cmdrules == 1 )
        {
            if ( var_1.objectivekey == "_encstr_B80703EB16" || var_1.objectivekey == "_encstr_A40703FA31" )
                continue;
        }

        var_2 = int( var_1.objectivekey );
        var_3 = int( clamp( floor( abs( var_2 - 2 ) ), 0, 2 ) );
        var_1.tierindex = var_3;
        var_1.activationdelay = level.tieractivationdelay[var_3];
        var_1.captureduration = level.tiercapturetime[var_3];
        var_1.holdtime = level.tierholdtime[var_3];
        var_1 scripts\mp\gameobjects::disableobject();
        var_1.firsttime = 1;

        if ( level.cmdrules == 1 )
        {
            switch ( var_3 )
            {
                case 1:
                case 0:
                    var_1 scripts\mp\gameobjects::setcapturebehavior( "_encstr_9FFC0B7398FBCB2A27FD974DE5" );
                    var_1.ignorestomp = 1;
                    break;
                case 2:
                    if ( var_2 < level.midpointobjectiveindex )
                        var_1.defaultownerteam = game["_encstr_95A70AA81FEE295D3A2F56DE"];
                    else
                        var_1.defaultownerteam = game["_encstr_941C0A6AF345075ED05BEAD3"];

                    break;
            }

            continue;
        }

        var_1.firsttime = 1;
        var_1 scripts\mp\gameobjects::setcapturebehavior( "_encstr_930E073E8FC00DDF69" );

        if ( var_2 == level.midpointobjectiveindex )
            continue;

        if ( var_2 < level.midpointobjectiveindex )
        {
            var_1.defaultownerteam = game["_encstr_95A70AA81FEE295D3A2F56DE"];
            continue;
        }

        var_1.defaultownerteam = game["_encstr_941C0A6AF345075ED05BEAD3"];
    }
}

startgame()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    setomnvar( "_encstr_8F3A1BEB90107F5E981BBB943B40A7772D08E2121BC8B793D859A08DC9", 1 );
    setomnvar( "_encstr_B1A313BA4BBE86C2C93238DE4B9B3ABE475AD6B29C", 0 );
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );
    updateteamscores();
    setomnvar( "_encstr_8F3A1BEB90107F5E981BBB943B40A7772D08E2121BC8B793D859A08DC9", 0 );

    if ( level.cmdrules == 2 )
        level scripts\mp\gamelogic::pausetimer();

    updatecurrentobjective( level.currentobjectiveindex );
}

updatecurrentobjective( var_0 )
{
    if ( level.forcedobjectiveindex != -1 )
        var_0 = level.forcedobjectiveindex;

    if ( !isdefined( level.objectives[scripts\engine\utility::string( var_0 )] ) )
        return;

    if ( isdefined( level.currentobjective ) && isdefined( level.currentobjective.ondisableobjective ) )
        level.currentobjective [[ level.currentobjective.ondisableobjective ]]();

    level.previousobjectiveindex = level.currentobjectiveindex;
    level.currentobjectiveindex = var_0;
    updatespectatorcamera( "_encstr_B891058DBD0EEB" + level.currentobjectiveindex );
    level.currentobjective = level.objectives[scripts\engine\utility::string( var_0 )];
    setomnvar( "_encstr_A2AF133BE19F47590B7190BD0D4BB2E584E1E06220", var_0 );
    updateoobtriggers();

    if ( isdefined( level.currentobjective.onenableobjective ) )
        level.currentobjective [[ level.currentobjective.onenableobjective ]]();

    thread ui_updatecmdholdprogress();
    updateteamscores();

    if ( level.currentobjective.activationdelay > 0 )
    {
        if ( level.cmdrules == 2 && level.currentobjectiveindex == level.midpointobjectiveindex )
            level scripts\mp\gamelogic::pausetimer();

        level.activationdelaystarttime = gettime();
        var_1 = level.currentobjective.activationdelay;
        ui_updatezonetimer( var_1 );
        ui_updatezonetimerpausedness( 0 );
        ui_updatecmdownerteam( "_encstr_B451162D673A6D1989367BD09B71B893C2FBEFA9E7422760" );
        ui_updatecmdcapturestatus( "_encstr_B451162D673A6D1989367BD09B71B893C2FBEFA9E7422760", 0 );
        wait 3.0;
        showsplashtoteam( "_encstr_A61904730372", "_encstr_BD4F0BB1DE387DD1B0399D2B8E" );
        scripts\mp\utility\dialog::statusdialog( getvoforobjective( "_encstr_BC850785638DA59537", "_encstr_94BA058BFB136B" ), "_encstr_BC850785638DA59537", 1 );
        scripts\mp\utility\dialog::statusdialog( getvoforobjective( "_encstr_BA840579D3F7F6", "_encstr_94BA058BFB136B" ), "_encstr_BA840579D3F7F6", 1 );
        level.currentobjective.firsttime = 0;
        var_2 = gettime();

        foreach ( var_4 in level.players )
            var_4.lastsitreptime = var_2;

        wait( var_1 - 3.0 );
        level.activationdelaystarttime = undefined;
    }

    if ( level.cmdrules == 2 && level.currentobjectiveindex == level.midpointobjectiveindex )
        level scripts\mp\gamelogic::resumetimer();

    if ( isdefined( level.currentobjective.onactivateobjective ) )
        level.currentobjective [[ level.currentobjective.onactivateobjective ]]();

    showsplashtoteam( "_encstr_A61904730372", "_encstr_B6480D08AF60E6CB32E343D4BE9B1B" );
    var_6 = 0;

    switch ( level.currentobjective.tierindex )
    {
        case 0:
            var_6 = 0;
            break;
        case 1:
            var_6 = 5;
            break;
        case 2:
            var_6 = 10;
            break;
    }

    scripts\mp\gamelogic::updatewavespawndelay( var_6 );
    scripts\mp\utility\dialog::statusdialog( "_encstr_B1FC1277458FA67B091AF2EDFC6E0BB7D3FA7B75", "_encstr_BC850785638DA59537", 0 );
    scripts\mp\utility\dialog::statusdialog( "_encstr_B1FC1277458FA67B091AF2EDFC6E0BB7D3FA7B75", "_encstr_BA840579D3F7F6", 0 );
}

getfirsttimevoforobjective( var_0 )
{
    var_1 = "_encstr_8956091E702939BF99889F" + level.currentobjectiveindex + "_encstr_984C028E" + level.mapname;
    return var_1;
}

getvoforobjective( var_0, var_1 )
{
    var_2 = "_encstr_A40101";
    var_3 = 0;
    var_4 = var_0 == "_encstr_BC850785638DA59537" && level.previousobjectiveindex > level.currentobjectiveindex || var_0 == "_encstr_BA840579D3F7F6" && level.previousobjectiveindex < level.currentobjectiveindex;

    if ( var_1 == "_encstr_94BA058BFB136B" && level.currentobjective.firsttime )
        var_2 = getfirsttimevoforobjective( var_0 );
    else
    {
        switch ( level.currentobjectiveindex )
        {
            case 4:
            case 0:
                var_3 = 0;

                switch ( var_1 )
                {
                    case "_encstr_94BA058BFB136B":
                        var_2 = "_encstr_8956091E702939BF99889F" + level.currentobjectiveindex + scripts\engine\utility::ter_op( var_4, "_encstr_9D91090F93F04BDFEE0899", "_encstr_AD4109A97893CFC780751F" ) + level.mapname;
                        break;
                    case "_encstr_973D0D13EDAD13EBC1D8C29BA32B91":
                        if ( level.currentobjectiveindex == 0 )
                            var_2 = "_encstr_985A10F14063E6715763A3180B774888175B" + scripts\engine\utility::ter_op( var_0 == "_encstr_BC850785638DA59537", "_encstr_93D6097D168E2B37CAD6CB", "_encstr_AD850CA7790B2036AF5230792A07" );
                        else
                            var_2 = "_encstr_985A10F14063E6715763A3180B774888175B" + scripts\engine\utility::ter_op( var_0 == "_encstr_BA840579D3F7F6", "_encstr_93D6097D168E2B37CAD6CB", "_encstr_AD850CA7790B2036AF5230792A07" );

                        break;
                    case "_encstr_B9A10DD145CDB008EA27752B0782ED":
                        var_3 = 1;
                        break;
                }

                break;
            case 3:
            case 2:
            case 1:
                switch ( var_1 )
                {
                    case "_encstr_94BA058BFB136B":
                        var_2 = "_encstr_8956091E702939BF99889F" + level.currentobjectiveindex + scripts\engine\utility::ter_op( var_4, "_encstr_9D91090F93F04BDFEE0899", "_encstr_AD4109A97893CFC780751F" ) + level.mapname;
                        break;
                    case "_encstr_805D0F18088C8B1141C7A808C39B6DED8F":
                    case "_encstr_9D560A1A38831DA7D68E554B":
                    case "_encstr_95CC05C015BCF0":
                        var_3 = 1;
                        break;
                }

                break;
        }

        if ( var_2 == "_encstr_A40101" )
        {
            if ( var_3 )
                var_2 = "_encstr_B891058DBD0EEB" + var_1;
            else
                var_2 = "_encstr_8956091E702939BF99889F" + level.currentobjectiveindex + "_encstr_984C028E" + var_1 + "_encstr_984C028E" + level.mapname;
        }
    }

    return var_2;
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( !isplayer( var_1 ) || var_1.team == self.team )
        return;

    if ( isdefined( var_4 ) && scripts\mp\utility\weapon::iskillstreakweapon( var_4.basename ) )
        return;

    switch ( level.currentobjective.id )
    {
        case "_encstr_8FD9082F7548D1BB9A8F":
            _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::awardgenericmedals( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
            break;
        case "_encstr_BED80A317BD631BE3DF673CA":
            _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::bombzone_awardgenericbombzonemedals( var_1, self );
            break;
    }
}

onplayerconnect( var_0 )
{
    var_0.ui_dom_securing = undefined;
    var_0.ui_dom_stalemate = undefined;

    foreach ( var_2 in level.objectives )
    {
        if ( isdefined( var_2.neutralbrush ) )
            var_2 hidebrushes( var_0 );
    }

    var_0 thread updatefloorbrushwaitforjoined();
}

decayholdtime( var_0 )
{
    self endon( "_encstr_B6DA13C8B7DA0A7BA5B9E8AF24B7B1322A5AB5B24E" );

    for (;;)
    {
        if ( isdefined( var_0 ) )
        {
            self.teamholdtimers[var_0] = self.teamholdtimers[var_0] - level.framedurationseconds;

            if ( self.teamholdtimers[var_0] <= 0.0 )
            {
                self.teamholdtimers[var_0] = 0.0;
                break;
            }
        }

        waitframe();
    }
}

dompoint_holdtimer( var_0, var_1 )
{
    level endon( "_encstr_811E0A0259C1EF2FF041F5FC" );
    self notify( "_encstr_B6DA13C8B7DA0A7BA5B9E8AF24B7B1322A5AB5B24E" );
    self endon( "_encstr_B6DA13C8B7DA0A7BA5B9E8AF24B7B1322A5AB5B24E" );
    level.inobjectiveot = 0;
    ui_updatecmdownerteam( var_0 );

    if ( istrue( level.persistentdomtimer ) )
    {
        var_2 = self.teamholdtimers[var_0];
        self.holdteam = var_0;
    }
    else
        var_2 = level.currentobjective.holdtime;

    var_3 = scripts\mp\utility\game::getotherteam( var_0 )[0];

    if ( var_2 > 0 )
    {
        thread decayholdtime( var_0 );
        scripts\mp\utility\dialog::statusdialog( getvoforobjective( var_3, "_encstr_A1250B2B9B56B6BCFAA1B71B19" ), var_3, 1 );
        var_4 = 0;

        if ( level.currentobjectiveindex != 2 && var_2 > 5.0 )
        {
            var_5 = getclosestplayeronteam( level.currentobjective.trigger.origin, var_0 );

            if ( isdefined( var_5 ) )
            {
                level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_5, getcapturedialog( "_encstr_9CCF09866E33D9835AB738" ) );
                var_4 = var_4 + var_5 getselfobjcaptureddialog( "_encstr_9CCF09866E33D9835AB738" );
            }
        }

        if ( var_4 > 0 )
            wait( var_4 );

        var_6 = 0;
        var_5 = getclosestplayeronteam( level.currentobjective.trigger.origin, var_0 );

        if ( isdefined( var_5 ) && var_2 > 5.0 + var_4 )
        {
            var_6 = level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_5, "_encstr_BD7B196FC0488F16E73D88D92B857F66BD53E2BBE03522DD574A88" );

            if ( !isdefined( var_6 ) )
                var_6 = 0;
        }

        var_4 = var_4 + var_6;
        wait( var_6 );

        if ( var_2 > 5.0 + var_4 )
            scripts\mp\utility\dialog::statusdialog( getvoforobjective( var_0, "_encstr_95CC05C015BCF0" ), var_0, 1 );

        if ( var_2 - var_4 > 0 )
            wait( var_2 - var_4 );
        else
            wait( var_2 );

        var_3 = scripts\mp\utility\game::getotherteam( var_0 )[0];

        if ( istrue( level.controltoprogress ) && level.currentobjective.touchlist[var_3].size > 0 )
        {
            level.inobjectiveot = 1;
            ui_updatecmdcapturestatus( "_encstr_AA6D09DBD92B93E8D2D695", level.currentobjective.stalemate );

            for (;;)
            {
                if ( level.currentobjective.touchlist[var_3].size == 0 )
                    break;

                waitframe();
            }

            level.inobjectiveot = 0;
        }
    }

    var_7 = 0;
    var_8 = level.currentobjectiveindex;

    if ( var_0 == game["_encstr_941C0A6AF345075ED05BEAD3"] )
    {
        var_8--;

        if ( level.currentobjectiveindex <= level.midpointobjectiveindex )
        {
            var_7 = 1;

            if ( level.currentobjective.tierindex == 1 )
            {
                spawnjuggcate( var_0, "_encstr_877B092C8E1D0B36AD564E" );
                spawnjuggcate( scripts\mp\utility\game::getotherteam( var_0 )[0], "_encstr_BA4609E1537B2088995F6A" );
            }
            else if ( level.currentobjective.tierindex == 0 )
            {
                if ( isdefined( level.propagandaent ) )
                    level.propagandaent stoploopsound();
            }
        }
    }
    else
    {
        var_8++;

        if ( level.currentobjectiveindex >= level.midpointobjectiveindex )
        {
            var_7 = 1;

            if ( level.currentobjective.tierindex == 1 )
            {
                spawnjuggcate( var_0, "_encstr_877B092C8E1D0B36AD564E" );
                spawnjuggcate( scripts\mp\utility\game::getotherteam( var_0 )[0], "_encstr_BA4609E1537B2088995F6A" );
            }
            else if ( level.currentobjective.tierindex == 0 )
            {
                if ( isdefined( level.propagandaent ) )
                    level.propagandaent playloopsound( "_encstr_95192148C8C3B131C8D591615B97753B5B1F78F1FACFCB885F6B8FD75710ED08A985C9" );
            }
        }
    }

    if ( 0 && var_7 )
        scripts\mp\gamescore::giveteamscoreforobjective( var_0, 1, 0 );

    if ( self.tierindex == 0 )
    {
        if ( isdefined( var_1 ) )
            var_1 thread givekillstreak( "_encstr_B61904AEB067", 1 );
        else
        {
            var_5 = getclosestplayeronteam( level.currentobjective.trigger.origin, var_0 );
            var_5 thread givekillstreak( "_encstr_B61904AEB067", 1 );
        }
    }

    updateteamscores();

    if ( var_2 > 0 )
        scripts\mp\utility\dialog::statusdialog( getvoforobjective( var_0, "_encstr_805D0F18088C8B1141C7A808C39B6DED8F" ), var_0, 1 );

    showsplashtoteam( var_0, "_encstr_9B4916DB7873F1DE5883B1201289A93969FA1F89B6682213" );
    showsplashtoteam( var_3, "_encstr_AB3E13B1BDE0AFC6580E8E5793CAC87D953759B5F2" );

    if ( level.forcedobjectiveindex != -1 )
    {
        scripts\mp\gamescore::giveteamscoreforobjective( var_0, 1, 0 );
        cmd_endgame( var_0, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_97CA113A0B4ED995E8AF192BE64739BDE5B246"] );
    }
    else if ( scripts\mp\utility\game::inovertime() )
        scripts\mp\gamescore::giveteamscoreforobjective( var_0, 1, 0 );
    else
    {
        if ( level.cmdrules == 2 && level.currentobjectiveindex == level.midpointobjectiveindex )
        {
            level.extratime = level.extratime + 90;
            var_9 = scripts\mp\gamelogic::gettimeremaining();
            setgameendtime( gettime() + int( var_9 ) );
            level scripts\mp\gamelogic::resumetimer();
        }

        updatecurrentobjective( var_8 );
    }
}

dompoint_cancelholdtimer()
{
    if ( !istrue( level.persistentdomtimer ) )
        return;

    var_0 = scripts\mp\gameobjects::getownerteam();

    if ( isdefined( self.holdteam ) && self.holdteam == var_0 )
    {
        ui_updatezonetimerpausedness( 1 );
        self notify( "_encstr_B6DA13C8B7DA0A7BA5B9E8AF24B7B1322A5AB5B24E" );
        self.holdteam = undefined;
    }
}

givekscratetoteam( var_0, var_1, var_2 )
{

}

createkscrate( var_0, var_1, var_2 )
{

}

cratethink( var_0, var_1 )
{
    self endon( "_encstr_B117130B3A8B51507373BFD3E7C98F9832FB784EDB" );
    self endon( "_encstr_A3750609A5E61883" );
    var_2 = scripts\engine\utility::drop_to_ground( self.origin + ( 7, 9, 0 ), 50, -200, ( 0, 0, 1 ) );
    var_3 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_2 + ( 0, 0, 0 ) );
    var_3 setmodel( "_encstr_B1341977F801B8C205ED313341BF7A6A8940C7C3489EFB4A6F7287" );
    var_3.angles = self.angles + ( -80, 120, 90 );
    var_4 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_3.origin );
    var_4 setmodel( "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
    var_4.angles = self.angles + ( 0, 30, 0 );
    var_4 playloopsound( "_encstr_A92F11AD07F5CCC62CC9ACFA4CD54EE6F5B183" );
    waitframe();
    playfxontag( level._effect["_encstr_9BB20F6B38F9D1CF5042AF9B6B3973E669"], var_4, "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
    var_5 = &"_encstr_81621F38A4A9A3423905EDF12F5919FB433C4121C096030ED103FFE843F1D47717";
    var_6 = undefined;

    switch ( var_1 )
    {
        case "_encstr_AAFC0BA9AB3B9DCAC9DC2C571D":
            var_5 = &"_encstr_80D5272D251331D4A29415822DA9D79029E415A9F294AAD18E15A49C0555A2AF0594685AAA41F58E89";
            var_6 = "_encstr_BD870D5B37B0CB8974F23F3ADB51CF";
            break;
        case "_encstr_B87010AA3BE80F83CFA7075A6D614F65EDBB":
            var_5 = &"_encstr_81C92CE96FE48CD907B1DFB93F53A159BC94B1D9C0312E09F3E9CDB90909317940495F3BB6FF674E31EBA1769D3D";
            var_6 = "_encstr_80F42382A8C9295F995886BF62E073AD4F38AB2A608F91BF53BD99AB0D4E3F34B7A88232F8";
            break;
        case "_encstr_AF330F47C0F793D23B32CF4A6D0E7592DA":
            var_5 = &"_encstr_ABE62B2FF1A5D106FB8135BD38CFD8290C1EE9970FDEB94093B90DC78147955195AD6D17D83459BAAFD1466D98";
            var_6 = "_encstr_93D41BA1578CFAB4C6F673BEB55A3636E6A327CA58B57D580EB06CA156";
            break;
    }

    self.useobj = scripts\mp\gameobjects::createhintobject( self.origin + anglestoup( self.angles ) * 24, "_encstr_98110C0B790BBF87AE11E9F1A8F5", var_6, var_5, -1, undefined, "_encstr_B7180526C81F4B", 250, 360, 100, 360 );
    self.useobj linkto( self );

    if ( var_1 == "_encstr_AAFC0BA9AB3B9DCAC9DC2C571D" )
    {
        thread gainedjuggupdater( var_0 );
        thread removedjuggupdater( var_0 );
    }

    for (;;)
    {
        self waittill( "_encstr_9CCF09866E33D9835AB738", var_7 );

        if ( isplayer( var_7 ) )
        {
            var_7 setclientomnvar( "_encstr_82370C57A5EBB92B1B57C9B4DC9D", 0 );
            var_7.ui_securing = undefined;
        }

        switch ( var_1 )
        {
            case "_encstr_AAFC0BA9AB3B9DCAC9DC2C571D":
                if ( !var_7 thread givejuggernaut() )
                    continue;

                break;
            case "_encstr_B87010AA3BE80F83CFA7075A6D614F65EDBB":
                var_7 thread givekillstreak( "_encstr_B87010AA3BE80F83CFA7075A6D614F65EDBB", 1 );
                wait 3.0;
                break;
            case "_encstr_AF330F47C0F793D23B32CF4A6D0E7592DA":
                var_7 thread givekillstreak( "_encstr_AF330F47C0F793D23B32CF4A6D0E7592DA", 1 );
                wait 3.0;
                break;
        }

        var_7 playlocalsound( "_encstr_AFC80F0BDA5BF6FA8D93C247ACFAD56E2B" );
        stopfxontag( level._effect["_encstr_9BB20F6B38F9D1CF5042AF9B6B3973E669"], var_4, "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
        var_4 stoploopsound();
        var_4 delete();
        var_4 = undefined;
        var_3 delete();
        var_3 = undefined;
        scripts\cp_mp\killstreaks\airdrop::destroycrate();
    }
}

gainedjuggupdater( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );

    foreach ( var_2 in level.players )
    {
        if ( var_2.team == var_0 && istrue( var_2.isjuggernaut ) )
            self disableplayeruse( var_2 );
    }

    for (;;)
    {
        level waittill( "_encstr_879F12672B527A1F67B98AFBF9A96593C0264BF3", var_2 );

        if ( var_2.team == var_0 )
            self disableplayeruse( var_2 );
    }
}

removedjuggupdater( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        level waittill( "_encstr_B4201312F509DF1D970CBFFD235F4C5F03B89F50E3", var_1 );

        if ( var_1.team == var_0 )
            self enableplayeruse( var_1 );
    }
}

givekillstreak( var_0, var_1 )
{
    var_2 = scripts\mp\killstreaks\killstreaks::createstreakitemstruct( var_0 );
    scripts\mp\killstreaks\killstreaks::awardkillstreakfromstruct( var_2, "_encstr_93610627DB28CDDB" );

    if ( istrue( var_1 ) )
    {
        wait 0.1;
        self notify( "_encstr_8C5E0CCCAEA70A43AB608F83B9CB" );
    }
}

bombzone_warningklaxon()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    thread scripts\mp\music_and_dialog::stopsuspensemusic();
    var_0 = game["_encstr_B23F062A5346A7DE"]["_encstr_AB1A0E3672EBCFCF8BD8689DF3335218"].size;
    var_1 = randomint( var_0 );

    foreach ( var_3 in level.players )
        var_3 setplayermusicstate( game["_encstr_B23F062A5346A7DE"]["_encstr_AB1A0E3672EBCFCF8BD8689DF3335218"][var_1] );

    wait 2.0;
    wait 16.0;
}

bombzone_holdtimer( var_0 )
{
    if ( !isdefined( level.currentobjective ) )
        return;

    level endon( "_encstr_811E0A0259C1EF2FF041F5FC" );
    level endon( "_encstr_973D0D13EDAD13EBC1D8C29BA32B91" );
    self notify( "_encstr_A4C61389B76B98B47B9BB2FA90DBD823A8A5B659E4" );
    self endon( "_encstr_A4C61389B76B98B47B9BB2FA90DBD823A8A5B659E4" );
    var_1 = level.currentobjective.defaultownerteam;
    var_2 = scripts\mp\utility\game::getotherteam( level.currentobjective.defaultownerteam )[0];
    scripts\mp\objidpoolmanager::objective_show_team_progress( level.currentobjective.objidnum, var_2 );
    level.timelimitoverride = 0;

    if ( var_0 > 0 )
    {
        ui_updatezonetimer( var_0 );
        wait( var_0 );

        if ( istrue( level.controltoprogress ) )
        {
            var_2 = scripts\mp\utility\game::getotherteam( level.currentobjective.defaultownerteam )[0];
            var_3 = 0;

            for (;;)
            {
                if ( !var_3 )
                {
                    var_3 = 1;
                    ui_updatecmdcapturestatus( "_encstr_AA6D09DBD92B93E8D2D695", level.currentobjective.stalemate );
                }

                if ( level.currentobjective.touchlist[var_2].size == 0 )
                    break;

                waitframe();
            }
        }
    }

    foreach ( var_5 in level.players )
        var_5 setplayermusicstate( "_encstr_972B195DDBA8E18F07AE7AA253C8FBA5E05DD8D40BA8F37FA5E002" );

    thread scripts\mp\music_and_dialog::suspensemusic();
    var_7 = level.currentobjectiveindex;
    var_8 = level.currentobjective scripts\mp\gameobjects::getownerteam();

    if ( var_8 == game["_encstr_941C0A6AF345075ED05BEAD3"] )
        var_7--;
    else
        var_7++;

    updatecurrentobjective( var_7 );
}

bombhandler( var_0, var_1, var_2 )
{
    if ( level.gameended )
        return;

    if ( var_1 == "_encstr_AB0808DFB97F822F1899" )
    {
        self.bombexploded = 1;
        level.currentobjective [[ level.currentobjective.ondisableobjective ]]();
        scripts\mp\gamescore::giveteamscoreforobjective( var_2, 1, 0 );
        cmd_endgame( var_2, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_97CA113A0B4ED995E8AF192BE64739BDE5B246"] );
    }
    else
    {

    }
}

resetbombzone()
{
    scripts\mp\gameobjects::setusetime( level.planttime );
    scripts\mp\gameobjects::setvisibleteam( "_encstr_AABA05236DC831" );
    self.id = "_encstr_BED80A317BD631BE3DF673CA";
    self.useweapon = getcompleteweaponname( "_encstr_B22C12108D8B47BB1F3AA0D24E8EE8E858AE7863" );
    self.bombexploded = undefined;
}

cmd_endgame( var_0, var_1 )
{
    level.docmdoutro = 1;
    var_2 = undefined;

    if ( level.mapname == "_encstr_ABC80BAAF8C7EFF723D304397B" )
    {
        var_2 = spawnstruct();

        if ( var_0 == "_encstr_BC850785638DA59537" )
        {
            var_2.origin = ( -207, -4711, 211 );
            var_2.angles = ( 7, 64, 0 );
        }
        else if ( var_0 == "_encstr_BA840579D3F7F6" )
        {
            var_2.origin = ( 1945, 4423, 670 );
            var_2.angles = ( 15, 244, 0 );
        }
        else
        {

        }
    }

    foreach ( var_4 in level.players )
    {
        if ( !isai( var_4 ) )
            var_4 setclientomnvar( "_encstr_8038139574D9F7694A8F08A8A78E415FE3DB079DCF", 0 );

        var_4 thread playendofmatchtransition( var_2 );
    }

    var_6 = game["_encstr_B4040B6BBF898046C247E5C3DF"][var_0];
    var_7 = game["_encstr_B4040B6BBF898046C247E5C3DF"][scripts\mp\utility\game::getotherteam( var_0 )[0]];

    if ( var_7 > var_6 )
    {
        var_8 = var_7 - var_6 + 1;
        scripts\mp\gamescore::giveteamscoreforobjective( var_0, var_8, 0 );
    }

    thread scripts\mp\gamelogic::endgame( var_0, var_1 );
    wait 0.65;
    level notify( "_encstr_A68715DF75AAB78B3FD32820CB6781D1131D405E8C326D" );
    wait 5.0;
    level notify( "_encstr_8797166AE33047F652B073FA3B93D81F8007115B37B006A2" );
}

dompoint_onbeginuse( var_0 )
{
    dompoint_cancelholdtimer();
    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::dompoint_onusebegin( var_0 );
    self.didstatusnotify = 1;
    thread updateflares( var_0.team );
    ui_updatecmdcapturestatus( var_0.team, self.stalemate );

    if ( var_0.team == game["_encstr_941C0A6AF345075ED05BEAD3"] )
    {
        if ( level.currentobjectiveindex == 0 || level.currentobjectiveindex == 4 )
        {
            var_1 = scripts\mp\gameobjects::getownerteam();

            if ( var_0.team != var_1 )
            {
                level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_0, getcapturedialog( "_encstr_8C260A1BB00747BAC9D2B9CE" ) );
                var_0 getselfobjcaptureddialog( "_encstr_89D109E8419005731360C2" );
            }
            else
                var_0 getselfobjcaptureddialog( "_encstr_956909CC156977424BE0FA" );
        }
        else
            level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_0, getcapturedialog( "_encstr_8C260A1BB00747BAC9D2B9CE" ) );
    }

    var_2 = scripts\mp\utility\game::getotherteam( var_0.team )[0];

    if ( var_2 == scripts\mp\gameobjects::getownerteam() )
        scripts\mp\utility\dialog::statusdialog( getvoforobjective( var_0.team, "_encstr_B7560A7DCD482899FE09F8BB" ), var_2, 0 );
    else
        scripts\mp\utility\dialog::statusdialog( getvoforobjective( var_0.team, "_encstr_9D560A1A38831DA7D68E554B" ), var_2, 0 );

    foreach ( var_0 in level.players )
        updatefloorbrush( var_0 );
}

dompoint_onuse( var_0 )
{
    if ( istrue( level.persistentdomtimer ) )
    {
        ui_updatezonetimerpausedness( 0 );
        self.lastcaptime = gettime();
        self.firstcapture = 0;
    }

    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::dompoint_onuse( var_0 );
    var_1 = scripts\mp\gameobjects::getownerteam();
    thread updateflares( var_1 );

    foreach ( var_3 in level.players )
        updatefloorbrush( var_3 );

    level.usestartspawns = 0;
    var_5 = scripts\mp\utility\game::getotherteam( var_1 )[0];
    thread scripts\mp\utility\print::printandsoundoneveryone( var_1, var_5, undefined, undefined, "_encstr_A68415D97299A1880D276028C75FC6E7021ACD5D4A9279", "_encstr_B76C112883FF4D7B2D2FA5B93997B901972B83", var_0 );

    if ( level.cmdrules == 2 )
    {
        if ( level.currentobjectiveindex == level.midpointobjectiveindex )
        {
            level.cmdattackingteam = var_1;
            level.cmddefendingteam = var_5;
            level scripts\mp\gamelogic::pausetimer();
        }
        else
        {
            level.extratime = level.extratime + 90;
            var_6 = scripts\mp\gamelogic::gettimeremaining();
            setgameendtime( gettime() + int( var_6 ) );
        }
    }

    if ( level.currentobjectiveindex == 0 )
    {
        var_7 = level.objectives["_encstr_A40703FA31"] scripts\mp\gameobjects::getownerteam();

        if ( var_1 != var_7 )
            level.objectives["_encstr_A40703FA31"] bombzone_onuseplantobject( var_0 );
        else
            level.objectives["_encstr_A40703FA31"] bombzone_onusedefuseobject( var_0 );
    }
    else if ( level.currentobjectiveindex == 4 )
    {
        var_7 = level.objectives["_encstr_B80703EB16"] scripts\mp\gameobjects::getownerteam();

        if ( var_1 != var_7 )
            level.objectives["_encstr_B80703EB16"] bombzone_onuseplantobject( var_0 );
        else
            level.objectives["_encstr_B80703EB16"] bombzone_onusedefuseobject( var_0 );
    }
    else
    {
        thread dompoint_holdtimer( var_1, var_0 );
        showsplashtoteam( var_1, "_encstr_B4FE12B6E0088EE3F87873D722A2CFEF4B6549CF" );
        showsplashtoteam( var_5, "_encstr_97860F96FD239F1077A328F96F9E49035B" );
    }

    if ( self == level.currentobjective )
        ui_updatecmdcapturestatus( "_encstr_9BA4080D39CFFB5AB7C1", 0 );
}

dompoint_onenduse( var_0, var_1, var_2 )
{
    if ( self != level.currentobjective )
        return;

    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::dompoint_onuseend( var_0, var_1, var_2 );
    var_3 = scripts\mp\gameobjects::getownerteam();
    var_4 = scripts\engine\utility::ter_op( var_3 == "_encstr_9BA4080D39CFFB5AB7C1", "_encstr_9BC505B4461BB2", var_3 );
    thread updateflares( var_4 );

    if ( level.cmdrules == 2 )
    {
        if ( level.currentobjectiveindex == level.midpointobjectiveindex )
        {
            var_3 = scripts\mp\gameobjects::getownerteam();
            ui_updatecmdcapturestatus( "_encstr_9BA4080D39CFFB5AB7C1", 0 );

            if ( istrue( level.persistentdomtimer ) && self.objectivekey != "_encstr_B34C0233" && self.objectivekey != "_encstr_B94C02A9" )
            {
                if ( var_3 != "_encstr_9BA4080D39CFFB5AB7C1" )
                {
                    ui_updatezonetimerpausedness( 0 );
                    self.lastcaptime = gettime();
                    thread dompoint_holdtimer( var_3 );
                }
            }
        }
    }
    else if ( !var_2 )
    {
        var_3 = scripts\mp\gameobjects::getownerteam();
        ui_updatecmdcapturestatus( "_encstr_9BA4080D39CFFB5AB7C1", 0 );

        if ( istrue( level.persistentdomtimer ) && self.objectivekey != "_encstr_B34C0233" && self.objectivekey != "_encstr_B94C02A9" )
        {
            if ( var_3 != "_encstr_9BA4080D39CFFB5AB7C1" )
            {
                ui_updatezonetimerpausedness( 0 );
                self.lastcaptime = gettime();
                thread dompoint_holdtimer( var_3 );
            }
        }
    }

    foreach ( var_1 in level.players )
        updatefloorbrush( var_1 );
}

dompoint_oncontested()
{
    if ( self != level.currentobjective )
        return;

    dompoint_cancelholdtimer();
    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::dompoint_oncontested();
    thread updateflares( "_encstr_BD5C0ACEA59A91D903BB4878" );
    var_0 = scripts\mp\gameobjects::getownerteam();

    if ( var_0 == "_encstr_9BA4080D39CFFB5AB7C1" )
    {
        if ( level.cmdrules == 2 && level.currentobjectiveindex == level.midpointobjectiveindex )
            level scripts\mp\gamelogic::resumetimer();
    }

    ui_updatecmdcapturestatus( var_0, 1 );
    var_1 = var_0;

    if ( var_0 == "_encstr_9BA4080D39CFFB5AB7C1" )
        var_1 = self.claimteam;

    if ( var_1 != "_encstr_AABA05236DC831" )
        scripts\mp\utility\dialog::statusdialog( "_encstr_A36A124A7B99A1CF21523F3BF888EB77C7B052B2", var_1, 0 );

    foreach ( var_3 in level.players )
        updatefloorbrush( var_3 );
}

dompoint_onuncontested( var_0 )
{
    if ( self != level.currentobjective )
        return;

    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::dompoint_onuncontested( var_0 );
    self.didstatusnotify = 1;
    var_1 = scripts\mp\gameobjects::getownerteam();

    if ( var_1 == "_encstr_9BA4080D39CFFB5AB7C1" )
    {
        if ( level.cmdrules == 2 && level.currentobjectiveindex == level.midpointobjectiveindex )
            level scripts\mp\gamelogic::resumetimer();
    }

    var_2 = scripts\engine\utility::ter_op( var_1 == "_encstr_9BA4080D39CFFB5AB7C1", "_encstr_9BC505B4461BB2", var_1 );
    thread updateflares( var_2 );

    if ( level.cmdrules == 2 )
    {
        if ( level.currentobjectiveindex == level.midpointobjectiveindex )
        {
            if ( var_1 != "_encstr_9BA4080D39CFFB5AB7C1" && self.touchlist[scripts\mp\utility\game::getotherteam( var_1 )[0]].size == 0 )
            {
                ui_updatezonetimerpausedness( 0 );
                self.lastcaptime = gettime();
                thread dompoint_holdtimer( var_1 );
            }
        }
    }
    else if ( istrue( level.persistentdomtimer ) && level.currentobjectiveindex != 0 && level.currentobjectiveindex != 4 )
    {
        if ( var_1 != "_encstr_9BA4080D39CFFB5AB7C1" && self.touchlist[scripts\mp\utility\game::getotherteam( var_1 )[0]].size == 0 )
        {
            ui_updatezonetimerpausedness( 0 );
            self.lastcaptime = gettime();
            thread dompoint_holdtimer( var_1 );
        }
    }

    ui_updatecmdcapturestatus( "_encstr_9BA4080D39CFFB5AB7C1", 0 );

    foreach ( var_4 in level.players )
        updatefloorbrush( var_4 );
}

dompoint_ondisableobjective()
{
    scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
    scripts\mp\gameobjects::disableobject();
    scripts\mp\gameobjects::resetcaptureprogress();
    scripts\mp\gameobjects::releaseid();
    scripts\engine\utility::delaythread( 0.1, ::disabledomflagscriptable );
    thread updateflares( "_encstr_9819045FD029" );

    foreach ( var_1 in level.players )
        updatefloorbrush( var_1, 1 );
}

dompoint_onenableobjective()
{
    scripts\mp\gameobjects::requestid( 1, 1 );
    scripts\mp\objidpoolmanager::objective_set_play_intro( self.objidnum, 1 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( self.objidnum, 1 );
    scripts\mp\gameobjects::enableobject();
    scripts\mp\gameobjects::setvisibleteam( "_encstr_BC19047780DA" );
    scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
    scripts\mp\gameobjects::setobjectivestatusicons( level.icontarget );

    if ( istrue( level.persistentdomtimer ) )
    {
        if ( !isdefined( self.teamholdtimers ) )
            self.teamholdtimers = [];

        self.teamholdtimers["_encstr_BC850785638DA59537"] = self.holdtime;
        self.teamholdtimers["_encstr_BA840579D3F7F6"] = self.holdtime;
        self.firstcapture = 1;
        self.holdteam = undefined;
    }

    if ( isdefined( self.defaultownerteam ) )
    {
        scripts\mp\gameobjects::setownerteam( self.defaultownerteam );
        thread _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::updateflagstate( self.defaultownerteam, 0 );
        thread updateflares( self.defaultownerteam );
    }
    else
    {
        scripts\mp\gameobjects::setownerteam( "_encstr_9BA4080D39CFFB5AB7C1" );
        thread _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::updateflagstate( "_encstr_9BC505B4461BB2", 0 );
        thread updateflares( "_encstr_9BC505B4461BB2" );
    }

    if ( level.currentobjectiveindex == 0 || level.currentobjectiveindex == 4 )
        thread bombzone_warningklaxon();

    if ( getdvarint( "_encstr_81941480197B47C2E2F80D645F01B96A4FEFE82603B6", 0 ) != 0 )
        _encstr_A1E429F852FABB63A30BE831E0264973E59A7820FB57C7D0C312C7BDC457F247CA3358C872EF3D38BF3BDE::tryspawnneutralbradleycmd( level.currentobjectiveindex );

    foreach ( var_1 in level.players )
        updatefloorbrush( var_1 );
}

dompoint_onactivateobjective()
{
    scripts\mp\utility\sound::playsoundonplayers( "_encstr_B8EB1E817B1FC89D13CD0140A1875B94BBDF4F6BE648EFB349FB071B7FD08E8A" );
    var_0 = scripts\mp\gameobjects::getownerteam();
    ui_updatecmdownerteam( var_0 );
    ui_updatecmdcapturestatus( "_encstr_9BA4080D39CFFB5AB7C1", 0 );
    scripts\mp\gameobjects::allowuse( "_encstr_80BF06CA78A2226B" );
    thread awardcapturepoints();
    level.flagcapturetime = self.captureduration;

    if ( self.tierindex == 2 )
    {
        if ( level.cmdrules == 1 )
            level.flagcapturetime = 5.0;

        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
    }
    else
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral );

    if ( level.cmdrules == 1 )
    {
        if ( level.currentobjectiveindex == 0 || level.currentobjectiveindex == 4 )
            thread bombzone_holdtimer( self.holdtime );
    }
}

bombzone_onbeginuse( var_0 )
{
    _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::bombzone_onbeginuse( var_0 );
}

bombzone_onenduse( var_0, var_1, var_2 )
{
    _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::bombzone_onenduse( var_0, var_1, var_2 );
}

bombzone_onuseplantobject( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();
    var_2 = scripts\mp\utility\game::getotherteam( var_1 )[0];
    scripts\mp\objidpoolmanager::objective_show_team_progress( level.currentobjective.objidnum, var_1 );
    showsplashtoteam( "_encstr_A61904730372", "_encstr_93F00C6AB0671F7A08B316F443B0" );
    level.flagcapturetime = 15.0;

    if ( istrue( level.persistentbombtimer ) )
    {
        if ( !isdefined( level.basefusetimers ) )
        {
            level.basefusetimers = [];
            level.basefusetimers["_encstr_BC850785638DA59537"] = level.bombtimer;
            level.basefusetimers["_encstr_BA840579D3F7F6"] = level.bombtimer;
        }

        level.bombtimer = level.basefusetimers[var_1];
        level.lastbombplanttime = gettime();
    }

    _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::bombzone_onuseplantobject( var_0 );
    var_3 = game["_encstr_B23F062A5346A7DE"]["_encstr_933D0E43A813678ECF6022FB902B4503"].size;
    var_4 = randomint( var_3 );

    foreach ( var_6 in level.players )
        var_6 setplayermusicstate( game["_encstr_B23F062A5346A7DE"]["_encstr_933D0E43A813678ECF6022FB902B4503"][var_4] );

    if ( var_0.team == "_encstr_BC850785638DA59537" )
        level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_0, getcapturedialog( "_encstr_A41B087BB2F758C83F04" ) );

    if ( 0 )
        scripts\mp\gamescore::giveteamscoreforobjective( var_0.team, 1, 0 );

    scripts\mp\utility\dialog::statusdialog( getvoforobjective( var_1, "_encstr_973D0D13EDAD13EBC1D8C29BA32B91" ), var_1, 1 );
    scripts\mp\utility\dialog::statusdialog( getvoforobjective( var_2, "_encstr_973D0D13EDAD13EBC1D8C29BA32B91" ), var_2, 1 );

    if ( isdefined( level.zoneendtime ) )
        level.zoneendtime = int( level.zoneendtime - gettime() );

    if ( level.cmdrules == 1 )
        ui_updatebombtimer();

    ui_updatecmdownerteam( var_0.team );
}

bombzone_onusedefuseobject( var_0 )
{
    if ( !level.bombplanted )
        return;

    showsplashtoteam( "_encstr_A61904730372", "_encstr_B11D0C6CEDE0F5465666BAB99523" );
    var_1 = scripts\mp\gameobjects::getownerteam();
    var_2 = scripts\mp\utility\game::getotherteam( var_1 )[0];
    level.flagcapturetime = 5.0;

    if ( istrue( level.persistentbombtimer ) )
        level.basefusetimers[var_1] = level.basefusetimers[var_1] - ( gettime() - level.lastbombplanttime ) / 1000;

    level.bombsplanted = level.bombsplanted - 1;

    if ( self.objectivekey == "_encstr_B80703EB16" )
        level.aplanted = 0;
    else
        level.bplanted = 0;

    _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::bombzone_onusedefuseobject( var_0 );

    if ( scripts\mp\utility\game::getotherteam( var_0.team )[0] == "_encstr_BC850785638DA59537" )
    {
        var_3 = getclosestplayeronteam( level.currentobjective.trigger.origin, scripts\mp\utility\game::getotherteam( var_0.team )[0] );

        if ( isdefined( var_3 ) )
            level thread scripts\mp\battlechatter_mp::trysaylocalsound( var_3, getcapturedialog( "_encstr_BC7B08812DDFE886AF72" ) );
    }

    scripts\mp\gameobjects::setvisibleteam( "_encstr_AABA05236DC831" );
    scripts\mp\utility\dialog::statusdialog( getvoforobjective( var_1, "_encstr_B9A10DD145CDB008EA27752B0782ED" ), var_1, 1 );
    scripts\mp\utility\dialog::statusdialog( getvoforobjective( var_2, "_encstr_B9A10DD145CDB008EA27752B0782ED" ), var_2, 1 );
    var_0 notify( "_encstr_B9A10DD145CDB008EA27752B0782ED" + self.objectivekey );
    self notify( "_encstr_BC7B08812DDFE886AF72" );
    resetbombzone();

    if ( isdefined( level.zoneendtime ) )
        thread bombzone_holdtimer( level.zoneendtime / 1000 );

    ui_updatecmdownerteam( var_0.team );
}

bombzone_ondisableobjective()
{
    scripts\mp\gameobjects::disableobject();
    scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
}

bombzone_onenableobjective()
{
    scripts\mp\gameobjects::enableobject();
    scripts\mp\gameobjects::setvisibleteam( "_encstr_BC19047780DA" );
    scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
    scripts\mp\gameobjects::setobjectivestatusicons( level.icontarget );
}

bombzone_onactivateobjective()
{
    scripts\mp\utility\sound::playsoundonplayers( "_encstr_B8EB1E817B1FC89D13CD0140A1875B94BBDF4F6BE648EFB349FB071B7FD08E8A" );
    ui_updatecmdownerteam( "_encstr_9BA4080D39CFFB5AB7C1" );
    ui_updatecmdcapturestatus( "_encstr_9BA4080D39CFFB5AB7C1", 0 );
    level.planttime = self.captureduration;
    level.defusetime = self.captureduration;
    scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
    scripts\mp\gameobjects::allowuse( "_encstr_80BF06CA78A2226B" );
    thread bombzone_holdtimer( self.holdtime );
}

ui_updatezonetimer( var_0 )
{
    level.zoneendtime = int( gettime() + 1000 * var_0 );
    setomnvar( "_encstr_B1A313BA4BBE86C2C93238DE4B9B3ABE475AD6B29C", level.zoneendtime );
}

ui_updatebombtimer()
{
    var_0 = int( gettime() + 1000 * level.bombtimer );
    setomnvar( "_encstr_B1A313BA4BBE86C2C93238DE4B9B3ABE475AD6B29C", var_0 );
}

ui_updatezonetimerpausedness( var_0 )
{
    setomnvar( "_encstr_8F3A1BEB90107F5E981BBB943B40A7772D08E2121BC8B793D859A08DC9", var_0 );
}

getownerteamplayer( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == var_0 )
            return var_3;
    }

    return var_1;
}

ui_updatecmdcapturestatus( var_0, var_1 )
{
    var_2 = -1;

    if ( istrue( level.inobjectiveot ) )
    {
        if ( var_1 )
            var_2 = -4;
        else
            var_2 = -5;
    }
    else if ( var_1 )
        var_2 = -2;
    else
    {
        switch ( var_0 )
        {
            case "_encstr_BC850785638DA59537":
                var_2 = 2;
                break;
            case "_encstr_BA840579D3F7F6":
                var_2 = 1;
                break;
            case "_encstr_B451162D673A6D1989367BD09B71B893C2FBEFA9E7422760":
                var_2 = -3;
                break;
            case "_encstr_AA6D09DBD92B93E8D2D695":
                var_2 = -4;
                break;
            case "_encstr_82270B4FDE3795FAB9D05A993A":
            default:
                break;
        }
    }

    setomnvar( "_encstr_9885141B22CF1EC0BFFF5F53F863D85ECFB9B3810ABF", var_2 );
}

ui_updatecmdownerteam( var_0 )
{
    var_1 = -1;

    switch ( var_0 )
    {
        case "_encstr_BC850785638DA59537":
            var_1 = 2;
            break;
        case "_encstr_BA840579D3F7F6":
            var_1 = 1;
            break;
        case "_encstr_B451162D673A6D1989367BD09B71B893C2FBEFA9E7422760":
            var_1 = -3;
            break;
        case "_encstr_82270B4FDE3795FAB9D05A993A":
        default:
            break;
    }

    setomnvar( "_encstr_A47812AB2DEB1BDA32AFDBEEDC2B93FA1D56165B", var_1 );
}

ui_updatecmdprogress()
{
    for (;;)
    {
        if ( isdefined( level.currentobjective ) )
            setomnvar( "_encstr_A98B18ABD2FA365B32FA6CC20E47EAE4CAFA07E4DE76E4CAE6DC", level.currentobjective scripts\mp\gameobjects::getcaptureprogress() );
        else
            setomnvar( "_encstr_A98B18ABD2FA365B32FA6CC20E47EAE4CAFA07E4DE76E4CAE6DC", 0 );

        waitframe();
    }
}

ui_updatecmdholdprogress()
{
    self notify( "_encstr_B82C19D54BF55D388C16E8CA349A8824DED8461427BDEC39B2CDE6" );
    self endon( "_encstr_B82C19D54BF55D388C16E8CA349A8824DED8461427BDEC39B2CDE6" );

    for (;;)
    {
        if ( isdefined( level.currentobjective ) && isdefined( level.currentobjective.teamholdtimers ) && isdefined( level.currentobjective.holdtime ) && level.currentobjective.holdtime > 0 )
        {
            setomnvar( "_encstr_A9121D55F3D9FE9F1DDECA3380E5ABB9F86DF7CF5DE0023FA831F28A48CD57", 1.0 - level.currentobjective.teamholdtimers["_encstr_BC850785638DA59537"] / level.currentobjective.holdtime );
            setomnvar( "_encstr_B1A81B5796F5C6AD19D7DB777359C97D074EB7CE39566EB9FA850F2D37", 1.0 - level.currentobjective.teamholdtimers["_encstr_BA840579D3F7F6"] / level.currentobjective.holdtime );
        }
        else
        {
            setomnvar( "_encstr_A9121D55F3D9FE9F1DDECA3380E5ABB9F86DF7CF5DE0023FA831F28A48CD57", 0 );
            setomnvar( "_encstr_B1A81B5796F5C6AD19D7DB777359C97D074EB7CE39566EB9FA850F2D37", 0 );
        }

        waitframe();
    }
}

getcurrentvalue()
{
    if ( !isdefined( level.currentobjective ) )
        return 0.5;

    var_0 = getcenterfrac( level.currentobjectiveindex );
    var_1 = 0.0;
    var_2 = level.currentobjective scripts\mp\gameobjects::getownerteam();
    var_3 = 0.0;
    var_4 = 0.03;
    var_5 = 0.0;

    if ( isdefined( level.activationdelaystarttime ) && level.previousobjectiveindex != level.currentobjectiveindex )
    {
        if ( isdefined( level.currentobjective.defaultownerteam ) )
        {
            var_1 = var_4;

            if ( var_2 == "_encstr_BC850785638DA59537" )
                var_1 = var_1 * -1.0;

            var_4 = var_4 * 2;
        }

        var_3 = 1.0;
        var_6 = gettime();
        var_7 = ( var_6 - level.activationdelaystarttime ) / ( level.currentobjective.activationdelay * 1000 );
        var_5 = ( abs( getcenterfrac( level.previousobjectiveindex ) - var_0 ) - var_4 ) * var_7;

        if ( level.currentobjectiveindex < level.previousobjectiveindex )
        {
            var_5 = var_5 * -1.0;
            var_4 = var_4 * -1.0;
        }

        var_0 = getcenterfrac( level.previousobjectiveindex );
    }
    else
    {
        var_2 = level.currentobjective scripts\mp\gameobjects::getownerteam();

        if ( var_2 != "_encstr_9BA4080D39CFFB5AB7C1" )
        {
            var_1 = var_4;

            if ( var_2 == "_encstr_BC850785638DA59537" )
                var_1 = var_1 * -1.0;

            if ( isdefined( level.currentobjective.claimteam ) && level.currentobjective.claimteam != "_encstr_AABA05236DC831" )
            {
                if ( level.currentobjective.claimteam != var_2 )
                {
                    var_4 = var_4 * 2;
                    var_3 = level.currentobjective scripts\mp\gameobjects::getcaptureprogress();

                    if ( level.currentobjective.claimteam == "_encstr_BC850785638DA59537" )
                        var_3 = var_3 * -1.0;
                }
            }
        }
        else
        {
            var_3 = level.currentobjective scripts\mp\gameobjects::getcaptureprogress();

            if ( isdefined( level.currentobjective.claimteam ) && level.currentobjective.claimteam != "_encstr_AABA05236DC831" )
            {
                if ( level.currentobjective.claimteam == "_encstr_BC850785638DA59537" )
                    var_3 = var_3 * -1.0;
            }
            else if ( isdefined( level.currentobjective.lastclaimteam ) )
            {
                if ( level.currentobjective.lastclaimteam == "_encstr_BC850785638DA59537" )
                    var_3 = var_3 * -1.0;
            }
        }
    }

    return var_0 + var_1 + var_3 * var_4 + var_5;
}

getcenterfrac( var_0 )
{
    var_1 = 0.0;

    switch ( var_0 )
    {
        case 0:
            var_1 = 0.0;
            break;
        case 1:
            var_1 = 0.25;
            break;
        case 2:
            var_1 = 0.5;
            break;
        case 3:
            var_1 = 0.75;
            break;
        case 4:
            var_1 = 1.0;
            break;
    }

    return var_1;
}

updateteamscores()
{
    if ( 1 )
    {
        scripts\mp\gamescore::_setteamscore( "_encstr_BC850785638DA59537", 0, 0 );
        scripts\mp\gamescore::_setteamscore( "_encstr_BA840579D3F7F6", 0, 0 );
    }
}

spawnjuggcate( var_0, var_1 )
{
    var_2 = level.juggspawnbehavior;

    if ( var_1 == "_encstr_877B092C8E1D0B36AD564E" && var_2 != 1 && var_2 != 3 )
        return;

    if ( var_1 == "_encstr_BA4609E1537B2088995F6A" && var_2 != 2 && var_2 != 3 )
        return;

    if ( !isdefined( level.juggcrates ) )
    {
        level.juggcrates = [];
        level.juggcrates["_encstr_BC850785638DA59537"] = [];
        level.juggcrates["_encstr_BA840579D3F7F6"] = [];
    }

    if ( isdefined( level.juggcrates[var_0][var_1] ) )
        return;

    var_3 = undefined;

    switch ( level.mapname )
    {
        case "_encstr_ABC80BAAF8C7EFF723D304397B":
            if ( var_1 == "_encstr_877B092C8E1D0B36AD564E" )
            {
                if ( var_0 == "_encstr_BC850785638DA59537" )
                    var_3 = ( 250, -2040, 215 );
                else
                    var_3 = ( 786, 2413, 260 );
            }
            else if ( var_1 == "_encstr_BA4609E1537B2088995F6A" )
            {
                if ( var_0 == "_encstr_BC850785638DA59537" )
                    var_3 = ( 25, -4630, 10 );
                else
                    var_3 = ( 1480, 4375, -40 );
            }

            break;
        case "_encstr_9BA009107BA9434853F9A1":
            if ( var_1 == "_encstr_877B092C8E1D0B36AD564E" )
            {
                if ( var_0 == "_encstr_BC850785638DA59537" )
                    var_3 = ( 2775, 2375, 360 );
                else
                    var_3 = ( -60, -260, 450 );
            }
            else if ( var_1 == "_encstr_BA4609E1537B2088995F6A" )
            {
                if ( var_0 == "_encstr_BC850785638DA59537" )
                    var_3 = ( -2680, -855, 250 );
                else
                    var_3 = ( 2365, 4360, 360 );
            }

            break;
    }

    if ( isdefined( var_3 ) )
    {
        level.juggcrates[var_0][var_1] = givekscratetoteam( var_0, var_3, "_encstr_AAFC0BA9AB3B9DCAC9DC2C571D" );
        level.juggcrates[var_0][var_1] thread removeondeath( var_0, var_1 );
    }
}

removeondeath( var_0, var_1 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self waittill( "_encstr_A3750609A5E61883" );
    level.juggcrates[var_0][var_1] = undefined;
}

givejuggernaut()
{
    if ( !isplayer( self ) )
        return 0;

    if ( istrue( self.isjuggernaut ) )
        return 0;

    if ( isdefined( self.lightarmorhp ) )
        scripts\mp\perks\perkfunctions::unsetlightarmor();

    scripts\mp\lightarmor::setlightarmorvalue( self, 500, 1, 0 );
    self disableweaponpickup();
    scripts\mp\weapons::setplantedequipmentuse( 0 );
    scripts\common\utility::allow_offhand_weapons( 0 );

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_A4371BE6E0B28D9685B1D1977DB28783C6DECDD2D9594CABC6D859E86E" ) )
        scripts\mp\utility\perk::removeperk( "_encstr_A4371BE6E0B28D9685B1D1977DB28783C6DECDD2D9594CABC6D859E86E" );

    scripts\cp_mp\utility\inventory_utility::_takeweapon( self.primaryweapon );
    scripts\cp_mp\utility\inventory_utility::_takeweapon( self.secondaryweapon );
    var_0 = "_encstr_8F1312F00F320165E706BC4B341003428B70C2EB";
    scripts\cp_mp\utility\inventory_utility::_giveweapon( var_0 );
    self givemaxammo( var_0 );
    scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_0 );
    scripts\mp\juggernaut::jugg_setmodel();
    self.juggoverlay = newclienthudelem( self );
    self.juggoverlay.x = 0;
    self.juggoverlay.y = 0;
    self.juggoverlay.alignx = "_encstr_B1AD05C65666E8";
    self.juggoverlay.aligny = "_encstr_B91904EC4718";
    self.juggoverlay.horzalign = "_encstr_BC940BE9D5F91D47B0ABBD851E";
    self.juggoverlay.vertalign = "_encstr_BC940BE9D5F91D47B0ABBD851E";
    self.juggoverlay setshader( "_encstr_9D7016674F934FAE17B0112A60032203892BD71CD5D89376", 640, 480 );
    self.juggoverlay.sort = -10;
    self.juggoverlay.archived = 1;
    self.juggoverlay.alpha = 1.0;
    self.health = self.maxhealth;
    self.isjuggernaut = 1;
    self.movespeedscaler = 0.75;
    scripts\mp\utility\perk::giveperk( "_encstr_9E57146EE0B21BA50B36A3BCD76EB1C23B5637765993" );
    scripts\mp\utility\perk::giveperk( "_encstr_9E29141ED83FC163EE7A60CB218203D88F7B2D16218F" );
    scripts\mp\utility\perk::giveperk( "_encstr_804116B6608779CB46E288F8C99A8171A30828A4C7376307" );
    thread juggernautsounds();
    thread juggremover();
    level notify( "_encstr_879F12672B527A1F67B98AFBF9A96593C0264BF3", self );
    return 1;
}

juggernautsounds()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_933A0D4DAE76D9EBE42BB57B9DAC19" );

    for (;;)
        wait 3.0;
}

juggremover()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    thread removejuggongameended();
    thread removejuggonteamchangeordeath();
    self waittill( "_encstr_8A85136E34EDABC646EB9CB2B6BDECCAFAA65D76D9" );

    if ( isdefined( self.lightarmorhp ) )
        scripts\mp\perks\perkfunctions::unsetlightarmor();

    self enableweaponpickup();
    scripts\mp\weapons::setplantedequipmentuse( 1 );
    scripts\common\utility::allow_offhand_weapons( 1 );
    self.juggoverlay destroy();
    scripts\cp_mp\utility\inventory_utility::_takeweapon( "_encstr_8F1312F00F320165E706BC4B341003428B70C2EB" );
    scripts\cp_mp\utility\inventory_utility::_giveweapon( self.primaryweapon );
    scripts\cp_mp\utility\inventory_utility::_giveweapon( self.secondaryweapon );
    scripts\cp_mp\utility\inventory_utility::_switchtoweapon( self.primaryweapon );
    self.movespeedscaler = 1.0;
    scripts\mp\utility\perk::removeperk( "_encstr_9E57146EE0B21BA50B36A3BCD76EB1C23B5637765993" );
    scripts\mp\utility\perk::removeperk( "_encstr_9E29141ED83FC163EE7A60CB218203D88F7B2D16218F" );
    scripts\mp\utility\perk::removeperk( "_encstr_804116B6608779CB46E288F8C99A8171A30828A4C7376307" );
    self.isjuggernaut = 0;
    level notify( "_encstr_B4201312F509DF1D970CBFFD235F4C5F03B89F50E3", self );
    self notify( "_encstr_933A0D4DAE76D9EBE42BB57B9DAC19" );
}

removejuggongameended()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_933A0D4DAE76D9EBE42BB57B9DAC19" );
    level waittill( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_8A85136E34EDABC646EB9CB2B6BDECCAFAA65D76D9" );
}

removejuggonteamchangeordeath()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_933A0D4DAE76D9EBE42BB57B9DAC19" );
    scripts\engine\utility::_id_143A7( "_encstr_A3750609A5E61883", "_encstr_B2170C4AD884CDC823B9DB9D9F42", "_encstr_8CD0124A97D7F07BAD07C8C342FAA010C490DD5B", "_encstr_9D4D108DBD373A7D9A57ECCEAC39DC85EA47" );
    self notify( "_encstr_8A85136E34EDABC646EB9CB2B6BDECCAFAA65D76D9" );
}

updatefloorbrush( var_0, var_1 )
{
    if ( !isdefined( self.neutralbrush ) )
        return;

    var_2 = self.ownerteam;
    var_3 = self.claimteam;
    var_4 = var_0.team;
    var_5 = var_0 ismlgspectator();

    if ( var_5 )
        var_4 = var_0 getmlgspectatorteam();

    if ( istrue( var_1 ) )
        hidebrushes( var_0 );
    else if ( istrue( self.stalemate ) )
        showcontestedbrush( var_0 );
    else if ( var_2 == "_encstr_9BA4080D39CFFB5AB7C1" )
    {
        if ( var_3 != "_encstr_AABA05236DC831" )
        {
            if ( var_4 == var_3 )
                showfriendlybrush( var_0 );
            else
                showenemybrush( var_0 );
        }
        else
            showneutralbrush( var_0 );
    }
    else if ( var_4 == var_2 )
        showfriendlybrush( var_0 );
    else
        showenemybrush( var_0 );

    updatecapturebrush( var_0 );
}

updatecapturebrush( var_0 )
{
    if ( 1 )
        return;

    if ( !isdefined( self.neutralbrush ) )
        return;

    var_1 = scripts\mp\gameobjects::getclaimteam();
    var_2 = var_0.team;
    var_3 = var_0 ismlgspectator();

    if ( var_3 )
        var_2 = var_0 getmlgspectatorteam();

    if ( istrue( self.stalemate ) )
        hidecapturebrush( var_0 );
    else if ( var_1 == "_encstr_AABA05236DC831" )
        hidecapturebrush( var_0 );
    else if ( var_2 == var_1 )
        showfriendlycapturebrush( var_0 );
    else
        showenemycapturebrush( var_0 );
}

showneutralbrush( var_0 )
{
    foreach ( var_2 in self.friendlybrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.enemybrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.contestedbrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.neutralbrush )
        var_2 showtoplayer( var_0 );
}

showfriendlybrush( var_0 )
{
    foreach ( var_2 in self.friendlybrush )
        var_2 showtoplayer( var_0 );

    foreach ( var_2 in self.enemybrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.contestedbrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.neutralbrush )
        var_2 hidefromplayer( var_0 );
}

showenemybrush( var_0 )
{
    foreach ( var_2 in self.friendlybrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.enemybrush )
        var_2 showtoplayer( var_0 );

    foreach ( var_2 in self.contestedbrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.neutralbrush )
        var_2 hidefromplayer( var_0 );
}

showcontestedbrush( var_0 )
{
    foreach ( var_2 in self.friendlybrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.enemybrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.contestedbrush )
        var_2 showtoplayer( var_0 );

    foreach ( var_2 in self.neutralbrush )
        var_2 hidefromplayer( var_0 );
}

hidebrushes( var_0 )
{
    foreach ( var_2 in self.friendlybrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.enemybrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.contestedbrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.neutralbrush )
        var_2 hidefromplayer( var_0 );
}

showfriendlycapturebrush( var_0 )
{
    foreach ( var_2 in self.friendlypulsebrush )
        var_2 showtoplayer( var_0 );

    foreach ( var_2 in self.enemypulsebrush )
        var_2 hidefromplayer( var_0 );
}

showenemycapturebrush( var_0 )
{
    foreach ( var_2 in self.friendlypulsebrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.enemypulsebrush )
        var_2 showtoplayer( var_0 );
}

hidecapturebrush( var_0 )
{
    foreach ( var_2 in self.friendlypulsebrush )
        var_2 hidefromplayer( var_0 );

    foreach ( var_2 in self.enemypulsebrush )
        var_2 hidefromplayer( var_0 );
}

updatefloorbrushwaitforjoined()
{

}

applythermal()
{
    self visionsetthermalforplayer( "_encstr_950A15032508FBD74981BAC6F9C8E5815481EFF397A103" );
    self thermalvisionon();
}

removethermal()
{
    self thermalvisionoff();
}

startspectatorview()
{
    waitframe();
    scripts\mp\utility\player::updatesessionstate( "_encstr_A68C0A5803A5D151A2B310A6" );
    scripts\mp\spectating::setdisabled();

    if ( isdefined( self.lastdeathangles ) )
        self setplayerangles( self.lastdeathangles );

    wait 0.1;
    scripts\mp\utility\player::setdof_default();
    var_0 = level.spectatorcameras[level.currentspectatorcamref][self.team];
    var_1 = var_0.origin;
    var_2 = var_0.angles;
    self.deathspectatepos = var_1;
    self.deathspectateangles = var_2;
    var_3 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", self getvieworigin() );
    var_3 setmodel( "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
    var_3.angles = var_2;
    self.spectatorcament = var_3;
    self.isusingtacopsmapcamera = 1;
    self cameralinkto( var_3, "_encstr_8CB40B4BB398B1C0A81FDF6BEA", 1 );
    thread dohalfwayflash();
    var_3 movecameratomappos( self, var_1, var_2 );
}

dohalfwayflash()
{
    wait 0.4;
    thread playslamzoomflash();
    applythermal();
}

endspectatorview()
{
    if ( !isdefined( self.spectatorcament ) )
        return;

    removethermal();
    thread runslamzoomonspawn();
}

updatespectatorcamera( var_0 )
{
    level.currentspectatorcamref = var_0;

    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2.spectatorcament ) )
        {
            var_3 = var_2.team;
            var_4 = getdvarint( "_encstr_93C814DCC627D78DAD23EB1B0BADAC2785AF47B285B6", -1 );

            if ( var_4 != -1 )
                var_3 = scripts\engine\utility::ter_op( var_4 == 0, "_encstr_BC850785638DA59537", "_encstr_BA840579D3F7F6" );

            var_5 = level.spectatorcameras[level.currentspectatorcamref][var_3];
            var_2.spectatorcament movecameratomappos( var_2, var_5.origin, var_5.angles );
        }
    }
}

movecameratomappos( var_0, var_1, var_2 )
{
    var_0 endon( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    var_3 = 1.0;
    var_4 = 1.0;
    self moveto( var_1, 1.0, 0.5, 0.5 );
    var_0 playlocalsound( "_encstr_806717B61C7D6CDA8CEB6C85DA59C985AF9EBDDBADD7DEAE47" );
    var_0 setclienttriggeraudiozonepartialwithfade( "_encstr_B9230ADCE02CEEE6BED858DA", 0.5, "_encstr_971904B5B43C" );
    self rotateto( var_2, 1.0, 0.5, 0.5 );
    var_0 thread startoperatorsound();
    wait 1.1;
    var_5 = anglestoforward( var_2 ) * 300;
    var_5 = var_5 * ( 1, 1, 0 );

    if ( isdefined( var_0 ) && isdefined( var_0.spectatorcament ) )
    {
        self moveto( var_1 + var_5, 15.0, 1.0, 1.0 );
        var_0 earthquakeforplayer( 0.03, 15.0, var_1 + var_5, 1000 );
    }
}

runslamzoomonspawn()
{
    self waittill( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    var_0 = self geteye();
    var_1 = self.angles;
    scripts\mp\utility\player::updatesessionstate( "_encstr_A68C0A5803A5D151A2B310A6" );
    self cameralinkto( self.spectatorcament, "_encstr_8CB40B4BB398B1C0A81FDF6BEA", 1 );
    self visionsetnakedforplayer( "_encstr_BC5911336A3EB1074FFE895360F00D8BE0F0E2", 0.2 );
    self.spectatorcament moveto( var_0, 0.5 );
    self playlocalsound( "_encstr_AF9D1661CA211760ACBFA0B81FC5DB4B89F0E8F865D9CBC8" );
    self clearclienttriggeraudiozone( 0.5 );
    self.spectatorcament rotateto( var_1, 0.5, 0.5 );
    wait 0.5;
    self visionsetnakedforplayer( "_encstr_A40101", 0 );
    thread playslamzoomflash();
    scripts\mp\utility\player::updatesessionstate( "_encstr_8F7508BB18675378EBC7" );
    self cameraunlink();
    self.spectatorcament delete();
    wait 1.0;
    var_2 = gettime();

    if ( !isdefined( self.lastsitreptime ) || var_2 < self.lastsitreptime + 30000 || var_2 < level.lastteamstatustime[self.team] + 5000 )
        return;

    scripts\mp\utility\dialog::sitrepdialogonplayer( getsitreplocname() );
    thread playselfbattlechatter( self, "_encstr_93A71383D89CC9ACDC0EDEDCCD2BF5B0CCCCB4E46B", "_encstr_82D60EC6B70ED7C23366A5E4B6AF1919", 2.5, 1 );
}

playslamzoomflash()
{
    var_0 = newclienthudelem( self );
    var_0.x = 0;
    var_0.y = 0;
    var_0.alignx = "_encstr_B1AD05C65666E8";
    var_0.aligny = "_encstr_B91904EC4718";
    var_0.sort = 1;
    var_0.horzalign = "_encstr_BC940BE9D5F91D47B0ABBD851E";
    var_0.vertalign = "_encstr_BC940BE9D5F91D47B0ABBD851E";
    var_0.alpha = 1;
    var_0.foreground = 1;
    var_0 setshader( "_encstr_948806DDD04BE895", 640, 480 );
    var_0 fadeovertime( 0.4 );
    var_0.alpha = 0.0;
    wait 0.4;
    var_0 destroy();
}

startoperatorsound()
{
    self endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self waittill( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    wait 0.5;
}

ongameended()
{
    level waittill( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    foreach ( var_1 in level.objectives )
        var_1 scripts\mp\gameobjects::setvisibleteam( "_encstr_AABA05236DC831" );
}

playendofmatchtransition( var_0 )
{
    self setclientomnvar( "_encstr_A8760EDBE20F55107B0181EF2E661095", 0 );
    waitframe();
    var_1 = 10;
    var_2 = var_1;

    for ( var_2 = 1; var_2 <= var_1; var_2++ )
    {
        waitframe();
        self setclientomnvar( "_encstr_A8760EDBE20F55107B0181EF2E661095", var_2 / var_1 );
    }

    if ( scripts\mp\utility\player::isreallyalive( self ) && !scripts\mp\utility\player::isusingremote() && isdefined( var_0 ) )
    {
        var_3 = distance2dsquared( self.origin, var_0.origin );

        if ( var_3 > 40000 )
        {
            var_4 = self cloneplayer( 0 );
            var_4 startragdoll( 1 );
        }
    }

    thread scripts\mp\playerlogic::spawnintermission( var_0, "_encstr_A68C0A5803A5D151A2B310A6" );
    waitframe();
    var_1 = 4;
    var_2 = var_1;

    for ( var_2 = var_1 - 1; var_2 >= 0; var_2-- )
    {
        waitframe();
        self setclientomnvar( "_encstr_A8760EDBE20F55107B0181EF2E661095", var_2 / var_1 );
    }
}

getsitreplocname()
{
    var_0 = "_encstr_A81408D619A33BB36271" + level.currentobjectiveindex + "_encstr_984C028E" + level.mapname;
    return var_0;
}

getcapturedialog( var_0 )
{
    var_1 = "_encstr_8956091E702939BF99889F" + level.currentobjectiveindex + "_encstr_984C028E" + var_0 + "_encstr_984C028E" + level.mapname;
    return var_1;
}

getselfobjcaptureddialog( var_0 )
{
    var_1 = "_encstr_A40101";
    var_2 = "_encstr_A40101";
    var_3 = 0;

    switch ( level.currentobjectiveindex )
    {
        case 0:
            if ( var_0 == "_encstr_89D109E8419005731360C2" )
            {
                var_1 = "_encstr_A1CA0C9745070808872FAD0A8AA8";
                var_2 = "_encstr_A4BA131BB783BE58C9DAA537D9EB13BDB689BE1946";
                var_3 = 1;
            }
            else if ( var_0 == "_encstr_956909CC156977424BE0FA" )
            {
                var_1 = "_encstr_8C4E0EC2983B46A7597DAEB50E801B4F";
                var_2 = "_encstr_BE33151BB738AF13F6AD4CD74656995D6E5A73ECBE6419";
                var_3 = 1;
            }

            break;
        case 1:
            if ( var_0 == "_encstr_8C260A1BB00747BAC9D2B9CE" )
                var_2 = "_encstr_A40101";
            else if ( var_0 == "_encstr_9CCF09866E33D9835AB738" )
            {
                if ( self.team == "_encstr_BA840579D3F7F6" )
                {
                    var_1 = "_encstr_B45E13872DB832674653235A99B0B76F309B121947";
                    var_2 = "_encstr_A66B18DBB7BBCF7763D0CAB3C047A1E77177344526A16B31B598";
                }
                else if ( level.mapname == "_encstr_ABC80BAAF8C7EFF723D304397B" )
                {
                    var_1 = "_encstr_ADE11202B9C237A718E3627DE9D1EACF7BB09ABA";
                    var_2 = "_encstr_9808171BDB38AF378D1ABD7BB1F5C658E08EAE4E598CFA46C8";
                }
                else
                {
                    var_1 = "_encstr_B45E13872DB832674653235A99B0B76F309B121947";
                    var_2 = "_encstr_A66B18DBB7BBCF7763D0CAB3C047A1E77177344526A16B31B598";
                }
            }

            break;
        case 2:
            if ( var_0 == "_encstr_8C260A1BB00747BAC9D2B9CE" )
                var_2 = "_encstr_A40101";
            else if ( var_0 == "_encstr_9CCF09866E33D9835AB738" )
            {
                var_1 = "_encstr_B45E13872DB832674653235A99B0B76F309B121947";
                var_2 = "_encstr_A66B18DBB7BBCF7763D0CAB3C047A1E77177344526A16B31B598";
            }

            break;
        case 3:
            if ( var_0 == "_encstr_8C260A1BB00747BAC9D2B9CE" )
                var_2 = "_encstr_A40101";
            else if ( var_0 == "_encstr_9CCF09866E33D9835AB738" )
            {
                if ( level.mapname == "_encstr_ABC80BAAF8C7EFF723D304397B" )
                {
                    var_1 = "_encstr_B84115EDC43537B2B1AEC92B327DEEC239561AB7BA9B2B";
                    var_2 = "_encstr_B7841AF7A74F8107602B074CA0E84B7AB0D7873309759BCDB096EA57";
                }
                else
                {
                    var_1 = "_encstr_B45E13872DB832674653235A99B0B76F309B121947";
                    var_2 = "_encstr_A66B18DBB7BBCF7763D0CAB3C047A1E77177344526A16B31B598";
                }
            }

            break;
        case 4:
            if ( var_0 == "_encstr_89D109E8419005731360C2" )
            {
                var_1 = "_encstr_A1CA0C9745070808872FAD0A8AA8";
                var_2 = "_encstr_A4BA131BB783BE58C9DAA537D9EB13BDB689BE1946";
                var_3 = 1;
            }
            else if ( var_0 == "_encstr_956909CC156977424BE0FA" )
            {
                var_1 = "_encstr_8C4E0EC2983B46A7597DAEB50E801B4F";
                var_2 = "_encstr_BE33151BB738AF13F6AD4CD74656995D6E5A73ECBE6419";
                var_3 = 1;
            }

            break;
    }

    var_4 = 0;

    if ( var_3 && !scripts\mp\battlechatter_mp::saidtoorecently( var_2 ) )
    {
        scripts\mp\battlechatter_mp::updatechatter( var_2 );
        thread playselfbattlechatter( self, var_1, var_2, 1.5 );
    }
    else if ( !var_3 )
        thread playselfbattlechatter( self, var_1, var_2, 1.5 );

    var_5 = scripts\engine\utility::ter_op( self.team == "_encstr_BC850785638DA59537", "_encstr_AAE4054D8E3BF6", "_encstr_87830516263898" );

    if ( level.mapname == "_encstr_ABC80BAAF8C7EFF723D304397B" )
        var_5 = scripts\engine\utility::ter_op( self.team == "_encstr_BC850785638DA59537", "_encstr_AAE4054D8E3BF6", "_encstr_A183050B668313" );

    var_6 = "_encstr_816908F24147D853673E" + var_5 + "_encstr_984C028E" + var_1;
    return lookupsoundlength( var_6 ) / 1000;
}

playselfbattlechatter( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isai( self ) )
        return;

    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A3750609A5E61883" );

    if ( isdefined( var_3 ) )
        wait( var_3 );

    var_5 = scripts\engine\utility::ter_op( self.team == "_encstr_BC850785638DA59537", "_encstr_AAE4054D8E3BF6", "_encstr_87830516263898" );

    if ( level.mapname == "_encstr_ABC80BAAF8C7EFF723D304397B" )
        var_5 = scripts\engine\utility::ter_op( var_0.team == "_encstr_BC850785638DA59537", "_encstr_AAE4054D8E3BF6", "_encstr_A183050B668313" );

    var_6 = "_encstr_816908F24147D853673E" + var_5 + "_encstr_984C028E" + var_1;

    if ( isdefined( var_4 ) )
    {
        var_7 = var_6;

        if ( soundexists( var_7 ) )
            var_6 = var_7;
    }

    var_0 queuedialogforplayer( var_6, var_2, 2 );
}

getclosestplayeronteam( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = undefined;

    foreach ( var_5 in level.players )
    {
        if ( var_5.team == var_1 && scripts\mp\utility\player::isreallyalive( var_5 ) )
        {
            var_6 = distance2dsquared( var_5.origin, var_0 );

            if ( !isdefined( var_3 ) || var_6 < var_3 )
            {
                var_2 = var_5;
                var_3 = var_6;
            }
        }
    }

    return var_2;
}

disableobjectiveongameended()
{
    level waittill( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( isdefined( level.currentobjective ) && isdefined( level.currentobjective.ondisableobjective ) )
        level.currentobjective [[ level.currentobjective.ondisableobjective ]]();
}

setupcaptureflares()
{
    if ( getdvarint( "_encstr_A9E10FE6B14EBEB17B07BE99D8B09CB2E6", 0 ) != 1 )
        return;

    wait 2.0;
    var_0 = [];
    var_0[var_0.size] = spawnflare( ( 350, -3580, -35 ), ( 0, -151, 0 ) );
    var_0[var_0.size] = spawnflare( ( 345, -3650, -35 ), ( 0, 140, 0 ) );
    var_0[var_0.size] = spawnflare( ( 235, -3655, -35 ), ( 0, 50, 0 ) );
    var_0[var_0.size] = spawnflare( ( 230, -3575, -35 ), ( 0, -40, 0 ) );
    level.objectives["_encstr_B34C0233"].scriptables = var_0;
    var_1 = [];
    var_1[var_1.size] = spawnflare( ( -457, -2006, 204 ), ( 0, 331, 0 ), 0 );
    var_1[var_1.size] = spawnflare( ( -31, -1915, 192 ), ( 45, 48, 0 ), 0 );
    var_1[var_1.size] = spawnflare( ( -319, -1706, 209 ), ( 0, 130, 0 ), 0 );
    var_1[var_1.size] = spawnflare( ( -545, -1805, 207 ), ( 0, 130, 0 ), 0 );
    var_1[var_1.size] = spawnflare( ( -302, -2137, 152 ), ( 0, 234, 0 ) );
    level.objectives["_encstr_AF4C02EA"].scriptables = var_1;
    var_2 = [];
    var_2[var_2.size] = spawnflare( ( 420, -23, 17 ), ( 5, 208, 0 ) );
    var_2[var_2.size] = spawnflare( ( 458, 59, 109 ), ( 0, 342, 0 ), 0 );
    var_2[var_2.size] = spawnflare( ( 380, -267, 17 ), ( 0, 186, 0 ) );
    var_2[var_2.size] = spawnflare( ( 210, 126, 18 ), ( 5, 125, 0 ) );
    var_2[var_2.size] = spawnflare( ( 675, 118, 18 ), ( 0, 41, 0 ) );
    var_2[var_2.size] = spawnflare( ( 638, -180, 18 ), ( 5, 356, 0 ) );
    var_2[var_2.size] = spawnflare( ( 417, 105, 69 ), ( 75, 285, 0 ), 0 );
    var_2[var_2.size] = spawnflare( ( 426, -177, 17 ), ( 5, 73, 0 ), 0 );
    var_2[var_2.size] = spawnflare( ( 509, -116, 69 ), ( 55, 82, 0 ), 0 );
    var_2[var_2.size] = spawnflare( ( 331, 60, 63 ), ( 0, 309, 0 ), 0 );
    var_2[var_2.size] = spawnflare( ( 578, 65, 62 ), ( 40, 197, 0 ), 0 );
    level.objectives["_encstr_9B4C028A"].scriptables = var_2;
    var_3 = [];
    var_3[var_3.size] = spawnflare( ( 812, 2074, 222 ), ( 35, 326, 0 ), 0 );
    var_3[var_3.size] = spawnflare( ( 431, 1882, 241 ), ( 5, 86, 0 ), 0 );
    var_3[var_3.size] = spawnflare( ( 762, 2333, 226 ), ( 15, 345, 0 ), 0 );
    var_3[var_3.size] = spawnflare( ( 609, 1861, 223 ), ( 65, 339, 0 ), 0 );
    var_3[var_3.size] = spawnflare( ( 580, 2150, 212 ), ( 0, 272, 0 ), 0 );
    level.objectives["_encstr_A94C0242"].scriptables = var_3;
    var_4 = [];
    var_4[var_4.size] = spawnflare( ( 1300, 3335, 12 ), ( 0, 40, 0 ) );
    var_4[var_4.size] = spawnflare( ( 1305, 3430, -2 ), ( 0, -47, 0 ) );
    var_4[var_4.size] = spawnflare( ( 1430, 3435, -3 ), ( 0, -135, 0 ) );
    var_4[var_4.size] = spawnflare( ( 1430, 3350, 3 ), ( 0, 140, 0 ) );
    level.objectives["_encstr_B94C02A9"].scriptables = var_4;

    if ( getdvarint( "_encstr_9DE815431AE38838C568AFC56CAE786D1F313909B257DC", 0 ) == 1 )
        thread debugcaptureflares();
}

spawnflare( var_0, var_1, var_2 )
{
    var_3 = var_0;

    if ( !isdefined( var_2 ) )
        var_2 = 1;

    if ( var_2 )
        var_3 = scripts\engine\utility::drop_to_ground( var_0, 50, -200, ( 0, 0, 1 ) );

    var_4 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_3 + ( 0, 0, 2 ) );
    var_4.angles = var_1 + ( 0, 180, 0 );
    var_4 setmodel( "_encstr_8C2116338FD081EFEF2BDA2233285F46386BB8AC2BE815B7" );
    return var_4;
}

updateflares( var_0 )
{
    if ( getdvarint( "_encstr_A9E10FE6B14EBEB17B07BE99D8B09CB2E6", 0 ) != 1 )
        return;

    self notify( "_encstr_9C830DBA1CC82C8E2B238DB027CAB9" );
    self endon( "_encstr_9C830DBA1CC82C8E2B238DB027CAB9" );

    while ( !isdefined( self.scriptables ) )
        waitframe();

    foreach ( var_2 in self.scriptables )
        var_2 setscriptablepartstate( "_encstr_A12B07D13E43B7F12A", var_0 );
}

debugcaptureflares()
{
    var_0 = 0;

    for (;;)
    {
        var_1 = 0;

        switch ( var_0 )
        {
            case 0:
                var_1 = "_encstr_BC850785638DA59537";
                break;
            case 1:
                var_1 = "_encstr_BA840579D3F7F6";
                break;
            case 2:
                var_1 = "_encstr_BD5C0ACEA59A91D903BB4878";
                break;
            case 3:
                var_1 = "_encstr_9BC505B4461BB2";
                break;
        }

        foreach ( var_3 in level.objectives )
        {
            if ( !isdefined( var_3.scriptables ) )
                continue;

            foreach ( var_5 in var_3.scriptables )
                var_5 setscriptablepartstate( "_encstr_A12B07D13E43B7F12A", var_1 );
        }

        var_0++;

        if ( var_0 > 3 )
            var_0 = 0;

        wait 3.0;
    }
}

mapobjectiveicon( var_0 )
{
    switch ( level.mapname )
    {
        case "_encstr_ABC80BAAF8C7EFF723D304397B":
            switch ( self.objectivekey )
            {
                case "_encstr_B34C0233":
                    self.iconname = "_encstr_820D0A6F5B2261C893BC6359";
                    break;
                case "_encstr_AF4C02EA":
                    self.iconname = "_encstr_B84B0811ABD8A84AB769";
                    break;
                case "_encstr_9B4C028A":
                    self.iconname = "_encstr_BD410CE19774F8D7BA1B484CB7C3";
                    break;
                case "_encstr_A94C0242":
                    self.iconname = "_encstr_98400BF5EEC24EAC0DDBEAB9B2";
                    break;
                case "_encstr_B94C02A9":
                    self.iconname = "_encstr_820D0A6F5B2261C893BC6359";
                    break;
                default:
                    self.iconname = "_encstr_A40101";
                    break;
            }

            break;
        default:
            switch ( self.objectivekey )
            {
                case "_encstr_B34C0233":
                    self.iconname = "_encstr_A2E109960AEF4058F201A7";
                    break;
                case "_encstr_AF4C02EA":
                    self.iconname = "_encstr_A2E109960AEF4058F201A7";
                    break;
                case "_encstr_9B4C028A":
                    self.iconname = "_encstr_A2E109960AEF4058F201A7";
                    break;
                case "_encstr_A94C0242":
                    self.iconname = "_encstr_A2E109960AEF4058F201A7";
                    break;
                case "_encstr_B94C02A9":
                    self.iconname = "_encstr_A2E109960AEF4058F201A7";
                    break;
                default:
                    self.iconname = "_encstr_A40101";
                    break;
            }

            break;
    }
}

updateoobtriggers()
{
    if ( !isdefined( level.currentobjective.oobtriggers ) )
        return;

    level notify( "_encstr_87B812D78089694BDBB0CDB605DDD237B140B347" );

    foreach ( var_1 in level.players )
    {
        if ( isdefined( level.currentobjective.oobtriggers["_encstr_BC850785638DA59537"] ) )
            level.currentobjective.oobtriggers["_encstr_BC850785638DA59537"] thread updateoobvisuals( "_encstr_BA840579D3F7F6" );

        if ( isdefined( level.currentobjective.oobtriggers["_encstr_BA840579D3F7F6"] ) )
            level.currentobjective.oobtriggers["_encstr_BA840579D3F7F6"] thread updateoobvisuals( "_encstr_BC850785638DA59537" );
    }
}

updateoobvisuals( var_0 )
{
    self notify( "_encstr_A47E110D4FF9F773A319A870F993EAFF313973" );
    self endon( "_encstr_A47E110D4FF9F773A319A870F993EAFF313973" );

    while ( !isdefined( self.visuals ) )
        waitframe();

    foreach ( var_2 in self.visuals )
    {
        for ( var_3 = 0; var_3 < var_2.drawcount; var_3++ )
            var_2 setscriptablepartstate( "_encstr_A17509D31AA58C430FB219" + var_3, var_0 );
    }

    level waittill( "_encstr_87B812D78089694BDBB0CDB605DDD237B140B347" );

    foreach ( var_2 in self.visuals )
    {
        for ( var_3 = 0; var_3 < var_2.drawcount; var_3++ )
            var_2 setscriptablepartstate( "_encstr_A17509D31AA58C430FB219" + var_3, "_encstr_9819045FD029" );
    }
}

awardcapturepoints()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level notify( "_encstr_82DD1A593B8F5A325B0A4B4B8538D1CADFF860EDC27BAB60C23840C4" );
    level endon( "_encstr_82DD1A593B8F5A325B0A4B4B8538D1CADFF860EDC27BAB60C23840C4" );
    var_0 = 1;
    var_1 = 1;

    while ( !level.gameended )
    {
        var_2 = 0.0;

        while ( var_2 < var_0 )
        {
            waitframe();
            scripts\mp\hostmigration::waittillhostmigrationdone();
            var_2 = var_2 + level.framedurationseconds;

            if ( self.stalemate )
                var_2 = 0.0;
        }

        var_3 = self.claimteam;

        if ( var_3 == "_encstr_AABA05236DC831" )
            continue;

        if ( !self.stalemate )
        {
            foreach ( var_5 in self.touchlist[var_3] )
                var_5.player thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_80400BBE7FD3FECB85D150209A" );
        }
    }
}

showsplashtoteam( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        if ( var_0 == "_encstr_A61904730372" || var_3.team == var_0 )
            var_3 thread scripts\mp\hud_message::showsplash( var_1 );
    }
}
