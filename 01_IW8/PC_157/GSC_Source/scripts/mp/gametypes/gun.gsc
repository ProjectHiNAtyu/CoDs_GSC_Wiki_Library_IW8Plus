// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0 = [];
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 600 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    setspecialloadout();
    updategametypedvars();
    setgunladder();
    setteammode( "_encstr_B91804FE5590" );
    level.teambased = 0;
    level.ignorekdrstats = 1;
    level.loadoutdefaultfiresalediscount = 1;
    thread waitthensetstatgroupreadonly();
    level.doprematch = 1;
    level.supportintel = 0;
    level.supportnuke = 0;
    level.disablecopycatloadout = 1;
    setomnvar( "_encstr_80D613D5A5D7AD5A631B8DC2B5AFD8DE0E97D8B047", 0 );
    level.onprecachegametype = ::onprecachegametype;
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.modeonspawnplayer = ::onspawnplayer;
    level.getspawnpoint = ::getspawnpoint;
    level.onplayerkilled = ::onplayerkilled;
    level.ontimelimit = ::ontimelimit;
    level.onplayerscore = ::onplayerscore;
    level.bypassclasschoicefunc = ::alwaysgamemodeclass;
    level.modifyunifiedpointscallback = ::modifyunifiedpointscallback;
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_94A111AC1F28F0EBAB6B657EA43BA2241780AD";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A1B206E238A5E3F5"] = "_encstr_AD3D0E7A20878A83A6F435569C09AF57";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9E240C10CE33016D6AEA39B0F244"] = "_encstr_AD3D0E7A20878A83A6F435569C09AF57";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3420C3D576AC3C8736F09906BB2"] = "_encstr_AD3D0E7A20878A83A6F435569C09AF57";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_8FF10F5BE08384B32B4D9AD9A5FD7A556A"] = "_encstr_8FF10F5BE08384B32B4D9AD9A5FD7A556A";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_BED512CD673F9B94C8C03B8730437172ED0D555E"] = "_encstr_BED512CD673F9B94C8C03B8730437172ED0D555E";
}

waitthensetstatgroupreadonly()
{
    self endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    wait 1;

    if ( isdefined( level.playerstats ) )
    {
        scripts\mp\playerstats_interface::makeplayerstatgroupreadonly( "_encstr_B31904673AAB" );
        scripts\mp\playerstats_interface::makeplayerstatgroupreadonly( "_encstr_9E6807D8F69BCD599B" );
        scripts\mp\playerstats_interface::makeplayerstatgroupreadonly( "_encstr_9EFF08203FF61C4FBB5A" );
    }
}

alwaysgamemodeclass()
{
    return "_encstr_87AC099DB05B59ADF619AC";
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata( 1 );
    setdynamicdvar( "_encstr_A89F1013A7F0B1F7D5B889B321AD2BF6A01F", getmatchrulesdata( "_encstr_BC4C08B7C3106041B839", "_encstr_A33008A8A74461EB12C4" ) );
    setdynamicdvar( "_encstr_9F01162F27E629BF78CD11621908C28236AF278BAD85327B", getmatchrulesdata( "_encstr_BC4C08B7C3106041B839", "_encstr_8A6B0EB995D198B08DAD6A3A4ECAC2AD" ) );
    setdynamicdvar( "_encstr_8C6B176F1AFBA7C4357307EC2433BABBA9A8BB37DB1228F796", getmatchrulesdata( "_encstr_BC4C08B7C3106041B839", "_encstr_ABBE0FB7C7A251F0202F336FD7F920185A" ) );
    setdynamicdvar( "_encstr_AF5114DC6CE4BEECABB9F5B11623C8564E259B3256F0", getmatchrulesdata( "_encstr_BC4C08B7C3106041B839", "_encstr_B8F30C34E7D9C317AD09DA722BD1" ) );
    setdynamicdvar( "_encstr_980310E66C27BE3BBA73D71C397BDADE8CAC", 0 );
}

onprecachegametype()
{

}

onstartgametype()
{
    setclientnamemode( "_encstr_95900C2EDBD01F99D6B1DFEB878D" );

    foreach ( var_1 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_1, &"_encstr_AA3F0EE00A63E5D743C8D14141B5013C" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_1, &"_encstr_AA3F0EE00A63E5D743C8D14141B5013C" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_1, &"_encstr_8AE914F56D7165283D8353175F78A09531D77E4DC751" );

        scripts\mp\utility\game::setobjectivehinttext( var_1, &"_encstr_9EBF1357C3686DC98C8C2F45222F29B1D113D3CD33" );
    }

    setgunsfinal();
    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_828B0BBCD23709257593B1A00A", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_B68C12D97299A1C83F97D0409F56C6C7535ECEDD", 1 );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_89550C9DFF778ABD3E40236F4830" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_98891618B3CF9DC071D37953FFE589DECF7AD0E05A8FCE28", 1, 1 );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_89550C9DFF778ABD3E40236F4830" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_98891618B3CF9DC071D37953FFE589DECF7AD0E05A8FCE28", 1, 1 );
    var_3 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_89550C9DFF778ABD3E40236F4830" );
    var_4 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_98891618B3CF9DC071D37953FFE589DECF7AD0E05A8FCE28" );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_930E073E8FC00DDF69", var_3 );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_A30C093385361B4CB06C6D", var_4 );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
    level.quickmessagetoall = 1;
    level.blockweapondrops = 1;
}

updategametypedvars()
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::updatecommongametypedvars();
    level.setback = scripts\mp\utility\dvars::dvarintvalue( "_encstr_A33008A8A74461EB12C4", 1, 0, 5 );
    level.setbackstreak = scripts\mp\utility\dvars::dvarintvalue( "_encstr_8A6B0EB995D198B08DAD6A3A4ECAC2AD", 0, 0, 5 );
    level.killsperweapon = scripts\mp\utility\dvars::dvarintvalue( "_encstr_ABBE0FB7C7A251F0202F336FD7F920185A", 1, 1, 5 );
    level.ladderindex = scripts\mp\utility\dvars::dvarintvalue( "_encstr_B8F30C34E7D9C317AD09DA722BD1", 1, 1, 6 );
}

onplayerconnect( var_0 )
{
    var_0 thread keepweaponsloaded();
    var_0.pers["_encstr_9E95066E81471B5F"] = "_encstr_87AC099DB05B59ADF619AC";
    var_0.pers["_encstr_9F690A0DBF9F69AE0A510886"] = "_encstr_A40101";
    var_0.class = var_0.pers["_encstr_9E95066E81471B5F"];
    var_0.lastclass = var_0.pers["_encstr_9F690A0DBF9F69AE0A510886"];
    var_0.pers["_encstr_A2FB10AFE391259857B908783F59C26F5BEB"] = level.gun_loadouts["_encstr_BA840579D3F7F6"];
    var_0.gungamegunindex = 0;
    var_0.gungameprevgunindex = 0;
    var_0 thread refillammo();
    var_0 thread refillsinglecountammo();
}

keepweaponsloaded()
{
    self loadweaponsforplayer( [ level.gun_guns[0], level.gun_guns[1] ], 1 );
    var_0 = [];

    for (;;)
    {
        self waittill( "_encstr_9E4813C79099795BEB8835ED8F81230541F8372330" );
        var_0[0] = level.gun_guns[int( max( 0, self.gungamegunindex - level.setback ) )];
        var_0[1] = level.gun_guns[self.gungamegunindex];
        var_0[2] = level.gun_guns[self.gungamegunindex + 1];
        self loadweaponsforplayer( var_0, 1 );
    }
}

getspawnpoint()
{
    if ( level.ingraceperiod )
    {
        var_0 = undefined;
        var_1 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_B68C12D97299A1C83F97D0409F56C6C7535ECEDD" );

        if ( var_1.size > 0 )
        {
            if ( !isdefined( level.requiresminstartspawns ) )
            {

            }

            var_0 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1, 1 );
        }

        if ( !isdefined( var_0 ) )
        {
            var_1 = scripts\mp\spawnlogic::getteamspawnpoints( self.team );
            var_0 = scripts\mp\spawnscoring::getstartspawnpoint_freeforall( var_1 );
        }

        return var_0;
    }

    var_0 = scripts\mp\spawnlogic::getspawnpoint( self, "_encstr_AABA05236DC831", "_encstr_930E073E8FC00DDF69", "_encstr_A30C093385361B4CB06C6D" );
    return var_0;
}

onspawnplayer()
{
    self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 0 );
    thread waitloadoutdone();
    level notify( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
}

waitloadoutdone()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self waittill( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );

    if ( level.gameended && self.gungamegunindex == level.gun_guns.size )
        self.gungamegunindex = self.gungameprevgunindex;

    scripts\mp\utility\perk::giveperk( "_encstr_BE13103B7FE9CF64FB506BB3E1D51D5F206C" );
    thread givenextgun( 1 );
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( level.gameended )
        return;

    if ( var_3 == "_encstr_8FA10CBC37F487A99F9C0DE438C7" || isdefined( var_1 ) && isplayer( var_1 ) )
    {
        var_10 = scripts\mp\riotshield::isriotshield( var_4.basename );
        var_11 = scripts\mp\utility\weapon::isknifeonly( var_4.basename ) || scripts\mp\utility\weapon::turret_aimed_at_last_known( var_4.basename ) || scripts\mp\utility\weapon::isaxeweapon( var_4.basename ) || scripts\mp\utility\weapon::update_health_bar_to_player( var_4 );
        var_12 = isdefined( var_3 ) && var_3 == "_encstr_87230ED5301DEFDF39A94821C9F38573";

        if ( !isdefined( self.ladderdeathsthisweapon ) )
            self.ladderdeathsthisweapon = 1;
        else
            self.ladderdeathsthisweapon++;

        if ( var_3 == "_encstr_8FA10CBC37F487A99F9C0DE438C7" || var_1 == self || var_3 == "_encstr_8AED0A5719ED37B8FB512FD7" && var_11 || self.ladderdeathsthisweapon == level.setbackstreak || var_12 )
        {
            self.ladderdeathsthisweapon = 0;
            self playlocalsound( "_encstr_9B6F165B83F5DD1693EBF626A6561B1D5ACE2BEBB1B7E6A3" );
            self notify( "_encstr_9E4813C79099795BEB8835ED8F81230541F8372330" );
            self.gungameprevgunindex = self.gungamegunindex;
            self.gungamegunindex = int( max( 0, self.gungamegunindex - level.setback ) );

            if ( self.gungameprevgunindex > self.gungamegunindex )
            {
                scripts\mp\gamescore::giveplayerscore( "_encstr_A9DB117723101863ED912FD7AB37D95218C82C", 1 );
                thread scripts\mp\rank::scoreeventpopup( "_encstr_A9DB117723101863ED912FD7AB37D95218C82C" );
                scripts\mp\utility\stats::incpersstat( "_encstr_A37F09DC953A260B36ADE6", 1 );
                scripts\mp\persistence::statsetchild( "_encstr_A2460627DEABDC23", "_encstr_A37F09DC953A260B36ADE6", self.pers["_encstr_A37F09DC953A260B36ADE6"] );

                if ( isplayer( self ) )
                    scripts\mp\utility\stats::setextrascore1( self.pers["_encstr_A37F09DC953A260B36ADE6"] );
            }

            if ( var_3 == "_encstr_8AED0A5719ED37B8FB512FD7" )
            {
                if ( self.gungameprevgunindex )
                    var_1 thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_A6A217A11ABDE067CF12A6E9DAA791D0D9671B3D8F22A0A02F" );

                var_1 updateknivesperminute();
                var_1 scripts\mp\awards::givemidmatchaward( "_encstr_9E8A0FF93FC3F9E787331889AADF49313F" );
                var_1 scripts\mp\utility\stats::incpersstat( "_encstr_87AD06CD3A58986E", 1 );
                var_1 scripts\mp\persistence::statsetchild( "_encstr_A2460627DEABDC23", "_encstr_87AD06CD3A58986E", var_1.pers["_encstr_87AD06CD3A58986E"] );

                if ( isplayer( var_1 ) )
                    var_1 scripts\mp\utility\stats::setextrascore0( var_1.pers["_encstr_87AD06CD3A58986E"] );
            }

            if ( var_1 == self )
                return;
        }

        if ( var_1 != self && var_3 == "_encstr_9E0A12A801F1A13344CE341769AE337BB97150B1" || var_3 == "_encstr_A88211C92CA36712F335C480B96EE5B4143049" || var_3 == "_encstr_8F280E35E759A9A325A5D069CF8B87D3" || var_3 == "_encstr_81670F602F2B4957763C758D38D1FF6C3B" || var_3 == "_encstr_BA3916099077D7673B375A25D3CB8C29EF394169385E873C" || var_3 == "_encstr_A9ED0B35F488AF94A9A0A00D8A" || var_3 == "_encstr_A11B0CBD04C9B790F653EBCF4915" || var_3 == "_encstr_9E0B13A801F1A16F27C52E196DED47FA817110C1A1" || var_3 == "_encstr_A45C0E4B9FDF3165A3B93C4491BFA4A9" || var_3 == "_encstr_AD0D0935D0FD0FFFFBF108" || var_3 == "_encstr_8AED0A5719ED37B8FB512FD7" && !var_11 || var_12 )
        {
            var_13 = getweaponbasename( var_1.primaryweapon );

            if ( !var_1 get_available_unique_id( var_4, var_13, var_12 ) )
                return;

            if ( !isdefined( var_1.ladderkillsthisweapon ) )
                var_1.ladderkillsthisweapon = 1;
            else
                var_1.ladderkillsthisweapon++;

            if ( var_1.ladderkillsthisweapon != level.killsperweapon )
                return;

            var_1.ladderkillsthisweapon = 0;
            var_1.ladderdeathsthisweapon = 0;
            var_1.gungameprevgunindex = var_1.gungamegunindex;
            var_1.gungamegunindex++;
            var_1 notify( "_encstr_9E4813C79099795BEB8835ED8F81230541F8372330" );
            var_1 scripts\mp\gamescore::giveplayerscore( "_encstr_8175107616D2732BC8EBD9EAB9D73916B9B5", 1 );

            if ( var_1.gungamegunindex == level.gun_guns.size - 2 )
                level.kick_afk_check = 1;

            if ( var_1 update_readings() )
            {
                var_14 = [];

                foreach ( var_16 in level.players )
                {
                    if ( var_16 != var_1 )
                        var_14[var_14.size] = var_16;
                }

                scripts\mp\utility\dialog::leaderdialogonplayers( "_encstr_8FF10F5BE08384B32B4D9AD9A5FD7A556A", var_14 );
                var_1 scripts\mp\utility\dialog::leaderdialogonplayer( "_encstr_BED512CD673F9B94C8C03B8730437172ED0D555E" );
                scripts\mp\utility\sound::playsoundonplayers( "_encstr_AA781609B0BF6915970210191A6ED5E697490F7D2DA3D159" );
                level thread scripts\mp\hud_util::teamplayercardsplash( "_encstr_9D7115634F704B2D1B48119BA829692F0BA0D70AD798EF", var_1 );
            }

            if ( var_1.gungamegunindex < level.gun_guns.size )
            {
                var_18 = scripts\mp\rank::getscoreinfovalue( "_encstr_8175107616D2732BC8EBD9EAB9D73916B9B5" );
                var_1 thread scripts\mp\rank::scorepointspopup( var_18 );
                var_1 thread scripts\mp\rank::scoreeventpopup( "_encstr_8175107616D2732BC8EBD9EAB9D73916B9B5" );
                var_1 playlocalsound( "_encstr_8FED17AD1CEBDD169CBEBD26A695C63A5A9DACAF3A0B5BB2E6" );
                var_1 thread givenextgun( 0 );
            }

            if ( isdefined( var_1.lastgunrankincreasetime ) && gettime() - var_1.lastgunrankincreasetime < 5000 )
                var_1 scripts\mp\awards::givemidmatchaward( "_encstr_884E14FA277D403F27208E2061AB187E87A744F38809" );

            var_1.lastgunrankincreasetime = gettime();
        }
    }
}

givenextgun( var_0 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( !var_0 )
        scripts\common\utility::allow_weapon_switch( 0 );

    var_1 = getnextgun();
    var_1 = scripts\mp\weapons::updatesavedaltstate( var_1 );
    scripts\cp_mp\utility\inventory_utility::_giveweapon( var_1, undefined, undefined, 1 );

    if ( var_0 )
    {
        self setspawnweapon( var_1 );

        foreach ( var_3 in self.weaponlist )
        {
            if ( var_3 != var_1 )
                thread scripts\cp_mp\utility\inventory_utility::takeweaponwhensafe( var_3 );
        }
    }

    self.pers["_encstr_BE310E8339B4B60B272FEA591607BD9B"] = var_1.basename;
    self.primaryweapon = var_1.basename;
    self.primaryweaponobj = var_1;
    scripts\cp_mp\utility\inventory_utility::_switchtoweapon( var_1 );
    var_5 = scripts\mp\utility\weapon::isaxeweapon( var_1 );

    if ( var_5 )
    {
        self setweaponammoclip( var_1, 1 );
        thread takeweaponwhensafegungame( "_encstr_A6BB11E88FA23FAA7BCCC6D996433B6249AD7B", 0 );
    }
    else if ( self.gungamegunindex != level.gun_guns.size - 1 )
    {
        self givestartammo( var_1 );
        var_6 = getcompleteweaponname( "_encstr_A6BB11E88FA23FAA7BCCC6D996433B6249AD7B" );
        self giveweapon( var_6 );
        self assignweaponmeleeslot( var_6 );
    }

    if ( !var_0 )
    {
        var_7 = self.lastdroppableweaponobj;
        thread takeweaponwhensafegungame( var_7, 1 );
    }

    giveortakethrowingknife( var_1.basename );
    scripts\mp\weapons::updatetogglescopestate( var_1 );
    self.gungameprevgunindex = self.gungamegunindex;

    if ( !isdefined( self.lastgunpromotiontime ) )
        self.lastgunpromotiontime = gettime();

    var_8 = ( gettime() - self.lastgunpromotiontime ) / 1000;
    self.lastgunpromotiontime = gettime();

    if ( isdefined( self.pers["_encstr_8927198CCF65B829D8CC4B51481DEFABB0B051F08849E0FFE852A6"] ) && var_8 > self.pers["_encstr_8927198CCF65B829D8CC4B51481DEFABB0B051F08849E0FFE852A6"] )
        self.pers["_encstr_8927198CCF65B829D8CC4B51481DEFABB0B051F08849E0FFE852A6"] = var_8;
}

takeweaponwhensafegungame( var_0, var_1 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    for (;;)
    {
        if ( !scripts\cp_mp\utility\inventory_utility::iscurrentweapon( var_0 ) )
            break;

        waitframe();
    }

    scripts\cp_mp\utility\inventory_utility::_takeweapon( var_0 );

    if ( var_1 )
        scripts\common\utility::allow_weapon_switch( 1 );
}

getnextgun( var_0 )
{
    var_1 = self.gungamegunindex;

    if ( isdefined( var_0 ) )
        var_1 = var_0;

    var_2 = level.gun_guns[var_1];
    return var_2;
}

ontimelimit()
{
    var_0 = gethighestprogressedplayers();

    if ( !isdefined( var_0 ) || !var_0.size )
        thread scripts\mp\gamelogic::endgame( "_encstr_8A190423A45D", game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_A40B13A3B4AD56AFD896B5D28EF593AC0BC6A15632"] );
    else if ( var_0.size == 1 )
        thread scripts\mp\gamelogic::endgame( var_0[0], game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_A40B13A3B4AD56AFD896B5D28EF593AC0BC6A15632"] );
    else if ( var_0[var_0.size - 1].gungamegunindex > var_0[var_0.size - 2].gungamegunindex )
        thread scripts\mp\gamelogic::endgame( var_0[var_0.size - 1], game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_A40B13A3B4AD56AFD896B5D28EF593AC0BC6A15632"] );
    else
        thread scripts\mp\gamelogic::endgame( "_encstr_8A190423A45D", game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_A40B13A3B4AD56AFD896B5D28EF593AC0BC6A15632"] );
}

gethighestprogressedplayers()
{
    var_0 = -1;
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( isdefined( var_3.gungamegunindex ) && var_3.gungamegunindex >= var_0 )
        {
            var_0 = var_3.gungamegunindex;
            var_1[var_1.size] = var_3;
        }
    }

    return var_1;
}

refillammo()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    for (;;)
    {
        self waittill( "_encstr_A64D0743C1D1370153" );
        var_0 = weaponstartammo( self.primaryweapon );
        var_1 = weaponclipsize( self.primaryweapon );
        var_2 = var_0 - var_1;
        self setweaponammostock( self.primaryweapon, var_2 );
    }
}

refillsinglecountammo()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    for (;;)
    {
        if ( scripts\mp\utility\player::isreallyalive( self ) && self.team != "_encstr_A68C0A5803A5D151A2B310A6" && isdefined( self.primaryweapon ) && self getammocount( self.primaryweapon ) == 0 )
        {
            wait 2;
            self notify( "_encstr_A64D0743C1D1370153" );
            wait 1;
            continue;
        }

        waitframe();
    }
}

setgunladder()
{
    level.gun_guns = [];
    level.selectedweapons = [];

    switch ( level.ladderindex )
    {
        case 10:
        case 7:
        case 6:
        case 5:
        case 4:
        case 1:
            if ( scripts\mp\utility\game::matchmakinggame() && getdvarint( "_encstr_9D371713A7F0B1F7D5B889B28D276F72F00F87843B2807A77E", 0 ) == 1 )
            {
                level.gun_guns[0] = "_encstr_80870CDE8953614FEA6A98A8E205";
                level.gun_guns[1] = "_encstr_8FF30D23E02094011FCBDD13A4CBCA";
                level.gun_guns[2] = "_encstr_A4D9097B228B1DD1FA4DD7";
                level.gun_guns[3] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
                level.gun_guns[4] = "_encstr_B4D809EAB1521DD1AA0D09";
                level.gun_guns[5] = "_encstr_AA4C0CEE8E321926BB7BF0303FD2";
                level.gun_guns[6] = "_encstr_A4D9097B228B1DD1FA4DD7";
                level.gun_guns[7] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
                level.gun_guns[8] = "_encstr_B4D809EAB1521DD1AA0D09";
                level.gun_guns[9] = "_encstr_947C0EF561D8EDC7734F6D2E46B0081A";
                level.gun_guns[10] = "_encstr_8FF30D23E02094011FCBDD13A4CBCA";
                level.gun_guns[11] = "_encstr_A4D9097B228B1DD1FA4DD7";
                level.gun_guns[12] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
                level.gun_guns[13] = "_encstr_8FF30D23E02094011FCBDD13A4CBCA";
                level.gun_guns[14] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
                level.gun_guns[15] = "_encstr_AA4C0CEE8E321926BB7BF0303FD2";
                level.gun_guns[16] = "_encstr_80870CDE8953614FEA6A98A8E205";
                level.gun_guns[17] = "_encstr_953D0F39B09B46AFB69B4B33B2FAB29B19";
            }
            else
            {
                level.gun_guns[0] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
                level.gun_guns[1] = "_encstr_A4D9097B228B1DD1FA4DD7";
                level.gun_guns[2] = "_encstr_8FF30D23E02094011FCBDD13A4CBCA";
                level.gun_guns[3] = "_encstr_B4D809EAB1521DD1AA0D09";
                level.gun_guns[4] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
                level.gun_guns[5] = "_encstr_AA4C0CEE8E321926BB7BF0303FD2";
                level.gun_guns[6] = "_encstr_80870CDE8953614FEA6A98A8E205";
                level.gun_guns[7] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
                level.gun_guns[8] = "_encstr_A4D9097B228B1DD1FA4DD7";
                level.gun_guns[9] = "_encstr_947C0EF561D8EDC7734F6D2E46B0081A";
                level.gun_guns[10] = "_encstr_8FF30D23E02094011FCBDD13A4CBCA";
                level.gun_guns[11] = "_encstr_B4D809EAB1521DD1AA0D09";
                level.gun_guns[12] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
                level.gun_guns[13] = "_encstr_A4D9097B228B1DD1FA4DD7";
                level.gun_guns[14] = "_encstr_8FF30D23E02094011FCBDD13A4CBCA";
                level.gun_guns[15] = "_encstr_AA4C0CEE8E321926BB7BF0303FD2";
                level.gun_guns[16] = "_encstr_80870CDE8953614FEA6A98A8E205";
                level.gun_guns[17] = "_encstr_953D0F39B09B46AFB69B4B33B2FAB29B19";
            }

            break;
        case 8:
        case 2:
            level.gun_guns[0] = "_encstr_80870CDE8953614FEA6A98A8E205";
            level.gun_guns[1] = "_encstr_8FF30D23E02094011FCBDD13A4CBCA";
            level.gun_guns[2] = "_encstr_A4D9097B228B1DD1FA4DD7";
            level.gun_guns[3] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
            level.gun_guns[4] = "_encstr_80870CDE8953614FEA6A98A8E205";
            level.gun_guns[5] = "_encstr_8FF30D23E02094011FCBDD13A4CBCA";
            level.gun_guns[6] = "_encstr_A4D9097B228B1DD1FA4DD7";
            level.gun_guns[7] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
            level.gun_guns[8] = "_encstr_80870CDE8953614FEA6A98A8E205";
            level.gun_guns[9] = "_encstr_8FF30D23E02094011FCBDD13A4CBCA";
            level.gun_guns[10] = "_encstr_A4D9097B228B1DD1FA4DD7";
            level.gun_guns[11] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
            level.gun_guns[12] = "_encstr_80870CDE8953614FEA6A98A8E205";
            level.gun_guns[13] = "_encstr_8FF30D23E02094011FCBDD13A4CBCA";
            level.gun_guns[14] = "_encstr_A4D9097B228B1DD1FA4DD7";
            level.gun_guns[15] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
            level.gun_guns[16] = "_encstr_80870CDE8953614FEA6A98A8E205";
            level.gun_guns[17] = "_encstr_953D0F39B09B46AFB69B4B33B2FAB29B19";
            break;
        case 9:
        case 3:
            level.gun_guns[0] = "_encstr_80870CDE8953614FEA6A98A8E205";
            level.gun_guns[1] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
            level.gun_guns[2] = "_encstr_B4D809EAB1521DD1AA0D09";
            level.gun_guns[3] = "_encstr_947C0EF561D8EDC7734F6D2E46B0081A";
            level.gun_guns[4] = "_encstr_AA4C0CEE8E321926BB7BF0303FD2";
            level.gun_guns[5] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
            level.gun_guns[6] = "_encstr_B4D809EAB1521DD1AA0D09";
            level.gun_guns[7] = "_encstr_947C0EF561D8EDC7734F6D2E46B0081A";
            level.gun_guns[8] = "_encstr_AA4C0CEE8E321926BB7BF0303FD2";
            level.gun_guns[9] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
            level.gun_guns[10] = "_encstr_B4D809EAB1521DD1AA0D09";
            level.gun_guns[11] = "_encstr_947C0EF561D8EDC7734F6D2E46B0081A";
            level.gun_guns[12] = "_encstr_AA4C0CEE8E321926BB7BF0303FD2";
            level.gun_guns[13] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
            level.gun_guns[14] = "_encstr_AA4C0CEE8E321926BB7BF0303FD2";
            level.gun_guns[15] = "_encstr_AA380DE4589B46FA2C37E6C2AE1B47";
            level.gun_guns[16] = "_encstr_80870CDE8953614FEA6A98A8E205";
            level.gun_guns[17] = "_encstr_953D0F39B09B46AFB69B4B33B2FAB29B19";
            break;
    }

    if ( level.gametype == "_encstr_8918049D5DDC" )
    {
        var_0 = level.gun_guns.size;
        setdynamicdvar( "_encstr_A85113B9C627F5ECD5B9EB9B1BDB392BD82DDAB41D", var_0 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), var_0 );
    }
}

setgunsfinal()
{
    level.selectedweapons = [];
    buildrandomweapontable();

    for ( var_0 = 0; var_0 < level.gun_guns.size; var_0++ )
    {
        var_1 = level.gun_guns[var_0];

        if ( scripts\mp\utility\script::isstrstart( var_1, "_encstr_A411064E2CB919F5" ) )
        {
            var_2 = getrandomweaponfromcategory( var_1 );

            if ( level.ladderindex == 4 || level.ladderindex == 5 )
                level.gun_guns[var_0] = scripts\mp\class::fixcollision( var_2["_encstr_B92007DDCA2C0EF6DC"], undefined, undefined, var_2["_encstr_893E0A67B04EA5B0B9E82511"], undefined, undefined, scripts\cp_mp\utility\game_utility::isnightmap() );
            else
                level.gun_guns[var_0] = fixuppickuporigin( var_2 );

            continue;
        }

        var_3 = scripts\mp\utility\weapon::getweaponrootname( level.gun_guns[var_0] );
        level.selectedweapons[var_3] = 1;
        var_4 = var_3;
        var_5 = 0;

        if ( level.ladderindex == 4 || level.ladderindex == 5 )
        {
            var_6 = remappedhpzoneorder( var_3 );
            var_7 = scripts\mp\class::_id_139E7( var_3, var_6 );
            var_4 = scripts\mp\class::fixcollision( var_3, undefined, undefined, var_7, undefined, undefined, scripts\cp_mp\utility\game_utility::isnightmap() );
        }
        else
        {
            var_7 = 0;

            if ( level.ladderindex == 6 )
            {
                var_6 = remappedhpzoneorder( var_3 );
                var_7 = scripts\mp\class::_id_139E7( var_3, var_6 );
            }

            var_5 = randomintrange( 2, 5 );
            var_4 = set_station_track_available_time( var_3, var_5, var_7, scripts\cp_mp\utility\game_utility::isnightmap() );
        }

        level.gun_guns[var_0] = var_4;
    }

    level.selectedweapons = undefined;
}

getrandomarchetype()
{
    return "_encstr_A6B3120F05CFBC15435ADB2FF1F723E338B88B13";
}

setspecialloadout()
{
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_87C30FC410893345733089A330AB3E9362"] = "_encstr_8A900D2DEEE0EB83A5AF6CE0C238B0";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_B44319C6DB5832DEAE3A289C965B2CC95E141DA32C36A1D65673A3"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_A9651AE2C897BBF598D1103A83303EBBC3A5DBEB917E43AD20FD4C62"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_B66C1363F658327BD53A419396B558E49786B0B5DB"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_8702161410EA292F7BB321E36172F3866033F7BCB96F09A9"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_B35A181BDE2C91B7BAE814932D6B0B39F2AC2C9C9616CD47A488"] = 0;
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_A14E11D520C0AC320551FF3F67206AE4782B08"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_9D6F1B6C48D16B2D1B48D18AC817252389AEF1395DDBC7F6C968BA3218"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_BDDB1C6590701C82D5812FCF97F0DA54285B58A66B70A19AA35BFFEBD106"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_A2EA151BD081D44253851297663F0A9C2980C73F48F807"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_82B618ABEA2661705BBB2A415B6D7332AB2AD71F9D3880AE324D"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_80531AE430A913A593D05932408FDDAB012669565F936FEE7D28E018"] = 0;
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_82BC113DBF214C223588A5A7604A835348E395"] = "_encstr_B99C0FF382C5B813BA035133B732658894";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_9DC30F4BDF0AB9AF800C8C5E8D086A4DB2"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_A31B12E09AEF5518032CF7A1326F20AA4393FB49"] = "_encstr_973508BF93EFFBC363B3";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_BAE713C8CFE03C60079B6BE3E83B5FEC7AAAF917B3"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_A1E71363923EA180A70CDA33FC2BCB59229AD0B0DF"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_B9E71363DEC291F6ABD196961B63DCE8935616B6CC"] = "_encstr_AABA05236DC831";
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_ABCB0DBA7BBB6FCFC35D303D7628F7"] = [];
    level.gun_loadouts["_encstr_BA840579D3F7F6"]["_encstr_A4450FEB472A87A2834C172243E0E538F8"] = "_encstr_A83C0BF7F4ABABC79045FE5807";
    level.gun_loadouts["_encstr_BC850785638DA59537"] = level.gun_loadouts["_encstr_BA840579D3F7F6"];
}

buildrandomweapontable()
{
    level.weaponcategories = [];
    var_0 = 0;

    for (;;)
    {
        var_1 = tablelookupbyrow( "_encstr_98B316C21B80874350A751558BF10FE757906AAB680E1F7B", var_0, 0 );

        if ( var_1 == "_encstr_A40101" )
            break;

        if ( !isdefined( level.weaponcategories[var_1] ) )
            level.weaponcategories[var_1] = [];

        var_2 = tablelookupbyrow( "_encstr_98B316C21B80874350A751558BF10FE757906AAB680E1F7B", var_0, 5 );

        if ( var_2 == "_encstr_A40101" || getdvarint( var_2, 0 ) == 1 )
        {
            var_3 = [];
            var_3["_encstr_B92007DDCA2C0EF6DC"] = scripts\mp\utility\weapon::getweaponrootname( tablelookupbyrow( "_encstr_98B316C21B80874350A751558BF10FE757906AAB680E1F7B", var_0, 1 ) );
            var_3["_encstr_8F1904BF40C0"] = int( tablelookupbyrow( "_encstr_98B316C21B80874350A751558BF10FE757906AAB680E1F7B", var_0, 2 ) );
            var_3["_encstr_BD1904759FC1"] = int( tablelookupbyrow( "_encstr_98B316C21B80874350A751558BF10FE757906AAB680E1F7B", var_0, 3 ) );
            var_3["_encstr_B40D05E05627D6"] = tablelookupbyrow( "_encstr_98B316C21B80874350A751558BF10FE757906AAB680E1F7B", var_0, 4 );
            var_3["_encstr_9C1B08BED1311A8759D8"] = int( tablelookupbyrow( "_encstr_98B316C21B80874350A751558BF10FE757906AAB680E1F7B", var_0, 7 ) );

            if ( ( level.ladderindex == 4 || level.ladderindex == 6 ) && !var_3["_encstr_9C1B08BED1311A8759D8"] )
            {
                var_0++;
                continue;
            }

            if ( !scripts\mp\weapons::vehicle_ai_avoidance_cleanup( var_3["_encstr_B92007DDCA2C0EF6DC"] ) )
            {
                var_0++;
                continue;
            }

            level.weaponcategories[var_1][level.weaponcategories[var_1].size] = var_3;
        }

        var_0++;
    }
}

getrandomweaponfromcategory( var_0 )
{
    var_1 = level.weaponcategories[var_0];

    if ( isdefined( var_1 ) && var_1.size > 0 )
    {
        var_2 = "_encstr_A40101";
        var_3 = undefined;
        var_4 = 0;

        for (;;)
        {
            var_5 = randomintrange( 0, var_1.size );
            var_3 = var_1[var_5];
            var_6 = scripts\mp\utility\weapon::getweaponrootname( var_3["_encstr_B92007DDCA2C0EF6DC"] );
            var_7 = 1;

            if ( level.ladderindex == 4 || level.ladderindex == 6 )
                var_7 = var_3["_encstr_9C1B08BED1311A8759D8"];

            if ( !isdefined( level.selectedweapons[var_6] ) && var_7 || var_4 > var_1.size )
            {
                level.selectedweapons[var_6] = 1;

                for ( var_8 = 0; var_8 < level.weaponcategories[var_0].size; var_8++ )
                {
                    if ( level.weaponcategories[var_0][var_8]["_encstr_B92007DDCA2C0EF6DC"] == var_3["_encstr_B92007DDCA2C0EF6DC"] )
                    {
                        level.weaponcategories[var_0] = scripts\engine\utility::array_remove_index( level.weaponcategories[var_0], var_8 );
                        break;
                    }
                }

                break;
            }

            var_4++;
        }

        if ( level.ladderindex == 4 || level.ladderindex == 6 )
        {
            var_9 = remappedhpzoneorder( var_3["_encstr_B92007DDCA2C0EF6DC"] );
            var_3["_encstr_893E0A67B04EA5B0B9E82511"] = scripts\mp\class::_id_139E7( var_3["_encstr_B92007DDCA2C0EF6DC"], var_9 );
        }
        else if ( level.ladderindex == 5 )
            var_3["_encstr_893E0A67B04EA5B0B9E82511"] = scripts\mp\class::_id_139E7( var_3["_encstr_B92007DDCA2C0EF6DC"], "_encstr_9C0703B6B7" );

        return var_3;
    }
    else
        return "_encstr_AABA05236DC831";
}

fixuppickuporigin( var_0 )
{
    var_1 = randomintrange( var_0["_encstr_8F1904BF40C0"], var_0["_encstr_BD1904759FC1"] + 1 );
    var_2 = set_station_track_available_time( var_0["_encstr_B92007DDCA2C0EF6DC"], var_1, var_0["_encstr_893E0A67B04EA5B0B9E82511"], scripts\cp_mp\utility\game_utility::isnightmap() );
    return var_2;
}

remappedhpzoneorder( var_0 )
{
    var_1 = [];
    var_2 = scripts\mp\utility\weapon::getweaponrootname( var_0 );
    var_1 = tablelookup( "_encstr_98B316C21B80874350A751558BF10FE757906AAB680E1F7B", 1, var_2, 6 );
    return var_1;
}

modifyweapon( var_0, var_1, var_2 )
{
    var_3 = [];
    var_4 = 0;
    var_5 = level.ladderindex == 4;
    var_6 = "_encstr_A40101";

    if ( isdefined( var_2 ) && var_2["_encstr_95A208380FFAA8439A6B"] != "_encstr_A40101" )
        var_6 = var_2["_encstr_95A208380FFAA8439A6B"];

    var_7 = var_6 != "_encstr_A40101";
    var_8 = "_encstr_B63310DA1C971BEDB73AE5BB95581CDE37CB" + var_0 + "_encstr_B4A705622FCB1B";
    var_9 = scripts\mp\utility\weapon::getweapongunsmithattachmenttable( var_0 );

    if ( var_1 > 0 )
    {
        var_10 = scripts\mp\utility\weapon::getweaponattachmentsbasenames( var_0 );

        if ( var_10.size > 0 )
        {
            var_11 = scripts\mp\utility\weapon::register_wave_spawner( var_0 );
            var_12 = var_11.size;

            for ( var_13 = 0; var_13 < var_1; var_13++ )
            {
                var_14 = "_encstr_A40101";

                while ( var_14 == "_encstr_A40101" && var_12 > 0 )
                {
                    var_12--;
                    var_15 = randomint( var_11.size );
                    var_14 = var_11[var_15];

                    if ( attachmentcheck( var_14, var_3, var_9, var_0 ) )
                    {
                        var_3[var_3.size] = var_14;

                        if ( scripts\mp\utility\weapon::getattachmenttype( var_14 ) == "_encstr_B61F057B6E5158" )
                            var_4 = 1;
                    }
                }
            }
        }
    }

    var_16 = "_encstr_AABA05236DC831";
    var_17 = "_encstr_AABA05236DC831";

    if ( istrue( var_5 ) && var_7 )
        var_18 = scripts\mp\class::buildweapon( var_0, var_3, var_16, var_17, int( var_6 ) );
    else
        var_18 = scripts\mp\class::buildweapon( var_0, var_3, var_16, var_17 );

    return var_18;
}

set_station_track_available_time( var_0, var_1, var_2, var_3 )
{
    if ( level.ladderindex == 6 )
    {
        if ( !isdefined( var_1 ) )
            var_1 = randomintrange( 2, 5 );

        var_4 = scripts\mp\class::buildweapon( var_0, undefined, undefined, undefined, undefined, undefined, undefined, undefined, var_3 );
        var_5 = set_spawner_type( var_0 );
        var_6 = [];

        for ( var_7 = 0; var_7 < var_1; var_7++ )
        {
            var_8 = scripts\mp\weapons::getrandomgraverobberattachment( var_4, var_5 );

            if ( !isdefined( var_8 ) )
                break;
            else
            {
                var_9 = scripts\mp\weapons::addattachmenttoweapon( var_4, var_8 );

                if ( isdefined( var_9 ) )
                    var_4 = var_9;

                var_6[var_6.size] = var_8;
            }
        }

        var_4 = scripts\mp\class::fixsuperforbr( var_0, var_6, undefined, undefined, var_2, undefined, undefined, undefined, var_3 );
        return var_4;
    }
    else
    {
        if ( isdefined( var_2 ) && var_2 != 0 )
            var_4 = scripts\mp\class::fixcollision( var_0, undefined, undefined, var_2, undefined, undefined, var_3 );
        else
            var_4 = scripts\mp\class::buildweapon( var_0, undefined, undefined, undefined, undefined, undefined, undefined, undefined, var_3 );

        if ( !isdefined( var_1 ) )
            var_1 = randomintrange( 2, 5 );

        var_5 = set_spawner_type( var_4 );

        for ( var_7 = 0; var_7 < var_1; var_7++ )
        {
            var_8 = scripts\mp\weapons::getrandomgraverobberattachment( var_4, var_5 );

            if ( !isdefined( var_8 ) )
                break;

            var_9 = scripts\mp\weapons::addattachmenttoweapon( var_4, var_8 );

            if ( isdefined( var_9 ) )
                var_4 = var_9;
        }

        return var_4;
    }
}

set_spawner_type( var_0 )
{
    var_1 = scripts\mp\utility\weapon::register_wave_spawner( var_0 );
    var_2 = [];

    foreach ( var_4 in var_1 )
    {
        if ( isstartstr( var_4, "_encstr_89070358A2" ) || isstartstr( var_4, "_encstr_AA07035DC4" ) || isstartstr( var_4, "_encstr_AFCA08A3D059276B8563" ) || var_4 == "_encstr_A20308CCFAC0A25AF5A7" )
            continue;

        var_2[var_2.size] = var_4;
    }

    return var_2;
}

attachmentcheck( var_0, var_1, var_2, var_3 )
{
    var_4 = tablelookup( var_2, 0, var_0, 1 );

    for ( var_5 = 0; var_5 < var_1.size; var_5++ )
    {
        var_6 = tablelookup( var_2, 0, var_1[var_5], 1 );

        if ( var_0 == var_1[var_5] || scripts\mp\utility\weapon::attachmentsconflict( var_0, var_1[var_5], var_3 ) != "_encstr_A40101" || var_4 == var_6 )
            return 0;
    }

    return 1;
}

getvalidattachments( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = [];
    var_6 = [];
    var_7 = [];

    if ( istrue( var_1 ) && var_4 != "_encstr_A40101" )
    {
        var_6 = tablelookup( var_3, 0, int( var_4 ), 17 );
        var_6 = strtok( var_6, "_encstr_BE4C0207" );
        var_7 = tablelookup( var_3, 0, int( var_4 ), 18 );
        var_7 = strtok( var_7, "_encstr_BE4C0207" );

        for ( var_8 = 0; var_8 < var_6.size; var_8++ )
            var_6[var_8] = scripts\mp\utility\weapon::attachmentmap_tobase( var_6[var_8] );
    }

    foreach ( var_10 in var_0 )
    {
        var_11 = scripts\mp\utility\weapon::getattachmenttype( var_10 );

        if ( var_7.size > 0 && scripts\engine\utility::array_contains( var_7, var_11 ) )
            continue;

        if ( var_6.size > 0 && scripts\engine\utility::array_contains( var_6, var_10 ) )
            continue;

        if ( !scripts\mp\utility\weapon::carriedpunchcard( var_2, var_10 ) )
        {
            var_5[var_11] = undefined;
            continue;
        }

        switch ( var_10 )
        {
            case "_encstr_BA5F0687B5167637":
            case "_encstr_A33E09E64B36B2CDB1B293":
                break;
            default:
                if ( !issubstr( var_10, "_encstr_A33E09E64B36B2CDB1B293" ) )
                    var_5[var_5.size] = var_10;
        }
    }

    return var_5;
}

giveortakethrowingknife( var_0 )
{
    scripts\mp\equipment::takeequipment( "_encstr_987F080E394BDAC2E45E" );

    if ( scripts\mp\utility\weapon::isknifeonly( var_0 ) || scripts\mp\utility\weapon::turret_aimed_at_last_known( var_0 ) || scripts\mp\utility\weapon::isaxeweapon( var_0 ) )
    {
        scripts\mp\utility\perk::giveperk( "_encstr_9E57146EE0B21BA50B36A3BCD76EB1C23B5637765993" );
        scripts\mp\utility\perk::giveperk( "_encstr_A4DD125B33A79E607E4CF1E357E2B8DD574A11E3" );
        scripts\mp\equipment::giveequipment( "_encstr_811F1A225BCDDF627961F8EA7F10EC7B7C365A1A202CA79168A3FAC5", "_encstr_987F080E394BDAC2E45E" );
        thread scripts\mp\equipment::incrementequipmentammo( "_encstr_811F1A225BCDDF627961F8EA7F10EC7B7C365A1A202CA79168A3FAC5" );
    }
}

isvalidthrowingknifekill( var_0 )
{
    return var_0 == "_encstr_89F511713BBB2818C13559D05DB9E85501B7F1" || var_0 == "_encstr_B40F16E88627DEDDD2DCCE5BDC4BCCCAEBCC2D392BBE5B0E" || var_0 == "_encstr_BE851A55744BB78B09E36810FB51E1EBE15FC1550E8355B0EB0F30C0" || var_0 == "_encstr_89F817DB90A61F7BE06DDFAB1598477F588933B2B871273583";
}

onplayerscore( var_0, var_1, var_2, var_3 )
{
    var_1 scripts\mp\utility\stats::incpersstat( "_encstr_9BE80EE01E95B85B35F5E2B7565FD08F", var_2 );
    var_4 = var_1 scripts\mp\utility\stats::getpersstat( "_encstr_9BE80EE01E95B85B35F5E2B7565FD08F" );
    var_1 scripts\mp\persistence::statsetchild( "_encstr_A2460627DEABDC23", "_encstr_9BE80EE01E95B85B35F5E2B7565FD08F", var_4 );
    var_5 = 0;

    if ( var_0 == "_encstr_8175107616D2732BC8EBD9EAB9D73916B9B5" )
        var_5 = 1;
    else if ( var_0 == "_encstr_A9DB117723101863ED912FD7AB37D95218C82C" )
    {
        var_6 = level.setback;
        var_5 = var_6 * -1;
    }
    else if ( var_0 == "_encstr_A1A70B5053C67F5383D7F52BB7" || var_0 == "_encstr_97D70583536853" )
        var_1 scripts\mp\utility\script::bufferednotify( "_encstr_A3711656C23937CA23D79B8DB72759F5895D66CCACE45691", var_2 );

    return var_5;
}

updateknivesperminute()
{
    if ( !isdefined( self.knivesperminute ) )
    {
        self.numknives = 0;
        self.knivesperminute = 0;
    }

    self.numknives++;

    if ( scripts\mp\utility\game::getminutespassed() < 1 )
        return;

    self.knivesperminute = self.numknives / scripts\mp\utility\game::getminutespassed();
}

modifyunifiedpointscallback( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( var_3 ) && ( var_3.basename == "_encstr_BED80DB4BB83AFD6379633CAEBB6E0" || var_3.basename == "_encstr_ADE916D2DD70AFAD59EB856D5AB598DE98B157E61DAFB5C1" || var_3.basename == "_encstr_B11417681B3F073091C19FC7E95886A0510A388FCD938EDABA" ) )
    {
        if ( isdefined( var_2 ) && isdefined( var_2.knivesperminute ) && var_2.knivesperminute >= 10 )
            return 0;
    }

    return var_0;
}

get_available_unique_id( var_0, var_1, var_2 )
{
    if ( var_0.basename == var_1 )
        return 1;

    if ( var_1 == "_encstr_80AC13B4DD707D9B9BF51BE4DE37B998DBBBD7ADE0" )
    {
        if ( issubstr( var_0.basename, "_encstr_A89B05EEC0A13B" ) )
            return 1;
    }

    if ( var_0.basename == "_encstr_974511E14BEFD418C52B95AD256E882B6FD2FB" )
        return 1;

    if ( var_1 == "_encstr_945113B3BFF2F6635067391920B2EAC97F1E094780" || var_1 == "_encstr_A9E413B4DD70D7DC86BEB0858DC134B062197D5B07" )
        return 1;

    if ( update_readings() )
    {
        if ( isvalidthrowingknifekill( var_0.basename ) )
            return 1;

        if ( var_2 )
            return 1;
    }

    return 0;
}

update_readings()
{
    return self.gungamegunindex == level.gun_guns.size - 1;
}
