// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

setupobjective( var_0, var_1, var_2, var_3 )
{
    var_4 = var_0;

    if ( !isdefined( var_1 ) )
    {
        var_1 = [];
        var_1[0] = var_4;
    }

    var_4 = postshipmodifiedkothzones( var_4 );

    if ( istrue( var_2 ) )
        var_5 = 0;
    else
        var_5 = undefined;

    var_4 = scripts\mp\gameobjects::createuseobject( "_encstr_9BA4080D39CFFB5AB7C1", var_4, var_1, ( 0, 0, 0 ), var_5, var_3 );
    var_4 scripts\mp\gameobjects::disableobject();

    if ( scripts\mp\utility\game::getgametype() == "_encstr_B7D7054F3030F9" )
    {
        for ( var_6 = 0; var_6 < var_4.visuals.size; var_6++ )
            var_4.visuals[var_6] hide();
    }
    else
        var_4.visuals[0] scriptmodelplayanim( "_encstr_9D0A1F8C6CA9298DEB11475F60206C32D5839944D73FA2DA91707F7F1BB83F5B43" );

    var_4 scripts\mp\gameobjects::cancontestclaim( 1 );
    var_4.claimgracetime = level.zonecapturetime * 1000;
    var_4 scripts\mp\gameobjects::pinobjiconontriggertouch();

    if ( isdefined( var_0.objectivekey ) )
        var_4.objectivekey = var_0.objectivekey;
    else
        var_4.objectivekey = var_4 scripts\mp\gameobjects::getlabel();

    if ( level.usehqrules && !level.usehprules )
        var_4 scripts\mp\gameobjects::mustmaintainclaim( 0 );
    else
        var_4 scripts\mp\gameobjects::mustmaintainclaim( 1 );

    var_4.id = "_encstr_957B0A886F934BCA0F8022FB";

    if ( isdefined( var_4.trigger.target ) && scripts\mp\utility\game::getgametype() == "_encstr_B7D7054F3030F9" )
        var_4 thread assignchevrons( var_4.trigger.target, var_4.trigger.script_label );

    if ( istrue( level.setplayerselfrevivingextrainfo ) )
    {
        if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" )
            var_4 thread _id_14396( var_4 );
        else if ( scripts\mp\utility\game::getgametype() == "_encstr_BC7205C8ABFDE7" )
            var_4 thread _id_14395( var_4 );
    }

    return var_4;
}

_id_14396( var_0 )
{
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );
    var_1 = anglestoforward( var_0.visuals[0].angles );
    var_2 = var_1 * 5;
    var_3 = var_0.visuals[0] gettagorigin( "_encstr_AB870E4DEBC62C0E8EBDC1F5A33916CB" );
    playfx( level.spawnoffsettacinsertmax["_encstr_A8CB0C87C9A023641029E321E058"], var_3 + var_2 );
}

_id_14395( var_0 )
{
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );
    playfx( level.spawnoffsettacinsertmax["_encstr_BDA50F71381DB8A32645A110B8C2FF28BF"], getgroundposition( var_0.trigger.origin, 4 ) + ( 0, 0, 2 ) );
}

postshipmodifiedkothzones( var_0 )
{
    if ( level.mapname == "_encstr_93740CB51CAFADB08DE5B91A59B3" )
    {
        if ( var_0.script_label == "_encstr_AF4C02EA" )
            var_0.origin = var_0.origin - ( 0, 0, 5 );
    }
    else if ( level.mapname == "_encstr_AA1D0948FAB7A85DD37FE9" )
    {
        if ( var_0.script_label == "_encstr_AF4C02EA" )
            var_0.origin = var_0.origin + ( 0, 3, 0 );
    }

    return var_0;
}

assignchevrons( var_0, var_1 )
{
    wait 1.0;
    var_2 = getentitylessscriptablearrayinradius( var_0, "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_2 = _id_12BFF( var_2, var_1 );
    var_2 = _id_12806( var_2, var_1 );
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        var_6 = var_3.size;
        var_3[var_6] = var_5;
        var_3[var_6].numchevrons = 1;

        if ( isdefined( var_5.script_noteworthy ) )
        {
            if ( var_5.script_noteworthy == "_encstr_9B4C028A" )
            {
                var_3[var_6].numchevrons = 2;
                continue;
            }

            if ( var_5.script_noteworthy == "_encstr_A94C0242" )
            {
                var_3[var_6].numchevrons = 3;
                continue;
            }

            if ( var_5.script_noteworthy == "_encstr_B94C02A9" )
                var_3[var_6].numchevrons = 4;
        }
    }

    self.chevrons = var_3;
}

updatechevrons( var_0 )
{
    if ( scripts\mp\utility\game::getgametype() != "_encstr_B7D7054F3030F9" )
        return;

    self notify( "_encstr_AABA0F4FAACDB170519FF9EF16E697901F" );
    self endon( "_encstr_AABA0F4FAACDB170519FF9EF16E697901F" );

    while ( !isdefined( self.chevrons ) )
        waitframe();

    foreach ( var_2 in self.chevrons )
    {
        for ( var_3 = 0; var_3 < var_2.numchevrons; var_3++ )
            var_2 setscriptablepartstate( "_encstr_A17509D31AA58C430FB219" + var_3, var_0 );
    }
}

activatezone()
{
    self.onuse = ::zone_onuse;
    self.onbeginuse = ::zone_onusebegin;
    self.onuseupdate = ::zone_onuseupdate;
    self.onenduse = ::zone_onuseend;
    self.onunoccupied = ::zone_onunoccupied;
    self.oncontested = ::zone_oncontested;
    self.onuncontested = ::zone_onuncontested;
    self.stompprogressreward = ::zone_stompprogressreward;
    self.onpinnedstate = ::zone_onpinnedstate;
    self.onunpinnedstate = ::zone_onunpinnedstate;
    self.didstatusnotify = 0;
    scripts\mp\gameobjects::requestid( 1, 1, 0, 1, 0 );
    var_0 = self.curorigin;

    if ( isdefined( level.remove_last_used_node ) )
        var_0 = [[ level.remove_last_used_node ]]();

    var_1 = 1024;

    if ( isdefined( level.remove_launcher_xmags ) )
        var_1 = [[ level.remove_launcher_xmags ]]();

    var_2 = [];
    var_2[var_2.size] = scripts\mp\spawnlogic::addspawndangerzone( var_0 - ( 0, 0, 2048 ), var_1, 4096, "_encstr_BC850785638DA59537", undefined, undefined, undefined, undefined, undefined, 1 );
    var_2[var_2.size] = scripts\mp\spawnlogic::addspawndangerzone( var_0 - ( 0, 0, 2048 ), var_1, 4096, "_encstr_BA840579D3F7F6", undefined, undefined, undefined, undefined, undefined, 1 );
    self.isburstweapon = var_2;

    if ( scripts\mp\utility\game::getgametype() == "_encstr_B7D7054F3030F9" || scripts\mp\utility\game::getgametype() == "_encstr_BC7205C8ABFDE7" )
    {
        self.ignorestomp = 1;
        self.alwaysstalemate = 1;
        level thread _encstr_A6471E8BD18667DA6837F78D098A278FA18973D35BD5B745F867A4805D20EADF::awardcapturepoints();
    }
    else
    {
        self._id_138B2 = ::_id_1471E;
        scripts\mp\objidpoolmanager::update_objective_position( self.objidnum, self.visuals[0].origin + ( 0, 0, 70 ) );
    }
}

deactivatezone()
{
    self.onuse = undefined;
    self.onbeginuse = undefined;
    self.onuseupdate = undefined;
    self.onunoccupied = undefined;
    self.oncontested = undefined;
    self.onuncontested = undefined;
    self.stalemate = 0;
    self.wasstalemate = 0;
    self.didstatusnotify = 0;
    thread updatechevrons( "_encstr_9819045FD029" );

    foreach ( var_1 in self.isburstweapon )
        scripts\mp\spawnlogic::removespawndangerzone( var_1 );

    self.isburstweapon = undefined;

    foreach ( var_4 in level.players )
        scripts\mp\objidpoolmanager::objective_unpin_player( self.objidnum, var_4 );

    self.trigger scripts\engine\utility::trigger_off();
    thread _id_1439D();
    scripts\mp\gameobjects::releaseid( 1, 0 );

    if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" )
    {
        self.visuals[0] playsound( "_encstr_A9451569909FE80B39B2D0083A0BF3E3BF3CE5C80B1392" );
        thread scripts\mp\music_and_dialog::headquarters_deactivate_music( self.lastclaimteam );
        self.visuals[0] scriptmodelplayanim( "_encstr_9D0A1F8C6CA9298DEB11475F60206C32D5839944D73FA2DA91707F7F1BB83F5B43" );
        level.zone.visuals[0] stoploopsound();
    }

    level._id_12F0E = 0;
}

zonetimerwait()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level endon( "_encstr_A8940F52FD985753FF7BD6978F6B784095" );
    var_0 = int( level.zonemovetime * 1000 + gettime() );

    if ( !isdefined( level.zoneselectiondelay ) || level.zoneselectiondelay < 10 )
        thread hp_move_soon( level.zonemovetime );

    level thread handlehostmigration( var_0 );
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( level.zonemovetime );
}

hp_move_soon( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" )
        level endon( "_encstr_8C9C0F90B8CD42479108E7E3A8A8290AA1" );

    if ( int( var_0 ) > 12 )
    {
        var_1 = var_0 - 12;
        scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( var_1 );

        foreach ( var_3 in level.teamnamelist )
            level scripts\mp\utility\dialog::statusdialog( "_encstr_8CD90D58DB47B8CF6B5F504E351205", var_3 );
    }
}

handlehostmigration( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level endon( "_encstr_B9A10DD145CDB008EA27752B0782ED" );
    level endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_ABC30E6A97B36DD93BB6927BC35DC801" );
    level waittill( "_encstr_A33F15D07BB93AEBB6B43B9C2C472D7BDC7D4C59765ADC" );
    setomnvar( "_encstr_8F3A1BEB90107F5E981BBB943B40A7772D08E2121BC8B793D859A08DC9", 1 );
    var_1 = scripts\mp\hostmigration::waittillhostmigrationdone();
    setomnvar( "_encstr_8F3A1BEB90107F5E981BBB943B40A7772D08E2121BC8B793D859A08DC9", 0 );

    if ( var_1 > 0 )
        setomnvar( "_encstr_B1A313BA4BBE86C2C93238DE4B9B3ABE475AD6B29C", level.zoneendtime + var_1 );
    else
        setomnvar( "_encstr_B1A313BA4BBE86C2C93238DE4B9B3ABE475AD6B29C", level.zoneendtime );
}

_id_1199E( var_0, var_1 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_2 = level.framedurationseconds;
    var_3 = var_2 * 1000;
    var_4 = var_0 * 1000;
    var_5 = var_4 - var_3;
    self.radialtimeobjid = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );

    if ( self.radialtimeobjid != -1 )
    {
        var_6 = "_encstr_8CBE0A41F59874FF8371821A";
        scripts\mp\objidpoolmanager::objective_add_objective( self.radialtimeobjid, var_6, var_1 );
        scripts\mp\objidpoolmanager::objective_set_play_intro( self.radialtimeobjid, 0 );
        scripts\mp\objidpoolmanager::objective_set_play_outro( self.radialtimeobjid, 0 );
        scripts\mp\objidpoolmanager::objective_playermask_showtoall( self.radialtimeobjid );
        self.showworldicon = 1;
    }

    scripts\mp\gameobjects::setobjectivestatusicons( level.icontarget, level.icontarget, self.radialtimeobjid );
    var_7 = gettime() + var_4;

    while ( gettime() < var_7 )
    {
        var_8 = var_5 / var_4;
        scripts\mp\objidpoolmanager::objective_show_progress( self.radialtimeobjid, 1 );
        scripts\mp\objidpoolmanager::objective_set_progress( self.radialtimeobjid, var_8 );
        var_5 = max( var_5 - var_3, 1 );
        waitframe();
    }

    scripts\mp\objidpoolmanager::returnobjectiveid( self.radialtimeobjid );
    self.radialtimeobjid = -1;
}

hardpoint_setneutral()
{
    self notify( "_encstr_984A0DA97D0950C092EF6B615B8A91" );
    scripts\mp\gameobjects::setownerteam( "_encstr_9BA4080D39CFFB5AB7C1" );
    playhardpointneutralfx();
    thread updatechevrons( "_encstr_9BC505B4461BB2" );
}

trackgametypevips()
{
    thread cleanupgametypevips();
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level endon( "_encstr_8FBD0BBA97A04F464F80533BE4" );

    for (;;)
    {
        foreach ( var_1 in level.players )
        {
            if ( var_1 istouching( level.zone.trigger ) )
            {
                var_1 setgametypevip( 1 );
                continue;
            }

            var_1 setgametypevip( 0 );
        }

        wait 0.5;
    }
}

cleanupgametypevips()
{
    level scripts\engine\utility::_id_143A5( "_encstr_AD1D0BEF9161A06F1F684ADA39", "_encstr_8FBD0BBA97A04F464F80533BE4" );

    foreach ( var_1 in level.players )
        var_1 setgametypevip( 0 );
}

zone_onuse( var_0 )
{
    scripts\mp\objidpoolmanager::objective_set_progress( self.objidnum, 0 );
    scripts\mp\objidpoolmanager::objective_show_progress( self.objidnum, 0 );
    var_1 = var_0.team;
    var_2 = gettime();
    var_3 = [];
    var_4 = getarraykeys( self.touchlist[var_1] );

    for ( var_5 = 0; var_5 < var_4.size; var_5++ )
        var_3[var_4[var_5]] = self.touchlist[var_1][var_4[var_5]];

    if ( level.usehqrules && !level.usehprules && self.ownerteam != "_encstr_9BA4080D39CFFB5AB7C1" )
    {
        setomnvar( "_encstr_AB4910D5D2EB0DE2BEDB77DC2B93D1CA2CDA", 0 );
        level notify( "_encstr_8C9C0F90B8CD42479108E7E3A8A8290AA1" );

        foreach ( var_7 in level.players )
            scripts\mp\objidpoolmanager::objective_unpin_player( self.objidnum, var_7 );

        level.zone thread _id_1439D();
        level _encstr_A6471E8BD18667DA6837F78D098A278FA18973D35BD5B745F867A4805D20EADF::updateservericons( "_encstr_82270B4FDE3795FAB9D05A993A", 0 );

        if ( isdefined( var_3 ) )
        {
            var_9 = getarraykeys( var_3 );

            foreach ( var_11 in var_9 )
            {
                var_7 = self.assisttouchlist[var_1][var_11].player;

                if ( isdefined( var_7.owner ) )
                    var_7 = var_7.owner;

                if ( !isplayer( var_7 ) )
                    continue;

                var_7 scripts\cp\vehicles\vehicle_compass_cp::_id_12003();
            }
        }

        level thread _encstr_8C931CC06AC2B36BBB03E0C9F82E716BED927028F35FFFC8E3297834D337::give_capture_credit( var_3, var_2, var_1, undefined, var_0, self );

        if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" )
        {
            level scripts\mp\utility\dialog::statusdialog( "_encstr_ABCF15B8D96FD2074F7D0372FF320E606B3019FE6BB1E2", var_0.team );
            level scripts\mp\utility\dialog::statusdialog( "_encstr_9E010E0DE0F5ED77DCAC32D7B1DBE61D", self.ownerteam );
        }
        else
        {
            level scripts\mp\utility\dialog::statusdialog( "_encstr_ABCF15B8D96FD2074F7D0372FF320E606B3019FE6BB1E2", var_0.team );
            level scripts\mp\utility\dialog::statusdialog( "_encstr_9C3412601350E6227BEDE3258F7F09E87BB75BAB", self.ownerteam );
        }
    }
    else
    {
        if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" )
        {
            var_13 = scripts\mp\utility\teams::getteamdata( var_1, "_encstr_8875080E3685E52B93B9" );

            foreach ( var_7 in var_13 )
            {
                var_7 scripts\cp\vehicles\vehicle_compass_cp::_id_12003();
                var_7.skipspawncamera = 1;
            }
        }

        var_16 = scripts\mp\gameobjects::getownerteam();
        var_17 = scripts\mp\utility\game::getotherteam( var_1 )[0];
        scripts\mp\gameobjects::setownerteam( var_1 );

        if ( level.usehqrules && !level.usehprules )
        {
            setomnvar( "_encstr_AB4910D5D2EB0DE2BEDB77DC2B93D1CA2CDA", _encstr_8C931CC06AC2B36BBB03E0C9F82E716BED927028F35FFFC8E3297834D337::gethqownerteamvalue( self.ownerteam ) );
            setomnvar( "_encstr_A35F101B22CF9B2071CE734BD72610D3831A", scripts\mp\utility\teams::getteamdata( self.ownerteam, "_encstr_892A0BA3D3F25C4033ADD34893" ) );
        }

        if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" && !level.usehprules )
        {
            level thread _encstr_8C931CC06AC2B36BBB03E0C9F82E716BED927028F35FFFC8E3297834D337::awardcapturepoints();
            var_18 = scripts\mp\gamescore::_getteamscore( var_1 );
            var_19 = scripts\mp\gamescore::_getteamscore( var_17 );

            if ( var_18 > var_19 )
                level._id_12F0E = 1;

            binoculars_clearexpirationtimer( var_1 );
        }
        else if ( level._id_1221A )
            level scripts\mp\gamelogic::pausetimer();

        level.usestartspawns = 0;
        var_20 = 0;
        level.zone scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
        level _encstr_A6471E8BD18667DA6837F78D098A278FA18973D35BD5B745F867A4805D20EADF::updateservericons( var_1, 0 );

        if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" && !level.usehprules )
        {
            thread scripts\mp\utility\print::printandsoundoneveryone( var_1, var_17, undefined, undefined, "_encstr_A68415D97299A1880D276028C75FC6E7021ACD5D4A9279", undefined, var_0 );
            thread scripts\mp\music_and_dialog::headquarters_captured_music();
        }

        if ( !isdefined( level.lastcaptureteam ) || level.lastcaptureteam != var_1 )
        {
            if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" && !level.usehprules )
            {
                if ( isdefined( level.kothhillrotation && level.kothhillrotation == 0 ) )
                    level.delayleadtakendialog = 4;
                else
                    level.delayleadtakendialog = undefined;

                level thread delaydialogstatustoavoidcaptureoverlap( var_1, var_17 );
            }
            else
            {
                level scripts\mp\utility\dialog::statusdialog( "_encstr_ABCF15B8D96FD2074F7D0372FF320E606B3019FE6BB1E2", var_1 );
                level scripts\mp\utility\dialog::statusdialog( "_encstr_9C3412601350E6227BEDE3258F7F09E87BB75BAB", var_17 );
            }

            if ( scripts\mp\utility\game::getgametype() == "_encstr_B7D7054F3030F9" )
                level thread _encstr_A6471E8BD18667DA6837F78D098A278FA18973D35BD5B745F867A4805D20EADF::give_capture_credit( var_3, var_2, var_1, level.lastcaptureteam, var_0, self );
            else if ( scripts\mp\utility\game::getgametype() == "_encstr_BC7205C8ABFDE7" )
                level thread _encstr_9D631E0ECE6A337043A3671FD786E2FE08C7798FD20D3EA7BFE342800DF1F3EF::give_capture_credit( var_3, var_2, var_1, level.lastcaptureteam, var_0, self );
            else
                level thread _encstr_8C931CC06AC2B36BBB03E0C9F82E716BED927028F35FFFC8E3297834D337::give_capture_credit( var_3, var_2, var_1, level.lastcaptureteam, var_0, self );
        }

        foreach ( var_22 in level.players )
            showcapturedhardpointeffecttoplayer( var_1, var_22 );

        level.zone thread updatechevrons( var_1 );

        if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" )
        {
            level.zone.visuals[0] stoploopsound();
            level.zone.visuals[0] scriptmodelplayanim( "_encstr_9E55232DEE1CFAB583AF6BB41B2D3AC23997AF865CFA8D4E58A3ACEBBDE02BE67DA5916356" );

            if ( !level.usehprules )
            {
                var_24 = scripts\mp\utility\teams::getteamdata( var_1, "_encstr_8875080E3685E52B93B9" );

                foreach ( var_7 in var_24 )
                    var_7 thread _encstr_8C931CC06AC2B36BBB03E0C9F82E716BED927028F35FFFC8E3297834D337::showrespawnwarningmessage();
            }
        }

        level.hpcapteam = var_1;
        self.capturecount++;
        level.lastcaptureteam = var_1;
        level notify( "_encstr_ABC30E6A97B36DD93BB6927BC35DC801" );
        level notify( "_encstr_ABC30E6A97B36DD93BB6927BC35DC801" + var_1 );
    }

    if ( istrue( level.setplayerselfrevivingextrainfo ) )
        playfx( level.spawnoffsettacinsertmax["_encstr_A2930D6B0BD55CCFF058989F701903"], level.zone.trigger.origin + ( 0, 0, 40 ) );
}

_id_1439D()
{
    waitframe();
    scripts\mp\gameobjects::setvisibleteam( "_encstr_AABA05236DC831" );
}

zone_onusebegin( var_0 )
{
    if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" && !level.usehprules )
    {
        var_1 = scripts\mp\gameobjects::getownerteam();

        if ( var_1 != "_encstr_9BA4080D39CFFB5AB7C1" && self.claimteam != var_1 )
            binoculars_clearexpirationtimer( var_1, 1 );

        if ( !istrue( var_0.ui_dom_securing ) || !istrue( self.stalemate ) )
        {
            if ( var_1 == "_encstr_9BA4080D39CFFB5AB7C1" )
                var_0 setclientomnvar( "_encstr_8038139574D9F7694A8F08A8A78E415FE3DB079DCF", 1 );
            else
                var_0 setclientomnvar( "_encstr_8038139574D9F7694A8F08A8A78E415FE3DB079DCF", 2 );

            var_0.ui_dom_securing = 1;
        }
    }

    if ( !isdefined( self.statusnotifytime ) )
        self.statusnotifytime = gettime();

    if ( self.statusnotifytime > self.statusnotifytime + 10000 )
    {
        self.didstatusnotify = 0;
        self.statusnotifytime = gettime();
    }

    scripts\mp\gameobjects::setusetime( level.zonecapturetime );

    if ( level.zonecapturetime > 0 )
    {
        self.prevownerteam = scripts\mp\utility\game::getotherteam( var_0.team )[0];
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconlosing, level.icontaking );
    }
}

zone_onuseupdate( var_0, var_1, var_2, var_3 )
{
    var_4 = scripts\mp\gameobjects::getownerteam();

    if ( var_4 == "_encstr_9BA4080D39CFFB5AB7C1" && self.claimteam != var_4 )
        binoculars_clearexpirationtimer( self.claimteam );
    else if ( var_4 != "_encstr_9BA4080D39CFFB5AB7C1" && self.claimteam != var_4 )
        binoculars_clearexpirationtimer( var_4, 1 );
    else if ( level._id_1221A )
        level scripts\mp\gamelogic::pausetimer();

    if ( ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" || scripts\mp\utility\game::getgametype() == "_encstr_BD19047616EB" ) && var_1 < 1.0 && !level.usehprules && !level.gameended )
        playcapturesound( var_1, var_0 );

    var_4 = scripts\mp\gameobjects::getownerteam();
    var_5 = scripts\mp\utility\game::getotherteam( var_0 )[0];

    if ( var_1 > 0.05 && var_2 && !self.didstatusnotify )
    {
        if ( var_4 == "_encstr_9BA4080D39CFFB5AB7C1" )
        {
            scripts\mp\utility\dialog::statusdialog( "_encstr_8BAD1628B286A879FA4913522FD53FB7630B40801884F521", var_0 );
            scripts\mp\utility\dialog::statusdialog( "_encstr_8AF313129B3817C62041C5CA13B80F9F5D305ACA02", var_5 );
        }
        else if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" )
        {
            scripts\mp\utility\dialog::statusdialog( "_encstr_B915160D83F5235ADC2C31364B37ECD799392D597323B1BC", var_4 );
            scripts\mp\utility\dialog::statusdialog( "_encstr_B99B131A837D1996B9B013C6A5E6B3EBCA3759D6E5", var_0 );
        }
        else
        {
            scripts\mp\utility\dialog::statusdialog( "_encstr_8AF313129B3817C62041C5CA13B80F9F5D305ACA02", var_4 );
            scripts\mp\utility\dialog::statusdialog( "_encstr_8BAD1628B286A879FA4913522FD53FB7630B40801884F521", var_0 );
        }

        self.didstatusnotify = 1;
    }
}

delaydialogstatustoavoidcaptureoverlap( var_0, var_1 )
{
    wait 0.5;
    level scripts\mp\utility\dialog::statusdialog( "_encstr_9CC0144338FA9B59B1AB93CA8CEB994ED2CADC4663E5", var_0 );
    level scripts\mp\utility\dialog::statusdialog( "_encstr_9C3412601350E6227BEDE3258F7F09E87BB75BAB", var_1 );
}

playcapturesound( var_0, var_1 )
{
    if ( !isdefined( self.lastsfxplayedtime ) )
        self.lastsfxplayedtime = gettime();

    if ( self.lastsfxplayedtime + 995 < gettime() )
    {
        self.lastsfxplayedtime = gettime();
        var_2 = "_encstr_A40101";
        var_0 = int( floor( var_0 * 10 ) );
        var_2 = "_encstr_B66B18F05B276528151787FB403BB036A712093E83172ED0A150" + var_0;
        self.visuals[0] playsoundtoteam( var_2, var_1 );
    }
}

zone_onuseend( var_0, var_1, var_2 )
{
    var_3 = level.zone scripts\mp\gameobjects::getownerteam();

    if ( !var_2 )
    {
        if ( scripts\mp\utility\game::getgametype() == "_encstr_BA07038803" )
        {
            if ( level.usehprules )
            {
                if ( level._id_1221A )
                    level scripts\mp\gamelogic::resumetimer();
            }
            else if ( var_3 != "_encstr_9BA4080D39CFFB5AB7C1" )
                binoculars_clearexpirationtimer( var_3 );
        }
        else if ( level._id_1221A )
            level scripts\mp\gamelogic::resumetimer();
    }

    if ( isplayer( var_1 ) )
    {
        var_1 setclientomnvar( "_encstr_8038139574D9F7694A8F08A8A78E415FE3DB079DCF", 0 );
        var_1.ui_dom_securing = undefined;
    }

    if ( var_3 == "_encstr_9BA4080D39CFFB5AB7C1" )
    {
        level.zone scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral );

        if ( istrue( level.usehpzonebrushes ) )
        {
            foreach ( var_1 in level.players )
                level.zone showzoneneutralbrush( var_1 );
        }
    }
    else
    {
        level.zone scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );

        foreach ( var_1 in level.players )
            level.zone showcapturedhardpointeffecttoplayer( var_3, var_1 );
    }
}

zone_onunoccupied()
{
    if ( level.usehqrules && !level.usehprules && self.ownerteam != "_encstr_9BA4080D39CFFB5AB7C1" )
    {
        level.zone scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
        binoculars_clearexpirationtimer( self.ownerteam );
    }
    else
    {
        level notify( "_encstr_8C9C0F90B8CD42479108E7E3A8A8290AA1" );
        level.hpcapteam = "_encstr_9BA4080D39CFFB5AB7C1";

        if ( level._id_1221A )
            level scripts\mp\gamelogic::resumetimer();

        var_0 = 1;

        foreach ( var_2 in level.teamnamelist )
        {
            if ( self.numtouching[var_2] > 0 )
            {
                var_0 = 0;
                break;
            }
        }

        if ( var_0 )
        {
            level.zone.wasleftunoccupied = 1;
            level _encstr_A6471E8BD18667DA6837F78D098A278FA18973D35BD5B745F867A4805D20EADF::updateservericons( "_encstr_9BA4080D39CFFB5AB7C1", 0 );
            level.zone scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral );
            level.zone playhardpointneutralfx();
            level.zone thread updatechevrons( "_encstr_9BC505B4461BB2" );
        }
    }
}

zone_oncontested()
{
    if ( level._id_1221A )
        level scripts\mp\gamelogic::resumetimer();

    self.hostvictimoverride = gettime();
    var_0 = level.zone scripts\mp\gameobjects::getownerteam();
    level.zone scripts\mp\gameobjects::setobjectivestatusicons( level.iconcontested );
    level _encstr_A6471E8BD18667DA6837F78D098A278FA18973D35BD5B745F867A4805D20EADF::updateservericons( var_0, 1 );
    level.zone thread updatechevrons( "_encstr_BD5C0ACEA59A91D903BB4878" );

    foreach ( var_2 in level.teamnamelist )
    {
        if ( self.touchlist[var_2].size )
        {
            var_3 = self.touchlist[var_2];
            var_4 = getarraykeys( var_3 );

            for ( var_5 = 0; var_5 < var_4.size; var_5++ )
            {
                var_6 = var_3[var_4[var_5]].player;
                var_6 setclientomnvar( "_encstr_8038139574D9F7694A8F08A8A78E415FE3DB079DCF", 3 );
            }
        }
    }

    foreach ( var_6 in level.players )
        level.zone showcapturedhardpointeffecttoplayer( var_0, var_6 );

    if ( var_0 == "_encstr_9BA4080D39CFFB5AB7C1" )
        var_10 = self.claimteam;
    else
        var_10 = var_0;

    foreach ( var_12 in level.teamnamelist )
        scripts\mp\utility\dialog::statusdialog( "_encstr_A25E0D3A38076E0F609DC5EBB529EB", var_12 );

    level.zone thread scripts\common\utility::_id_13E0A( level._id_11B29, "_encstr_98D40FB3F8FD9ABFD130B2E3893BBB6F0C", level.zone.trigger.origin );
    self.didstatusnotify = 1;
}

zone_onuncontested( var_0 )
{
    if ( level._id_1221A )
        level scripts\mp\gamelogic::pausetimer();

    var_1 = level.zone scripts\mp\gameobjects::getownerteam();

    if ( var_0 == "_encstr_AABA05236DC831" || var_1 == "_encstr_9BA4080D39CFFB5AB7C1" )
    {
        level.zone scripts\mp\gameobjects::setobjectivestatusicons( level.iconneutral );

        if ( istrue( level.usehpzonebrushes ) )
        {
            foreach ( var_3 in level.players )
                level.zone showzoneneutralbrush( var_3 );
        }

        level.zone thread scripts\common\utility::_id_13E0A( level._id_11B29, "_encstr_82830BA87AF5291E6F6D3F3561", level.zone.trigger.origin );
    }
    else
    {
        if ( scripts\mp\utility\game::getgametype() == "_encstr_B7D7054F3030F9" )
        {
            scripts\mp\utility\sound::playsoundonplayers( "_encstr_80DB1F4A933003FE3879C8AF1BA0C397462913639B7ECF777979DFBB33584CEBFD", var_1 );
            scripts\mp\utility\sound::playsoundonplayers( "_encstr_82371FD6C1EB340B9346C1B7D2B91DAFD82CC147BAC95632BE732B9D0B1D2D9D56", scripts\mp\utility\game::getotherteam( var_1 )[0] );
        }
        else if ( scripts\mp\utility\game::getgametype() == "_encstr_BC7205C8ABFDE7" )
        {
            scripts\mp\utility\sound::playsoundonplayers( "_encstr_87FE1EB583BEC89CDE07D3DB73B2AF8D0B07A3BAC995237D07F6E6D21D5A9D95", var_1 );
            scripts\mp\utility\sound::playsoundonplayers( "_encstr_8F881E558930E1EB1D0AE0CF5D8771EFE908939BDBF81DFFEA5BD839F3A83BD7", scripts\mp\utility\game::getotherteam( var_1 )[0] );
        }

        level.zone scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );

        foreach ( var_3 in level.players )
            level.zone showcapturedhardpointeffecttoplayer( var_1, var_3 );

        level.zone thread scripts\common\utility::_id_13E0A( level._id_11B29, "_encstr_A65E1194CB70AD693B28D7871D9BA073E515D9", level.zone.trigger.origin );
    }

    var_7 = ( gettime() - self.hostvictimoverride ) * 0.001;
    scripts\mp\utility\game::_id_119AC( undefined, undefined, "_encstr_B2830FD0A830253E96EF93F3D3B6439DC8", level.zone.trigger.origin, var_7 + "_encstr_AA6909408748BED758F94B" );
    self.hostvictimoverride = undefined;
    var_8 = scripts\engine\utility::ter_op( var_1 == "_encstr_9BA4080D39CFFB5AB7C1", "_encstr_9BC505B4461BB2", var_1 );
    level.zone thread updatechevrons( var_8 );
    level _encstr_A6471E8BD18667DA6837F78D098A278FA18973D35BD5B745F867A4805D20EADF::updateservericons( var_1, 0 );
    self.didstatusnotify = 0;
}

_id_1471E( var_0 )
{
    binoculars_clearexpirationtimer( var_0 );
}

zone_stompprogressreward( var_0 )
{
    var_0 thread scripts\mp\rank::scoreeventpopup( "_encstr_8C0C07812DDF6808AB" );
    var_0 thread scripts\mp\awards::givemidmatchaward( "_encstr_B3D80EB6ED91567DE17D91B2CC95CD23" );
    scripts\mp\gameobjects::setobjectivestatusicons( level.icondefending, level.iconcapture );
}

zone_onpinnedstate( var_0 )
{
    if ( self.ownerteam != "_encstr_9BA4080D39CFFB5AB7C1" && self.numtouching[self.ownerteam] && !self.stalemate )
        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefending, level.iconcapture );
}

zone_onunpinnedstate( var_0 )
{
    if ( self.ownerteam != "_encstr_9BA4080D39CFFB5AB7C1" && !self.numtouching[self.ownerteam] && !self.stalemate )
        scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
}

binoculars_clearexpirationtimer( var_0, var_1 )
{
    if ( !level._id_1221A )
        return;

    var_2 = scripts\mp\gamescore::_getteamscore( var_0 );
    var_3 = scripts\mp\gamescore::_getteamscore( scripts\mp\utility\game::getotherteam( var_0 )[0] );

    if ( istrue( var_1 ) )
    {
        if ( var_3 > var_2 )
            level scripts\mp\gamelogic::resumetimer();
        else
            level scripts\mp\gamelogic::pausetimer();
    }
    else if ( var_2 > var_3 )
        level scripts\mp\gamelogic::resumetimer();
    else
        level scripts\mp\gamelogic::pausetimer();
}

setcrankedtimerzonecap( var_0 )
{
    if ( isdefined( level.supportcranked ) && level.supportcranked && isdefined( var_0.cranked ) && var_0.cranked )
        var_0 scripts\mp\cranked::setcrankedplayerbombtimer( "_encstr_A9BD0716B96E4BCDE8" );
}

playhardpointneutralfx()
{
    if ( istrue( level.usehpzonebrushes ) )
    {
        foreach ( var_1 in level.players )
            showzoneneutralbrush( var_1 );
    }
}

showcapturedhardpointeffecttoplayer( var_0, var_1 )
{
    var_2 = var_1.team;
    var_3 = var_1 ismlgspectator();

    if ( var_3 )
    {
        if ( var_1 disablereloading() || var_1 setmlgmessagesent() )
            var_2 = "_encstr_BC850785638DA59537";
        else
            var_2 = var_1 getmlgspectatorteam();
    }

    if ( istrue( level.usehpzonebrushes ) )
    {
        if ( level.zone.stalemate )
            showzonecontestedbrush( var_1 );
        else if ( var_2 == var_0 )
            showzonefriendlybrush( var_1 );
        else
            showzoneenemybrush( var_1 );
    }
}

showzoneneutralbrush( var_0 )
{
    level.zone.friendlybrush hidefromplayer( var_0 );
    level.zone.enemybrush hidefromplayer( var_0 );
    level.zone.contestedbrush hidefromplayer( var_0 );
    level.zone.neutralbrush showtoplayer( var_0 );
}

showzonefriendlybrush( var_0 )
{
    level.zone.friendlybrush showtoplayer( var_0 );
    level.zone.enemybrush hidefromplayer( var_0 );
    level.zone.contestedbrush hidefromplayer( var_0 );
    level.zone.neutralbrush hidefromplayer( var_0 );
}

showzoneenemybrush( var_0 )
{
    level.zone.friendlybrush hidefromplayer( var_0 );
    level.zone.enemybrush showtoplayer( var_0 );
    level.zone.contestedbrush hidefromplayer( var_0 );
    level.zone.neutralbrush hidefromplayer( var_0 );
}

showzonecontestedbrush( var_0 )
{
    level.zone.friendlybrush hidefromplayer( var_0 );
    level.zone.enemybrush hidefromplayer( var_0 );
    level.zone.contestedbrush showtoplayer( var_0 );
    level.zone.neutralbrush hidefromplayer( var_0 );
}

hideplayerspecificbrushes( var_0 )
{
    self.friendlybrush hidefromplayer( var_0 );
    self.enemybrush hidefromplayer( var_0 );
    self.neutralbrush hidefromplayer( var_0 );
    self.contestedbrush hidefromplayer( var_0 );
}

onplayerjoinedteam( var_0 )
{
    if ( var_0.team != "_encstr_A68C0A5803A5D151A2B310A6" && level.zone.ownerteam != "_encstr_9BA4080D39CFFB5AB7C1" )
        level.zone showcapturedhardpointeffecttoplayer( level.zone.ownerteam, var_0 );
}

_id_12BFF( var_0, var_1 )
{
    var_2 = [];
    var_3 = [];

    switch ( level.mapname )
    {
        case "_encstr_B1110BDDD007984FF3EB671D71":
            var_3["_encstr_AF4C02EA"] = [ ( -564, 1848, 24 ) ];
            var_3["_encstr_9B4C028A"] = [ ( -1314, 440, 24 ), ( -1362, 816, 24 ) ];
            break;
        case "_encstr_B7FF08B607EB1B853BCA":
        case "_encstr_94020B5F680693E2154DD156A1":
            var_3["_encstr_A94C0242"] = [ ( -692, 1828, 42 ), ( -300, 1548, 76 ) ];
            break;
        case "_encstr_AF89088A6177FB3F82EC":
            var_3["_encstr_AB4C02E0"] = [ ( 688, 256, 280 ) ];
            var_3["_encstr_9407030723"] = [ ( 212, 1436, 338 ) ];
            break;
        case "_encstr_AA1D0948FAB7A85DD37FE9":
            var_3["_encstr_A14C027A"] = [ ( -1230.29, -25.4772, 240.125 ) ];
            break;
        default:
            break;
    }

    if ( isdefined( var_3[var_1] ) )
    {
        foreach ( var_5 in var_0 )
        {
            foreach ( var_7 in var_3[var_1] )
            {
                if ( distance( var_5.origin, var_7 ) < 10 )
                {
                    var_2[var_2.size] = var_5;
                    break;
                }
            }
        }
    }

    var_0 = scripts\engine\utility::array_remove_array( var_0, var_2 );
    return var_0;
}

_id_12806( var_0, var_1 )
{
    var_2 = [];
    var_3 = [];

    switch ( level.mapname )
    {
        case "_encstr_B1110BDDD007984FF3EB671D71":
            var_2["_encstr_AF4C02EA"] = [];
            var_2["_encstr_AF4C02EA"][0] = [ ( -564, 1880, 24 ), ( 0, 180, 0 ) ];
            var_2["_encstr_AF4C02EA"][1] = [ ( -564, 1976, 24 ), ( 0, 180, 0 ) ];
            var_2["_encstr_AF4C02EA"][2] = [ ( -564, 2072, 24 ), ( 0, 180, 0 ) ];
            var_2["_encstr_9B4C028A"] = [];
            var_2["_encstr_9B4C028A"][0] = [ ( -1314, 472, 24 ), ( 0, 180, 0 ) ];
            var_2["_encstr_9B4C028A"][1] = [ ( -1314, 568, 24 ), ( 0, 180, 0 ) ];
            var_2["_encstr_9B4C028A"][2] = [ ( -1474, 816, 24 ), ( 0, 270, 0 ) ];
            var_2["_encstr_9B4C028A"][3] = [ ( -1378, 816, 24 ), ( 0, 270, 0 ) ];
            var_2["_encstr_B94C02A9"] = [];
            var_2["_encstr_B94C02A9"][0] = [ ( -1298, 1992, 24 ), ( 0, 180, 0 ) ];
            var_2["_encstr_B94C02A9"][1] = [ ( -1400, 2262, 24 ), ( 0, 270, 0 ) ];
            var_2["_encstr_B94C02A9"][2] = [ ( -1690, 2264, 24 ), ( 0, 270, 0 ) ];
            break;
        case "_encstr_ABD70CF89341513127CC92B7AE5F":
            var_2["_encstr_9B4C028A"] = [];
            var_2["_encstr_9B4C028A"][0] = [ ( 436, 3435, 207.694 ), ( 0, 360, 0 ) ];
            var_2["_encstr_9B4C028A"][1] = [ ( 436, 3188, 247.694 ), ( 0, 360, 0 ) ];
            var_2["_encstr_9B4C028A"][2] = [ ( 436, 3098, 258.694 ), ( 0, 360, 0 ) ];
            var_2["_encstr_9B4C028A"][3] = [ ( 1051, 2796, 304 ), ( 0, 117.509, 0 ) ];
            var_2["_encstr_9B4C028A"][4] = [ ( 931, 2680, 304 ), ( 0, 147.509, 0 ) ];
            var_2["_encstr_9B4C028A"][5] = [ ( 515, 3522, 215 ), ( 0, 276, 0 ) ];
            var_2["_encstr_A20703E7F2"] = [];
            var_2["_encstr_A20703E7F2"][0] = [ ( -400, 651, 436 ), ( 0, 180, 0 ) ];
            var_2["_encstr_A20703E7F2"][1] = [ ( -400, 557, 439 ), ( 0, 180, 0 ) ];
            var_2["_encstr_A20703E7F2"][2] = [ ( -400, 461, 446 ), ( 0, 180, 0 ) ];
            var_2["_encstr_A20703E7F2"][3] = [ ( -410, -65, 446 ), ( 0, 180, 0 ) ];
            var_2["_encstr_A20703E7F2"][4] = [ ( -408, 31, 448 ), ( 0, 180, 0 ) ];
            break;
        case "_encstr_AF89088A6177FB3F82EC":
            var_2["_encstr_BD4C02AB"] = [];
            var_2["_encstr_BD4C02AB"][0] = [ ( -3118.59, 230.46, 292 ), ( 0, 0, 0 ) ];
            var_2["_encstr_AB4C02E0"] = [];
            var_2["_encstr_AB4C02E0"][0] = [ ( 688, 256, 295 ), ( 0, 270, 0 ) ];
            var_2["_encstr_AB4C02E0"][1] = [ ( 749, 248, 295 ), ( 0, 270, 0 ) ];
            var_2["_encstr_A20703E7F2"] = [];
            var_2["_encstr_A20703E7F2"][0] = [ ( -1490.62, -972.979, 422 ), ( 0, 90, 0 ) ];
            var_2["_encstr_9D07039A4E"] = [];
            var_2["_encstr_9D07039A4E"][0] = [ ( -1695.67, 3211.7, 310 ), ( 0, 270, 0 ) ];
            var_2["_encstr_9D07039A4E"][1] = [ ( -1804.59, 3219.27, 284 ), ( 0, 270, 0 ) ];
            var_2["_encstr_9407030723"] = [];
            var_2["_encstr_9407030723"][0] = [ ( 260, 1416, 338 ), ( 0, 90, 0 ) ];
            break;
        case "_encstr_B7FF08B607EB1B853BCA":
        case "_encstr_94020B5F680693E2154DD156A1":
            var_2["_encstr_A94C0242"] = [];
            var_2["_encstr_A94C0242"][0] = [ ( -514, 1328, 32 ), ( 0, 100, 0 ) ];
            var_2["_encstr_A94C0242"][1] = [ ( -692, 1828, 42 ), ( 0, 260, 0 ) ];
            var_2["_encstr_A94C0242"][2] = [ ( -564, 1804, 44 ), ( 0, 260, 0 ) ];
            var_2["_encstr_A94C0242"][3] = [ ( -500, 1788, 54 ), ( 0, 260, 0 ) ];
            var_2["_encstr_A94C0242"][4] = [ ( -312, 1528, 78 ), ( 0, 145, 0 ) ];
            break;
        case "_encstr_AB570E0D67B6FB0E9710A26AF89746A7":
        case "_encstr_944B10ED4796DB2EB730820A98F760B76B25":
            var_2["_encstr_AB4C02E0"] = [];
            var_2["_encstr_AB4C02E0"][0] = [ ( 994.552, 1760.12, 44 ), ( 0, 270, 0 ) ];
            var_2["_encstr_AA4C024B"] = [];
            var_2["_encstr_AA4C024B"][0] = [ ( 1322, -407.18, 29.184 ), ( 0, 90, 0 ) ];
            break;
        case "_encstr_B3FB0A309BE727E0D4F143A9":
            var_2["_encstr_9D07039A4E"] = [];
            var_2["_encstr_9D07039A4E"][0] = [ ( 1995.79, 394.828, 424 ), ( 0, 270, 0 ) ];
            break;
        case "_encstr_AA1D0948FAB7A85DD37FE9":
            var_2["_encstr_A14C027A"] = [];
            var_2["_encstr_A14C027A"][0] = [ ( -1231.9, -132.317, 183.246 ), ( 0, 90, 0 ) ];
            break;
        default:
            break;
    }

    if ( isdefined( var_2[var_1] ) )
    {
        foreach ( var_5 in var_2[var_1] )
        {
            var_6 = var_5[0];
            var_7 = var_5[1];
            var_8 = easepower( "_encstr_AD65120D2CE4231CBD4B37D1AFB11AB23B93DB37", var_6, var_7 );
            var_3[var_3.size] = var_8;
        }
    }

    var_0 = scripts\engine\utility::array_combine( var_0, var_3 );
    return var_0;
}

init_vo_arrays( var_0, var_1, var_2 )
{
    var_0.origin = var_1;
    var_0.angles = var_2;
    return var_0;
}

_id_144DA()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level endon( "_encstr_8CFA16373ADE07AFEE168E8D865ADCECAFD14E4BD99D2B93" );
    var_0 = self.entnum;
    self.trigger scripts\engine\utility::trigger_on();

    foreach ( var_2 in level.teamnamelist )
    {
        self.playerzombiedelayturnonfx[var_2] = 0;
        self.playerzombiedestroyhud[var_2] = [];
    }

    self.playerzombiedelayturnonfx["_encstr_9BA4080D39CFFB5AB7C1"] = 0;
    self.playerzombiedestroyhud["_encstr_9BA4080D39CFFB5AB7C1"] = [];
    self.playerzombiedestroyhud["_encstr_AABA05236DC831"] = [];
    self.getinventoryslotvo = 1;

    for (;;)
    {
        self.trigger waittill( "_encstr_8B5C081B58E0B7A213E6", var_4 );

        if ( !scripts\mp\utility\player::isreallyalive( var_4 ) )
            continue;

        if ( isagent( var_4 ) )
            continue;

        if ( !scripts\mp\utility\entity::isgameparticipant( var_4 ) )
            continue;

        if ( istrue( var_4.inlaststand ) )
            continue;

        if ( isdefined( var_4.classname ) && var_4.classname == "_encstr_AB440F9BD8932D071DAFB3CA435A3663B2" )
            continue;

        if ( !isdefined( var_4.initialized_gameobject_vars ) )
            continue;

        var_5 = scripts\mp\gameobjects::getrelativeteam( var_4.pers["_encstr_89EF05D46BA8FD"] );

        if ( isdefined( self.teamusetimes[var_5] ) && self.teamusetimes[var_5] < 0 )
            continue;

        if ( scripts\mp\utility\player::isreallyalive( var_4 ) && !isdefined( var_4.touchtriggers[var_0] ) )
        {
            var_2 = var_4.pers["_encstr_89EF05D46BA8FD"];
            self.playerzombiedelayturnonfx[var_2]++;
            var_6 = var_4.guid;
            var_7 = spawnstruct();
            var_7.player = var_4;
            var_7.starttime = gettime();
            self.playerzombiedestroyhud[var_2][var_6] = var_7;
            var_4.spawn_sentry_at_pos = 0;
        }

        if ( scripts\mp\utility\player::isreallyalive( var_4 ) && !isdefined( var_4.touchtriggers[var_0] ) )
            var_4 thread playerzombiedovehicledamageimmunity( self );
    }
}

playerzombiedovehicledamageimmunity( var_0 )
{
    level endon( "_encstr_8CFA16373ADE07AFEE168E8D865ADCECAFD14E4BD99D2B93" );
    var_1 = self.pers["_encstr_89EF05D46BA8FD"];

    while ( scripts\mp\utility\player::isreallyalive( self ) && isdefined( var_0.trigger ) && self istouching( var_0.trigger ) && !level.gameended )
    {
        if ( isdefined( var_0.checkinteractteam ) && var_0.team != var_1 )
            break;

        if ( istrue( self.inlaststand ) )
            break;

        if ( isdefined( var_0.interactsquads ) && !isdefined( var_0.interactsquads[self.team] ) || isdefined( var_0.interactsquads ) && !scripts\engine\utility::array_contains( var_0.interactsquads[self.team], self.squadindex ) )
            break;

        waitframe();
    }

    if ( level.gameended )
        return;

    if ( isdefined( self ) )
    {
        var_0.playerzombiedestroyhud[var_1][self.guid] = undefined;
        self.spawn_sentry_at_pos = 0;
    }
    else
    {
        var_2 = [];

        foreach ( var_5, var_4 in var_0.playerzombiedestroyhud[var_1] )
        {
            if ( !isdefined( var_4.player ) )
                var_2[var_2.size] = var_5;
        }

        foreach ( var_5 in var_2 )
            var_0.playerzombiedestroyhud[var_1][var_5] = undefined;
    }

    var_0.playerzombiedelayturnonfx[var_1]--;
}
