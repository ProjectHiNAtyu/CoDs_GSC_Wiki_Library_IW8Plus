// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    var_0 = spawnstruct();
    level.btm = var_0;

    if ( getdvar( "_encstr_9E700851BEE33DF1B547" ) == "_encstr_8A510E519897A1332E4A3898E243F5B9" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_1[0] = scripts\mp\utility\game::getgametype();
    var_1[1] = "_encstr_957B0A886F934BCA0F8022FB";
    var_1[2] = "_encstr_A919048E91AD";
    var_1[3] = "_encstr_BA07038803";
    var_1[4] = "_encstr_9318045AFDDD";
    var_1[5] = "_encstr_BD07030251";
    var_1[6] = "_encstr_889A09E530F7E918279537";
    var_1[7] = "_encstr_A85908F249E84E372DEB";
    scripts\mp\gameobjects::main( var_1 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 300 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 300 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    updategametypedvars();
    level.scoreperplayer = undefined;
    level.teambased = 1;
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.getspawnpoint = ::getspawnpoint;
    level.modeonspawnplayer = ::onspawnplayer;
    level.onplayerkilled = ::onplayerkilled;
    level.onteamscore = ::onteamscore;
    level.onnormaldeath = ::onnormaldeath;
    level.lastcaptime = gettime();
    level.alliescapturing = [];
    level.axiscapturing = [];
    level.lastcaptureteam = undefined;
    level.previousclosespawnent = undefined;
    level.kothmode = 0;
    level.hqautodestroytime = 60;
    level.promode = 1;
    level.extradelay = 1;
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_B90E1376B0AD5647CB0ECAD71AC22719C1B7D2B9A3";

    if ( getdvarint( "_encstr_B8020A9E9AA69A6292517AA0" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_891904A1D8BE" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_93570B93F4A9629272A825B426" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_889708C9D0E7EBE819D9" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_B4050C8B3E9A11DD626FD1CBDB5A" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_B81804D2C101" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_A61805573F9318" + scripts\mp\utility\game::getgametype() + "_encstr_9EB909B928022745805102" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] + "_encstr_934305E6126268";

    game["_encstr_B8DA073D799798C7C7"]["_encstr_B8C30DA1CFF70D476FE78C6F8DF3DD"] = "_encstr_B8C30DA1CFF70D476FE78C6F8DF3DD";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_95260BFB08D81A89693754CFA8"] = "_encstr_95260BFB08D81A89693754CFA8";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_8B850A2AE0B99BC178FF5B44"] = "_encstr_9E7D0F98DED698D72B7359ADBCBDBB73DC";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B9A10DD145CDB008EA27752B0782ED"] = "_encstr_B9A10DD145CDB008EA27752B0782ED";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_973D0D13EDAD13EBC1D8C29BA32B91"] = "_encstr_973D0D13EDAD13EBC1D8C29BA32B91";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_98920D450E453F191976AF77C17142"] = "_encstr_B4D50DC95DE59820C2236B73574977";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9E920DEF8057054BC1E10AF0C2D742"] = "_encstr_80D50D89BD5B89D72B9B95DAE5AF98";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3E613CAB956B62FAF4CF6DA89EB912B6657E6CA32"] = "_encstr_BA0612823F887E975D38AAD22225B7B790AF3D0C";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_81B513CD23B9F0B371FBB55B76A80B10817E0B05E5"] = "_encstr_B7AF12C4DBD689D72BE62BB55EC163C237E8AC23";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9E240C10CE33016D6AEA39B0F244"] = "_encstr_A6980D1A5A371DF5B59636630B1BB1";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3420C3D576AC3C8736F09906BB2"] = "_encstr_A6980D1A5A371DF5B59636630B1BB1";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_82CF0EC793BAB0234DF2BB739D297055"] = "_encstr_82CF0EC793BAB0234DF2BB739D297055";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B4150DDE894DF5D816E0E85DE45923"] = "_encstr_B4150DDE894DF5D816E0E85DE45923";
    level._effect["_encstr_9BB20F6B38F9D1CF5042AF9B6B3973E669"] = loadfx( "_encstr_A9162956EDE0ED5716992B13E1EEB3B20253E8F777C085673F9022DB804403A829177D5BEFE8CC27E829EA" );
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "_encstr_A491156EC69CBE98E8DAF54FBDE69589A53359D12DB695", getmatchrulesdata( "_encstr_8B0B09AAC55BC99D71DB08", "_encstr_AB550D1AE890CF458378127B78F347" ) );
    setdynamicdvar( "_encstr_B89C18A3887559030BC9270AD090C796FBA85B5B6823C367AD25", getmatchrulesdata( "_encstr_8B0B09AAC55BC99D71DB08", "_encstr_A4CE10EA521B2D81CEE0616B0A37C1E3FF6A" ) );
    setdynamicdvar( "_encstr_B9AC1CCD364EEB2647D6EB3DDBE6B205C68E969D588E4BDEB922CA63852F", getmatchrulesdata( "_encstr_8B0B09AAC55BC99D71DB08", "_encstr_B34B147AED56109F729B83B5E72BC3F8FE8F01309699" ) );
    setdynamicdvar( "_encstr_9C901C6A4F5D771AF35FD90BD205D7104D49E7EEB7815BA76A575559E736", getmatchrulesdata( "_encstr_8B0B09AAC55BC99D71DB08", "_encstr_979F1493857391ED5B62EDB10B47B4F6737A9C23569C" ) );
    setdynamicdvar( "_encstr_8BC918BB0F58195BED7011FA79CDAF0B68DD2503A7081A3F9829", getmatchrulesdata( "_encstr_8B0B09AAC55BC99D71DB08", "_encstr_939C10162319D21D9667AC35C6DE9C96B9D9" ) );
    setdynamicdvar( "_encstr_81281243179D8EF37D629FB1B1032A236CA8C763", getmatchrulesdata( "_encstr_8B0B09AAC55BC99D71DB08", "_encstr_82FE0AEBC1553FAF59D36575" ) );
    setdynamicdvar( "_encstr_ABC3144BA7C370962CB5593BC261E8A2C0C912733562", getmatchrulesdata( "_encstr_8B0B09AAC55BC99D71DB08", "_encstr_9D210C2D459309DB3AF230881ACA" ) );
    setdynamicdvar( "_encstr_9EF213A2E962292E689B2F7BE3524871CEB829C5B3", getmatchrulesdata( "_encstr_8B0B09AAC55BC99D71DB08", "_encstr_822F0B5D6ECA211592D5B12B6E" ) );
    setdynamicdvar( "_encstr_BE16133BF60B3FA6D158D91398D3DB43616DBCA113", getmatchrulesdata( "_encstr_9785091D3F72ED9579C30B", "_encstr_A2A10B53E0A383E3DDFD24218B" ) );
    setdynamicdvar( "_encstr_9BD113FF287B671AA9F199CCE5A702C821901B6B88", getmatchrulesdata( "_encstr_8A970898E8B51116E816", "_encstr_9B1D0BA9AEB3EC12592C63A31A" ) );
    setdynamicdvar( "_encstr_9ED317B307501143F578294243449FD2A0FB4C2B89C8242715", getmatchrulesdata( "_encstr_8A970898E8B51116E816", "_encstr_B9210F9AEAECEC35EE5A1DC6D0A2B4B656" ) );
    setdynamicdvar( "_encstr_A9651213491E57B690E31F38B15B3EBF4A23EADA", getmatchrulesdata( "_encstr_8A970898E8B51116E816", "_encstr_A1DC0A58C9707EFF1293323A" ) );
    setdynamicdvar( "_encstr_89D71282AE22C78BDBAA1F5AE8D0773018786FBF", getmatchrulesdata( "_encstr_8A970898E8B51116E816", "_encstr_89460A333B979040BC5DEFD7" ) );
    setdynamicdvar( "_encstr_BC7916AF2BDAB90EEBE2C62B1BBF325037870F1DDAC3B0C4", getmatchrulesdata( "_encstr_8A970898E8B51116E816", "_encstr_823C0EFBD0F0E45521B7257004C892F7" ) );
    setdynamicdvar( "_encstr_97C2126EB193F5B57B8E1ABE0D858D99D1A5ADCA", 0 );
    scripts\mp\utility\game::registerhalftimedvar( "_encstr_B7D7054F3030F9", 0 );
}

onstartgametype()
{
    if ( !isdefined( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] ) )
        game["_encstr_A6D60EE09BF413B9945185CB4797C583"] = 0;

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
    {
        var_0 = game["_encstr_941C0A6AF345075ED05BEAD3"];
        var_1 = game["_encstr_95A70AA81FEE295D3A2F56DE"];
        game["_encstr_941C0A6AF345075ED05BEAD3"] = var_1;
        game["_encstr_95A70AA81FEE295D3A2F56DE"] = var_0;
    }

    level._effect["_encstr_BC8C0F6E4023DA5FA9C8D3AB584351B28D"] = loadfx( "_encstr_9BCE34EB333A17AAAF5B990D673702E120B01F07E871DF63D5139182C5538BABE8F9ABFF08C9DB5A19A5E97F3D5FA362D0A02213C822" );

    foreach ( var_3 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_3, &"_encstr_BAE0103D214915D08A94B215355E5AA72A90" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"_encstr_BAE0103D214915D08A94B215355E5AA72A90" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"_encstr_8B8E164F6053E76BB3EC3ED1B606970591A02786A78749DD" );

        scripts\mp\utility\game::setobjectivehinttext( var_3, &"_encstr_9FE015D321498AD0A252B2516ACB5A7A2A84F58452392A" );
    }

    setclientnamemode( "_encstr_95900C2EDBD01F99D6B1DFEB878D" );
    level.objectives = [];
    thread objectiveselectorsetup();
    setupradios();
    setupbtmflags();
    thread dommainloop();
    thread hqmainloop();
    level thread waittospawnvip();
    level thread waittospawnjuggcrate();
    level thread waittospawnbtmbombs();
    setmapsizespawnconsts();
    initspawns();
    seticonnames();
    setupwaypointicons();
    level.usedomflag = 0;
    setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", 0 );
    setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", -1 );
}

updategametypedvars()
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::updatecommongametypedvars();
    level.zoneduration = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_AB550D1AE890CF458378127B78F347", 60, 0, 300 );
    level.zonecapturetime = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_A4CE10EA521B2D81CEE0616B0A37C1E3FF6A", 0, 0, 30 );
    level.zoneactivationdelay = 30;
    level.zonerandomlocationorder = scripts\mp\utility\dvars::dvarintvalue( "_encstr_979F1493857391ED5B62EDB10B47B4F6737A9C23569C", 0, 0, 1 );
    level.zoneadditivescoring = scripts\mp\utility\dvars::dvarintvalue( "_encstr_939C10162319D21D9667AC35C6DE9C96B9D9", 0, 0, 1 );
    level.pausescoring = scripts\mp\utility\dvars::dvarintvalue( "_encstr_82FE0AEBC1553FAF59D36575", 1, 0, 1 );
    level.delayplayer = scripts\mp\utility\dvars::dvarintvalue( "_encstr_9D210C2D459309DB3AF230881ACA", 1, 0, 1 );
    level.spawndelay = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_A2A10B53E0A383E3DDFD24218B", 5, 0, 30 );
    level.usehqrules = 1;
    level.flagcapturetime = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_A6BB1009B968DFBE478AD4DB160751D26AAF", 10, 0, 30 );
    level.flagsrequiredtoscore = scripts\mp\utility\dvars::dvarintvalue( "_encstr_AAB015FA102F3F7A397BC9B51B40877BDDE82112D87ECF", 1, 1, 3 );
    level.pointsperflag = scripts\mp\utility\dvars::dvarintvalue( "_encstr_98150E28E078EB53AFC16A1319F94E97", 10, 1, 300 );
    level.flagneutralization = scripts\mp\utility\dvars::dvarintvalue( "_encstr_8A23138D6896BC27D09390DB7E19B96A87F3C7F7E8", 0, 0, 1 );
    level.precappoints = scripts\mp\utility\dvars::dvarintvalue( "_encstr_93730DC19CB268B00E41B75A9BA36E", 0, 0, 1 );
    level.capturedecay = scripts\mp\utility\dvars::dvarintvalue( "_encstr_8F940D4E2779DBD5EB80A32FD8E1A1", 1, 0, 1 );
    level.capturetype = scripts\mp\utility\dvars::dvarintvalue( "_encstr_B1B60CB2A9BF5BD39353F4D15190", 1, 0, 3 );
    level.numflagsscoreonkill = scripts\mp\utility\dvars::dvarintvalue( "_encstr_B2361496EDF09D581B8268FF86386E1815059B7020F9", 0, 0, 3 );
    level.objectivescaler = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_ABFA0A6FE25DC9D3F90853D3", 4, 1, 10 );
    level.jugghealth = scripts\mp\utility\dvars::dvarintvalue( "_encstr_9B1D0BA9AEB3EC12592C63A31A", 1000, 1000, 10000 );
    level.juggswitchtime = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_B9210F9AEAECEC35EE5A1DC6D0A2B4B656", 60, 10, 180 );
    level.ppkasjugg = scripts\mp\utility\dvars::dvarintvalue( "_encstr_A1DC0A58C9707EFF1293323A", 20, 1, 100 );
    level.ppkonjugg = scripts\mp\utility\dvars::dvarintvalue( "_encstr_89460A333B979040BC5DEFD7", 50, 1, 100 );
    level.ppkjuggonjugg = scripts\mp\utility\dvars::dvarintvalue( "_encstr_823C0EFBD0F0E45521B7257004C892F7", 50, 1, 100 );
}

setmapsizespawnconsts()
{
    var_0 = getsubstr( level.mapname, 0, 7 );

    switch ( var_0 )
    {
        case "_encstr_9C6A08BB1089E8E3E38A":
        case "_encstr_9F1D082883FFC848EF03":
        case "_encstr_95D5081F2846D442630D":
        case "_encstr_80FE085B83BED89C0BCD":
        case "_encstr_88350871DA311191DB1F":
        case "_encstr_B7FF08B607EB1B853BCA":
            level.spawn_deadzone_dist = 1000;
            level.close_spawn_min_dist_sq = 10000;
            level.max_spawn_dist_sq = 25000000;
            level.max_relevant_spawn_dist = 6000;
            level.enemy_spawn_influence_dist_sq = 12250000;
            break;
        default:
            level.spawn_deadzone_dist = 1000;
            level.close_spawn_min_dist_sq = 10000;
            level.max_spawn_dist_sq = 225000000;
            level.max_relevant_spawn_dist = 5000;
            level.enemy_spawn_influence_dist_sq = 12250000;
            break;
    }
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_A9C01AAD83BE1D91B5FA6E38587737FA8536365A59377DE63A58E4D1" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_89F7184A933073BFC00FCBB00B684597470A8213DEFE8B361071" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_B1090D98F3211171B757B62F41F7F8" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_80E817B60EBEA3C8DAD737070BDD73FA9B2B1B7BB991C23997", 1, 1 );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_B1090D98F3211171B757B62F41F7F8" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_80E817B60EBEA3C8DAD737070BDD73FA9B2B1B7BB991C23997", 1, 1 );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_930E073E8FC00DDF69", "_encstr_B1090D98F3211171B757B62F41F7F8" );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_A30C093385361B4CB06C6D", "_encstr_80E817B60EBEA3C8DAD737070BDD73FA9B2B1B7BB991C23997" );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
    enablespawnpointbyindex( "_encstr_B1090D98F3211171B757B62F41F7F8" );
    level.spawnpoints = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_B1090D98F3211171B757B62F41F7F8" );

    if ( !level.spawnpoints.size )
        return;

    foreach ( var_1 in level.objectives )
    {
        var_1.furthestspawndistsq = 0;
        var_1.spawnpoints = [];
        var_1.fallbackspawnpoints = [];
    }

    foreach ( var_4 in level.spawnpoints )
    {
        calculatespawndisttozones( var_4 );
        var_5 = scripts\mp\spawnlogic::getoriginidentifierstring( var_4 );

        if ( isdefined( level.btmextraprimaryspawnpoints ) && isdefined( level.btmextraprimaryspawnpoints[var_5] ) )
        {
            foreach ( var_7 in level.btmextraprimaryspawnpoints[var_5] )
            {
                var_1 = level.objectives[var_7];
                var_1.spawnpoints[var_1.spawnpoints.size] = var_4;
            }
        }

        var_9 = 0;
        var_10 = var_4.classname == "_encstr_B1090D98F3211171B757B62F41F7F8";
        var_11 = var_4.classname == "_encstr_80E817B60EBEA3C8DAD737070BDD73FA9B2B1B7BB991C23997";

        if ( var_10 || var_11 )
        {
            if ( isdefined( var_4.script_noteworthy ) && var_4.script_noteworthy != "_encstr_A40101" )
            {
                var_9 = 1;
                var_12 = strtok( var_4.script_noteworthy, "_encstr_884C02C6" );

                foreach ( var_7 in var_12 )
                {
                    var_1 = level.objectives[var_7];

                    if ( var_10 )
                    {
                        var_1.spawnpoints[var_1.spawnpoints.size] = var_4;
                        continue;
                    }

                    var_1.fallbackspawnpoints[var_1.fallbackspawnpoints.size] = var_4;
                }
            }
        }

        if ( !var_9 )
        {
            foreach ( var_1 in level.objectives )
            {
                if ( var_4.scriptdata.distsqtokothzones[var_1 getentitynumber()] < level.close_spawn_min_dist_sq || var_4.scriptdata.distsqtokothzones[var_1 getentitynumber()] > level.max_spawn_dist_sq )
                    var_1.removespawn = 1;

                if ( var_10 )
                {
                    if ( !isdefined( var_1.removespawn ) )
                        var_1.spawnpoints[var_1.spawnpoints.size] = var_4;

                    continue;
                }

                var_1.fallbackspawnpoints[var_1.fallbackspawnpoints.size] = var_4;
            }
        }
    }

    foreach ( var_19, var_1 in level.objectives )
    {
        var_1.spawnset = "_encstr_AB9B05194B35A1" + var_19;
        scripts\mp\spawnlogic::registerspawnset( var_1.spawnset, var_1.spawnpoints );
        var_1.fallbackspawnset = "_encstr_97A90E3E13DAB7C9614B90F867BBA07F" + var_19;
        scripts\mp\spawnlogic::registerspawnset( var_1.fallbackspawnset, var_1.fallbackspawnpoints );
    }
}

calculatespawndisttozones( var_0 )
{
    var_0.scriptdata.distsqtokothzones = [];

    foreach ( var_2 in level.objectives )
    {
        var_3 = getpathdist( var_0.origin, var_2.origin, level.max_relevant_spawn_dist );

        if ( var_3 < 0 )
            var_3 = scripts\engine\utility::distance_2d_squared( var_0.origin, var_2.origin );
        else
            var_3 = var_3 * var_3;

        var_0.scriptdata.distsqtokothzones[var_2 getentitynumber()] = var_3;

        if ( var_3 > var_2.furthestspawndistsq )
            var_2.furthestspawndistsq = var_3;
    }
}

setupradios()
{
    var_0 = [];
    var_1 = getentarray( "_encstr_80620D42487FA43FFB9DD8CF234053", "_encstr_B8CE0BE43FC317DF690862BA48" );

    if ( var_1.size < 2 )
        var_0[var_0.size] = "_encstr_B6793A39EB423E65EEFFBBC2DA48A5A8FEC97B7E6839C7900546C7919AB6D802903A95905A04FFAB79202B4B40704FE8CD57B56F4ECE5ACA501B326E";

    var_2 = getentarray( "_encstr_82FC0DCBC1DD572D58E56177D708B2", "_encstr_B8CE0BE43FC317DF690862BA48" );

    for ( var_3 = 0; var_3 < var_1.size; var_3++ )
    {
        var_4 = 0;
        var_5 = var_1[var_3];
        var_5.trig = undefined;

        for ( var_6 = 0; var_6 < var_2.size; var_6++ )
        {
            if ( var_5 istouching( var_2[var_6] ) )
            {
                if ( isdefined( var_5.trig ) )
                {
                    var_0[var_0.size] = "_encstr_8A760A921632D2F6800B4780" + var_5.origin + "_encstr_A19B3240B49B04D1DEBAB1D096CD3B08D6F6E42B02E81A0BB901DEB95980442716234BEDA34E5AB3CE2B9C22088E392DD9ECCA93";
                    var_4 = 1;
                    break;
                }

                var_5.trig = var_2[var_6];
                break;
            }
        }

        if ( !isdefined( var_5.trig ) )
        {
            if ( !var_4 )
                var_0[var_0.size] = "_encstr_8A760A921632D2F6800B4780" + var_5.origin + "_encstr_95C42AC8538B62450770CE52C857FC0B216F110EF339A28AC3C8424AA36D34CFD9A58AFAA71BBB14E7388A93";

            var_5.trig = spawn( "_encstr_9E6B0FE8274B9DD92BC9D7278591B4D5E6", var_5.origin, 0, 128, 128 );
            var_4 = 0;
        }

        var_5.trigorigin = var_5.trig.origin;
        var_7 = [];
        var_7[0] = var_5;
        var_8 = getentarray( var_5.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        for ( var_6 = 0; var_6 < var_8.size; var_6++ )
            var_7[var_7.size] = var_8[var_6];

        var_5.visuals = var_7;
        var_5 scripts\mp\gameobjects::setmodelvisibility( 0 );
        var_5.gameobject = scripts\mp\gameobjects::createuseobject( "_encstr_9BA4080D39CFFB5AB7C1", var_5.trig, var_5.visuals, var_5.origin - var_5.trigorigin + ( 0, 0, 60 ) );
        var_5.gameobject scripts\mp\gameobjects::disableobject();
        var_5.gameobject scripts\mp\gameobjects::setmodelvisibility( 0 );
        var_5.trig.useobj = var_5.gameobject;
    }

    if ( var_0.size > 0 )
    {
        for ( var_3 = 0; var_3 < var_0.size; var_3++ )
        {

        }
    }

    foreach ( var_10 in var_1 )
        level.objectives[level.objectives.size] = var_10;

    level.radios = var_1;
    level.radios2 = var_1;
    level.prevradio = undefined;
    level.prevradio2 = undefined;
    return 1;
}

setupbtmflags()
{
    var_0 = getentarray( "_encstr_878B11C43AADAFCC1BC2B3F5E0C9A5AD0B39F2", "_encstr_B8CE0BE43FC317DF690862BA48" );

    if ( var_0.size == 0 )
    {
        var_1 = getentarray( "_encstr_93170DA48D825F66F84B3018EF127A", "_encstr_B8CE0BE43FC317DF690862BA48" );
        var_2 = getentarray( "_encstr_A40B0F33362C76AFE6568DDECD460B4ECB", "_encstr_B8CE0BE43FC317DF690862BA48" );

        for ( var_3 = 0; var_3 < var_1.size; var_3++ )
            level.primaryflags[level.primaryflags.size] = var_1[var_3];

        for ( var_3 = 0; var_3 < var_2.size; var_3++ )
            level.primaryflags[level.primaryflags.size] = var_2[var_3];

        level thread runnormaldomflags( var_1, var_2 );
    }
    else
    {
        level.primaryflags = var_0;
        level.primaryflags2 = var_0;
        level.prevflag = undefined;
        level.prevflag2 = undefined;
        level thread runbtmflags();
    }

    foreach ( var_5 in level.primaryflags )
        level.objectives[level.objectives.size] = var_5;
}

dommainloop()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level thread updatedomscores();
}

runbtmflags()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );

    for (;;)
    {
        level waittill( "_encstr_BA770ECDC12CEEE67D4CA36BBE32F66B" );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 0, 0 );
        scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_957B0AA86F934BCA0F8022FB", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
        var_0 = pickflagtospawn();
        var_0.script_label = "_encstr_B80703EB16";
        var_1 = "_encstr_B80703EB16";
        var_2 = _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::setupobjective( var_0 );
        var_2.origin = var_0.origin;
        var_2 scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
        var_2 scripts\mp\gameobjects::setvisibleteam( "_encstr_BC19047780DA" );
        var_2 scripts\mp\gameobjects::setobjectivestatusicons( level.iconlocked );
        var_2.ignorestomp = 1;
        level.btmflagobject = var_2;
        setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", int( 30000 + gettime() ) );
        setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", 2 );
        scripts\mp\utility\sound::playsoundonplayers( "_encstr_9CB30FAED27D0B8593EB6E5A912B310B39" );
        wait 30;
        scripts\mp\utility\sound::playsoundonplayers( "_encstr_A6C71623EF7A767DFFDB49C0E2541389236934AD6F8F9999" );

        foreach ( var_4 in level.teamnamelist )
        {
            scripts\mp\utility\dialog::leaderdialog( "_encstr_A8C30C7F2B0208B0D1AA336B52BD", var_4 );

            if ( scripts\mp\utility\teams::getteamdata( var_4, "_encstr_97580AC41D811F767F3072CB" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "_encstr_A1E31868890DC79F0723D63DC680571EE1917131294F4FFB9D3C", var_4, 4 );
        }

        level.btmflagobject scripts\mp\gameobjects::allowuse( "_encstr_80BF06CA78A2226B" );
        level.btmflagobject _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::domflag_setneutral();
        setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", int( 60000 + gettime() ) );
        setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", 3 );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 14, 14 );
        wait 60;
        scripts\mp\utility\sound::playsoundonplayers( "_encstr_9B9A1817085733F993A701332B204201BD38E8A0A98D311317A0" );

        foreach ( var_4 in level.teamnamelist )
        {
            if ( scripts\mp\utility\teams::getteamdata( var_4, "_encstr_97580AC41D811F767F3072CB" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "_encstr_BDB017E49E5A39B6590785BB77B6E84922A16C5D37F481F8A0", var_4, 4 );
        }

        level.btmflagobject _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::domflag_setneutral();
        level removedompoint( var_1 );
        level.btmflagobject = undefined;
        scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
        level getnextobjective( "_encstr_9318045AFDDD" );
    }
}

runnormaldomflags( var_0, var_1 )
{
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );

    for (;;)
    {
        level waittill( "_encstr_BA770ECDC12CEEE67D4CA36BBE32F66B" );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 0, 0 );

        switch ( level.usedomflag )
        {
            case 0:
                var_2 = "_encstr_A40703FA31";
                break;
            case 1:
                var_2 = "_encstr_B80703EB16";
                break;
            case 2:
                var_2 = "_encstr_950703BF07";
                break;
            default:
                var_2 = "_encstr_A40703FA31";
                break;
        }

        scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_957B0AA86F934BCA0F8022FB", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
        var_3 = [];

        for ( var_4 = 0; var_4 < var_0.size; var_4++ )
            var_3[var_3.size] = var_0[var_4];

        for ( var_4 = 0; var_4 < var_1.size; var_4++ )
            var_3[var_3.size] = var_1[var_4];

        foreach ( var_6 in var_3 )
        {
            if ( var_6.script_label == var_2 )
            {
                var_7 = _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::setupobjective( var_6 );
                var_7 scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
                var_7 scripts\mp\gameobjects::setvisibleteam( "_encstr_BC19047780DA" );
                var_7 scripts\mp\gameobjects::setobjectivestatusicons( level.iconlocked );
                var_7.ignorestomp = 1;
                level.btmflagobject = var_7;
                break;
            }
        }

        setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", int( 30000 + gettime() ) );
        setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", 2 );
        scripts\mp\utility\sound::playsoundonplayers( "_encstr_9CB30FAED27D0B8593EB6E5A912B310B39" );
        wait 30;
        scripts\mp\utility\sound::playsoundonplayers( "_encstr_A6C71623EF7A767DFFDB49C0E2541389236934AD6F8F9999" );

        foreach ( var_10 in level.teamnamelist )
        {
            scripts\mp\utility\dialog::leaderdialog( "_encstr_A8C30C7F2B0208B0D1AA336B52BD", var_10 );

            if ( scripts\mp\utility\teams::getteamdata( var_10, "_encstr_97580AC41D811F767F3072CB" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "_encstr_A1E31868890DC79F0723D63DC680571EE1917131294F4FFB9D3C", var_10, 4 );
        }

        level.btmflagobject scripts\mp\gameobjects::allowuse( "_encstr_80BF06CA78A2226B" );
        level.btmflagobject _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::domflag_setneutral();
        setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", int( 60000 + gettime() ) );
        setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", 3 );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 14, 14 );
        wait 60;
        scripts\mp\utility\sound::playsoundonplayers( "_encstr_9B9A1817085733F993A701332B204201BD38E8A0A98D311317A0" );

        foreach ( var_10 in level.teamnamelist )
        {
            if ( scripts\mp\utility\teams::getteamdata( var_10, "_encstr_97580AC41D811F767F3072CB" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "_encstr_BDB017E49E5A39B6590785BB77B6E84922A16C5D37F481F8A0", var_10, 4 );
        }

        level.btmflagobject _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::domflag_setneutral();
        level removedompoint( var_2 );
        level.btmflagobject = undefined;
        scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
        level getnextobjective( "_encstr_9318045AFDDD" );
    }
}

updatedomscores()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level waittill( "_encstr_BA770ECDC12CEEE67D4CA36BBE32F66B" );
    var_0 = undefined;
    var_1 = undefined;

    while ( !level.gameended )
    {
        wait 5.0;
        scripts\mp\hostmigration::waittillhostmigrationdone();

        if ( !isdefined( level.scoretick ) )
            level.scoretick = [];

        foreach ( var_3 in level.teamnamelist )
            level.scoretick[var_3] = 0;

        if ( isdefined( level.btmflagobject ) )
        {
            var_5 = level.btmflagobject scripts\mp\gameobjects::getownerteam();

            if ( var_5 == "_encstr_9BA4080D39CFFB5AB7C1" )
                continue;

            level.scoretick[var_5] = level.scoretick[var_5] + level.pointsperflag;
            updatescores();
        }
    }
}

updatescores()
{
    var_0 = [];

    foreach ( var_2 in level.teamnamelist )
    {
        var_3 = game["_encstr_B4040B6BBF898046C247E5C3DF"][var_2] + level.scoretick[var_2];

        if ( var_3 >= level.roundscorelimit )
            var_0[var_0.size] = var_2;
    }

    if ( var_0.size == 1 )
        level.scoretick[var_0[0]] = level.roundscorelimit - game["_encstr_B4040B6BBF898046C247E5C3DF"][var_0[0]];

    foreach ( var_2 in level.teamnamelist )
    {
        if ( level.scoretick[var_2] > 0 )
            scripts\mp\gamescore::giveteamscoreforobjective( var_2, level.scoretick[var_2], 1 );
    }
}

removedompoint( var_0 )
{
    self endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level.btmflagobject scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
    level.btmflagobject scripts\mp\gameobjects::setvisibleteam( "_encstr_AABA05236DC831" );
    level.btmflagobject scripts\mp\gameobjects::releaseid();
    level.btmflagobject.trigger = undefined;
    level.btmflagobject notify( "_encstr_AAE208912BB195E85932" );
    level.btmflagobject.visibleteam = "_encstr_AABA05236DC831";
    level.btmflagobject.scriptable delete();
    level.btmflagobject.flagmodel delete();
}

pickflagtospawn()
{
    var_0 = [];
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == "_encstr_A68C0A5803A5D151A2B310A6" )
            continue;

        if ( !isalive( var_3 ) )
            continue;

        var_3.dist = 0;

        if ( var_3.team == "_encstr_BC850785638DA59537" )
        {
            var_0[var_0.size] = var_3;
            continue;
        }

        var_1[var_1.size] = var_3;
    }

    if ( !var_0.size || !var_1.size )
    {
        if ( level.primaryflags.size == 0 )
            level.primaryflags = level.primaryflags2;

        for ( var_5 = level.primaryflags[randomint( level.primaryflags.size )]; isdefined( level.prevflag ) && var_5 == level.prevflag; var_5 = level.primaryflags[randomint( level.primaryflags.size )] )
        {

        }

        level.prevflag2 = level.prevflag;
        level.prevflag = var_5;
        return var_5;
    }

    for ( var_6 = 0; var_6 < var_0.size; var_6++ )
    {
        for ( var_7 = var_6 + 1; var_7 < var_0.size; var_7++ )
        {
            var_8 = distancesquared( var_0[var_6].origin, var_0[var_7].origin );
            var_0[var_6].dist = var_0[var_6].dist + var_8;
            var_0[var_7].dist = var_0[var_7].dist + var_8;
        }
    }

    for ( var_6 = 0; var_6 < var_1.size; var_6++ )
    {
        for ( var_7 = var_6 + 1; var_7 < var_1.size; var_7++ )
        {
            var_8 = distancesquared( var_1[var_6].origin, var_1[var_7].origin );
            var_1[var_6].dist = var_1[var_6].dist + var_8;
            var_1[var_7].dist = var_1[var_7].dist + var_8;
        }
    }

    var_9 = var_0[0];

    foreach ( var_3 in var_0 )
    {
        if ( var_3.dist < var_9.dist )
            var_9 = var_3;
    }

    var_12["_encstr_BC850785638DA59537"] = var_9.origin;
    var_9 = var_1[0];

    foreach ( var_3 in var_1 )
    {
        if ( var_3.dist < var_9.dist )
            var_9 = var_3;
    }

    var_12["_encstr_BA840579D3F7F6"] = var_1[0].origin;
    var_15 = undefined;
    var_16 = undefined;

    for ( var_6 = 0; var_6 < level.primaryflags.size; var_6++ )
    {
        var_5 = level.primaryflags[var_6];
        var_17 = abs( distance( var_5.origin, var_12["_encstr_BC850785638DA59537"] ) - distance( var_5.origin, var_12["_encstr_BA840579D3F7F6"] ) );

        if ( isdefined( level.prevflag ) && var_5 == level.prevflag )
            continue;

        if ( isdefined( level.prevflag2 ) && var_5 == level.prevflag2 )
        {
            if ( level.primaryflags.size > 2 )
                continue;
            else
                var_17 = var_17 + 512;
        }

        if ( !isdefined( var_16 ) || var_17 < var_16 )
        {
            var_16 = var_17;
            var_15 = var_5;
        }
    }

    level.prevflag2 = level.prevflag;
    level.prevflag = var_15;
    return var_15;
}

hqmainloop()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level.hqrevealtime = -100000;
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );

    for (;;)
    {
        level waittill( "_encstr_B9270D6EC10BBBB9F589D1ADEB435C" );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 0, 0 );
        scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
        setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", 0 );
        setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", -1 );
        scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_957B0AA86F934BCA0F8022FB", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
        var_0 = pickradiotospawn();
        var_0 makeradioactive();
        scripts\mp\utility\sound::playsoundonplayers( "_encstr_9CB30FAED27D0B8593EB6E5A912B310B39" );
        var_1 = var_0.gameobject;
        var_1 scripts\mp\gameobjects::pinobjiconontriggertouch();
        var_1 scripts\mp\gameobjects::setmodelvisibility( 1 );
        var_1 scripts\mp\gameobjects::setvisibleteam( "_encstr_BC19047780DA" );
        var_1 scripts\mp\gameobjects::setobjectivestatusicons( level.iconlocked, level.iconlocked );
        level.radioobject = var_1;
        level.hqrevealtime = gettime();

        if ( level.zoneactivationdelay )
        {
            setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", int( 30000 + gettime() ) );
            setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", 2 );
            wait( level.zoneactivationdelay );
        }

        waittillframeend;
        scripts\mp\utility\sound::playsoundonplayers( "_encstr_A6C71623EF7A767DFFDB49C0E2541389236934AD6F8F9999" );

        foreach ( var_3 in level.teamnamelist )
        {
            scripts\mp\utility\dialog::leaderdialog( "_encstr_A8C30C7F2B0208B0D1AA336B52BD", var_3 );

            if ( scripts\mp\utility\teams::getteamdata( var_3, "_encstr_97580AC41D811F767F3072CB" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "_encstr_A8BA16D384A4A20D1594AC54A95E3428412AAA4AA8D784A2", var_3, 4 );
        }

        var_1 scripts\mp\gameobjects::allowuse( "_encstr_BC19047780DA" );
        var_1 scripts\mp\gameobjects::setusetime( level.zonecapturetime );
        var_1 scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqneutral, level.iconhqneutral );
        var_1 scripts\mp\gameobjects::setvisibleteam( "_encstr_BC19047780DA" );
        var_1.onuse = ::onradiocapture;
        var_1.onbeginuse = ::onbeginuse;
        var_1.onenduse = ::onenduse;
        var_1.onuncontested = ::onuncontested;
        var_1.oncontested = ::oncontested;
        var_1.id = "_encstr_957B0A886F934BCA0F8022FB";
        var_1 scripts\mp\gameobjects::pinobjiconontriggertouch();
        var_1 scripts\mp\gameobjects::setcapturebehavior( "_encstr_930E073E8FC00DDF69" );
        level.radioobject = var_1;
        setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", int( 60000 + gettime() ) );
        setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", 3 );
        level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 16, 16 );
        thread destroyhqaftertime( 60 );
        var_5 = level scripts\engine\utility::_id_143AD( "_encstr_AB280C7490F67BA2D8687B63CD5A", "_encstr_9BB30D8A80B71F9793CD828763795B" );

        if ( var_5 == "_encstr_AB280C7490F67BA2D8687B63CD5A" )
        {
            var_6 = var_1 scripts\mp\gameobjects::getownerteam();
            var_7 = scripts\mp\utility\game::getotherteam( var_6 );

            if ( level.hqautodestroytime )
                thread destroyhqaftertime( level.hqautodestroytime, var_6 );
            else
                level.hqdestroyedbytimer = 0;

            for (;;)
            {
                var_6 = var_1 scripts\mp\gameobjects::getownerteam();
                var_7 = scripts\mp\utility\game::getotherteam( var_6 );

                if ( var_6 == "_encstr_BC850785638DA59537" )
                {

                }
                else
                {

                }

                var_1 scripts\mp\gameobjects::allowuse( "_encstr_80BF06CA78A2226B" );
                var_1 scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqdefend, level.iconhqcapture );

                if ( !level.kothmode )
                    var_1 scripts\mp\gameobjects::setusetext( &"_encstr_B48811D4A0FA11A83551949EB25272E8FA218A" );

                var_1.onuse = ::onradiodestroy;
                level waittill( "_encstr_9BB30D8A80B71F9793CD828763795B" );

                if ( !level.kothmode || level.hqdestroyedbytimer )
                    break;

                thread forcespawnteam( var_6 );
                var_1 scripts\mp\gameobjects::setownerteam( scripts\mp\utility\game::getotherteam( var_6 )[0] );
            }
        }

        scripts\mp\utility\sound::playsoundonplayers( "_encstr_9B9A1817085733F993A701332B204201BD38E8A0A98D311317A0" );

        foreach ( var_3 in level.teamnamelist )
        {
            if ( scripts\mp\utility\teams::getteamdata( var_3, "_encstr_97580AC41D811F767F3072CB" ) > 0 )
                scripts\mp\utility\print::teamhudtutorialmessage( "_encstr_8B24168D15091D6065DB1B2F97B09841F91C77474CF9EED8", var_3, 4 );
        }

        var_6 = var_1 scripts\mp\gameobjects::getownerteam();
        var_1 scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
        var_1 scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqneutral, level.iconhqneutral );
        var_1 scripts\mp\gameobjects::setownerteam( "_encstr_9BA4080D39CFFB5AB7C1" );
        var_1 scripts\mp\gameobjects::setmodelvisibility( 0 );
        var_0 makeradioinactive();
        level.radioobject = undefined;

        if ( var_6 != "_encstr_9BA4080D39CFFB5AB7C1" )
            thread forcespawnteam( var_6, level.extradelay );

        level.usedomflag++;

        if ( level.usedomflag == 3 )
            level.usedomflag = 0;

        scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
        wait 1;
        level getnextobjective( "_encstr_B7D7054F3030F9" );
    }
}

forcespawnteam( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
    {
        foreach ( var_3 in level.players )
        {
            if ( isalive( var_3 ) )
                continue;

            if ( var_3.pers["_encstr_89EF05D46BA8FD"] == var_0 )
                var_3 scripts\mp\utility\lower_message::setlowermessageomnvar( 9, int( gettime() + var_1 * 1000 ) );
        }

        wait( var_1 );
    }

    foreach ( var_3 in level.players )
    {
        if ( var_3.pers["_encstr_89EF05D46BA8FD"] == var_0 )
        {
            var_3 scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );

            if ( !isalive( var_3 ) )
                var_3.forcespawnnearteammates = 1;

            var_3 notify( "_encstr_AFD50C2238A5E6AFDE965841ACC0" );
        }
    }
}

onbeginuse( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();

    if ( var_1 == "_encstr_9BA4080D39CFFB5AB7C1" )
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqtaking, level.iconhqlosing );
    else
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqtaking, level.iconhqlosing );
}

onenduse( var_0, var_1, var_2 )
{
    var_3 = scripts\mp\gameobjects::getownerteam();

    if ( var_2 )
        return;

    if ( var_3 == "_encstr_9BA4080D39CFFB5AB7C1" )
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqneutral, level.iconhqneutral );
    else
    {
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqdefend, level.iconhqcapture );
        return;
    }
}

oncontested()
{
    scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqcontested );
}

onuncontested( var_0 )
{
    var_1 = scripts\mp\gameobjects::getownerteam();

    if ( var_0 == "_encstr_AABA05236DC831" || var_1 == "_encstr_9BA4080D39CFFB5AB7C1" )
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqneutral );
    else
        scripts\mp\gameobjects::setobjectivestatusicons( level.iconhqcapture, level.iconhqdefend );
}

onradiocapture( var_0 )
{
    var_1 = var_0.pers["_encstr_89EF05D46BA8FD"];
    scripts\mp\gamescore::giveplayerscore( "_encstr_9EEB08EFAF2B15984A67", var_0 );

    foreach ( var_3 in self.touchlist[var_1] )
    {
        var_4 = var_3.player;
        var_4 scripts\mp\utility\stats::incpersstat( "_encstr_B2CF0967600940A373E78A", 1 );
        var_4 scripts\mp\persistence::statsetchild( "_encstr_A2460627DEABDC23", "_encstr_B2CF0967600940A373E78A", var_0.pers["_encstr_B2CF0967600940A373E78A"] );
    }

    var_0 thread scripts\common\utility::_id_13E0A( level._id_11B29, "_encstr_9EEB08EFAF2B15984A67", var_0.origin );
    var_6 = scripts\mp\gameobjects::getownerteam();
    scripts\mp\gameobjects::setownerteam( var_1 );

    if ( !level.kothmode )
        scripts\mp\gameobjects::setusetime( level.zonecapturetime );

    var_7 = "_encstr_BA840579D3F7F6";

    if ( var_1 == "_encstr_BA840579D3F7F6" )
        var_7 = "_encstr_BC850785638DA59537";

    thread scripts\mp\utility\sound::playsoundonplayers( "_encstr_A68415D97299A1880D276028C75FC6E7021ACD5D4A9279", var_1 );
    thread scripts\mp\utility\sound::playsoundonplayers( "_encstr_B76C112883FF4D7B2D2FA5B93997B901972B83", var_7 );
    level thread awardhqpoints( var_1 );
    var_0 notify( "_encstr_BC2B0A075628F786B1182B12", "_encstr_9CCF09866E33D9835AB738" );
    level notify( "_encstr_AB280C7490F67BA2D8687B63CD5A" );
    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( var_1, 17, 16 );
}

onradiodestroy( var_0 )
{
    var_1 = var_0.pers["_encstr_89EF05D46BA8FD"];
    var_2 = "_encstr_BA840579D3F7F6";

    if ( var_1 == "_encstr_BA840579D3F7F6" )
        var_2 = "_encstr_BC850785638DA59537";

    scripts\mp\gamescore::giveplayerscore( "_encstr_9EEB08EFAF2B15984A67", var_0 );

    foreach ( var_4 in self.touchlist[var_1] )
    {
        var_5 = var_4.player;
        var_5 scripts\mp\utility\stats::incpersstat( "_encstr_AA460DCF7948A4EB7D076B1777A8A3", 1 );
        var_5 scripts\mp\persistence::statsetchild( "_encstr_A2460627DEABDC23", "_encstr_AA460DCF7948A4EB7D076B1777A8A3", var_0.pers["_encstr_AA460DCF7948A4EB7D076B1777A8A3"] );
    }

    var_0 thread scripts\common\utility::_id_13E0A( level._id_11B29, "_encstr_A6CB08A5FD5713457D3B", var_0.origin );

    if ( level.kothmode )
    {

    }
    else
    {

    }

    thread scripts\mp\utility\sound::playsoundonplayers( "_encstr_A68415D97299A1880D276028C75FC6E7021ACD5D4A9279", var_1 );
    thread scripts\mp\utility\sound::playsoundonplayers( "_encstr_B76C112883FF4D7B2D2FA5B93997B901972B83", var_2 );
    level notify( "_encstr_9BB30D8A80B71F9793CD828763795B" );

    if ( level.kothmode )
        level thread awardhqpoints( var_1 );
    else
        scripts\mp\gamescore::giveteamscoreforobjective( var_1, 20 );
}

destroyhqaftertime( var_0, var_1 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level endon( "_encstr_B760090DE2D74ECA6ECA1D" );
    level notify( "_encstr_BC7111D1C7F13E20634F93CE335128FDAABF91" );
    level endon( "_encstr_BC7111D1C7F13E20634F93CE335128FDAABF91" );
    level.hqdestroytime = gettime() + var_0 * 1000;
    level.hqdestroyedbytimer = 0;
    wait( var_0 );
    level.hqdestroyedbytimer = 1;

    if ( isdefined( var_1 ) )
        scripts\mp\gamescore::giveteamscoreforobjective( var_1, 5 );

    level notify( "_encstr_9BB30D8A80B71F9793CD828763795B" );
}

awardhqpoints( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level endon( "_encstr_9BB30D8A80B71F9793CD828763795B" );
    level notify( "_encstr_B3A11526C443A3EC8419DB1FE078B4FB7D5D6D9DA3F54A" );
    level endon( "_encstr_B3A11526C443A3EC8419DB1FE078B4FB7D5D6D9DA3F54A" );
    var_1 = 12;
    var_2 = 5;
    var_3 = 5;
    var_4 = 5;

    if ( level.promode )
        var_5 = int( level.hqautodestroytime / var_1 );
    else
        var_5 = 5;

    var_6 = 0;

    while ( !level.gameended )
    {
        scripts\mp\gamescore::giveteamscoreforobjective( var_0, 15 );
        var_6++;
        wait( var_5 );
        scripts\mp\hostmigration::waittillhostmigrationdone();
    }
}

makeradioactive()
{
    self.gameobject scripts\mp\gameobjects::setmodelvisibility( 0 );
    self.gameobject scripts\mp\gameobjects::cancontestclaim( 1 );
    self.gameobject scripts\mp\gameobjects::enableobject();
    self.gameobject.ignorestomp = 1;
    self.trig.useobj = self.gameobject;
}

makeradioinactive()
{
    self.gameobject scripts\mp\gameobjects::releaseid();
    self.gameobject scripts\mp\gameobjects::setvisibleteam( "_encstr_AABA05236DC831" );
    self.gameobject scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
    level.radios = scripts\engine\utility::array_remove( level.radios, self );
}

pickradiotospawn()
{
    var_0 = [];
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == "_encstr_A68C0A5803A5D151A2B310A6" )
            continue;

        if ( !isalive( var_3 ) )
            continue;

        var_3.dist = 0;

        if ( var_3.team == "_encstr_BC850785638DA59537" )
        {
            var_0[var_0.size] = var_3;
            continue;
        }

        var_1[var_1.size] = var_3;
    }

    if ( !var_0.size || !var_1.size )
    {
        if ( level.radios.size == 0 )
            level.radios = level.radios2;

        for ( var_5 = level.radios[randomint( level.radios.size )]; isdefined( level.prevradio ) && var_5 == level.prevradio; var_5 = level.radios[randomint( level.radios.size )] )
        {

        }

        level.prevradio2 = level.prevradio;
        level.prevradio = var_5;
        return var_5;
    }

    for ( var_6 = 0; var_6 < var_0.size; var_6++ )
    {
        for ( var_7 = var_6 + 1; var_7 < var_0.size; var_7++ )
        {
            var_8 = distancesquared( var_0[var_6].origin, var_0[var_7].origin );
            var_0[var_6].dist = var_0[var_6].dist + var_8;
            var_0[var_7].dist = var_0[var_7].dist + var_8;
        }
    }

    for ( var_6 = 0; var_6 < var_1.size; var_6++ )
    {
        for ( var_7 = var_6 + 1; var_7 < var_1.size; var_7++ )
        {
            var_8 = distancesquared( var_1[var_6].origin, var_1[var_7].origin );
            var_1[var_6].dist = var_1[var_6].dist + var_8;
            var_1[var_7].dist = var_1[var_7].dist + var_8;
        }
    }

    var_9 = var_0[0];

    foreach ( var_3 in var_0 )
    {
        if ( var_3.dist < var_9.dist )
            var_9 = var_3;
    }

    var_12["_encstr_BC850785638DA59537"] = var_9.origin;
    var_9 = var_1[0];

    foreach ( var_3 in var_1 )
    {
        if ( var_3.dist < var_9.dist )
            var_9 = var_3;
    }

    var_12["_encstr_BA840579D3F7F6"] = var_1[0].origin;
    var_15 = undefined;
    var_16 = undefined;

    for ( var_6 = 0; var_6 < level.radios.size; var_6++ )
    {
        var_5 = level.radios[var_6];
        var_17 = abs( distance( var_5.origin, var_12["_encstr_BC850785638DA59537"] ) - distance( var_5.origin, var_12["_encstr_BA840579D3F7F6"] ) );

        if ( isdefined( level.prevradio ) && var_5 == level.prevradio )
            continue;

        if ( isdefined( level.prevradio2 ) && var_5 == level.prevradio2 )
        {
            if ( level.radios.size > 2 )
                continue;
            else
                var_17 = var_17 + 512;
        }

        if ( !isdefined( var_16 ) || var_17 < var_16 )
        {
            var_16 = var_17;
            var_15 = var_5;
        }
    }

    level.prevradio2 = level.prevradio;
    level.prevradio = var_15;
    return var_15;
}

updaterespawntimer()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level endon( "_encstr_8FBD0BBA97A04F464F80533BE4" );
    level endon( "_encstr_8C9C0F90B8CD42479108E7E3A8A8290AA1" );
    var_0 = gettime();

    if ( level.zoneduration > 0 )
        var_1 = var_0 + level.zoneduration * 1000;
    else
        var_1 = var_0 + scripts\mp\utility\game::gettimelimit() * 1000 - scripts\mp\utility\game::gettimepassed();

    var_2 = var_0;

    while ( var_2 < var_1 )
    {
        var_2 = gettime();
        level.spawndelay = ( var_1 - var_2 ) / 1000;
        waitframe();
    }
}

onteamscore( var_0, var_1, var_2 )
{

}

waittospawnvip()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level waittill( "_encstr_8F770E8B9B674F402FCD2B17412C4B38" );
    setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", 0 );
    setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", -1 );
    level.spawnedvip = 1;
    level.hostagespawnpos = pickviptospawn();
    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
    level.onteamscore = undefined;
    level.hostagecarrystates = [];
    level.hostages[0] = scripts\mp\tac_ops\hostage_utility::spawnhostage( level.hostagespawnpos, "_encstr_9BA4080D39CFFB5AB7C1" );
    level thread spawnextractzones();
    scripts\mp\utility\sound::playsoundonplayers( "_encstr_A6C71623EF7A767DFFDB49C0E2541389236934AD6F8F9999" );

    foreach ( var_1 in level.teamnamelist )
    {
        scripts\mp\utility\dialog::leaderdialog( "_encstr_A8C30C7F2B0208B0D1AA336B52BD", var_1 );

        if ( scripts\mp\utility\teams::getteamdata( var_1, "_encstr_97580AC41D811F767F3072CB" ) > 0 )
            scripts\mp\utility\print::teamhudtutorialmessage( "_encstr_AD7817A709522AD045A42B15A67968142815AA2915F52B2582", var_1, 4 );
    }

    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 10, 10 );
}

spawnextractzones()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level.vipextractzones = [];
    var_0 = getextractionbtmflag();
    var_1 = getextractionbtmflag( var_0 );
    setupextractgoal( var_0, "_encstr_BC850785638DA59537" );
    setupextractgoal( var_1, "_encstr_BA840579D3F7F6" );
}

getextractionbtmflag( var_0 )
{
    var_1 = 0;
    var_2 = undefined;
    var_3 = 1000000;

    foreach ( var_5 in level.primaryflags2 )
    {
        var_6 = scripts\engine\utility::distance_2d_squared( level.hostagespawnpos, var_5.origin );

        if ( isdefined( var_0 ) )
        {
            if ( var_6 > var_3 && var_0 != var_5.origin )
                var_2 = var_5;

            continue;
        }

        if ( var_6 > 1000000 )
            var_2 = var_5;
    }

    return var_2.origin;
}

setupextractgoal( var_0, var_1 )
{
    var_2 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_0 );
    var_2.angles = ( 0, 270, 0 );
    var_2.team = var_1;
    var_2.ownerteam = var_1;
    var_2.curorigin = var_0;
    var_2.offset3d = ( 0, 0, 32 );
    var_2.compassicons = [];
    var_2.type = "_encstr_A2C00AABCD59A74C35566C1D";
    var_2 setmodel( "_encstr_8C2116338FD081EFEF2BDA2233285F46386BB8AC2BE815B7" );
    var_2 setscriptablepartstate( "_encstr_A12B07D13E43B7F12A", "_encstr_811904785890" );
    var_2 playloopsound( "_encstr_A92F11AD07F5CCC62CC9ACFA4CD54EE6F5B183" );
    var_3 = spawn( "_encstr_9E6B0FE8274B9DD92BC9D7278591B4D5E6", var_0, 0, 120, 128 );
    var_2 scripts\mp\gameobjects::requestid( 1, 1 );
    var_2 scripts\mp\gameobjects::setvisibleteam( "_encstr_AABA05236DC831" );
    var_2 scripts\mp\gameobjects::setobjectivestatusicons( level.iconextract, level.iconpreventextract );
    var_3.goalent = var_2;
    var_3 thread goaltriggerwatcher();
    level.vipextractzones[var_1] = var_3;
    waitframe();
    playfxontag( level._effect["_encstr_9BB20F6B38F9D1CF5042AF9B6B3973E669"], var_2, "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
}

goaltriggerwatcher()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_0 );

        if ( isdefined( level.hostagecarrier ) && var_0 == level.hostagecarrier && var_0.team == self.goalent.team )
        {
            scripts\mp\tac_ops\hostage_utility::drophostage( var_0, level.hostages[0], var_0.origin );
            level.hostages[0].trigger makeunusable();
            level.hostages[0] makeunusable();
            level.hostages[0].useobj unlink();
            level.hostages[0].useobj makeunusable();
            level.hostages[0].trackedobject scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
            level.hostages[0].trackedobject scripts\mp\gameobjects::setvisibleteam( "_encstr_AABA05236DC831" );
            level.hostages[0].trackedobject scripts\mp\gameobjects::releaseid();
            level.hostages[0] notify( "_encstr_B97C13D789418D9865CA6D4B73072522F8ADAB3B84" );
            level.hostages[0] delete();
            self.goalent scripts\mp\gameobjects::setvisibleteam( "_encstr_AABA05236DC831" );
            self.goalent scripts\mp\gameobjects::releaseid();
            scripts\mp\gamescore::giveteamscoreforobjective( var_0.team, 200, 0 );
            level notify( "_encstr_8A7E0B6796C1AF6EB1B74E2B32" );
            level.spawnedvip = 0;
            self.chopper thread _encstr_95D52C67B0E3D9B351060D95EFBF9A99A838F3D7C0F91B8E559E698FD3E1032131D8E73798105043A3B63D07BEF7::littlebirdleave();
            playannouncerbattlechatter( self.chopper.team, "_encstr_9F5F26F5B30343DE47D881AA28B153F39916717AC50E63E76B20EA82708F4E871186C9E568B1ABA8", 10 );

            foreach ( var_2 in level.vipextractzones )
            {
                stopfxontag( level._effect["_encstr_9BB20F6B38F9D1CF5042AF9B6B3973E669"], var_2.goalent, "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
                var_2.goalent stoploopsound();
                var_2.goalent delete();
                var_2.goalent = undefined;
                var_2 delete();
            }

            thread scripts\mp\utility\sound::playsoundonplayers( "_encstr_A68415D97299A1880D276028C75FC6E7021ACD5D4A9279", var_0.team );
            thread scripts\mp\utility\sound::playsoundonplayers( "_encstr_B76C112883FF4D7B2D2FA5B93997B901972B83", scripts\mp\utility\game::getotherteam( var_0.team )[0] );

            foreach ( var_5 in level.teamnamelist )
            {
                if ( scripts\mp\utility\teams::getteamdata( var_5, "_encstr_97580AC41D811F767F3072CB" ) > 0 )
                    scripts\mp\utility\print::teamhudtutorialmessage( "_encstr_937918AD03587B7864549325639787293F1177332379C7571DEB", var_5, 4 );
            }

            level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 0, 0 );
            break;
        }

        waitframe();
    }

    level.objectiveselector.objectivetypes[2] = "_encstr_891805CDDAD238";
    level getnextobjective( "_encstr_9E19042B0359" );
}

summonextractchopper( var_0 )
{
    if ( !isdefined( var_0.chopper ) )
    {
        var_1 = _encstr_95D52C67B0E3D9B351060D95EFBF9A99A838F3D7C0F91B8E559E698FD3E1032131D8E73798105043A3B63D07BEF7::spawnextractchopper( var_0, var_0.origin );
        var_1.invulnerable = 1;
        var_0.chopper = var_1;
        self iprintlnbold( "_encstr_BDB61C2AC31D4EB0C6D15AEDDC016CF638E82BE404AC374039B7AB3A5990" );
        var_1.extractzone = var_0;
        var_1.extractteam = self.team;
        var_0.curorigin = var_0.origin;
        var_0.offset3d = ( 0, 0, 30 );
        var_0 thread extracttriggerwatcher( var_1 );
    }
}

extracttriggerwatcher( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 endon( "_encstr_98FC071903CFE8E05B" );
    var_0 waittill( "_encstr_9B4016B783F0B7226B31037B0B863AD2B06E2EFA1B08464A" );
    self.extractionactive = 1;
    playannouncerbattlechatter( var_0.extractteam, "_encstr_BA2D249A5843F25093BB8109ABD3CBAB318589829F18E19A98800F5F08F0C6F5A85BFEF37820", 10 );
}

playannouncerbattlechatter( var_0, var_1, var_2 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_3 = "_encstr_BAE405ABF74834";
    var_4 = "_encstr_B26908191EF56B1CB0D7" + var_3 + "_encstr_984C028E" + var_1 + "_encstr_984C028E" + var_2;

    if ( soundexists( var_4 ) )
    {
        foreach ( var_6 in level.players )
        {
            if ( var_6.team == var_0 )
                var_6 queuedialogforplayer( var_4, var_1, 2 );
        }
    }
}

pickviptospawn()
{
    var_0 = [];
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == "_encstr_A68C0A5803A5D151A2B310A6" )
            continue;

        if ( !isalive( var_3 ) )
            continue;

        var_3.dist = 0;

        if ( var_3.team == "_encstr_BC850785638DA59537" )
        {
            var_0[var_0.size] = var_3;
            continue;
        }

        var_1[var_1.size] = var_3;
    }

    var_5 = level.primaryflags2;

    if ( !var_0.size || !var_1.size )
    {
        for ( var_6 = var_5[randomint( var_5.size )]; isdefined( level.prevspawnpos ) && var_6 == level.prevspawnpos; var_6 = var_5[randomint( var_5.size )] )
        {

        }

        level.prevspawnpos2 = level.prevspawnpos;
        level.prevspawnpos = var_6;
        return var_6.origin;
    }

    for ( var_7 = 0; var_7 < var_0.size; var_7++ )
    {
        for ( var_8 = var_7 + 1; var_8 < var_0.size; var_8++ )
        {
            var_9 = distancesquared( var_0[var_7].origin, var_0[var_8].origin );
            var_0[var_7].dist = var_0[var_7].dist + var_9;
            var_0[var_8].dist = var_0[var_8].dist + var_9;
        }
    }

    for ( var_7 = 0; var_7 < var_1.size; var_7++ )
    {
        for ( var_8 = var_7 + 1; var_8 < var_1.size; var_8++ )
        {
            var_9 = distancesquared( var_1[var_7].origin, var_1[var_8].origin );
            var_1[var_7].dist = var_1[var_7].dist + var_9;
            var_1[var_8].dist = var_1[var_8].dist + var_9;
        }
    }

    var_10 = var_0[0];

    foreach ( var_3 in var_0 )
    {
        if ( var_3.dist < var_10.dist )
            var_10 = var_3;
    }

    var_13["_encstr_BC850785638DA59537"] = var_10.origin;
    var_10 = var_1[0];

    foreach ( var_3 in var_1 )
    {
        if ( var_3.dist < var_10.dist )
            var_10 = var_3;
    }

    var_13["_encstr_BA840579D3F7F6"] = var_1[0].origin;
    var_16 = undefined;
    var_17 = undefined;

    for ( var_7 = 0; var_7 < var_5.size; var_7++ )
    {
        var_6 = var_5[var_7];
        var_18 = abs( distance( var_6.origin, var_13["_encstr_BC850785638DA59537"] ) - distance( var_6.origin, var_13["_encstr_BA840579D3F7F6"] ) );

        if ( isdefined( level.prevspawnpos ) && var_6 == level.prevspawnpos )
            continue;

        if ( isdefined( level.prevspawnpos2 ) && var_6 == level.prevspawnpos2 )
        {
            if ( var_5.size > 2 )
                continue;
            else
                var_18 = var_18 + 512;
        }

        if ( !isdefined( var_17 ) || var_18 < var_17 )
        {
            var_17 = var_18;
            var_16 = var_6;
        }
    }

    level.prevspawnpos2 = level.prevspawnpos;
    level.prevspawnpos = var_16;
    return var_16.origin;
}

waittospawnjuggcrate()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level waittill( "_encstr_B4120FE6C12C779BF5C4E85BBE9AABCE76" );
    level.spawnedjugg = 1;
    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
    scripts\mp\utility\sound::playsoundonplayers( "_encstr_A6C71623EF7A767DFFDB49C0E2541389236934AD6F8F9999" );

    foreach ( var_1 in level.teamnamelist )
    {
        scripts\mp\utility\dialog::leaderdialog( "_encstr_A8C30C7F2B0208B0D1AA336B52BD", var_1 );

        if ( scripts\mp\utility\teams::getteamdata( var_1, "_encstr_97580AC41D811F767F3072CB" ) > 0 )
            scripts\mp\utility\print::teamhudtutorialmessage( "_encstr_BC471899EBAA755F919CEC1D625E27BDD82BC1C95F676CBB8837", var_1, 4 );
    }

    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 19, 19 );
    level.spawnedjugg = 1;
    level.juggcratespawnpos = pickviptospawn();
    initjugg();
    level.btmjuggcrate = createjuggcrate( level.juggcratespawnpos, ( 0, 0, 0 ) );
    setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", int( 30000 + gettime() ) );
    setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", 2 );
    wait 30;
    level.btmjuggcrate thread juggcratemanageuse();
    setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", 0 );
    setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", -1 );
    objective_icon( level.juggcrateobjid, "_encstr_A93718D2B1EDDCF5ADA5E6A5B5B00EEB35AE3BCEACC99B58EA3A" );
}

createjuggcrate( var_0, var_1 )
{
    var_2 = getgroundposition( var_0, 32 );
    var_3 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_2 + ( 0, 0, 40 ) );
    var_4 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_2 );
    var_3.cratemodel = var_4;
    var_3.cratemodel.angles = var_1;
    var_3.cratemodel setmodel( "_encstr_B77827DA961B2DE80B9CBCF5D8270BD1ACEBB185C97659AFCD3A2CC6B5C2318DCAD70C26AF355D76EC" );
    var_3.crateid = var_3 getentitynumber();
    createjuggcrateobjective( var_3 );
    return var_3;
}

juggcratemanageuse()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A3750609A5E61883" );
    self setuserange( 120 );
    self setcursorhint( "_encstr_939A0CEC70DBF521459F5B47F73D" );
    self sethintstring( &"_encstr_AD411888D9E7056FC5E51F6A85CD13585FE9C1C0613B49DF1FFD" );
    self setuseholdduration( "_encstr_82D40EC8BA4E58E84BF6B9BE36B737D9" );
    self makeusable();
    self.inuse = 0;
    thread juggcratewatchuseprogress();
    thread juggcratewatchusecompleted();
    thread juggcratewatchstopuseprogress();
}

juggcrateused( var_0 )
{
    activatenewjuggernaut( var_0 );
    juggcratecleanup();
    level notify( "_encstr_B1460C131051A7312F7E0D425539" );
    level.objectiveselector.objectivetypes[3] = "_encstr_891805CDDAD238";
    level getnextobjective( "_encstr_A6DD05926DD759" );
    self.cratemodel delete();
    self delete();
}

juggcratecleanup()
{
    scripts\mp\objidpoolmanager::returnobjectiveid( self.objid );
}

juggcratewatchusecompleted()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_0 );

        if ( !scripts\mp\utility\player::isreallyalive( var_0 ) )
            continue;

        juggcrateused( var_0 );
        return;
    }
}

juggcratewatchuseprogress()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        self waittill( "_encstr_B3461135929AC7E9653309682BB72125E27A2E", var_0 );
        self.usingplayer = var_0;
        self.inuse = 1;
        self.lastusetime = gettime();
    }
}

juggcratewatchstopuseprogress()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A3750609A5E61883" );
    var_0 = self.inuse;
    var_1 = self.usingplayer;

    for (;;)
    {
        wait 0.2;

        if ( self.inuse )
        {
            if ( self.lastusetime < gettime() - 200.0 )
            {
                self.inuse = 0;
                self.usingplayer = undefined;
                self.lastusetime = undefined;
                continue;
            }

            var_2 = isdefined( var_1 ) && isdefined( self.usingplayer ) && var_1 != self.usingplayer;

            if ( !var_0 || var_2 )
                updatejuggcrateobjectivestate( self );
        }
        else if ( var_0 )
            updatejuggcrateobjectivestate( self );

        var_0 = self.inuse;
        var_1 = self.usingplayer;
    }
}

createjuggcrateobjective( var_0 )
{
    var_1 = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );
    var_0.objid = var_1;
    level.juggcrateobjid = var_1;
    var_2 = var_0.origin + ( 0, 0, 32 );
    scripts\mp\objidpoolmanager::objective_add_objective( var_1, "_encstr_A65A0856F3802ACA0D6B", var_2, level.iconlocked );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_1, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( var_1, 0 );
    scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_1 );
    objective_setneutrallabel( var_1, "_encstr_8CCA1C550FF94D08D57B97AB736CE0E1D2F51A2EE7711734BFA9A38F6505" );
    objective_setfriendlylabel( var_1, "_encstr_BA441EB3399F6118D9DF213F8177EA4B8AC6CA939B7FA1AFD1C0339399E33857" );
    objective_setenemylabel( var_1, "_encstr_B4F51BB102E18BE44C170161BFA79D7B4E7EB62F6B38E7CC7F574999CF" );
    updatejuggcrateobjectivestate( var_0 );
}

updatejuggcrateobjectivestate( var_0 )
{
    var_1 = var_0.objid;
    var_2 = istrue( var_0.inuse );

    if ( var_2 )
    {
        objective_setownerteam( var_1, var_0.usingplayer.team );
        objective_sethot( var_1, 1 );
    }
    else
    {
        objective_setownerteam( var_1, undefined );
        objective_sethot( var_1, 0 );
    }
}

activatenewjuggernaut( var_0 )
{
    var_1 = level.btm;
    var_2 = spawnstruct();
    var_2.player = var_0;
    var_3 = var_0 getentitynumber();
    var_2.id = var_3;
    var_1.activejuggernauts[var_3] = var_0;
    var_0.btmjugginfo = var_2;
    setupplayerasjugg( var_0 );
    createjuggobjective( var_0, var_2 );
}

setupplayerasjugg( var_0 )
{
    var_1 = level.btm.juggconfig;
    var_0 scripts\mp\juggernaut::jugg_makejuggernaut( var_1 );
    var_0 givemaxammo( var_0.classstruct.loadoutprimaryobject );
    var_0 givemaxammo( var_0.classstruct.loadoutsecondaryobject );
    var_0 scripts\mp\weapons::updatemovespeedscale();
    var_2 = scripts\mp\utility\teams::getenemyteams( var_0.team );
    var_3 = var_2[0];
    var_0.isjuggernaut = 1;
}

createjuggobjective( var_0, var_1 )
{
    var_2 = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );
    var_1.juggobjid = var_2;
    scripts\mp\objidpoolmanager::objective_add_objective( var_2, "_encstr_A65A0856F3802ACA0D6B", var_0.origin, "_encstr_A93718D2B1EDDCF5ADA5E6A5B5B00EEB35AE3BCEACC99B58EA3A" );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_2, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( var_2, 0 );
    scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_2 );
    scripts\mp\objidpoolmanager::update_objective_onentity( var_2, var_0 );
    scripts\mp\objidpoolmanager::update_objective_setzoffset( var_2, 90 );
    objective_setownerteam( var_2, var_0.team );
    objective_setfriendlylabel( var_2, "_encstr_B9B71FF8278017A501C30515E719FD4B2B7050908C78FBAF21A30E1CCF91F68376" );
    objective_setenemylabel( var_2, "_encstr_A67B1DA982FAA4398E829A54AFD33962CAF23D2494F5B4A4C4897D1A14A0A6" );
}

initjugg()
{
    var_0 = scripts\mp\juggernaut::jugg_createconfig();
    level.btm.juggconfig = var_0;
    var_1 = getjuggmaxhealth();
    var_0.maxhealth = var_1;
    var_0.startinghealth = var_1;
    var_0.suit = "_encstr_9F6B184CB4093F3A9B57A88DC3BB19A361918DB091EB958F4AC0";
    var_0.allows["_encstr_9C3D071B63023B26C3"] = 0;
    var_0.allows["_encstr_9F100737E04EA5738E"] = 0;
    var_0.allows["_encstr_ADE40AEADCC2312D1B2DD12F"] = 0;
    var_0.allows["_encstr_A80F0EAFBBDF6B0710B68A93689853A2"] = undefined;
    var_0.classstruct.loadoutprimary = "_encstr_B7060D79FFD2C1ABA9CE6A12B0F1CF";
    var_0.classstruct.loadoutprimaryattachments = [ "_encstr_98CC058C20416A" ];
    var_0.classstruct.loadoutsecondary = "_encstr_80FE0D5ABB70D71C4B7D322B1B1ADE";
}

cleanupobjectiveiconsforjugg( var_0 )
{
    scripts\mp\objidpoolmanager::returnobjectiveid( var_0.btmjugginfo.juggobjid );
}

getjuggmaxhealth()
{
    return getdvarint( "_encstr_9BD113FF287B671AA9F199CCE5A702C821901B6B88" );
}

waittospawnbtmbombs()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );
    level waittill( "_encstr_94270D370EB0EEB9BE261DB6AF9191" );
    level.bombexploded = 0;
    level.multibomb = 1;
    level.bombsplanted = 0;
    level.bombtimer = 45;
    level.defusetime = 5;
    level.planttime = 5;
    level.bombzones = [];
    level.aplanted = 0;
    level.bplanted = 0;
    level thread applybombstoplayers();
    var_0 = getfirstbtmbombloc();
    var_1 = getsecondbtmbombloc( var_0 );
    var_0 = getgroundposition( var_0.origin, 64 );
    var_1 = getgroundposition( var_1.origin, 64 );
    level.resetprogress = 1;
    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
    var_2 = getentarray( "_encstr_889A09E530F7E918279537", "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_2 = _encstr_BA601C371BE4A5838EE6BCB6E097B3B0B656A35E83CADCE5CD3217CEDC6C::removebombzonec( var_2 );

    for ( var_3 = 0; var_3 < var_2.size; var_3++ )
    {
        var_4 = getentarray( var_2[var_3].target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        if ( var_3 == 0 )
        {
            var_2[var_3] = modifybombzonecollision( var_4, var_2[var_3], var_0 );
            var_2[var_3].origin = var_0;
            var_4[0].origin = var_0;
        }
        else
        {
            var_2[var_3] = modifybombzonecollision( var_4, var_2[var_3], var_1 );
            var_2[var_3].origin = var_1;
            var_4[0].origin = var_1;
        }

        var_5 = scripts\mp\gameobjects::createuseobject( "_encstr_9BA4080D39CFFB5AB7C1", var_2[var_3], var_4, ( 0, 0, 64 ) );
        var_5 scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
        var_6 = var_2[var_3].script_label;

        if ( isdefined( var_2[var_3].objectivekey ) )
            var_5.objectivekey = var_2[var_3].objectivekey;
        else
            var_5.objectivekey = var_5 scripts\mp\gameobjects::getlabel();

        if ( isdefined( var_2[var_3].iconname ) )
            var_5.iconname = var_2[var_3].iconname;
        else
            var_5.iconname = var_5 scripts\mp\gameobjects::getlabel();

        var_5.id = "_encstr_BED80A317BD631BE3DF673CA";
        var_5.trigger setusepriority( -3 );
        var_5 scripts\mp\gameobjects::setusetime( level.planttime );
        var_5 scripts\mp\gameobjects::setwaitweaponchangeonuse( 0 );
        var_5 scripts\mp\gameobjects::setusehinttext( &"_encstr_AB521CA628F2247A6211EBA8F4FA143128E415BE511605267A9A92AC159A" );

        if ( var_5.objectivekey == "_encstr_950703BF07" )
        {
            var_5.objectivekey = "_encstr_B80703EB16";
            var_5.iconname = "_encstr_B80703EB16";
        }

        var_5 scripts\mp\gameobjects::setobjectivestatusicons( level.iconlocked );
        var_5 scripts\mp\gameobjects::setvisibleteam( "_encstr_BC19047780DA" );
        var_5.onbeginuse = _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::bombzone_onbeginuse;
        var_5.onenduse = _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::bombzone_onenduse;
        var_5.onuse = _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::bombzone_onuseplantobject;
        var_5.oncantuse = _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::bombzone_oncantuse;
        var_5.useweapon = getcompleteweaponname( "_encstr_B22C12108D8B47BB1F3AA0D24E8EE8E858AE7863" );
        var_5.bombplanted = 0;
        var_5.bombexploded = undefined;
        var_5.resetprogress = level.resetprogress;

        for ( var_7 = 0; var_7 < var_4.size; var_7++ )
        {
            if ( isdefined( var_4[var_7].script_exploder ) )
            {
                var_5.exploderindex = var_4[var_7].script_exploder;
                var_4[var_7] thread _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::setupkillcament( var_5 );
                break;
            }
        }

        var_5.bombdefusetrig = getent( var_4[0].target, "_encstr_B8CE0BE43FC317DF690862BA48" );
        var_5.bombdefusetrig.origin = var_5.bombdefusetrig.origin + ( 0, 0, -10000 );
        var_5.bombdefusetrig.label = var_6;
        var_5.noweapondropallowedtrigger = spawn( "_encstr_9E6B0FE8274B9DD92BC9D7278591B4D5E6", var_5.trigger.origin, 0, 140, 100 );
        level.objectives[var_5.objectivekey] = var_5;
        level.bombzones[level.bombzones.size] = var_5;
    }

    setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", int( 30000 + gettime() ) );
    setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", 2 );
    wait 30;

    foreach ( var_5 in level.bombzones )
    {
        var_5 scripts\mp\gameobjects::allowuse( "_encstr_BC19047780DA" );
        var_5 scripts\mp\gameobjects::setobjectivestatusicons( level.iconplant );
    }

    setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", 0 );
    setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", -1 );
    level thread scripts\mp\hud_message::updatematchstatushintforallplayers( undefined, 20, 20 );
}

applybombstoplayers()
{
    foreach ( var_1 in level.players )
    {
        if ( !isai( var_1 ) )
        {
            var_1 setclientomnvar( "_encstr_815A11ABE7B1F64022CA7248F51F79BE6A1F7D", 1 );
            var_1.isplanting = 0;
            var_1.isdefusing = 0;
            var_1.isbombcarrier = 1;
        }
    }
}

resetbombzone()
{
    scripts\mp\gameobjects::setownerteam( "_encstr_9BA4080D39CFFB5AB7C1" );
    scripts\mp\gameobjects::setobjectivestatusicons( level.iconplant );
    self.id = "_encstr_BED80A317BD631BE3DF673CA";
    scripts\mp\gameobjects::setusetime( level.planttime );
    scripts\mp\gameobjects::setvisibleteam( "_encstr_BC19047780DA" );
    scripts\mp\gameobjects::setusehinttext( &"_encstr_AB521CA628F2247A6211EBA8F4FA143128E415BE511605267A9A92AC159A" );
    self.useweapon = getcompleteweaponname( "_encstr_B22C12108D8B47BB1F3AA0D24E8EE8E858AE7863" );
    self.bombexploded = undefined;
    self.bombplanted = 0;
}

bombhandler( var_0, var_1, var_2 )
{
    level.bombsplanted = level.bombsplanted - 1;

    if ( self.objectivekey == "_encstr_B80703EB16" )
        level.aplanted = 0;
    else
        level.bplanted = 0;

    _encstr_9D04262397C00C9B650B9EA273100FC6C073BCA109D0D29E8001C289D9187F7ED0FF2E05DD981A67::setbombtimeromnvars();

    if ( level.gameended )
        return;

    if ( var_1 == "_encstr_AB0808DFB97F822F1899" )
    {
        self.bombexploded = 1;
        self.bombplanted = 0;
        scripts\mp\gameobjects::releaseid();
        scripts\mp\gamescore::giveteamscoreforobjective( var_0.team, 100 );

        if ( level.bombexploded > 1 )
        {
            level.objectiveselector.objectivetypes[4] = "_encstr_891805CDDAD238";
            level getnextobjective( "_encstr_9507035309" );
        }
    }
    else
    {
        var_0 notify( "_encstr_B9A10DD145CDB008EA27752B0782ED" + self.objectivekey );
        self notify( "_encstr_BC7B08812DDFE886AF72" );
        resetbombzone();
    }
}

getsecondbtmbombloc( var_0 )
{
    var_1 = 1000000;
    var_2 = [];
    var_3 = [];

    foreach ( var_5 in level.players )
    {
        if ( var_5.team == "_encstr_A68C0A5803A5D151A2B310A6" )
            continue;

        if ( !isalive( var_5 ) )
            continue;

        var_5.dist = 0;

        if ( var_5.team == "_encstr_BC850785638DA59537" )
        {
            var_2[var_2.size] = var_5;
            continue;
        }

        var_3[var_3.size] = var_5;
    }

    var_7 = level.primaryflags2;

    if ( !var_2.size || !var_3.size )
    {
        for ( var_8 = var_7[randomint( var_7.size )]; isdefined( level.prevbomb ) && var_8 == level.prevbomb; var_8 = var_7[randomint( var_7.size )] )
        {

        }

        level.prevbomb2 = level.prevbomb;
        level.prevbomb = var_8;
        return var_8;
    }

    for ( var_9 = 0; var_9 < var_2.size; var_9++ )
    {
        for ( var_10 = var_9 + 1; var_10 < var_2.size; var_10++ )
        {
            var_11 = distancesquared( var_2[var_9].origin, var_2[var_10].origin );
            var_2[var_9].dist = var_2[var_9].dist + var_11;
            var_2[var_10].dist = var_2[var_10].dist + var_11;
        }
    }

    for ( var_9 = 0; var_9 < var_3.size; var_9++ )
    {
        for ( var_10 = var_9 + 1; var_10 < var_3.size; var_10++ )
        {
            var_11 = distancesquared( var_3[var_9].origin, var_3[var_10].origin );
            var_3[var_9].dist = var_3[var_9].dist + var_11;
            var_3[var_10].dist = var_3[var_10].dist + var_11;
        }
    }

    var_12 = var_2[0];

    foreach ( var_5 in var_2 )
    {
        if ( var_5.dist < var_12.dist )
            var_12 = var_5;
    }

    var_15["_encstr_BC850785638DA59537"] = var_12.origin;
    var_12 = var_3[0];

    foreach ( var_5 in var_3 )
    {
        if ( var_5.dist < var_12.dist )
            var_12 = var_5;
    }

    var_15["_encstr_BA840579D3F7F6"] = var_3[0].origin;
    var_18 = undefined;
    var_19 = undefined;

    for ( var_9 = 0; var_9 < var_7.size; var_9++ )
    {
        var_8 = var_7[var_9];
        var_20 = abs( distance( var_8.origin, var_15["_encstr_BC850785638DA59537"] ) - distance( var_8.origin, var_15["_encstr_BA840579D3F7F6"] ) );

        if ( isdefined( level.prevbomb ) && var_8 == level.prevbomb )
            continue;

        if ( isdefined( level.prevbomb2 ) && var_8 == level.prevbomb2 )
        {
            if ( var_7.size > 2 )
                continue;
            else
                var_20 = var_20 + 512;
        }

        var_11 = scripts\engine\utility::distance_2d_squared( var_0.origin, var_8.origin );

        if ( isdefined( var_0 ) )
        {
            if ( var_11 > var_1 && var_0.origin != var_8.origin )
                var_18 = var_8;
        }
        else if ( var_11 > 1000000 )
            var_18 = var_8;

        if ( !isdefined( var_19 ) || var_20 < var_19 )
        {
            var_19 = var_20;
            var_18 = var_8;
        }
    }

    level.prevbomb2 = level.prevbomb;
    level.prevbomb = var_18;
    return var_18;
}

getfirstbtmbombloc()
{
    var_0 = [];
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == "_encstr_A68C0A5803A5D151A2B310A6" )
            continue;

        if ( !isalive( var_3 ) )
            continue;

        var_3.dist = 0;

        if ( var_3.team == "_encstr_BC850785638DA59537" )
        {
            var_0[var_0.size] = var_3;
            continue;
        }

        var_1[var_1.size] = var_3;
    }

    var_5 = level.primaryflags2;

    if ( !var_0.size || !var_1.size )
    {
        for ( var_6 = var_5[randomint( var_5.size )]; isdefined( level.prevbomb ) && var_6 == level.prevbomb; var_6 = var_5[randomint( var_5.size )] )
        {

        }

        level.prevbomb2 = level.prevbomb;
        level.prevbomb = var_6;
        return var_6;
    }

    for ( var_7 = 0; var_7 < var_0.size; var_7++ )
    {
        for ( var_8 = var_7 + 1; var_8 < var_0.size; var_8++ )
        {
            var_9 = distancesquared( var_0[var_7].origin, var_0[var_8].origin );
            var_0[var_7].dist = var_0[var_7].dist + var_9;
            var_0[var_8].dist = var_0[var_8].dist + var_9;
        }
    }

    for ( var_7 = 0; var_7 < var_1.size; var_7++ )
    {
        for ( var_8 = var_7 + 1; var_8 < var_1.size; var_8++ )
        {
            var_9 = distancesquared( var_1[var_7].origin, var_1[var_8].origin );
            var_1[var_7].dist = var_1[var_7].dist + var_9;
            var_1[var_8].dist = var_1[var_8].dist + var_9;
        }
    }

    var_10 = var_0[0];

    foreach ( var_3 in var_0 )
    {
        if ( var_3.dist < var_10.dist )
            var_10 = var_3;
    }

    var_13["_encstr_BC850785638DA59537"] = var_10.origin;
    var_10 = var_1[0];

    foreach ( var_3 in var_1 )
    {
        if ( var_3.dist < var_10.dist )
            var_10 = var_3;
    }

    var_13["_encstr_BA840579D3F7F6"] = var_1[0].origin;
    var_16 = undefined;
    var_17 = undefined;

    for ( var_7 = 0; var_7 < var_5.size; var_7++ )
    {
        var_6 = var_5[var_7];
        var_18 = abs( distance( var_6.origin, var_13["_encstr_BC850785638DA59537"] ) - distance( var_6.origin, var_13["_encstr_BA840579D3F7F6"] ) );

        if ( isdefined( level.prevbomb ) && var_6 == level.prevbomb )
            continue;

        if ( isdefined( level.prevbomb2 ) && var_6 == level.prevbomb2 )
        {
            if ( var_5.size > 2 )
                continue;
            else
                var_18 = var_18 + 512;
        }

        if ( !isdefined( var_17 ) || var_18 < var_17 )
        {
            var_17 = var_18;
            var_16 = var_6;
        }
    }

    level.prevbomb2 = level.prevbomb;
    level.prevbomb = var_16;
    return var_16;
}

modifybombzonecollision( var_0, var_1, var_2 )
{
    var_3 = var_1.origin;
    var_4 = modifiedbombzones( var_1, var_3, var_0, var_2 );
    return var_4;
}

modifiedbombzones( var_0, var_1, var_2, var_3 )
{
    var_2[0].origin = var_3;
    var_2[0].angles = ( 0, 0, 0 );
    var_0.origin = var_3;
    var_0.angles = ( 0, 0, 0 );
    setmodifiedbombzonescollision( ( 0, 0, 35 ), ( 0, 0, 0 ), var_1, var_2 );
    setexplodermodel( var_1, var_2 );
    return var_0;
}

setmodifiedbombzonescollision( var_0, var_1, var_2, var_3 )
{
    var_4 = getentarray( "_encstr_A6F51207834290EF033989F3E367ABF85D1CA381", "_encstr_B9110A36362C3737732CDA59" );

    foreach ( var_6 in var_4 )
    {
        if ( isdefined( var_6.script_gameobjectname ) && var_6.script_gameobjectname == "_encstr_889A09E530F7E918279537" )
        {
            if ( distance( var_6.origin, var_2 ) < 100 )
            {
                var_7 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_3[0].origin + var_0 );
                var_7.angles = var_1;
                var_7 clonebrushmodeltoscriptmodel( var_6 );
                var_7 disconnectpaths();
                var_6 delete();
                break;
            }
        }
    }
}

setexplodermodel( var_0, var_1 )
{
    var_2 = getentarray( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", "_encstr_B9110A36362C3737732CDA59" );

    for ( var_3 = 0; var_3 < var_2.size; var_3++ )
    {
        if ( isdefined( var_2[var_3].script_exploder ) )
        {
            if ( isdefined( var_2[var_3].targetname ) && var_2[var_3].targetname == "_encstr_A83B096D98236837F7A268" && distance( var_2[var_3].origin, var_0 ) < 100 )
            {
                var_2[var_3].origin = var_1[0].origin;
                var_2[var_3].angles = var_1[0].angles;
            }
        }
    }
}

getspawnpoint()
{
    var_0 = self.pers["_encstr_89EF05D46BA8FD"];

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        var_1 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_A9BD0ED638EBA391DAFACDC10BBB9BBE" + var_0 + "_encstr_A4810727CEFBF7F281" );
        var_2 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1 );
    }
    else if ( isdefined( level.radioobject ) )
    {
        var_1 = removespawnsinactivehq( level.radioobject.spawnpoints );
        var_3 = removespawnsinactivehq( level.radioobject.fallbackspawnpoints );
        var_4 = getobjzonedeadzonedist();
        var_5 = [];
        var_5["_encstr_9EE315300A23938BDF1BF075201B9055CF4018A8F2BF1D"] = level.radioobject.visuals[0] getentitynumber();
        var_5["_encstr_B9921A5B85E1A65CD52C399591114BCD3A51EDD34C352B1B47A5EC95"] = level.radioobject.visuals[0].furthestspawndistsq;
        var_5["_encstr_A9F117C20899740388683D14F511A3B8C778AAA8902FABEFA3"] = var_4 * var_4;
        var_5["_encstr_95421C5AE0D8BF2FE069CDFE53C8F09FF01922A3A920A76771BBF3EC1740"] = level.enemy_spawn_influence_dist_sq;
        var_2 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, level.radioobject.visuals[0].spawnset, level.radioobject.visuals[0].fallbackspawnset, undefined, var_5 );
    }
    else if ( isdefined( level.btmflagobject ) )
    {
        var_1 = removespawnsinactiveflag( level.btmflagobject.trigger.spawnpoints );
        var_3 = removespawnsinactiveflag( level.btmflagobject.trigger.fallbackspawnpoints );
        var_4 = getobjzonedeadzonedist();
        var_5 = [];
        var_5["_encstr_9EE315300A23938BDF1BF075201B9055CF4018A8F2BF1D"] = level.btmflagobject.trigger getentitynumber();
        var_5["_encstr_B9921A5B85E1A65CD52C399591114BCD3A51EDD34C352B1B47A5EC95"] = level.btmflagobject.trigger.furthestspawndistsq;
        var_5["_encstr_A9F117C20899740388683D14F511A3B8C778AAA8902FABEFA3"] = var_4 * var_4;
        var_5["_encstr_95421C5AE0D8BF2FE069CDFE53C8F09FF01922A3A920A76771BBF3EC1740"] = level.enemy_spawn_influence_dist_sq;
        var_2 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, level.btmflagobject.trigger.spawnset, level.btmflagobject.trigger.fallbackspawnset, undefined, var_5 );
    }
    else
        var_2 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, "_encstr_930E073E8FC00DDF69", "_encstr_A30C093385361B4CB06C6D" );

    return var_2;
}

getobjzonedeadzonedist()
{
    return level.spawn_deadzone_dist;
}

removespawnsinactivehq( var_0 )
{
    var_1 = [];

    if ( isdefined( var_0 ) )
    {
        foreach ( var_3 in var_0 )
        {
            if ( !ispointinvolume( var_3.origin, level.radioobject.trigger ) )
                var_1[var_1.size] = var_3;
        }
    }

    return var_1;
}

removespawnsinactiveflag( var_0 )
{
    var_1 = [];

    if ( isdefined( var_0 ) )
    {
        foreach ( var_3 in var_0 )
        {
            if ( !ispointinvolume( var_3.origin, level.btmflagobject.trigger ) )
                var_1[var_1.size] = var_3;
        }
    }

    return var_1;
}

forcespawnplayers()
{
    var_0 = level.players;

    for ( var_1 = 0; var_1 < var_0.size; var_1++ )
    {
        var_2 = var_0[var_1];

        if ( !isdefined( var_2 ) || isalive( var_2 ) )
            continue;

        var_2 notify( "_encstr_AFD50C2238A5E6AFDE965841ACC0" );
        wait 0.1;
    }
}

onspawnplayer()
{
    scripts\mp\utility\lower_message::setlowermessageomnvar( 0 );
    self.forcespawnnearteammates = undefined;
    self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", -1 );
    thread updatematchstatushintonspawn();

    if ( istrue( level.multibomb ) )
    {
        self setclientomnvar( "_encstr_815A11ABE7B1F64022CA7248F51F79BE6A1F7D", 1 );
        self.isplanting = 0;
        self.isdefusing = 0;
        self.isbombcarrier = 1;
    }
}

movezoneaftertime( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level endon( "_encstr_AD740BDA4DF6B030833F577313" );
    level endon( "_encstr_A8940F52FD985753FF7BD6978F6B784095" );
    level.zonemovetime = var_0;
    level.zonedestroyedbytimer = 0;
    _encstr_A3AF295A720B1BB083470E19BA8DA05741F2A5115190082D0F02834652F7680DBEFA53FC28F3477A6757D8::zonetimerwait();
    level.zonedestroyedbytimer = 1;
    level notify( "_encstr_8FBD0BBA97A04F464F80533BE4" );
    level notify( "_encstr_8C9C0F90B8CD42479108E7E3A8A8290AA1" );
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( !isplayer( var_1 ) || var_1.team == self.team )
        return;

    if ( var_1 == self )
        return;

    if ( isdefined( level.radioobject ) )
    {
        var_10 = level.radioobject.ownerteam;

        if ( !isdefined( var_10 ) )
            return;

        if ( isdefined( var_4 ) && scripts\mp\utility\weapon::iskillstreakweapon( var_4.basename ) )
            return;

        var_11 = self;
        var_12 = 0;
        var_13 = var_1.team;

        if ( level.zonecapturetime > 0 && var_1 istouching( level.radioobject.trigger ) )
        {
            if ( var_10 != var_13 )
                var_12 = 1;
        }

        if ( var_13 != var_10 )
        {
            if ( var_11 istouching( level.radioobject.trigger ) )
            {
                if ( var_12 )
                    var_1 thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_8AFD0DDF790AB0B5C35216987A53E1" );

                var_1 thread scripts\mp\awards::givemidmatchaward( "_encstr_BA020F68F21FC3E6F347AF9E43BFEB8943" );
                thread scripts\common\utility::_id_13E0A( level._id_11B24._id_11B30, var_9, "_encstr_97A70AE945873020839AC811" );
            }
        }
        else if ( var_1 istouching( level.radioobject.trigger ) )
        {
            if ( var_12 )
                var_1 thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_8AFD0DDF790AB0B5C35216987A53E1" );

            var_1 thread scripts\mp\awards::givemidmatchaward( "_encstr_B3D80EB6ED91567DE17D91B2CC95CD23" );
            var_1 scripts\mp\utility\stats::incpersstat( "_encstr_9CF70851FD0FB8B81BB3", 1 );
            var_1 scripts\mp\persistence::statsetchild( "_encstr_A2460627DEABDC23", "_encstr_9CF70851FD0FB8B81BB3", var_1.pers["_encstr_9CF70851FD0FB8B81BB3"] );
            var_1 scripts\mp\utility\stats::setextrascore1( var_1.pers["_encstr_9CF70851FD0FB8B81BB3"] );
        }
    }

    if ( istrue( level.spawnedjugg ) )
    {
        if ( var_3 == "_encstr_97590CFD0825D7720BD1A018A1F3" && var_4.basename == "_encstr_AABA05236DC831" && isdefined( self.wasswitchingteamsforonplayerkilled ) )
            return;

        var_11 = self;

        if ( isdefined( var_11.isjuggernaut ) )
        {
            level.spawnedjugg = 0;

            if ( isdefined( var_11.juggoverlay ) )
                var_11.juggoverlay destroy();

            var_11.playerstreakspeedscale = undefined;
            var_11.nostuckdamagekill = 0;
            var_11 scripts\mp\utility\player::_setsuit( "_encstr_A17A13C2BB4B274748A5110D59284A771B33390AE3" );
            cleanupobjectiveiconsforjugg( var_11 );
        }

        if ( isdefined( var_1 ) && isplayer( var_1 ) )
        {
            var_14 = 0;
            var_15 = 0;
            var_16 = 0;
            var_17 = 0;
            var_18 = 0;
            var_19 = 0;

            if ( var_1.team != var_11.team )
            {
                if ( isdefined( var_11.isjuggernaut ) )
                {
                    if ( isdefined( var_1.isjuggernaut ) )
                        var_15 = 1;
                    else
                        var_16 = 1;
                }
                else if ( isdefined( var_1.isjuggernaut ) )
                    var_17 = 1;
            }

            if ( var_16 )
            {
                var_1 thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_98BA10DF38F81489553D574F2D4D52A16378" );
                var_19 = level.ppkonjugg;
            }
            else if ( var_15 )
                var_19 = level.ppkjuggonjugg;
            else if ( var_17 )
                var_19 = level.ppkasjugg;

            if ( var_19 )
                var_1 scripts\mp\gamescore::giveteamscoreforobjective( var_1.pers["_encstr_89EF05D46BA8FD"], var_19 );

            if ( var_1.team != var_11.team && game["_encstr_A9AD064B0D19E377"] == "_encstr_B9E70983DEE6D1760BB5CA" && game["_encstr_B4040B6BBF898046C247E5C3DF"][var_1.team] > game["_encstr_B4040B6BBF898046C247E5C3DF"][level.otherteam[var_1.team]] )
                var_1.finalkill = 1;
        }
    }
}

objectiveselectorsetup()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level.objectiveselector = spawnstruct();
    level.objectiveselector.objectivetypes = [];
    level.objectiveselector.objectivetypes[0] = "_encstr_9318045AFDDD";
    level.objectiveselector.objectivetypes[1] = "_encstr_B7D7054F3030F9";
    level.objectiveselector.objectivetypes[2] = "_encstr_9E19042B0359";
    level.objectiveselector.objectivetypes[3] = "_encstr_A6DD05926DD759";
    level.objectiveselector.objectivetypes[4] = "_encstr_9507035309";
    level.objectiveselector.prevobj = undefined;
    level.objectiveselector.currentobj = undefined;
    level getnextobjective();
}

getnextobjective( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );

    if ( isdefined( var_0 ) )
    {
        level.objectiveselector.prevobj = var_0;

        for (;;)
        {
            var_1 = randomint( level.objectiveselector.objectivetypes.size );

            if ( var_0 != level.objectiveselector.objectivetypes[var_1] && level.objectiveselector.objectivetypes[var_1] != "_encstr_891805CDDAD238" )
                break;

            waitframe();
        }

        setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", int( 45000 + gettime() ) );
        setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", 1 );
        wait 45;
    }
    else
    {
        var_1 = randomint( level.objectiveselector.objectivetypes.size );
        setomnvar( "_encstr_93190D4B7C511AC9E81783DAB82D8D", int( 60000 + gettime() ) );
        setomnvar( "_encstr_89C50EC3B061FAD339374FABB35D0B23", 1 );
        wait 60;
    }

    switch ( var_1 )
    {
        case 0:
            startbtmflag();
            break;
        case 1:
            starthq();
            break;
        case 2:
            startvip();
            break;
        case 3:
            startjugg();
            break;
        case 4:
            startddbombs();
            break;
        default:
            startbtmflag();
            break;
    }
}

startbtmflag()
{
    level notify( "_encstr_BA770ECDC12CEEE67D4CA36BBE32F66B" );
}

starthq()
{
    level notify( "_encstr_B9270D6EC10BBBB9F589D1ADEB435C" );
}

startvip()
{
    level notify( "_encstr_8F770E8B9B674F402FCD2B17412C4B38" );
}

startjugg()
{
    level notify( "_encstr_B4120FE6C12C779BF5C4E85BBE9AABCE76" );
}

startddbombs()
{
    level notify( "_encstr_94270D370EB0EEB9BE261DB6AF9191" );
}

give_capture_credit( var_0, var_1, var_2, var_3, var_4 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level.lastcaptime = gettime();
    var_5 = var_4;

    if ( isdefined( var_5.owner ) )
        var_5 = var_5.owner;

    if ( isplayer( var_5 ) )
    {
        if ( !isscoreboosting( var_5 ) )
        {
            var_5 thread scripts\common\utility::_id_13E0A( level._id_11B29, "_encstr_9EEB08EFAF2B15984A67", var_5.origin );
            var_5 thread scripts\mp\awards::givemidmatchaward( "_encstr_B8A70FDAF6C856D71A1CEBDCCA8DAB9CCA" );

            if ( isdefined( level.radioobject.lastactivatetime ) && gettime() - level.radioobject.lastactivatetime <= 2100 )
                var_5 thread scripts\mp\awards::givemidmatchaward( "_encstr_88D912C52869F2F7A030C70760F8835A47B64E3A" );

            if ( var_5.lastkilltime + 500 > gettime() )
            {

            }
            else
                var_5 _encstr_A3AF295A720B1BB083470E19BA8DA05741F2A5115190082D0F02834652F7680DBEFA53FC28F3477A6757D8::setcrankedtimerzonecap( var_5 );
        }
    }

    var_6 = getarraykeys( var_0 );

    for ( var_7 = 0; var_7 < var_6.size; var_7++ )
    {
        var_8 = var_0[var_6[var_7]].player;
        var_8 updatecapsperminute( var_3 );

        if ( !isscoreboosting( var_8 ) )
        {
            var_8 scripts\mp\utility\stats::incpersstat( "_encstr_B2CF0967600940A373E78A", 1 );
            var_8 scripts\mp\persistence::statsetchild( "_encstr_A2460627DEABDC23", "_encstr_B2CF0967600940A373E78A", var_8.pers["_encstr_B2CF0967600940A373E78A"] );
        }
        else
        {

        }

        wait 0.05;
    }
}

updatecapsperminute( var_0 )
{
    if ( !isdefined( self.capsperminute ) )
    {
        self.numcaps = 0;
        self.capsperminute = 0;
    }

    if ( !isdefined( var_0 ) || var_0 == "_encstr_9BA4080D39CFFB5AB7C1" )
        return;

    self.numcaps++;
    var_1 = scripts\mp\utility\game::gettimepassed() / 60000;

    if ( isplayer( self ) && isdefined( self.timeplayed["_encstr_BE7D068EF6D10B1B"] ) )
        var_1 = self.timeplayed["_encstr_BE7D068EF6D10B1B"] / 60;

    self.capsperminute = self.numcaps / var_1;

    if ( self.capsperminute > self.numcaps )
        self.capsperminute = self.numcaps;
}

isscoreboosting( var_0 )
{
    if ( var_0.capsperminute > 3 )
        return 1;

    return 0;
}

onplayerconnect( var_0 )
{
    var_0._hardpointeffect = [];
    var_0.numcaps = 0;
    var_0.capsperminute = 0;
    var_0.timebyrotation = [];
    var_0 scripts\mp\utility\stats::setextrascore0( 0 );

    if ( isdefined( var_0.pers["_encstr_B2CF0967600940A373E78A"] ) )
        var_0 scripts\mp\utility\stats::setextrascore0( var_0.pers["_encstr_B2CF0967600940A373E78A"] );

    var_0 scripts\mp\utility\stats::setextrascore1( 0 );

    if ( isdefined( var_0.pers["_encstr_9CF70851FD0FB8B81BB3"] ) )
        var_0 scripts\mp\utility\stats::setextrascore1( var_0.pers["_encstr_9CF70851FD0FB8B81BB3"] );

    thread onplayerspawned( var_0 );
}

onplayerspawned( var_0 )
{
    for (;;)
        var_0 waittill( "_encstr_983508635BE787C548A1" );
}

getownerteamplayer( var_0 )
{
    var_1 = undefined;

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == var_0 )
        {
            var_1 = var_3;
            break;
        }
    }

    return var_1;
}

getrespawndelay()
{
    if ( !level.delayplayer )
        return undefined;

    if ( !isdefined( level.radioobject ) )
        return undefined;

    var_0 = level.radioobject.ownerteam;

    if ( isdefined( var_0 ) )
    {
        if ( self.pers["_encstr_89EF05D46BA8FD"] == var_0 )
        {
            if ( !level.spawndelay )
                return undefined;

            return level.spawndelay;
        }
    }
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
}

updatematchstatushintonspawn()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( isdefined( level.btmflagobject ) )
    {
        if ( isdefined( level.btmflagobject.ownerteam ) )
        {
            if ( level.btmflagobject.ownerteam == self.team )
                self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 15 );
            else
                self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 14 );
        }
    }
    else if ( isdefined( level.radioobject ) )
    {
        if ( isdefined( level.radioobject.ownerteam ) )
        {
            if ( level.radioobject.ownerteam == self.team )
                self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 17 );
            else
                self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 16 );
        }
    }
    else if ( istrue( level.spawnedvip ) )
    {
        if ( isdefined( level.hostagecarrier ) )
        {
            if ( level.hostagecarrier.team == self.team )
            {
                if ( level.hostagecarrier == self )
                    self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 13 );
                else
                    self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 11 );
            }
            else
                self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 12 );
        }
        else if ( level.hostages[0].team == self.team )
            self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 10 );
        else
            self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 12 );
    }
    else if ( istrue( level.spawnedjugg ) )
        self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 19 );
    else
        self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 0 );
}

seticonnames()
{
    level.iconneutral = "_encstr_B6B118EE58F207B7B4DC47EB1BC28347AE93B2B956D5D14E0BD8";
    level.iconcapture = "_encstr_B69A11DBA05BBA1FB0A0E4D7CE59AB43BBD062";
    level.icondefend = "_encstr_944B10F7CF52BBADA31823A97083A7A7E825";
    level.iconcontested = "_encstr_873B13BB58F20EBDD273E8F5367B37E82BB9472BC8";
    level.icontaking = "_encstr_A40710BBB02F07B7D2E6D1BE8E165B2D73CE";
    level.iconlosing = "_encstr_9302101F7763CF80699D83FE0547A88BAAC7";
    level.icontarget = "_encstr_B79114071B6BD3BF8008A36121D8F57945B3ABCF8B15";
    level.iconlocked = "_encstr_80EC15D2F3D0908FA73171985814F5C04181AF2A5FCD3C";
    level.iconhqtarget = "_encstr_881A0A6847162BAE15D0B29B";
    level.iconhqneutral = "_encstr_ADB60BC01F67302873330E69D0";
    level.iconhqcapture = "_encstr_89CE0BF07B6187371E23934AEA";
    level.iconhqdefend = "_encstr_BC9F0A0DC5FA23AC33B2DC23";
    level.iconhqcontested = "_encstr_AB130DD082BFF8500A2333E7DB422D";
    level.iconhqtaking = "_encstr_9E560A0DE2AFA3855BB473B3";
    level.iconhqlosing = "_encstr_BECE0AFC5F572A9F9BB0BB97";
    level.iconrecover = "_encstr_BCB4156B9143025572401977A3C7588D63CFA399CCD2D0";
    level.iconescort = "_encstr_94281C772CBCE0BDD2E61DAFB2CD8D7B4E8E7D3B2D38FAC6859C4EA5599C";
    level.iconkill = "_encstr_B2FE1A60CA8001084F9ECD5063B790F1E12318E0815E5BE30BB15D3E";
    level.iconextract = "_encstr_B3D215A77FE20B1D13C8F3598869934B59D62C170C08D3";
    level.iconpreventextract = "_encstr_A9301C08729D95A68F39E35F1FDF487949AB28E0BBB7DD9B57256B5CE113";
    level.iconplant = "_encstr_B73014B3DFA11AAD93B02BF85BF1604F278D897090E5";
}

setupwaypointicons()
{

}
