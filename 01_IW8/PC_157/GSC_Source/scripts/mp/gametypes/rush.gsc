// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "_encstr_9E700851BEE33DF1B547" ) == "_encstr_8A510E519897A1332E4A3898E243F5B9" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 300 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 3 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 2 );
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 1, 0, 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    updategametypedvars();
    level.teambased = 1;
    level.onstartgametype = ::onstartgametype;
    level.getspawnpoint = ::getspawnpoint;
    level.onplayerkilled = ::onplayerkilled;
    level.lastcaptime = gettime();
    level.capturedecay = 1;
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_82CC14D79FCAAD80513299D65F3F30D3920779730F22";

    if ( getdvarint( "_encstr_B8020A9E9AA69A6292517AA0" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_891904A1D8BE" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_93570B93F4A9629272A825B426" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_889708C9D0E7EBE819D9" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_B4050C8B3E9A11DD626FD1CBDB5A" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_B81804D2C101" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_A61805573F9318" + scripts\mp\utility\game::getgametype() + "_encstr_9EB909B928022745805102" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] + "_encstr_934305E6126268";

    game["_encstr_B8DA073D799798C7C7"]["_encstr_9E240C10CE33016D6AEA39B0F244"] = "_encstr_AF210DD2E801C30F9B7D97AF86E06F";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3420C3D576AC3C8736F09906BB2"] = "_encstr_AF210DD2E801C30F9B7D97AF86E06F";
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "_encstr_97BF19C31EE3D73A4B9B127988BF73C79BF74C41A0C8E38711B80B", getmatchrulesdata( "_encstr_9DA0098AADFF9A640988B7", "_encstr_9D771069CFA854CBA793B2DAF81DDF4D6883" ) );
    setdynamicdvar( "_encstr_AF4819F8EF12B6BD03927390EE3AC19B7D33C0F91FCA8979EABD78", getmatchrulesdata( "_encstr_9DA0098AADFF9A640988B7", "_encstr_AAA010DF585B2C0B85D57F2B464BD3C940C8" ) );
    setdynamicdvar( "_encstr_9821182F47EB6040AD02E806AF78A82E3263938BF75030E8C51A", getmatchrulesdata( "_encstr_9DA0098AADFF9A640988B7", "_encstr_B3B30F7D90B3453F4BB177754D6755FD03" ) );
}

seticonnames()
{
    level.iconcapture = "_encstr_89CE0BF07B6187371E23934AEA";
    level.iconcontested = "_encstr_AB130DD082BFF8500A2333E7DB422D";
    level.icondefend = "_encstr_BC9F0A0DC5FA23AC33B2DC23";
    level.iconlosing = "_encstr_BECE0AFC5F572A9F9BB0BB97";
    level.iconneutral = "_encstr_ADB60BC01F67302873330E69D0";
    level.icontaking = "_encstr_9E560A0DE2AFA3855BB473B3";
    level.icontarget = "_encstr_881A0A6847162BAE15D0B29B";
}

onstartgametype()
{
    seticonnames();

    foreach ( var_1 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_1, &"_encstr_B69310E8098D471F87A356BD46E5939B67F1" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_1, &"_encstr_B69310E8098D471F87A356BD46E5939B67F1" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_1, &"_encstr_B972167A24525486A2A4CA154DF292AA9A09BE9AA1E9A4A8" );

        scripts\mp\utility\game::setobjectivehinttext( var_1, &"_encstr_BA691524E8E365D9ABF11D23F35D19D53FE0BE4CA01B25" );
    }

    setclientnamemode( "_encstr_95900C2EDBD01F99D6B1DFEB878D" );

    if ( !isdefined( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] ) )
        game["_encstr_A6D60EE09BF413B9945185CB4797C583"] = 0;

    if ( scripts\mp\utility\game::inovertime() )
    {
        game["_encstr_886A110823EA5D3BD91F88195BE79195328AFE"] = 0;
        game["_encstr_80B71587EC9F350438681F50AABFBABDF9FBDB4B930FC2"] = 0;
        game["_encstr_941C0A6AF345075ED05BEAD3"] = scripts\engine\utility::ter_op( game["_encstr_886315DEB3CAE4475AB6954AEDEACD19DCA01B16BCB232"] == 0, "_encstr_BA840579D3F7F6", "_encstr_BC850785638DA59537" );
        game["_encstr_95A70AA81FEE295D3A2F56DE"] = scripts\engine\utility::ter_op( game["_encstr_886315DEB3CAE4475AB6954AEDEACD19DCA01B16BCB232"] == 0, "_encstr_BC850785638DA59537", "_encstr_BA840579D3F7F6" );

        if ( !isdefined( game["_encstr_B6ED0E6FC6F7389D074A390412CFDBC0"] ) || !isdefined( game["_encstr_B6ED0E6FC6F7389D074A390412CFDBC0"][game["_encstr_941C0A6AF345075ED05BEAD3"]] ) )
            game["_encstr_B6ED0E6FC6F7389D074A390412CFDBC0"][game["_encstr_941C0A6AF345075ED05BEAD3"]] = 1.0;

        scripts\mp\utility\game::setovertimelimitdvar( game["_encstr_B6ED0E6FC6F7389D074A390412CFDBC0"][game["_encstr_941C0A6AF345075ED05BEAD3"]] );
    }
    else
    {
        game["_encstr_941C0A6AF345075ED05BEAD3"] = scripts\engine\utility::ter_op( !istrue( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] ), "_encstr_BA840579D3F7F6", "_encstr_BC850785638DA59537" );
        game["_encstr_95A70AA81FEE295D3A2F56DE"] = scripts\engine\utility::ter_op( !istrue( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] ), "_encstr_BC850785638DA59537", "_encstr_BA840579D3F7F6" );
    }

    level scripts\mp\gamelogic::enableovertimegameplay();
    initspecatatorcameras();
    thread loopspectatorlocations();
    setupobjectives();
    initspawns();
    thread startgame();
    thread manageovertimestate();
}

updategametypedvars()
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::updatecommongametypedvars();
    level.activationdelay = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_9D771069CFA854CBA793B2DAF81DDF4D6883", 30, 0, 60 );
    level.captureduration = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_AAA010DF585B2C0B85D57F2B464BD3C940C8", 40, 0, 60 );
    level.extratimebonus = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_B3B30F7D90B3453F4BB177754D6755FD03", 60, 0, 300 );
}

setupobjectives()
{
    var_0 = getentarray( "_encstr_B8820A82A5C7A277E150BFDF", "_encstr_B8CE0BE43FC317DF690862BA48" );
    var_1 = getentarray( "_encstr_B65413AECBA34166EE337048170F9B831BB2AB3DA7", "_encstr_B8CE0BE43FC317DF690862BA48" );

    if ( var_0.size == 0 )
        return;

    var_2 = [];

    for ( var_3 = 0; var_3 < var_0.size; var_3++ )
        var_2[var_2.size] = var_0[var_3];

    var_4 = [];

    if ( var_1.size > 0 )
    {
        foreach ( var_6 in var_1 )
        {
            var_7 = var_6.script_noteworthy;
            var_4[var_7] = var_6;
        }
    }

    foreach ( var_6 in var_2 )
    {
        var_7 = var_6.script_noteworthy;

        if ( var_7 == "_encstr_B34C0233" || var_7 == "_encstr_B94C02A9" )
            continue;

        if ( isdefined( var_4[var_7] ) )
            var_6 = var_4[var_7];

        var_6.objectivekey = var_7;
        var_6 mapobjectiveicon( var_7 );
        var_10 = _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::setupobjective( var_6 );
        var_10 dompoint_ondisableobjective();
        level.objectives[var_10.objectivekey] = var_10;
        var_10.onbeginuse = ::dompoint_onbeginuse;
        var_10.onuseupdate = ::dompoint_onuseupdate;
        var_10.onuse = ::dompoint_onuse;
        var_10.onenduse = ::dompoint_onenduse;
        var_10.oncontested = ::dompoint_oncontested;
        var_10.onuncontested = ::dompoint_onuncontested;
        var_10.ondisableobjective = ::dompoint_ondisableobjective;
        var_10.onenableobjective = ::dompoint_onenableobjective;
        var_10.onactivateobjective = ::dompoint_onactivateobjective;
        var_10 thread _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::updateflagstate( "_encstr_9819045FD029", 0 );
        var_10.defaultownerteam = game["_encstr_95A70AA81FEE295D3A2F56DE"];
        var_10.overrideprogressteam = game["_encstr_941C0A6AF345075ED05BEAD3"];
        var_10.ignorestomp = 1;
        var_10.decaygraceperiod = 5.0;
        var_10.permcapturethresholds = [ 0.33, 0.66 ];
    }
}

startgame()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    setomnvar( "_encstr_8F3A1BEB90107F5E981BBB943B40A7772D08E2121BC8B793D859A08DC9", 1 );
    setomnvar( "_encstr_B1A313BA4BBE86C2C93238DE4B9B3ABE475AD6B29C", 0 );
    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );
    setomnvar( "_encstr_8F3A1BEB90107F5E981BBB943B40A7772D08E2121BC8B793D859A08DC9", 0 );
    level.currentobjectiveindex = 1;
    updatecurrentobjective( level.currentobjectiveindex );
}

manageovertimestate()
{
    for (;;)
    {
        waitframe();

        if ( istrue( level.timerstoppedforgamemode ) )
        {
            level.canprocessot = 0;
            continue;
        }

        if ( isdefined( level.currentobjective ) )
            level.canprocessot = level.currentobjective.touchlist[game["_encstr_941C0A6AF345075ED05BEAD3"]].size == 0;
    }
}

updatecurrentobjective( var_0 )
{
    if ( !isdefined( level.objectives[scripts\engine\utility::string( var_0 )] ) )
        return;

    if ( isdefined( level.currentobjective ) && isdefined( level.currentobjective.ondisableobjective ) )
        level.currentobjective [[ level.currentobjective.ondisableobjective ]]();

    level.currentobjectiveindex = var_0;
    level.currentobjective = level.objectives[scripts\engine\utility::string( var_0 )];
    updatespectatorcamera( "_encstr_816A06935BF7F0B6" + level.currentobjectiveindex );

    if ( isdefined( level.currentobjective.onenableobjective ) )
        level.currentobjective [[ level.currentobjective.onenableobjective ]]();

    if ( level.activationdelay > 0 )
    {
        level scripts\mp\gamelogic::pausetimer();
        var_1 = int( gettime() + level.activationdelay * 1000 );
        setomnvar( "_encstr_B1A313BA4BBE86C2C93238DE4B9B3ABE475AD6B29C", var_1 );
        wait( level.activationdelay );
        level scripts\mp\gamelogic::resumetimer();
    }

    if ( isdefined( level.currentobjective.onactivateobjective ) )
        level.currentobjective [[ level.currentobjective.onactivateobjective ]]();

    var_2 = 0;

    switch ( var_0 )
    {
        case 1:
            var_2 = 10;
            break;
        case 2:
            var_2 = 10;
            break;
        case 3:
            var_2 = 10;
            break;
    }

    scripts\mp\gamelogic::updatewavespawndelay( var_2 );
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_BD061B85D321AA837619BF775117EBFE79597D4D681853F94E094F7B71" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_819619D638EBE457CDA1D7371C5877377DB03CD2CD7D9B8E16C9D1" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_A3AF15DD43D92DB5F32BCF16BA1E206B58B2A904639008", 1 );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_AB4113B6C1BE39EADC0DEB3783C2EEB97DB01EA5E6", 1 );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );

    foreach ( var_1 in level.objectives )
    {
        var_1.spawnpoints = [];
        var_1.spawnpoints["_encstr_BC850785638DA59537"] = [];
        var_1.spawnpoints["_encstr_BA840579D3F7F6"] = [];
    }

    foreach ( var_4 in level.spawnpoints )
    {
        if ( isdefined( var_4.script_noteworthy ) )
        {
            var_5 = var_4.script_noteworthy;

            if ( var_5 == "_encstr_B34C0233" || var_5 == "_encstr_B94C02A9" )
                continue;

            if ( var_4.classname == "_encstr_A3AF15DD43D92DB5F32BCF16BA1E206B58B2A904639008" )
            {
                level.objectives[var_5].spawnpoints["_encstr_BC850785638DA59537"][level.objectives[var_5].spawnpoints["_encstr_BC850785638DA59537"].size] = var_4;
                continue;
            }

            if ( var_4.classname == "_encstr_AB4113B6C1BE39EADC0DEB3783C2EEB97DB01EA5E6" )
                level.objectives[var_5].spawnpoints["_encstr_BA840579D3F7F6"][level.objectives[var_5].spawnpoints["_encstr_BA840579D3F7F6"].size] = var_4;
        }
    }

    foreach ( var_8, var_1 in level.objectives )
    {
        var_1.spawnpointsets = [];
        var_1.spawnpointsets["_encstr_BC850785638DA59537"] = "_encstr_BA0E0D9C5737D07D85B18DB459E6F5" + var_8;
        var_1.spawnpointsets["_encstr_BA840579D3F7F6"] = "_encstr_8BDB0B39AECDD0BE2CC3A5E6BE" + var_8;
        scripts\mp\spawnlogic::registerspawnset( var_1.spawnpointsets["_encstr_BC850785638DA59537"], var_1.spawnpoints["_encstr_BC850785638DA59537"] );
        scripts\mp\spawnlogic::registerspawnset( var_1.spawnpointsets["_encstr_BA840579D3F7F6"], var_1.spawnpoints["_encstr_BA840579D3F7F6"] );
    }
}

getspawnpoint()
{
    var_0 = self.pers["_encstr_89EF05D46BA8FD"];

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
        var_0 = scripts\mp\utility\game::getotherteam( var_0 )[0];

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        var_1 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_941C0FAA73D04BDB1041C7D349B8637378" + var_0 + "_encstr_A4810727CEFBF7F281" );
        var_2 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1 );
        self.startspawnpoint = var_2;
    }
    else
        var_2 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, level.currentobjective.spawnpointsets[var_0] );

    return var_2;
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( !isplayer( var_1 ) || var_1.team == self.team )
        return;

    if ( isdefined( var_4 ) && scripts\mp\utility\weapon::iskillstreakweapon( var_4.basename ) )
        return;

    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::awardgenericmedals( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );
}

onplayerconnect( var_0 )
{
    var_0.ui_dom_securing = undefined;
    var_0.ui_dom_stalemate = undefined;
    var_0 thread onplayerspawned();
}

onplayerspawned( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    for (;;)
    {
        self waittill( "_encstr_983508635BE787C548A1" );
        scripts\mp\utility\stats::setextrascore0( 0 );

        if ( isdefined( self.pers["_encstr_B2CF0967600940A373E78A"] ) )
            scripts\mp\utility\stats::setextrascore0( self.pers["_encstr_B2CF0967600940A373E78A"] );

        scripts\mp\utility\stats::setextrascore1( 0 );

        if ( isdefined( self.pers["_encstr_9CF70851FD0FB8B81BB3"] ) )
            scripts\mp\utility\stats::setextrascore1( self.pers["_encstr_9CF70851FD0FB8B81BB3"] );
    }
}

mapobjectiveicon( var_0 )
{
    self.iconname = "_encstr_A40101";
}

disabledomflagscriptable()
{
    thread _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::updateflagstate( "_encstr_9819045FD029", 0 );
}

awardcapturepoints()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level notify( "_encstr_82DD1A593B8F5A325B0A4B4B8538D1CADFF860EDC27BAB60C23840C4" );
    level endon( "_encstr_82DD1A593B8F5A325B0A4B4B8538D1CADFF860EDC27BAB60C23840C4" );
    var_0 = 1;
    var_1 = 1;

    while ( !level.gameended )
    {
        var_2 = 0.0;

        while ( var_2 < var_0 )
        {
            waitframe();
            scripts\mp\hostmigration::waittillhostmigrationdone();
            var_2 = var_2 + level.framedurationseconds;

            if ( self.stalemate )
                var_2 = 0.0;
        }

        var_3 = self.claimteam;

        if ( var_3 == "_encstr_AABA05236DC831" )
            continue;

        if ( !self.stalemate )
        {
            foreach ( var_5 in self.touchlist[var_3] )
                var_5.player thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_80400BBE7FD3FECB85D150209A" );
        }
    }
}

dompoint_onbeginuse( var_0 )
{
    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::dompoint_onusebegin( var_0 );
    self.didstatusnotify = 1;
}

dompoint_onuseupdate( var_0, var_1, var_2, var_3 )
{
    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::dompoint_onuseupdate( var_0, var_1, var_2, var_3 );

    if ( scripts\mp\utility\game::inovertime() )
    {
        var_4 = self.teamprogress[game["_encstr_941C0A6AF345075ED05BEAD3"]] / self.usetime;

        if ( var_4 > game["_encstr_80B71587EC9F350438681F50AABFBABDF9FBDB4B930FC2"] )
            game["_encstr_80B71587EC9F350438681F50AABFBABDF9FBDB4B930FC2"] = var_4;

        var_5 = game["_encstr_886A110823EA5D3BD91F88195BE79195328AFE"] + game["_encstr_80B71587EC9F350438681F50AABFBABDF9FBDB4B930FC2"];

        if ( game["_encstr_886315DEB3CAE4475AB6954AEDEACD19DCA01B16BCB232"] == 1 && scripts\mp\utility\game::setscoretobeat( var_0, var_5 * 60.0 ) == var_0 )
            thread scripts\mp\gamelogic::endgame( var_0, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_B22214F6314DAC361DB4D9B27D1BDB6BE0639547B291"] );
    }
}

dompoint_onuse( var_0 )
{
    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::dompoint_onuse( var_0 );
    var_1 = scripts\mp\gameobjects::getownerteam();
    level.usestartspawns = 0;
    var_2 = scripts\mp\utility\game::getotherteam( var_1 )[0];
    thread scripts\mp\utility\print::printandsoundoneveryone( var_1, var_2, undefined, undefined, "_encstr_A68415D97299A1880D276028C75FC6E7021ACD5D4A9279", "_encstr_B76C112883FF4D7B2D2FA5B93997B901972B83", var_0 );
    scripts\mp\gamescore::giveteamscoreforobjective( var_1, 1, 0 );
    var_3 = level.currentobjectiveindex;
    var_3++;

    if ( var_3 == 4 )
    {
        var_4 = scripts\mp\gamelogic::gettimeremaining();
        var_4 = var_4 / 60000.0;
        game["_encstr_B6ED0E6FC6F7389D074A390412CFDBC0"][var_1] = max( 1.0, var_4 );

        if ( scripts\mp\utility\game::inovertime() )
        {
            var_5 = scripts\mp\utility\game::setscoretobeat( var_1, 180.0 );
            thread scripts\mp\gamelogic::endgame( var_5, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_B22214F6314DAC361DB4D9B27D1BDB6BE0639547B291"] );
            return;
        }

        thread scripts\mp\gamelogic::endgame( var_1, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_B22214F6314DAC361DB4D9B27D1BDB6BE0639547B291"] );
        return;
    }
    else
    {
        if ( level.extratimebonus > 0 )
        {
            level.extratime = level.currentobjectiveindex * level.extratimebonus;
            var_4 = scripts\mp\gamelogic::gettimeremaining();
            setgameendtime( gettime() + int( var_4 ) );
        }

        if ( scripts\mp\utility\game::inovertime() )
        {
            game["_encstr_886A110823EA5D3BD91F88195BE79195328AFE"]++;
            game["_encstr_80B71587EC9F350438681F50AABFBABDF9FBDB4B930FC2"] = 0;
        }

        updatecurrentobjective( var_3 );
    }
}

dompoint_onenduse( var_0, var_1, var_2 )
{
    if ( self != level.currentobjective )
        return;

    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::dompoint_onuseend( var_0, var_1, var_2 );
}

dompoint_oncontested()
{
    if ( self != level.currentobjective )
        return;

    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::dompoint_oncontested();
}

dompoint_onuncontested( var_0 )
{
    if ( self != level.currentobjective )
        return;

    _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::dompoint_onuncontested( var_0 );
    self.didstatusnotify = 1;
    var_1 = scripts\mp\gameobjects::getownerteam();
    var_2 = scripts\engine\utility::ter_op( var_1 == "_encstr_9BA4080D39CFFB5AB7C1", "_encstr_9BC505B4461BB2", var_1 );
    var_1 = scripts\mp\gameobjects::getownerteam();
}

dompoint_ondisableobjective()
{
    scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
    scripts\mp\gameobjects::disableobject();
    scripts\mp\gameobjects::resetcaptureprogress();
    scripts\mp\gameobjects::releaseid();
    self notify( "_encstr_82D00FF3D74AB830427759B3573540D7E3" );
    scripts\engine\utility::delaythread( 0.1, ::disabledomflagscriptable );
}

dompoint_onenableobjective()
{
    scripts\mp\gameobjects::requestid( 1, 1 );
    scripts\mp\gameobjects::enableobject();
    scripts\mp\gameobjects::setvisibleteam( "_encstr_BC19047780DA" );
    scripts\mp\gameobjects::allowuse( "_encstr_AABA05236DC831" );
    scripts\mp\gameobjects::setobjectivestatusicons( level.icontarget );

    if ( isdefined( self.defaultownerteam ) )
    {
        scripts\mp\gameobjects::setownerteam( self.defaultownerteam );
        thread _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::updateflagstate( self.defaultownerteam, 0 );
    }
    else
    {
        scripts\mp\gameobjects::setownerteam( "_encstr_9BA4080D39CFFB5AB7C1" );
        thread _encstr_9E7F211898C28383CB8760E558BF27EB18E74BB010797A7D47017210081F958AA85B5F::updateflagstate( "_encstr_9BC505B4461BB2", 0 );
    }
}

dompoint_onactivateobjective()
{
    scripts\mp\utility\sound::playsoundonplayers( "_encstr_B8EB1E817B1FC89D13CD0140A1875B94BBDF4F6BE648EFB349FB071B7FD08E8A" );
    scripts\mp\gameobjects::allowuse( "_encstr_80BF06CA78A2226B" );
    thread awardcapturepoints();
    level.flagcapturetime = level.captureduration;
    scripts\mp\gameobjects::setusetime( level.flagcapturetime );
    scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
}

initspecatatorcameras()
{
    level.spectatorcameras = [];
    level.currentspectatorcamref = "_encstr_979D0793D59BA1EB4C";
    var_0 = scripts\engine\utility::getstructarray( "_encstr_9BB2134B0BCFD1BFF34EAF856FDBB7666FD0F21248", "_encstr_B8CE0BE43FC317DF690862BA48" );

    foreach ( var_2 in var_0 )
    {
        var_3 = var_2.script_noteworthy;
        var_4 = scripts\engine\utility::getstructarray( var_2.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        foreach ( var_6 in var_4 )
        {
            switch ( var_6.script_label )
            {
                case "_encstr_A91E112B10D73ED3D0E3353B9059AF45DB90E2":
                    setteammapposition( var_3, "_encstr_BC850785638DA59537", var_6 );
                    break;
                case "_encstr_A2500F13B8F8DF40288F2F1B43E0CF6B1F":
                    setteammapposition( var_3, "_encstr_BA840579D3F7F6", var_6 );
                    break;
            }
        }
    }
}

setteammapposition( var_0, var_1, var_2 )
{
    if ( !isdefined( level.spectatorcameras[var_0] ) )
        level.spectatorcameras[var_0] = [];

    level.spectatorcameras[var_0][var_1] = var_2;
}

startspectatorview()
{
    waitframe();
    scripts\mp\utility\player::updatesessionstate( "_encstr_A68C0A5803A5D151A2B310A6" );
    scripts\mp\spectating::setdisabled();

    if ( isdefined( self.lastdeathangles ) )
        self setplayerangles( self.lastdeathangles );

    wait 0.1;
    scripts\mp\utility\player::setdof_default();
    var_0 = level.spectatorcameras[level.currentspectatorcamref][self.team];
    var_1 = var_0.origin;
    var_2 = var_0.angles;
    self.deathspectatepos = var_1;
    self.deathspectateangles = var_2;
    var_3 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", self getvieworigin() );
    var_3 setmodel( "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
    var_3.angles = var_2;
    self.spectatorcament = var_3;
    self.isusingtacopsmapcamera = 1;
    self cameralinkto( var_3, "_encstr_8CB40B4BB398B1C0A81FDF6BEA", 1 );
    thread dohalfwayflash();
    var_3 movecameratomappos( self, var_1, var_2 );
}

dohalfwayflash()
{
    wait 0.4;
    thread playslamzoomflash();
    applythermal();
}

endspectatorview()
{
    if ( !isdefined( self.spectatorcament ) )
        return;

    removethermal();
    thread runslamzoomonspawn();
}

updatespectatorcamera( var_0 )
{
    level.currentspectatorcamref = var_0;

    foreach ( var_2 in level.players )
    {
        if ( isdefined( var_2.spectatorcament ) )
        {
            var_3 = var_2.team;
            var_4 = getdvarint( "_encstr_93C814DCC627D78DAD23EB1B0BADAC2785AF47B285B6", -1 );

            if ( var_4 != -1 )
                var_3 = scripts\engine\utility::ter_op( var_4 == 0, "_encstr_BC850785638DA59537", "_encstr_BA840579D3F7F6" );

            var_5 = level.spectatorcameras[level.currentspectatorcamref][var_3];
            var_2.spectatorcament movecameratomappos( var_2, var_5.origin, var_5.angles );
        }
    }
}

movecameratomappos( var_0, var_1, var_2 )
{
    var_0 endon( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    var_3 = 1.0;
    var_4 = 1.0;
    self moveto( var_1, 1.0, 0.5, 0.5 );
    var_0 playlocalsound( "_encstr_806717B61C7D6CDA8CEB6C85DA59C985AF9EBDDBADD7DEAE47" );
    var_0 setclienttriggeraudiozonepartialwithfade( "_encstr_B9230ADCE02CEEE6BED858DA", 0.5, "_encstr_971904B5B43C" );
    self rotateto( var_2, 1.0, 0.5, 0.5 );
    var_0 thread startoperatorsound();
    wait 1.1;
    var_5 = anglestoforward( var_2 ) * 300;
    var_5 = var_5 * ( 1, 1, 0 );

    if ( isdefined( var_0 ) && isdefined( var_0.spectatorcament ) )
    {
        self moveto( var_1 + var_5, 15.0, 1.0, 1.0 );
        var_0 earthquakeforplayer( 0.03, 15.0, var_1 + var_5, 1000 );
    }
}

runslamzoomonspawn()
{
    self waittill( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    var_0 = self geteye();
    var_1 = self.angles;
    scripts\mp\utility\player::updatesessionstate( "_encstr_A68C0A5803A5D151A2B310A6" );
    self cameralinkto( self.spectatorcament, "_encstr_8CB40B4BB398B1C0A81FDF6BEA", 1 );
    self visionsetnakedforplayer( "_encstr_BC5911336A3EB1074FFE895360F00D8BE0F0E2", 0.2 );
    self.spectatorcament moveto( var_0, 0.5 );
    self playlocalsound( "_encstr_AF9D1661CA211760ACBFA0B81FC5DB4B89F0E8F865D9CBC8" );
    self clearclienttriggeraudiozone( 0.5 );
    self.spectatorcament rotateto( var_1, 0.5, 0.5 );
    wait 0.5;
    self visionsetnakedforplayer( "_encstr_A40101", 0 );
    thread playslamzoomflash();
    scripts\mp\utility\player::updatesessionstate( "_encstr_8F7508BB18675378EBC7" );
    self cameraunlink();
    self.spectatorcament delete();
}

playslamzoomflash()
{
    var_0 = newclienthudelem( self );
    var_0.x = 0;
    var_0.y = 0;
    var_0.alignx = "_encstr_B1AD05C65666E8";
    var_0.aligny = "_encstr_B91904EC4718";
    var_0.sort = 1;
    var_0.horzalign = "_encstr_BC940BE9D5F91D47B0ABBD851E";
    var_0.vertalign = "_encstr_BC940BE9D5F91D47B0ABBD851E";
    var_0.alpha = 1;
    var_0.foreground = 1;
    var_0 setshader( "_encstr_948806DDD04BE895", 640, 480 );
    var_0 fadeovertime( 0.4 );
    var_0.alpha = 0.0;
    wait 0.4;
    var_0 destroy();
}

startoperatorsound()
{
    self endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self waittill( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
    wait 0.5;
}

applythermal()
{
    self visionsetthermalforplayer( "_encstr_950A15032508FBD74981BAC6F9C8E5815481EFF397A103" );
    self thermalvisionon();
}

removethermal()
{
    self thermalvisionoff();
}

loopspectatorlocations()
{
    var_0 = 1;

    for (;;)
    {
        if ( getdvarint( "_encstr_810915670FA32890FD8F76C9F6D5E8F6CA9731C3937B8C", 0 ) == 1 )
        {
            if ( isalive( level.players[0] ) )
                level.players[0] suicide();

            var_1 = getdvarint( "_encstr_A26E15CD6C93BEB1AD46BE8D58DAB2392C7DA5CD46953C", -1 );

            if ( var_1 != -1 )
                var_0 = var_1;

            updatespectatorcamera( "_encstr_816A06935BF7F0B6" + var_0 );
            var_2 = getdvarfloat( "_encstr_A90915C3E2E8575E735C71D3E818384EEA96A43AEC91A0", 1.0 );
            wait( var_2 );
            var_0++;

            if ( var_0 > 3 )
                var_0 = 1;

            if ( getdvarint( "_encstr_810915670FA32890FD8F76C9F6D5E8F6CA9731C3937B8C", 0 ) == 0 )
                level.players[0] notify( "_encstr_AFD50C2238A5E6AFDE965841ACC0" );

            continue;
        }

        waitframe();
    }
}
