// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "_encstr_9E700851BEE33DF1B547" ) == "_encstr_8A510E519897A1332E4A3898E243F5B9" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 10 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 2 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 3 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 2 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    updategametypedvars();
    level.scoreperplayer = undefined;
    level.teambased = 1;
    level.ontimelimit = ::ontimelimit;
    level.onstartgametype = ::onstartgametype;
    level.getspawnpoint = ::getspawnpoint;
    level.modeonspawnplayer = ::onspawnplayer;
    level.lastcaptime = gettime();
    level.previousclosespawnent = undefined;
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_957B0A886F934BCA0F8022FB";

    if ( getdvarint( "_encstr_B8020A9E9AA69A6292517AA0" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_891904A1D8BE" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_93570B93F4A9629272A825B426" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_889708C9D0E7EBE819D9" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_B4050C8B3E9A11DD626FD1CBDB5A" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_B81804D2C101" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_A61805573F9318" + scripts\mp\utility\game::getgametype() + "_encstr_9EB909B928022745805102" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] + "_encstr_934305E6126268";

    game["_encstr_B8DA073D799798C7C7"]["_encstr_9E240C10CE33016D6AEA39B0F244"] = "_encstr_AD0B0C9710135473CD9DE1E57685";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3420C3D576AC3C8736F09906BB2"] = "_encstr_AD0B0C9710135473CD9DE1E57685";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_82CF0EC793BAB0234DF2BB739D297055"] = "_encstr_82CF0EC793BAB0234DF2BB739D297055";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B4150DDE894DF5D816E0E85DE45923"] = "_encstr_B4150DDE894DF5D816E0E85DE45923";
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "_encstr_B6F11DB0FF4049293849CAFA93AF4E9F606B131A30E3810A6F76653DA8D11B", 5 );
}

onstartgametype( var_0 )
{
    var_1 = scripts\mp\utility\game::istimetobeatvalid();

    if ( game["_encstr_8AC30D9CDEBA73466E41B1585E568C"] == 0 )
    {
        setomnvar( "_encstr_B7DF21D343E91DE2930E52A9B0A78D3B4777330D9352BB7C6F0990317B531F136F330F", 1 );
        setomnvar( "_encstr_B73721EA96FA4EDE579B91AFA15A373ABEDE3B2B9CE45A8C2BBEC859CCCA7346B2C9E6", 1 );
    }
    else if ( var_1 )
    {
        setomnvar( "_encstr_B7DF21D343E91DE2930E52A9B0A78D3B4777330D9352BB7C6F0990317B531F136F330F", scripts\engine\utility::ter_op( game["_encstr_B1D40F332A0F051175EA6B5BE49350DFD7"] == game["_encstr_941C0A6AF345075ED05BEAD3"], 2, 3 ) );
        setomnvar( "_encstr_B73721EA96FA4EDE579B91AFA15A373ABEDE3B2B9CE45A8C2BBEC859CCCA7346B2C9E6", scripts\engine\utility::ter_op( game["_encstr_B1D40F332A0F051175EA6B5BE49350DFD7"] == game["_encstr_95A70AA81FEE295D3A2F56DE"], 2, 3 ) );
    }
    else
    {
        setomnvar( "_encstr_B7DF21D343E91DE2930E52A9B0A78D3B4777330D9352BB7C6F0990317B531F136F330F", 4 );
        setomnvar( "_encstr_B73721EA96FA4EDE579B91AFA15A373ABEDE3B2B9CE45A8C2BBEC859CCCA7346B2C9E6", 4 );
    }

    if ( !isdefined( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] ) )
        game["_encstr_A6D60EE09BF413B9945185CB4797C583"] = 0;

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
    {
        var_2 = game["_encstr_941C0A6AF345075ED05BEAD3"];
        var_3 = game["_encstr_95A70AA81FEE295D3A2F56DE"];
        game["_encstr_941C0A6AF345075ED05BEAD3"] = var_3;
        game["_encstr_95A70AA81FEE295D3A2F56DE"] = var_2;
    }

    foreach ( var_5 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_5, &"_encstr_BAE0103D214915D08A94B215355E5AA72A90" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_5, &"_encstr_BAE0103D214915D08A94B215355E5AA72A90" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_5, &"_encstr_8B8E164F6053E76BB3EC3ED1B606970591A02786A78749DD" );

        scripts\mp\utility\game::setobjectivehinttext( var_5, &"_encstr_9FE015D321498AD0A252B2516ACB5A7A2A84F58452392A" );
    }

    setclientnamemode( "_encstr_95900C2EDBD01F99D6B1DFEB878D" );
    initspawns();
    seticonnames();
    level createpatharray();
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_A8E80F2F633A9549FE2228CDCB8CA0C052" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_BD441E697051500117597FEE43CF2FA84A0F6516D778CC0AC21FF9A0B85883F3" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_95F91C3DB1A94ADFE3E89A62F1285F82A057A6872B3854EF9823236ADB95" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_ABB218615029AF1987EA12F887DF23D01F57A257D8E918C18DC3" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_B89916AD2139DA4F73582AF26158CF1210C756179BA8245F" );
    level.payloadspawnsets = [];
    level.payloadspawnsets["_encstr_BC850785638DA59537"] = "_encstr_BC850785638DA59537";
    level.payloadspawnsets["_encstr_BA840579D3F7F6"] = "_encstr_BA840579D3F7F6";
    scripts\mp\spawnlogic::registerspawnset( "_encstr_BC850785638DA59537", "_encstr_ABB218615029AF1987EA12F887DF23D01F57A257D8E918C18DC3" );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_BA840579D3F7F6", "_encstr_B89916AD2139DA4F73582AF26158CF1210C756179BA8245F" );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

getspawnpoint()
{
    var_0 = self.pers["_encstr_89EF05D46BA8FD"];

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
        var_0 = scripts\mp\utility\game::getotherteam( var_0 )[0];

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        var_1 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_BD7E12951901E287BB80E20AA980F75A588F1EDF" + var_0 + "_encstr_A4810727CEFBF7F281" );
        var_2 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1 );
    }
    else
        var_2 = scripts\mp\spawnscoring::getspawnpoint( self, var_0, level.payloadspawnsets[var_0] );

    return var_2;
}

updategametypedvars()
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::updatecommongametypedvars();
}

ontimelimit()
{
    level scripts\mp\gamescore::giveteamscoreforobjective( scripts\mp\utility\game::getotherteam( level.tank.team )[0], 1, 0 );
    thread scripts\mp\gamelogic::endgame( scripts\mp\utility\game::getotherteam( level.tank.team )[0], game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_A40B13A3B4AD56AFD896B5D28EF593AC0BC6A15632"] );
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
}

onspawnplayer()
{

}

spawnbradleypayload()
{
    var_0 = level.players[0];
    var_1 = game["_encstr_941C0A6AF345075ED05BEAD3"];
    var_2 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", level.tankmovetopath.origin );
    var_2.angles = level.tankmovetopath.angles;
    var_2.team = var_1;
    var_2 setmodel( "_encstr_931521ACCF12E166E5271889DB0ED9F71AB2A8B9A71A67E9DC2BC8409F67B0E111DB10" );
    var_2 setentityowner( var_0 );
    var_2 setotherent( var_0 );
    var_3 = undefined;

    if ( isdefined( var_0 ) )
        var_3 = var_0 getentitynumber();

    var_4 = ( -532.957, -3351.52, 312.255 );
    var_5 = ( 0, 90, 0 );
    var_2.owner = var_0;
    var_2.ownerid = var_3;
    var_2.team = var_1;
    var_2 setcandamage( 0 );
    var_6 = var_2 gettagorigin( "_encstr_94FE0B5D3E12DFD32D9BD868EB" );
    var_7 = spawnturret( "_encstr_88710C0763169AF7A3330A1229D8", var_6, "_encstr_97FC0F53F5B5A13A1368FBC350AACF4A49", 0 );
    var_7 linkto( var_2, "_encstr_94FE0B5D3E12DFD32D9BD868EB", ( 0, 0, 0 ), ( 0, 0, 0 ) );
    var_7 setmodel( "_encstr_BD7E258E33B8F07FB120D2E9A818AB9140851FED5BD8611B65BB2B72B3F8F795C81B8D7B972072" );
    var_7.owner = var_0;
    var_7.team = var_1;
    var_7 setmode( "_encstr_81FD0F630D75B34B6377920CF0B2D09EB3" );
    var_7 setsentryowner( undefined );
    var_7 makeunusable();
    var_7 setdefaultdroppitch( 0 );
    var_7 setcandamage( 0 );
    var_7 setturretmodechangewait( 1 );
    var_2.turret = var_7;
    var_2.isbradley = 1;
    var_7.vehicle = var_2;
    var_7.damageshakeexplosivenum = 0;
    var_7.damageshakebulletnum = 0;
    var_8 = [];
    var_9 = spawn( "_encstr_9E6B0FE8274B9DD92BC9D7278591B4D5E6", var_2.origin, 0, 300, 192 );
    var_9 enablelinkto();
    var_9 linkto( var_2 );
    var_10 = scripts\mp\gameobjects::createuseobject( var_1, var_9, var_8, ( 0, 0, 90 ) );
    var_10 scripts\mp\gameobjects::allowuse( "_encstr_B9FC095F8BCCFF02D92B43" );
    var_10 scripts\mp\gameobjects::setusetime( 0 );
    var_10 scripts\mp\gameobjects::cancontestclaim( 1 );
    var_10 scripts\mp\gameobjects::mustmaintainclaim( 1 );
    var_10.onuse = ::tank_onuse;
    var_10.onunoccupied = ::tank_onunoccupied;
    var_10.oncontested = ::tank_oncontested;
    var_10.onuncontested = ::tank_onuncontested;
    var_2.useobj = var_10;
    var_2.damaged = 0;
    var_2.trackedobject = var_2 scripts\mp\gameobjects::createtrackedobject( var_2, ( 0, 0, 64 ) );
    var_2.trackedobject.objidpingfriendly = 0;
    var_2.trackedobject.objidpingenemy = 1;
    var_2.trackedobject.objpingdelay = 0.05;
    var_2.trackedobject.visibleteam = "_encstr_BC19047780DA";
    var_2.invulnerable = 1;
    var_2.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.icontarget, level.icontarget );
    level.tank = var_2;
}

bradley_handletacopsdamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflags;

    if ( var_3 == "_encstr_8AED0A5719ED37B8FB512FD7" )
        return 0;

    var_4 = scripts\mp\utility\killstreak::getmodifiedantikillstreakdamage( var_1, var_2, var_3, var_4, 3000, 8, 12, 16 );
    return var_4;
}

bradley_handlefataltacopsdamage( var_0 )
{
    var_1 = var_0.attacker;
    var_2 = var_0.objweapon;
    var_3 = var_0.meansofdeath;
    var_4 = var_0.damage;
    var_5 = var_0.idflags;

    if ( level.teambased )
    {
        var_6 = "_encstr_A40101";

        if ( isdefined( var_1 ) && isdefined( var_1.team ) )
            var_6 = var_1.team;

        if ( var_6 != self.team )
        {

        }
    }
    else if ( isdefined( var_1 ) && ( !isdefined( self.owner ) || self.owner != var_1 ) )
    {

    }

    thread bradley_vehicledestroy( var_1, var_2, var_3, 0 );
}

bradley_vehicledestroy( var_0, var_1, var_2, var_3 )
{
    self.damaged = 1;
    self notify( "_encstr_A629119D934A6D630D309EF1DCE39096725719" );
    var_3 = istrue( var_3 );
    self.isdestroyed = 1;
    self setcandamage( 0 );
    self.turret setcandamage( 0 );
    scripts\mp\utility\print::printboldonteam( "_encstr_8A433466BBF8942A55135A772FAF92C9B88D2066D1405532BC33737AF12E3B0188219DBFE930A0CA0D513B7FD9561268E09012562D58", "_encstr_BC850785638DA59537" );
    thread bradley_restorehealth();
}

watchdamagecycle()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A629119D934A6D630D309EF1DCE39096725719" );

    for (;;)
    {
        self waittill( "_encstr_B8BE07320B5B16ECAC", var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13 );

        if ( istrue( self.isrepairing ) )
            continue;

        scripts\engine\utility::_id_143B9( 3, "_encstr_B8BE07320B5B16ECAC" );
        self.allowpartialrepairs = 1;
    }
}

bradley_restorehealth()
{
    if ( !isdefined( self.damagetaken ) || self.damagetaken == 0 )
        return;

    if ( istrue( self.isrepairing ) || !istrue( self.allowpartialrepairs ) )
        return;

    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( !istrue( self.damaged ) )
    {
        self endon( "_encstr_B8BE07320B5B16ECAC" );
        self.allowpartialrepairs = 0;
        var_0 = 0;
        var_1 = 0.2;
        var_2 = 10;
    }
    else
    {
        self.isrepairing = 1;
        var_0 = 10;
        var_1 = 0.1;
        var_2 = 100;
    }

    wait( var_0 );
    scripts\mp\utility\print::printboldonteam( "_encstr_BD251249CAC185A527B4B93B404827588CD8ACE5", "_encstr_BC850785638DA59537" );

    while ( self.damagetaken != 0 )
    {
        self.damagetaken = max( self.damagetaken - var_2, 0 );
        wait( var_1 );
    }

    scripts\mp\utility\print::printboldonteam( "_encstr_AD3A11663ACFC1890FCB62F922624BB86BD58D", "_encstr_BC850785638DA59537" );
    self.isrepairing = 0;
    self setcandamage( 1 );
    self.turret setcandamage( 1 );
    self.damaged = 0;
    self.isdestroyed = 0;
    thread scripts\mp\damage::monitordamage( 3000, "_encstr_A40101", ::bradley_handlefataltacopsdamage, ::bradley_handletacopsdamage, 1 );
    self.movementdisabled = 0;
}

tank_onuse( var_0 )
{
    var_1 = var_0.team;
    var_2 = scripts\mp\gameobjects::getownerteam();
    var_3 = scripts\mp\utility\game::getotherteam( var_1 )[0];
    var_4 = gettime();

    if ( istrue( self.allowpartialrepairs ) )
        level.tank thread bradley_restorehealth();

    level thread startmove( level.tank );
    level.usestartspawns = 0;
    var_5 = 0;
    level.tank.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );

    if ( !isdefined( level.lastcaptureteam ) || level.lastcaptureteam != var_1 )
    {
        var_6 = [];
        var_7 = getarraykeys( self.touchlist[var_1] );

        for ( var_8 = 0; var_8 < var_7.size; var_8++ )
            var_6[var_7[var_8]] = self.touchlist[var_1][var_7[var_8]];
    }

    level.hpcapteam = var_1;
    scripts\mp\gameobjects::setownerteam( var_1 );
    level.lastcaptureteam = var_1;
}

tank_onunoccupied()
{
    level notify( "_encstr_8C9C0F90B8CD42479108E7E3A8A8290AA1" );
    level.hpcapteam = "_encstr_9BA4080D39CFFB5AB7C1";
    var_0 = 1;

    foreach ( var_2 in level.teamnamelist )
    {
        if ( self.numtouching[var_2] > 0 )
        {
            var_0 = 0;
            break;
        }
    }

    if ( var_0 )
    {
        level.tank.useobj.wasleftunoccupied = 1;
        level.tank.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.icontarget );
    }

    self notify( "_encstr_BC41108B8BFB822F30B9F9FA936878FB5D29" );
    level.tank moveto( level.tank.origin, 0.05, 0, 0 );
    level.tank rotateto( level.tank.angles, 1, 0, 0 );
}

tank_oncontested()
{
    var_0 = level.tank.useobj scripts\mp\gameobjects::getownerteam();
    level.tank.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.iconcontested );

    if ( var_0 == "_encstr_9BA4080D39CFFB5AB7C1" )
        var_1 = self.claimteam;
    else
        var_1 = var_0;

    self notify( "_encstr_BC41108B8BFB822F30B9F9FA936878FB5D29" );
    level.tank moveto( level.tank.origin, 0.05, 0, 0 );
}

tank_onuncontested( var_0 )
{
    var_1 = level.tank.useobj scripts\mp\gameobjects::getownerteam();

    if ( var_0 == "_encstr_AABA05236DC831" || var_1 == "_encstr_9BA4080D39CFFB5AB7C1" )
        level.tank.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.icontarget );
    else
        level.tank.trackedobject scripts\mp\gameobjects::setobjectivestatusicons( level.icondefend, level.iconcapture );
}

startmove( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 moveonpath( level.tankmovetopath );
}

createpatharray()
{
    level.tankmovetopath = scripts\engine\utility::getstruct( "_encstr_9ED80A3BB1E080AFFA911D60", "_encstr_B8CE0BE43FC317DF690862BA48" );
    thread spawnbradleypayload();
}

getpathstart( var_0, var_1 )
{
    var_2 = 100;
    var_3 = 150;
    var_4 = ( 0, var_1, 0 );
    var_5 = var_0 + anglestoforward( var_4 ) * ( -1 * var_3 );
    var_5 = var_5 + ( ( randomfloat( 2 ) - 1 ) * var_2, ( randomfloat( 2 ) - 1 ) * var_2, 0 );
    return var_5;
}

moveonpath( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level endon( "_encstr_9B0E143498D77359D16837931849032A37253DAF7511" );
    self endon( "_encstr_B99E0F9045D3A317DA2707274722E6C09C" );
    self endon( "_encstr_A9B6101AF6E6A3B0CEAC7D37D1B738E0B291" );
    self endon( "_encstr_BC41108B8BFB822F30B9F9FA936878FB5D29" );
    self.speed = 100;
    level.tankspeed = self.speed;

    if ( istrue( self.damaged ) )
    {
        level.tank moveto( level.tank.origin, 0.05, 0, 0 );
        self notify( "_encstr_BC41108B8BFB822F30B9F9FA936878FB5D29" );
    }
    else
    {
        var_1 = level.tankmovetopath.origin;
        var_2 = getphysicspointaboutnavmesh( var_1 );
        var_3 = distance( self.origin, var_2 );

        if ( var_3 < 10 && !level.gameended )
        {
            if ( isdefined( level.tankmovetopath.target ) )
            {
                level scripts\mp\gamescore::giveteamscoreforobjective( level.tank.team, 1, 0 );
                level.tankmovetopath = scripts\engine\utility::getstruct( level.tankmovetopath.target, "_encstr_B8CE0BE43FC317DF690862BA48" );
                return;
            }

            game["_encstr_A96D0726D4272B4372"] = "_encstr_A9680A9359367BC919A8A290";
            level scripts\mp\gamescore::giveteamscoreforobjective( level.tank.team, 1, 0 );
            thread scripts\mp\gamelogic::endgame( level.tank.team, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_B22214F6314DAC361DB4D9B27D1BDB6BE0639547B291"] );
            return;
            return;
        }

        var_4 = var_3 / self.speed;
        self moveto( var_2, var_4, 0, 0 );
        self rotateto( ( level.tankmovetopath.angles[0], level.tankmovetopath.angles[1], self.angles[2] ), 1 );
        wait( var_4 );
    }
}

getphysicspointaboutnavmesh( var_0 )
{
    var_1 = scripts\engine\trace::create_contents( undefined, 1, 1, undefined, undefined, undefined, undefined );
    var_2 = physics_raycast( var_0 + ( 0, 0, 48 ), var_0 - ( 0, 0, 48 ), var_1, undefined, 0, "_encstr_828C15A7C847CB7B768330689A4A13067764A09E5D87D3" );
    var_3 = isdefined( var_2 ) && var_2.size > 0;

    if ( var_3 )
    {
        var_4 = var_2[0]["_encstr_B7260923C89E8F3378E72E"];
        return var_4;
    }

    return var_0;
}

seticonnames()
{
    level.icontarget = "_encstr_8B511ABC625E72604B453B5F92162A9BB3EDBC226CB1E30913BF9D18";
    level.iconcapture = "_encstr_93FD168C3742D340DCCDDC961AC3637BE360632922784518";
    level.icondefend = "_encstr_BE761097FFEB47F8E1151B76FFC3A070F333";
    level.iconcontested = "_encstr_A8C21D4F27339FD0D92D332ED4B970DDFBB7CBF5EBB9EE08E68319A3FB6538";
}
