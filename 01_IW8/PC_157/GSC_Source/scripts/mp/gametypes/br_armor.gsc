// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    level._id_1203E = ::_id_1203E;
}

teamfriendlyto()
{
    self.br_armorhealth = 0;

    if ( getdvarint( "_encstr_A1CC105E8B23063FAE2A28F192C6F3D8D335" ) == 1 )
        self.br_maxarmorhealth = 50 * getdvarint( "_encstr_B4830E6E8D93F5868D1CD82CE8E6AED6", 1 );
    else
        self.br_maxarmorhealth = 150;

    if ( isplayer( self ) )
    {
        self setclientomnvar( "_encstr_B771132B12FF4EE8A1118DBB37D2B905AFCA2111BA", 0 );
        scripts\mp\equipment\armor_plate::debug_state( 0 );
    }
}

getoldarmorent( var_0 )
{
    var_1 = spawnstruct();
    var_1.count = 1;
    var_1.maxcount = 1;
    var_1.stackable = 1;

    if ( _encstr_9E81231898C28383CB8760E558BF27EB18E74BB010797A7D4A032187800594B088064FFB1B::ishelmet( var_0.scriptablename ) )
    {

    }
    else if ( _encstr_823124376CE42DC11DCD5EB6E0CB3BB0ADAC3A2FE056CDBC314EAF83A536DAAB079BE2D9B9B1::isgasmask( var_0.scriptablename ) )
        var_1.gasmaskhealth = self.gasmaskhealth;
    else
        var_1.armorhealth = self.br_armorhealth;

    return var_1;
}

helmetitemtypeforlevel( var_0 )
{
    switch ( var_0 )
    {
        case 1:
            return "_encstr_93E1164C9C36B7F6A3EB2C936BB7C97D34CAD8B556E8FA89";
        case 2:
            return "_encstr_B4E116EA228417D883869A7279987A47BB1DF85A9D4C6642";
        case 3:
            return "_encstr_8FE11698AB954F784BFF1796D57F8367FCA26078722BF73B";
    }

    return undefined;
}

searchcirclesize( var_0 )
{
    if ( _encstr_AD64266E6CE44B1CD19B97B53897D9B0B62B1DBC389537F2139CBE7658D6AC8E2F3895DC17B3DC8D::unset_relic_aggressive_melee( "_encstr_9BB6062FDE751D33" ) )
        return;

    var_1 = self;
    var_2 = 100;

    if ( getdvarint( "_encstr_BE8413D6B64BD72912275828936780FF525F58540F", 0 ) || istrue( var_0 ) )
    {
        if ( getdvarint( "_encstr_A1CC105E8B23063FAE2A28F192C6F3D8D335" ) == 1 )
            var_2 = 50 * getdvarint( "_encstr_B4830E6E8D93F5868D1CD82CE8E6AED6", 1 );
        else
            var_2 = 150;
    }

    var_3 = getdvarint( "_encstr_9FB423777F8E41D2384EC60A20F80A99E8BDD7FBC5BBBA8D4933FE12FB102E522C2B7B7F43", -1 );

    if ( var_3 >= 0 )
        var_2 = var_3;

    var_1 scriptablescurid( var_2 );
}

scriptablescurid( var_0 )
{
    if ( !isdefined( var_0 ) || var_0 < 0 )
        return;

    self.br_armorhealth = var_0;

    if ( getdvarint( "_encstr_A1CC105E8B23063FAE2A28F192C6F3D8D335" ) == 1 )
        self.br_maxarmorhealth = 50 * getdvarint( "_encstr_B4830E6E8D93F5868D1CD82CE8E6AED6", 1 );
    else
        self.br_maxarmorhealth = 150;

    var_1 = self.br_armorhealth / self.br_maxarmorhealth;

    if ( isplayer( self ) )
    {
        self setclientomnvar( "_encstr_B771132B12FF4EE8A1118DBB37D2B905AFCA2111BA", var_1 );
        scripts\mp\equipment\armor_plate::debug_state( self.br_armorhealth );
    }
}

takehelmet( var_0, var_1 )
{
    self.br_helmetlevel = var_1;
    var_2 = level.br_pickups.br_itemrow[var_0.scriptablename];

    if ( self.br_helmetlevel == 3 )
        scripts\mp\utility\perk::giveperk( "_encstr_AAC01A87A9F5722930B83378F6887CABD85F1B57572BBB0C6880EE47" );
}

disable_map_ammo_munitions()
{
    if ( _encstr_9E81231898C28383CB8760E558BF27EB18E74BB010797A7D4A032187800594B088064FFB1B::hasarmor() )
        _encstr_9E81231898C28383CB8760E558BF27EB18E74BB010797A7D4A032187800594B088064FFB1B::damagearmor( self.br_armorhealth, 1 );
}

isarmorbetterthanequipped( var_0 )
{
    var_1 = 0;

    if ( var_0 == "_encstr_A8A70FCAE25D96837DD05663B52BA3D789" )
        var_1 = 1;
    else if ( var_0 == "_encstr_9EA70F2B27B35368AFEC5188557D80801F" )
        var_1 = 2;
    else if ( var_0 == "_encstr_A4A70F2B8BAEB483D7D059B1DAB21DF566" )
        var_1 = 3;

    if ( var_1 > 0 )
    {
        if ( !isdefined( self.br_helmetlevel ) || self.br_helmetlevel < var_1 )
            return 1;
    }

    return 0;
}

popoffhelmet( var_0, var_1, var_2 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_3 = self gettagorigin( "_encstr_BCBB09D879945B182FC59D" );

    if ( !isdefined( var_3 ) )
        var_3 = var_2 + ( 0, 0, 80 );

    var_4 = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", self gettagorigin( "_encstr_BCBB09D879945B182FC59D" ) );
    var_4 setmodel( "_encstr_B35A0C1BDEEDD1AF34CA1B6BACA3" );
    var_4.angles = var_1;
    var_5 = anglestoup( var_1 );
    var_6 = var_0;
    var_7 = vectornormalize( var_6 + var_5 ) * 2500;
    var_4 physicslaunchserver( var_4.origin, var_7 );
    var_8 = "_encstr_A45C1515A2D5B070134999E37227B6796C0D81935D3BE9" + self.br_helmetlevel;
    var_9 = 15;
    var_10 = 0.1;
    var_9 = var_9 * ( 1 / var_10 );
    var_11 = var_4.origin;

    for ( var_12 = 0; var_12 < var_9; var_12++ )
    {
        wait( var_10 );
        var_13 = var_11 - var_4.origin;

        if ( var_13[0] < 2 && var_13[1] < 2 && var_13[2] < 2 && var_13[0] > -2 && var_13[1] > -2 && var_13[2] > -2 )
        {
            var_14 = _encstr_823124376CE42DC11DCD5EB6E0CB3BB0ADAC3A2FE056CDBC314EAF83A536DAAB079BE2D9B9B1::remove_roof_nodes( var_4.origin, var_4.angles );
            var_4 delete();
            var_15 = _encstr_823124376CE42DC11DCD5EB6E0CB3BB0ADAC3A2FE056CDBC314EAF83A536DAAB079BE2D9B9B1::spawnpickup( var_8, var_14 );
            var_15.count = 1;
            return;
        }

        var_11 = var_4.origin;
    }

    var_4 delete();
}

_id_1203E( var_0, var_1 )
{
    if ( isdefined( var_0 ) )
        var_0 thread popoffhelmet( var_1, var_0.angles, var_0.origin );
}
