// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "_encstr_9E700851BEE33DF1B547" ) == "_encstr_8A510E519897A1332E4A3898E243F5B9" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registertimelimitdvar( level.gametype, 10 );
        scripts\mp\utility\game::registerroundlimitdvar( level.gametype, 1 );
        scripts\mp\utility\game::registerscorelimitdvar( level.gametype, 150 );
        scripts\mp\utility\game::registerwinlimitdvar( level.gametype, 1 );
        scripts\mp\utility\game::registernumlivesdvar( level.gametype, 0 );
        scripts\mp\utility\game::registerhalftimedvar( level.gametype, 0 );
        level.juggswitchtime = 90;
    }

    updategametypedvars();
    level.teambased = 1;
    level.doprematch = 1;
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.getspawnpoint = ::getspawnpoint;
    level.onplayerkilled = ::onplayerkilled;
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_82720FB3C2B5CAE8E5C12BAF3A35EAB3B3";

    if ( getdvarint( "_encstr_B8020A9E9AA69A6292517AA0" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_891904A1D8BE" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_93570B93F4A9629272A825B426" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_889708C9D0E7EBE819D9" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];

    game["_encstr_B8DA073D799798C7C7"]["_encstr_A1B206E238A5E3F5"] = "_encstr_BE670C267BED37D1FA1D53EAEC9D";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9E240C10CE33016D6AEA39B0F244"] = "_encstr_BE670C267BED37D1FA1D53EAEC9D";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3420C3D576AC3C8736F09906BB2"] = "_encstr_BE670C267BED37D1FA1D53EAEC9D";
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "_encstr_A1501512A15897838A532F371FA2DBE7486C0F1EB88078", getmatchrulesdata( "_encstr_80A30AE4BA23175F0970337A", "_encstr_9B1D0BA9AEB3EC12592C63A31A" ) );
    setdynamicdvar( "_encstr_A6CF19D389DE97F3A013676FAF487BAF8C232BFAF33E03AB803B9D", getmatchrulesdata( "_encstr_80A30AE4BA23175F0970337A", "_encstr_B9210F9AEAECEC35EE5A1DC6D0A2B4B656" ) );
    setdynamicdvar( "_encstr_A9EF14CD36E4AF474DEAB39DEB0EC1D6B0373557EC3B", getmatchrulesdata( "_encstr_80A30AE4BA23175F0970337A", "_encstr_A1DC0A58C9707EFF1293323A" ) );
    setdynamicdvar( "_encstr_A2FC14B812BA97A39B4D8CF40F9B6BA7A56AC8ABCA17", getmatchrulesdata( "_encstr_80A30AE4BA23175F0970337A", "_encstr_89460A333B979040BC5DEFD7" ) );
    setdynamicdvar( "_encstr_981F182F47EB6070B2830901217088A282E78F9FDF92B230D71F", getmatchrulesdata( "_encstr_80A30AE4BA23175F0970337A", "_encstr_823C0EFBD0F0E45521B7257004C892F7" ) );
    setdynamicdvar( "_encstr_A3D416E7DABE98F8AD8534604713C0082D7F5B6FB32D22F9", 0 );
    scripts\mp\utility\game::registerroundswitchdvar( "_encstr_BA65064753EA9D3B", 0, 0, 9 );
    setdynamicdvar( "_encstr_AA9F159F481B071BB5DDB7AFD06D62D560987B7F80D064", 1 );
    scripts\mp\utility\game::registerroundlimitdvar( "_encstr_BA65064753EA9D3B", 1 );
    setdynamicdvar( "_encstr_AB8C136FB8EBF7EB650D671F6037729E7040AF8F98", 1 );
    scripts\mp\utility\game::registerwinlimitdvar( "_encstr_BA65064753EA9D3B", 1 );
    setdynamicdvar( "_encstr_8A0213FF3F6BC193CA1B4F1727E2639C7BCBAB3DCA", 0 );
    scripts\mp\utility\game::registerhalftimedvar( "_encstr_BA65064753EA9D3B", 0 );
    setdynamicdvar( "_encstr_9C681D8703C2A16DFB1BA9D1C1EB2918589D0D3DAD6A203FA782C199DA875B", 0 );
    setdynamicdvar( "_encstr_97E21B222BC3412B732509D298D04BD8D7B8F9D7AB829F0D79BDC85098", 0 );
    setdynamicdvar( "_encstr_B77818E6369CEBE06358BC569CF533BD4E6C95C995371CB0DD37", 1 );
    setdynamicdvar( "_encstr_A821105780D3FFE3631FED69F41D9B91FB28", 0 );
    setdynamicdvar( "_encstr_975512C31EE3D7BB7530E2FA7999F2DFF8F05C4D", 0 );
}

onstartgametype()
{
    setclientnamemode( "_encstr_95900C2EDBD01F99D6B1DFEB878D" );

    if ( !isdefined( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] ) )
        game["_encstr_A6D60EE09BF413B9945185CB4797C583"] = 0;

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
    {
        var_0 = game["_encstr_941C0A6AF345075ED05BEAD3"];
        var_1 = game["_encstr_95A70AA81FEE295D3A2F56DE"];
        game["_encstr_941C0A6AF345075ED05BEAD3"] = var_1;
        game["_encstr_95A70AA81FEE295D3A2F56DE"] = var_0;
    }

    scripts\mp\utility\game::setobjectivetext( "_encstr_BC850785638DA59537", &"_encstr_BA0711AF65B1B7E7C5DC9950678073BC91C71F" );
    scripts\mp\utility\game::setobjectivetext( "_encstr_BA840579D3F7F6", &"_encstr_BA0711AF65B1B7E7C5DC9950678073BC91C71F" );

    if ( level.splitscreen )
    {
        scripts\mp\utility\game::setobjectivescoretext( "_encstr_BC850785638DA59537", &"_encstr_BA0711AF65B1B7E7C5DC9950678073BC91C71F" );
        scripts\mp\utility\game::setobjectivescoretext( "_encstr_BA840579D3F7F6", &"_encstr_BA0711AF65B1B7E7C5DC9950678073BC91C71F" );
    }
    else
    {
        scripts\mp\utility\game::setobjectivescoretext( "_encstr_BC850785638DA59537", &"_encstr_A47517A9F04453B5B3A1C45553B69FB57B4871A159AE0FEFAF" );
        scripts\mp\utility\game::setobjectivescoretext( "_encstr_BA840579D3F7F6", &"_encstr_A47517A9F04453B5B3A1C45553B69FB57B4871A159AE0FEFAF" );
    }

    scripts\mp\utility\game::setobjectivehinttext( "_encstr_BC850785638DA59537", &"_encstr_8CA616F856F1CF6533413D3D47A004F23F3457413BBCDC6B" );
    scripts\mp\utility\game::setobjectivehinttext( "_encstr_BA840579D3F7F6", &"_encstr_8CA616F856F1CF6533413D3D47A004F23F3457413BBCDC6B" );
    initspawns();
    scripts\mp\playeractions::registeractionset( "_encstr_BA65064753EA9D3B", [ "_encstr_ADE40AEADCC2312D1B2DD12F", "_encstr_B6190C6DB4C68DB9A327CA0B6DDC", "_encstr_BEF407B95DC1B227E6" ] );
    level.respawnoldjugg_fx = loadfx( "_encstr_80D827FB51A31E7ED055DDEF0310C25B6049E273F8F6FFF5B827D2AD0958484FFD628B6A2056B7ED28" );
    level.jugg_available = [];
    level.jugg_available["_encstr_BA840579D3F7F6"] = 1;
    level.jugg_available["_encstr_BC850785638DA59537"] = 1;
    level.jugg_attackers = [];
    level.jugg_attackers["_encstr_BA840579D3F7F6"] = [];
    level.jugg_attackers["_encstr_BC850785638DA59537"] = [];
    level.jugg_currjugg = [];
    level.jugg_currjugg["_encstr_BA840579D3F7F6"] = undefined;
    level.jugg_currjugg["_encstr_BC850785638DA59537"] = undefined;
    level.tjugg_timerdisplay = [];
    level.tjugg_timerdisplay["_encstr_BC850785638DA59537"] = scripts\mp\hud_util::createservertimer( "_encstr_BC2B0A075628F786B1182B12", 1.4, "_encstr_BC850785638DA59537" );
    level.tjugg_timerdisplay["_encstr_BC850785638DA59537"] scripts\mp\hud_util::setpoint( "_encstr_A69F0883303958E56D09", "_encstr_A69F0883303958E56D09", 55, 150 );
    level.tjugg_timerdisplay["_encstr_BC850785638DA59537"].label = &"_encstr_82701553A0D729553A8EFA9C542CA8F552AAE81D7DA4E4";
    level.tjugg_timerdisplay["_encstr_BC850785638DA59537"].alpha = 0;
    level.tjugg_timerdisplay["_encstr_BC850785638DA59537"].archived = 0;
    level.tjugg_timerdisplay["_encstr_BC850785638DA59537"].hidewheninmenu = 1;
    level.tjugg_timerdisplay["_encstr_BA840579D3F7F6"] = scripts\mp\hud_util::createservertimer( "_encstr_BC2B0A075628F786B1182B12", 1.4, "_encstr_BA840579D3F7F6" );
    level.tjugg_timerdisplay["_encstr_BA840579D3F7F6"] scripts\mp\hud_util::setpoint( "_encstr_A69F0883303958E56D09", "_encstr_A69F0883303958E56D09", 55, 150 );
    level.tjugg_timerdisplay["_encstr_BA840579D3F7F6"].label = &"_encstr_82701553A0D729553A8EFA9C542CA8F552AAE81D7DA4E4";
    level.tjugg_timerdisplay["_encstr_BA840579D3F7F6"].alpha = 0;
    level.tjugg_timerdisplay["_encstr_BA840579D3F7F6"].archived = 0;
    level.tjugg_timerdisplay["_encstr_BA840579D3F7F6"].hidewheninmenu = 1;
    thread hidetimerdisplayongameend( level.tjugg_timerdisplay["_encstr_BC850785638DA59537"] );
    thread hidetimerdisplayongameend( level.tjugg_timerdisplay["_encstr_BA840579D3F7F6"] );
    level.favorclosespawnscalar = 5;
}

updategametypedvars()
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::updatecommongametypedvars();
    level.jugghealth = scripts\mp\utility\dvars::dvarintvalue( "_encstr_9B1D0BA9AEB3EC12592C63A31A", 1000, 1000, 10000 );
    level.juggswitchtime = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_B9210F9AEAECEC35EE5A1DC6D0A2B4B656", 60, 10, 180 );
    level.ppkasjugg = scripts\mp\utility\dvars::dvarintvalue( "_encstr_A1DC0A58C9707EFF1293323A", 2, 1, 100 );
    level.ppkonjugg = scripts\mp\utility\dvars::dvarintvalue( "_encstr_89460A333B979040BC5DEFD7", 5, 1, 100 );
    level.ppkjuggonjugg = scripts\mp\utility\dvars::dvarintvalue( "_encstr_823C0EFBD0F0E45521B7257004C892F7", 10, 1, 100 );
}

onplayerconnect( var_0 )
{
    var_0.hasbeenjugg = 0;
    var_0.jugg_allegiance = 0;
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_A8E80F2F633A9549FE2228CDCB8CA0C052" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_A9C01AAD83BE1D91B5FA6E38587737FA8536365A59377DE63A58E4D1" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_89F7184A933073BFC00FCBB00B684597470A8213DEFE8B361071" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_B1090D98F3211171B757B62F41F7F8" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_80E817B60EBEA3C8DAD737070BDD73FA9B2B1B7BB991C23997", 1, 1 );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_B1090D98F3211171B757B62F41F7F8" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_80E817B60EBEA3C8DAD737070BDD73FA9B2B1B7BB991C23997", 1, 1 );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_930E073E8FC00DDF69", "_encstr_B1090D98F3211171B757B62F41F7F8" );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_A30C093385361B4CB06C6D", "_encstr_80E817B60EBEA3C8DAD737070BDD73FA9B2B1B7BB991C23997" );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

getspawnpoint()
{
    var_0 = self.pers["_encstr_89EF05D46BA8FD"];

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
        var_0 = scripts\mp\utility\game::getotherteam( var_0 )[0];

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        var_1 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_A9BD0ED638EBA391DAFACDC10BBB9BBE" + var_0 + "_encstr_A4810727CEFBF7F281" );
        var_2 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1 );
    }
    else
        var_2 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, "_encstr_930E073E8FC00DDF69", "_encstr_A30C093385361B4CB06C6D" );

    return var_2;
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( var_3 == "_encstr_97590CFD0825D7720BD1A018A1F3" && var_4.basename == "_encstr_AABA05236DC831" && isdefined( self.wasswitchingteamsforonplayerkilled ) )
        return;

    var_10 = self;

    if ( isdefined( var_10.isjuggmodejuggernaut ) )
    {
        if ( isdefined( var_10.juggoverlay ) )
            var_10.juggoverlay destroy();

        var_10.playerstreakspeedscale = undefined;
        var_10.nostuckdamagekill = 0;
        var_10 scripts\mp\utility\player::_setsuit( "_encstr_A17A13C2BB4B274748A5110D59284A771B33390AE3" );
        cleanupobjectiveiconsforjugg( var_10 );
    }

    if ( isdefined( var_1 ) && isplayer( var_1 ) )
    {
        var_11 = 0;
        var_12 = 0;
        var_13 = 0;
        var_14 = 0;
        var_15 = 0;
        var_16 = 0;
        var_17 = 0;

        if ( var_1 == var_10 )
        {
            if ( isdefined( var_10.isjuggmodejuggernaut ) )
                var_12 = 1;
        }
        else if ( var_1.team != var_10.team )
        {
            if ( isdefined( var_10.isjuggmodejuggernaut ) )
            {
                var_12 = 1;

                if ( isdefined( var_1.isjuggmodejuggernaut ) )
                    var_13 = 1;
                else
                    var_14 = 1;
            }
            else if ( isdefined( var_1.isjuggmodejuggernaut ) )
                var_15 = 1;

            if ( level.jugg_available[var_1.team] )
                var_11 = 1;
        }
        else if ( isdefined( var_10.isjuggmodejuggernaut ) && var_1.team == var_10.team )
        {
            var_10 thread givejuggloadout();
            return;
        }

        if ( var_11 )
            resetjugg( var_1 );

        if ( var_12 )
        {
            var_18 = getbestteammate( var_10.team, 0 );

            if ( !isdefined( var_18 ) )
                var_18 = getbestteammate( var_10.team, 1 );

            if ( !isdefined( var_18 ) )
                var_18 = var_10;

            resetjugg( var_18, var_10 );
        }

        if ( var_11 || var_12 )
            scripts\mp\utility\sound::playsoundonplayers( "_encstr_AA781609B0BF6915970210191A6ED5E697490F7D2DA3D159" );

        if ( var_1 != var_10 && var_1.team != var_10.team && !isdefined( var_1.isjuggmodejuggernaut ) )
        {
            if ( var_1.hasbeenjugg )
            {
                var_1.jugg_allegiance = var_1.jugg_allegiance + 25;

                if ( var_14 )
                    var_1.jugg_allegiance = var_1.jugg_allegiance + 75;

                if ( isdefined( level.jugg_attackers[var_1.team][var_10.guid] ) )
                {
                    var_16 = 1;
                    var_1.jugg_allegiance = var_1.jugg_allegiance + 50;
                    level.jugg_attackers[var_1.team][var_10.guid] = undefined;
                }
            }
            else
            {
                var_1.jugg_allegiance = var_1.jugg_allegiance + 50;

                if ( var_14 )
                    var_1.jugg_allegiance = var_1.jugg_allegiance + 100;

                if ( isdefined( level.jugg_attackers[var_1.team][var_10.guid] ) )
                {
                    var_16 = 1;
                    var_1.jugg_allegiance = var_1.jugg_allegiance + 100;
                    level.jugg_attackers[var_1.team][var_10.guid] = undefined;
                }
            }
        }

        if ( var_14 )
        {
            var_1 thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_98BA10DF38F81489553D574F2D4D52A16378" );
            var_17 = level.ppkonjugg;
        }
        else if ( var_13 )
        {
            var_1 thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_A8F00DA2ED07711F7D4A49E8931717" );
            var_17 = level.ppkjuggonjugg;
        }
        else if ( var_15 )
        {
            var_1 thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_B1681304F0B8B4217F2FBF135B14EAF510B83E0BCB" );
            var_17 = level.ppkasjugg;
        }

        if ( var_17 )
            var_1 scripts\mp\gamescore::giveteamscoreforobjective( var_1.pers["_encstr_89EF05D46BA8FD"], var_17 );

        if ( var_1.team != var_10.team && game["_encstr_A9AD064B0D19E377"] == "_encstr_B9E70983DEE6D1760BB5CA" && game["_encstr_B4040B6BBF898046C247E5C3DF"][var_1.team] > game["_encstr_B4040B6BBF898046C247E5C3DF"][level.otherteam[var_1.team]] )
        {
            var_1.finalkill = 1;
            return;
        }
    }
    else if ( isdefined( var_10.isjuggmodejuggernaut ) )
    {
        var_18 = getbestteammate( var_10.team, 0 );

        if ( !isdefined( var_18 ) )
            var_18 = getbestteammate( var_10.team, 1 );

        if ( !isdefined( var_18 ) )
            var_18 = var_10;

        resetjugg( var_18, var_10 );
    }
}

resetjugg( var_0, var_1 )
{
    if ( isdefined( var_1 ) )
    {
        var_1 notify( "_encstr_9D4D108DBD373A7D9A57ECCEAC39DC85EA47" );
        var_1.isjuggmodejuggernaut = undefined;
    }
    else
        level.jugg_available[var_0.team] = 0;

    level.jugg_currjugg[var_0.team] = undefined;
    level.tjugg_timerdisplay[var_0.team].alpha = 0;
    level.jugg_attackers[var_0.team] = [];

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == var_0.team )
            var_3.jugg_allegiance = 0;
    }

    var_0 thread givejuggloadout();
}

givejuggloadout()
{
    if ( !scripts\mp\utility\player::isreallyalive( self ) || scripts\mp\utility\player::isusingremote() )
    {
        self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
        thread resetjuggloadoutondisconnect( 0 );

        while ( !scripts\mp\utility\player::isreallyalive( self ) || scripts\mp\utility\player::isusingremote() )
            waitframe();

        self notify( "_encstr_A22321F54DB041532DCBFAF3F47D4F078927697CF790535F4005328BB958B3BD68A7F4" );
    }

    if ( isdefined( self.iscarrying ) && self.iscarrying == 1 )
    {
        self notify( "_encstr_A97817572058AB92107F371367254ADFF0E80E9E9948751ADD" );
        waitframe();
    }

    while ( self ismantling() )
        waitframe();

    while ( !self isonground() )
        waitframe();

    if ( istrue( self.isjuggmodejuggernaut ) )
    {
        self notify( "_encstr_9D4D108DBD373A7D9A57ECCEAC39DC85EA47" );
        waitframe();
    }

    self.isjuggmodejuggernaut = 1;
    level.jugg_currjugg[self.team] = self;
    self.hasbeenjugg = 1;
    scripts\mp\equipment\tac_insert::_id_13684( self.origin, self.angles );
    self notify( "_encstr_A1D70BDE071B53794F208AE3F8" );
    self.faux_spawn_stance = self getstance();
    thread scripts\mp\playerlogic::spawnplayer( 1 );
    createjuggobjectiveicon( self );
    thread updatejuggpingorigin();
    self.isjuggernaut = 1;
    self.maxhealth = level.jugghealth;
    self.health = self.maxhealth;
    self.nostuckdamagekill = 1;
    scripts\mp\class::loadout_clearweapons( 1 );
    scripts\mp\playeractions::allowactionset( "_encstr_BA65064753EA9D3B", 0 );
    var_0 = scripts\mp\class::buildweapon( "_encstr_BCB60F8A87C1C99532D827416045CADA8B", [ "_encstr_98CC058C20416A" ], "_encstr_AABA05236DC831", "_encstr_AABA05236DC831", -1 );
    self giveweapon( var_0 );
    scripts\cp_mp\utility\inventory_utility::forcevalidweapon( var_0 );
    var_0 = scripts\mp\class::buildweapon( "_encstr_98090E4BDD1CAFC685D7C9838507C2CD", [], "_encstr_AABA05236DC831", "_encstr_AABA05236DC831", -1 );
    self giveweapon( var_0 );
    self givemaxammo( var_0 );
    scripts\mp\utility\perk::giveperk( "_encstr_AAC01A87A9F5722930B83378F6887CABD85F1B57572BBB0C6880EE47" );
    scripts\mp\utility\perk::giveperk( "_encstr_804116B6608779CB46E288F8C99A8171A30828A4C7376307" );
    scripts\mp\utility\player::_setsuit( "_encstr_B34212BBD38FB7487567C8C02BB6E12BF37121BF" );
    self.playerstreakspeedscale = -0.2;
    scripts\mp\weapons::updatemovespeedscale();
    scripts\mp\juggernaut::jugg_setmodel();
    self.juggoverlay = newclienthudelem( self );
    self.juggoverlay.x = 0;
    self.juggoverlay.y = 0;
    self.juggoverlay.alignx = "_encstr_B1AD05C65666E8";
    self.juggoverlay.aligny = "_encstr_B91904EC4718";
    self.juggoverlay.horzalign = "_encstr_BC940BE9D5F91D47B0ABBD851E";
    self.juggoverlay.vertalign = "_encstr_BC940BE9D5F91D47B0ABBD851E";
    self.juggoverlay setshader( "_encstr_9D7016674F934FAE17B0112A60032203892BD71CD5D89376", 640, 480 );
    self.juggoverlay.sort = -10;
    self.juggoverlay.archived = 1;
    self.juggoverlay.alpha = 1.0;
    self.friendlyoutlineid = scripts\mp\utility\outline::outlineenableforteam( self, self.team, "_encstr_9BDA192A73E553BC983B9E69D170C99380C90263FBB3E776081B9E", "_encstr_B6CE0B0BB00A031B7B88355740" );
    thread resetjuggloadoutondisconnect( 1 );
    thread resetjuggloadoutonchangeteam();
    thread rewardteammateproximity();
    thread logattackers();

    if ( level.juggswitchtime != 0 )
        thread nextjuggtimeout();
}

nextjuggtimeout()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level.tjugg_timerdisplay[self.team].label = &"_encstr_82701553A0D729553A8EFA9C542CA8F552AAE81D7DA4E4";
    level.tjugg_timerdisplay[self.team] settimer( level.juggswitchtime );
    level.tjugg_timerdisplay[self.team].alpha = 1;
    scripts\mp\hostmigration::waitlongdurationwithhostmigrationpause( level.juggswitchtime );
    level.tjugg_timerdisplay[self.team].alpha = 0;
    var_0 = getbestteammate( self.team, 0 );

    if ( !isdefined( var_0 ) )
        var_0 = getbestteammate( self.team, 1 );

    if ( !isdefined( var_0 ) )
        var_0 = self;

    scripts\mp\utility\sound::playsoundonplayers( "_encstr_AA781609B0BF6915970210191A6ED5E697490F7D2DA3D159" );
    resetjugg( var_0, self );

    if ( var_0 != self )
        thread respawnoldjugg();
}

respawnoldjugg()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    while ( !scripts\mp\utility\player::isreallyalive( self ) || scripts\mp\utility\player::isusingremote() )
        waitframe();

    if ( isdefined( self.iscarrying ) && self.iscarrying == 1 )
    {
        self notify( "_encstr_A97817572058AB92107F371367254ADFF0E80E9E9948751ADD" );
        waitframe();
    }

    scripts\mp\equipment\tac_insert::_id_13684( self.origin, self.angles );
    playfx( level.respawnoldjugg_fx, self.origin );
    self notify( "_encstr_9D4D108DBD373A7D9A57ECCEAC39DC85EA47" );
    waitframe();

    while ( !self isonground() )
        waitframe();

    self notify( "_encstr_A1D70BDE071B53794F208AE3F8" );

    if ( isdefined( self.juggoverlay ) )
        self.juggoverlay destroy();

    self.faux_spawn_stance = self getstance();
    self.playerstreakspeedscale = undefined;
    self.isjuggernaut = 0;
    self.nostuckdamagekill = 0;
    scripts\mp\utility\outline::outlinedisable( self.friendlyoutlineid, self );
    self.maxhealth = scripts\mp\tweakables::gettweakablevalue( "_encstr_AAB0079B102F47FF38", "_encstr_9C9F0A6B2C0F34590B3647A1" );
    thread scripts\mp\playerlogic::spawnplayer( 1 );
    scripts\mp\utility\player::_setsuit( "_encstr_A17A13C2BB4B274748A5110D59284A771B33390AE3" );
    scripts\mp\weapons::updatemovespeedscale();
    cleanupobjectiveiconsforjugg( self );
}

rewardteammateproximity()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    for (;;)
    {
        wait 1.0;

        foreach ( var_1 in level.players )
        {
            if ( scripts\mp\utility\player::isreallyalive( var_1 ) && !var_1 scripts\mp\utility\player::isusingremote() && var_1 != self && var_1.team == self.team && distancesquared( var_1.origin, self.origin ) < 48400 )
            {
                if ( var_1.hasbeenjugg )
                {
                    var_1.jugg_allegiance = var_1.jugg_allegiance + 15;
                    continue;
                }

                var_1.jugg_allegiance = var_1.jugg_allegiance + 25;
            }
        }
    }
}

logattackers()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    for (;;)
    {
        self waittill( "_encstr_B8BE07320B5B16ECAC", var_0, var_1 );

        if ( isplayer( var_1 ) && var_1.team != self.team )
        {
            if ( !isdefined( level.jugg_attackers[self.team][var_1.guid] ) )
                level.jugg_attackers[self.team][var_1.guid] = 1;
        }
    }
}

resetjuggloadoutondisconnect( var_0 )
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( var_0 )
        self endon( "_encstr_A3750609A5E61883" );
    else
        self endon( "_encstr_A22321F54DB041532DCBFAF3F47D4F078927697CF790535F4005328BB958B3BD68A7F4" );

    var_1 = self.team;
    self waittill( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_2 = getbestteammate( var_1, 0 );

    if ( !isdefined( var_2 ) )
        var_2 = getbestteammate( var_1, 1 );

    if ( isdefined( var_2 ) )
    {
        scripts\mp\utility\sound::playsoundonplayers( "_encstr_AA781609B0BF6915970210191A6ED5E697490F7D2DA3D159" );
        resetjugg( var_2 );
    }
    else
    {
        level.jugg_available[var_1] = 1;
        level.jugg_currjugg[var_1] = undefined;
        level.tjugg_timerdisplay[var_1].alpha = 0;
        level.jugg_attackers[var_1] = [];

        foreach ( var_4 in level.players )
        {
            if ( var_4.team == var_1 )
                var_4.jugg_allegiance = 0;
        }
    }
}

resetjuggloadoutonchangeteam()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_0 = self.team;
    scripts\engine\utility::_id_143A5( "_encstr_B2170C4AD884CDC823B9DB9D9F42", "_encstr_8CD0124A97D7F07BAD07C8C342FAA010C490DD5B" );
    self.isjuggmodejuggernaut = undefined;
    var_1 = getbestteammate( var_0, 0 );

    if ( !isdefined( var_1 ) )
        var_1 = getbestteammate( var_0, 1 );

    if ( isdefined( var_1 ) )
    {
        scripts\mp\utility\sound::playsoundonplayers( "_encstr_AA781609B0BF6915970210191A6ED5E697490F7D2DA3D159" );
        resetjugg( var_1 );
    }
    else
    {
        level.jugg_available[var_0] = 1;
        level.jugg_currjugg[var_0] = undefined;
        level.tjugg_timerdisplay[var_0].alpha = 0;
        level.jugg_attackers[var_0] = [];

        foreach ( var_3 in level.players )
        {
            if ( var_3.team == var_0 )
                var_3.jugg_allegiance = 0;
        }
    }
}

getbestteammate( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = -1;

    foreach ( var_5 in level.players )
    {
        if ( ( var_1 || !var_5 scripts\mp\utility\player::isusingremote() ) && var_5 != self && var_5.team == var_0 && var_5.jugg_allegiance > var_3 )
        {
            var_2 = var_5;
            var_3 = var_5.jugg_allegiance;
        }
    }

    return var_2;
}

hidetimerdisplayongameend( var_0 )
{
    level waittill( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0.alpha = 0;
}

createjuggobjectiveicon( var_0 )
{
    var_1 = scripts\mp\objidpoolmanager::requestobjectiveid( 99 );
    var_0.juggobjid = var_1;
    var_0.offset3d = ( 0, 0, 90 );
    var_0.visibleteam = "_encstr_BC19047780DA";
    var_0.ownerteam = var_0.team;
    scripts\mp\objidpoolmanager::objective_add_objective( var_1, "_encstr_A65A0856F3802ACA0D6B", var_0.origin, "_encstr_A93718D2B1EDDCF5ADA5E6A5B5B00EEB35AE3BCEACC99B58EA3A" );
    scripts\mp\objidpoolmanager::objective_set_play_intro( var_1, 0 );
    scripts\mp\objidpoolmanager::objective_set_play_outro( var_1, 0 );
    scripts\mp\objidpoolmanager::objective_playermask_showtoall( var_1 );
    scripts\mp\objidpoolmanager::update_objective_onentity( var_1, var_0 );
    scripts\mp\objidpoolmanager::update_objective_setzoffset( var_1, var_0.offset3d[2] );
    objective_setownerteam( var_1, var_0.team );
    objective_setfriendlylabel( var_1, "_encstr_B9B71FF8278017A501C30515E719FD4B2B7050908C78FBAF21A30E1CCF91F68376" );
    objective_setenemylabel( var_1, "_encstr_A67B1DA982FAA4398E829A54AFD33962CAF23D2494F5B4A4C4897D1A14A0A6" );
}

cleanupobjectiveiconsforjugg( var_0 )
{
    scripts\mp\objidpoolmanager::returnobjectiveid( var_0.juggobjid );
    var_0.juggobjid = undefined;
}

updatejuggcurorigin()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_9D4D108DBD373A7D9A57ECCEAC39DC85EA47" );

    for (;;)
    {
        self.curorigin = self.origin + ( 0, 0, 90 );
        waitframe();
    }
}

updatejuggpingorigin()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_9D4D108DBD373A7D9A57ECCEAC39DC85EA47" );
    thread updatejuggcurorigin();

    if ( !isdefined( self.objpingdelay ) )
        self.objpingdelay = 4.0;

    for (;;)
    {
        foreach ( var_1 in level.teamnamelist )
        {
            if ( !scripts\mp\gameobjects::isfriendlyteam( var_1 ) )
            {
                objective_setpingsforteam( self.juggobjid, var_1 );
                objective_ping( self.juggobjid );
            }
        }

        scripts\engine\utility::_id_143BF( self.objpingdelay );
    }
}

setspecialloadouts()
{
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_872D11D1FF892130152B9EE3788CA51CCBFBCF"] = "_encstr_A6B3120F05CFBC15435ADB2FF1F723E338B88B13";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_87C30FC410893345733089A330AB3E9362"] = "_encstr_BCB60F8A87C1C99532D827416045CADA8B";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_B44319C6DB5832DEAE3A289C965B2CC95E141DA32C36A1D65673A3"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_A9651AE2C897BBF598D1103A83303EBBC3A5DBEB917E43AD20FD4C62"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_B66C1363F658327BD53A419396B558E49786B0B5DB"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_8702161410EA292F7BB321E36172F3866033F7BCB96F09A9"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_A14E11D520C0AC320551FF3F67206AE4782B08"] = "_encstr_98090E4BDD1CAFC685D7C9838507C2CD";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_9D6F1B6C48D16B2D1B48D18AC817252389AEF1395DDBC7F6C968BA3218"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_BDDB1C6590701C82D5812FCF97F0DA54285B58A66B70A19AA35BFFEBD106"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_A2EA151BD081D44253851297663F0A9C2980C73F48F807"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_82B618ABEA2661705BBB2A415B6D7332AB2AD71F9D3880AE324D"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_879C11A537D2DA37230B19FA98E96581D0A55B"] = "_encstr_AF9310234B172F41E14FD8E8170D5BF7FAF2";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_B3A418C6F61691DB5747A2175796C1D6B27347824E96B6854E5E"] = "_encstr_AABB0B0FEA45B050160BCDFF07";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_AA781A89AF4749179393F168BBACE1A08F460DEE3DE7904DBFAA4020"] = "_encstr_81CB0C988FDDA9C066A37F97BF65";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_A31B12E09AEF5518032CF7A1326F20AA4393FB49"] = "_encstr_973508BF93EFFBC363B3";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_BAE713C8CFE03C60079B6BE3E83B5FEC7AAAF917B3"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_A1E71363923EA180A70CDA33FC2BCB59229AD0B0DF"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_B9E71363DEC291F6ABD196961B63DCE8935616B6CC"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_B6920DDA60DB0FAFA33D538DD74913"] = "_encstr_AABA05236DC831";
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_ABCB0DBA7BBB6FCFC35D303D7628F7"] = [ "_encstr_9E57146EE0B21BA50B36A3BCD76EB1C23B5637765993", "_encstr_A2CF16DCE02BD896C2361DE5EB4CD816DCA39BA15A56B18C" ];
    level.tjugg_loadouts["_encstr_AA1608C07786F13312D3"]["_encstr_A4450FEB472A87A2834C172243E0E538F8"] = "_encstr_A83C0BF7F4ABABC79045FE5807";
}
