// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

get_ai_team()
{
    if ( isdefined( self.encounter.info.team ) )
        return self.encounter.info.team;

    var_0 = [];

    foreach ( var_2 in level.teamnamelist )
        var_0[var_2] = 0;

    foreach ( var_5 in level.players )
    {
        var_2 = var_5.pers["_encstr_89EF05D46BA8FD"];

        if ( !isdefined( var_2 ) || var_2 == "_encstr_A68C0A5803A5D151A2B310A6" )
            continue;

        var_0[var_2]++;
    }

    foreach ( var_2, var_8 in var_0 )
    {
        if ( var_8 == 0 )
        {
            self.encounter.info.team = var_2;
            break;
        }
    }

    if ( !isdefined( self.encounter.info.team ) )
        self.encounter.info.team = scripts\engine\utility::random( level.teamnamelist );

    return self.encounter.info.team;
}

get_targets()
{
    var_0 = [];

    if ( isdefined( self.target ) )
    {
        var_1 = scripts\engine\utility::getstructarray( self.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        foreach ( var_3 in var_1 )
            var_0[var_0.size] = var_3;

        var_5 = getentarray( self.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        foreach ( var_7 in var_5 )
            var_0[var_0.size] = var_7;

        var_9 = getnodearray( self.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        foreach ( var_11 in var_9 )
            var_0[var_0.size] = var_11;
    }

    return var_0;
}

getvartype( var_0 )
{
    if ( !isdefined( var_0 ) )
        return "_encstr_A2500A039865CFC728B5151C";
    else if ( isbuiltinfunction( var_0 ) )
        return "_encstr_B8BB0933AB9B368E2DB7B9";
    else if ( isbuiltinmethod( var_0 ) )
        return "_encstr_9FF811EE834A015BB973C28867C6F17912AD50";
    else if ( isanimation( var_0 ) )
        return "_encstr_988A0FC4D5A5D8A3B49B04AD2B1D43BD23";
    else if ( dospawnaitype( var_0 ) )
        return "_encstr_8B4C0A49FD016BDF33DF5F55";
    else if ( isarray( var_0 ) )
        return "_encstr_A1B6066F42FB1BFA";
    else if ( isstruct( var_0 ) )
        var_1 = "_encstr_A1D8075BC1B873BF0D";
    else if ( isvector( var_0 ) )
        var_1 = "_encstr_8ACA07D319066B6550";
    else if ( isent( var_0 ) )
        var_1 = "_encstr_B60E07C9FD1C2055E3";
    else if ( isnode( var_0 ) )
        var_1 = "_encstr_B8BA05377B1956";
    else if ( isint( var_0 ) )
        var_1 = "_encstr_9F1904A86253";
    else if ( isfloat( var_0 ) )
        var_1 = "_encstr_89A906CBCA77522B";
    else if ( isstring( var_0 ) )
        var_1 = "_encstr_A9D807B2E3F80182EC";
    else if ( isistring( var_0 ) )
        var_1 = "_encstr_9B34085A50215A677004";
    else
        var_1 = "_encstr_8AC708E3780203657815";

    return var_1;
}

vartostring( var_0 )
{
    var_1 = getvartype( var_0 );

    switch ( var_1 )
    {
        case "_encstr_A1B6066F42FB1BFA":
            return _arraytostring( var_0 );
        case "_encstr_8ACA07D319066B6550":
            return "_encstr_9F4C023A" + var_0[0] + "_encstr_B44C02C9" + var_0[1] + "_encstr_B44C02C9" + var_0[2] + "_encstr_934C02DC";
        case "_encstr_89A906CBCA77522B":
        case "_encstr_9F1904A86253":
            return "_encstr_A40101" + var_0;
        case "_encstr_A9D807B2E3F80182EC":
            return var_0;
        case "_encstr_B60E07C9FD1C2055E3":
            return "_encstr_AF07032519" + var_0 getentitynumber();
        default:
            return "_encstr_944C02BC" + var_1 + "_encstr_824C0272";
    }
}

_arraytostring( var_0 )
{
    var_1 = "_encstr_A40703DA10";
    var_2 = 1;

    foreach ( var_5, var_4 in var_0 )
    {
        if ( !var_2 )
            var_1 = var_1 + "_encstr_B44C02C9";
        else
            var_2 = 0;

        var_1 = var_1 + vartostring( var_4 );
    }

    var_1 = var_1 + "_encstr_950703427B";
    return var_1;
}

encounterremovenavobstacle( var_0 )
{
    destroynavobstacle( var_0 );
    self notify( "_encstr_9DAF16372CB3D77B899BA3B06C1BACF523CADCE827BDE5EB" + var_0 );
}

encounterremovenavobstacleonencounterend( var_0 )
{
    self endon( "_encstr_9DAF16372CB3D77B899BA3B06C1BACF523CADCE827BDE5EB" + var_0 );
    self waittill( "_encstr_82A10E72E896977340D1253AEF70FDE3" );
    encounterremovenavobstacle( var_0 );
}

encounterremovenavobstacledelay( var_0, var_1 )
{
    self endon( "_encstr_9DAF16372CB3D77B899BA3B06C1BACF523CADCE827BDE5EB" + var_0 );
    self endon( "_encstr_82A10E72E896977340D1253AEF70FDE3" );
    wait( var_1 );
    encounterremovenavobstacle( var_0 );
}

encounterdeleteentonend( var_0 )
{
    var_0 endon( "_encstr_A3750609A5E61883" );
    self waittill( "_encstr_82A10E72E896977340D1253AEF70FDE3" );
    var_0 delete();
}

disablescriptableplayeruseall( var_0 )
{
    foreach ( var_2 in level.players )
        var_0 disablescriptableplayeruse( var_2 );
}

enablescriptableplayeruseall( var_0 )
{
    foreach ( var_2 in level.players )
        var_0 enablescriptableplayeruse( var_2 );
}

waittill_dead( var_0, var_1, var_2 )
{
    var_10 = spawnstruct();

    if ( isdefined( var_2 ) )
    {
        var_10 endon( "_encstr_B1E711470D4E950B23F5E82DB5B291D7DE5D3A" );
        var_10 thread waittill_dead_timeout( var_2 );
    }

    var_10.count = var_0.size;

    if ( isdefined( var_1 ) && var_1 < var_10.count )
        var_10.count = var_1;

    scripts\engine\utility::array_thread( var_0, ::waittill_dead_thread, var_10 );

    while ( var_10.count > 0 )
        var_10 waittill( "_encstr_A9B817DD16D2A33AD28DB1F591B2B0C8109D5DBC40912D5619" );
}

waittill_dead_or_dying( var_0, var_1, var_2 )
{
    var_3 = [];

    foreach ( var_5 in var_0 )
    {
        if ( isalive( var_5 ) && !var_5.ignoreforfixednodesafecheck )
            var_3[var_3.size] = var_5;
    }

    var_0 = var_3;
    var_7 = spawnstruct();

    if ( isdefined( var_2 ) )
    {
        var_7 endon( "_encstr_B1E711470D4E950B23F5E82DB5B291D7DE5D3A" );
        var_7 thread waittill_dead_timeout( var_2 );
    }

    var_7.count = var_0.size;

    if ( isdefined( var_1 ) && var_1 < var_7.count )
        var_7.count = var_1;

    scripts\engine\utility::array_thread( var_0, ::waittill_dead_or_dying_thread, var_7 );

    while ( var_7.count > 0 )
        var_7 waittill( "_encstr_97BC20C71F807BBB73F85279A0B336F3BEF44D51B889678601496AA3919968BF306C" );
}

waittill_notetrack_or_damage( var_0 )
{
    self endon( "_encstr_B8BE07320B5B16ECAC" );
    self endon( "_encstr_A3750609A5E61883" );
    self waittillmatch( "_encstr_B86B0C9B96739DB1AC401673B4B6", var_0 );
}

get_living_ai( var_0, var_1 )
{
    var_2 = get_living_ai_array( var_0, var_1 );

    if ( var_2.size > 1 )
        return undefined;

    return var_2[0];
}

get_living_ai_array( var_0, var_1 )
{
    var_2 = getaispeciesarray( "_encstr_A61904730372", "_encstr_A61904730372" );
    var_3 = [];

    foreach ( var_5 in var_2 )
    {
        if ( !isalive( var_5 ) )
            continue;

        switch ( var_1 )
        {
            case "_encstr_B8CE0BE43FC317DF690862BA48":
                if ( isdefined( var_5.targetname ) && var_5.targetname == var_0 )
                    var_3[var_3.size] = var_5;

                break;
            case "_encstr_A8ED125A5723AF9B405770989B255F1FF3897A60":
                if ( isdefined( var_5.script_noteworthy ) && var_5.script_noteworthy == var_0 )
                    var_3[var_3.size] = var_5;

                break;
            case "_encstr_ADD5098A6A080D6827D8AD":
                if ( isdefined( var_5.animname ) && var_5.animname == var_0 )
                    var_3[var_3.size] = var_5;

                break;
        }
    }

    return var_3;
}

waittill_dead_thread( var_0 )
{
    self waittill( "_encstr_A3750609A5E61883" );
    var_0.count--;
    var_0 notify( "_encstr_A9B817DD16D2A33AD28DB1F591B2B0C8109D5DBC40912D5619" );
}

waittill_dead_or_dying_thread( var_0 )
{
    scripts\engine\utility::waittill_either( "_encstr_A3750609A5E61883", "_encstr_B3530B1BBDDC767D8CCAB03A86" );
    var_0.count--;
    var_0 notify( "_encstr_97BC20C71F807BBB73F85279A0B336F3BEF44D51B889678601496AA3919968BF306C" );
}

waittill_dead_timeout( var_0 )
{
    wait( var_0 );
    self notify( "_encstr_B1E711470D4E950B23F5E82DB5B291D7DE5D3A" );
}
