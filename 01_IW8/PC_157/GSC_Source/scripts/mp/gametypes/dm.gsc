// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 600 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 30 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    updategametypedvars();
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.getspawnpoint = ::getspawnpoint;
    level.modeonspawnplayer = ::onspawnplayer;
    level.onnormaldeath = ::onnormaldeath;
    level.onplayerscore = ::onplayerscore;
    level.didhalfscorevoboost = 0;
    setteammode( "_encstr_B91804FE5590" );

    if ( istrue( level.aonrules ) )
    {
        _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::bearsred();
        level.bypassclasschoicefunc = ::alwaysgamemodeclass;
        setomnvarforallclients( "_encstr_BA8510FBC22FF6101C3087E9474630B02FAB", 1 );
        setspecialloadout();
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_88100D227EADA0E33FE343DE9B2AC8";
    }
    else
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_94100D5CB63A236B991BF8315BDE81";

    if ( getdvarint( "_encstr_B8020A9E9AA69A6292517AA0" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_891904A1D8BE" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_93570B93F4A9629272A825B426" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_889708C9D0E7EBE819D9" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];

    game["_encstr_B8DA073D799798C7C7"]["_encstr_80430F6DD583DFDA551FA3E1F1405BE393"] = "_encstr_8AF50FE2B9210F42A36BC4DD7FA88F67DD";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_8F9810333316AF36B20B19D79BB2C6ED9B46"] = "_encstr_93DC119D0BD6ACB947B01DACFAB956C6DB9B32";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_8A3F0FD971018F69BF7F91962CD3FB0B80"] = "_encstr_825A106FCB6057DF2D31637ADE05EB0CF0B9";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_A38D0E64CF42EFC02DC718C99B417BE1"] = "_encstr_ABF40F3BC26B2BB9D10BE859D71B58DCD1";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9E240C10CE33016D6AEA39B0F244"] = "_encstr_A6980D1A5A371DF5B59636630B1BB1";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3420C3D576AC3C8736F09906BB2"] = "_encstr_B945096450080C815CA5E7";
}

alwaysgamemodeclass()
{
    return "_encstr_87AC099DB05B59ADF619AC";
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata( 1 );
    setdynamicdvar( "_encstr_875E10439E63573FFBE102FA701DB353797E", getmatchrulesdata( "_encstr_886F07236B8DBADCA8", "_encstr_B7F409C2BDCD25ABD859E6" ) );
    setdynamicdvar( "_encstr_8AF01BA3F9AEE787C817C3DB1F588F5FD8731A3BC18D837A1853D1A53D", getmatchrulesdata( "_encstr_886F07236B8DBADCA8", "_encstr_897F14A21A2FFE67E0EACC428617A5C38F2BA812EB76" ) );
    setdynamicdvar( "_encstr_BDFD192A9960AFAA515F0B572D0CE2DC188D2630F1D85BB3BE2177", getmatchrulesdata( "_encstr_886F07236B8DBADCA8", "_encstr_9E81122088C284A8CB0BC1E6512B62AF9A664D50" ) );
    setdynamicdvar( "_encstr_89DC160FFE83BF914F29A892DD170C2BDE6FEF4933A8F868", getmatchrulesdata( "_encstr_886F07236B8DBADCA8", "_encstr_AA1E0F9BEC9740D512C3DFD3F369832835" ) );
    setdynamicdvar( "_encstr_A3AB1037D827BE196BAFEE5A9B63A5D6D23A", 1 );
    scripts\mp\utility\game::registerwinlimitdvar( "_encstr_8807031CC1", 1 );
    setdynamicdvar( "_encstr_8C3D12B9B19C7D195BD74EF657378CD8B45B2DE8", 1 );
    scripts\mp\utility\game::registerroundlimitdvar( "_encstr_8807031CC1", 1 );
    setdynamicdvar( "_encstr_BE3710B2E95339E1D1EF785A036A75A46533", 0 );
    scripts\mp\utility\game::registerhalftimedvar( "_encstr_8807031CC1", 0 );
}

onstartgametype()
{
    setclientnamemode( "_encstr_95900C2EDBD01F99D6B1DFEB878D" );

    foreach ( var_1 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_1, &"_encstr_AA3F0EE00A63E5D743C8D14141B5013C" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_1, &"_encstr_AA3F0EE00A63E5D743C8D14141B5013C" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_1, &"_encstr_8AE914F56D7165283D8353175F78A09531D77E4DC751" );

        scripts\mp\utility\game::setobjectivehinttext( var_1, &"_encstr_9EBF1357C3686DC98C8C2F45222F29B1D113D3CD33" );
    }

    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_828B0BBCD23709257593B1A00A", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_B68C12D97299A1C83F97D0409F56C6C7535ECEDD", 1 );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_89550C9DFF778ABD3E40236F4830" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_98891618B3CF9DC071D37953FFE589DECF7AD0E05A8FCE28", 1, 1 );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_89550C9DFF778ABD3E40236F4830" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_98891618B3CF9DC071D37953FFE589DECF7AD0E05A8FCE28", 1, 1 );
    var_3 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_89550C9DFF778ABD3E40236F4830" );
    var_4 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_98891618B3CF9DC071D37953FFE589DECF7AD0E05A8FCE28" );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_8807031CC1", var_3 );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_A3F50CD3C22FB15E61392002C95F", var_4 );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
    level.quickmessagetoall = 1;
}

updategametypedvars()
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::updatecommongametypedvars();
    level.aonrules = scripts\mp\utility\dvars::dvarintvalue( "_encstr_B7F409C2BDCD25ABD859E6", 0, 0, 4 );
    level.scoreontargetplayer = scripts\mp\utility\dvars::dvarintvalue( "_encstr_897F14A21A2FFE67E0EACC428617A5C38F2BA812EB76", 0, 0, 1 );
    level.targetplayercycle = scripts\mp\utility\dvars::dvarintvalue( "_encstr_9E81122088C284A8CB0BC1E6512B62AF9A664D50", 0, 0, 1 );
    level.showtargettime = scripts\mp\utility\dvars::dvarintvalue( "_encstr_AA1E0F9BEC9740D512C3DFD3F369832835", 1, 0, 6 );

    switch ( level.showtargettime )
    {
        case 0:
            level.objpingdelay = 60.0;
            break;
        case 1:
            level.objpingdelay = 0.05;
            break;
        case 2:
            level.objpingdelay = 1.0;
            break;
        case 3:
            level.objpingdelay = 1.5;
            break;
        case 4:
            level.objpingdelay = 2.0;
            break;
        case 5:
            level.objpingdelay = 3.0;
            break;
        case 6:
            level.objpingdelay = 4.0;
            break;
    }

    if ( level.aonrules > 0 )
        level.blockweapondrops = 1;
    else
        level notify( "_encstr_A8DA13C60B73B1ACB1EB1BF62CC877CA0B83BDCDCD" );
}

getspawnpoint()
{
    var_0 = undefined;

    if ( level.ingraceperiod )
    {
        var_1 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_B68C12D97299A1C83F97D0409F56C6C7535ECEDD" );

        if ( !isdefined( level.requiresminstartspawns ) )
        {

        }

        if ( var_1.size > 0 )
            var_0 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1, 1 );

        if ( !isdefined( var_0 ) )
        {
            var_1 = scripts\mp\spawnlogic::getteamspawnpoints( self.team );
            var_0 = scripts\mp\spawnscoring::getstartspawnpoint_freeforall( var_1 );
        }
    }
    else
        var_0 = scripts\mp\spawnlogic::getspawnpoint( self, "_encstr_AABA05236DC831", "_encstr_8807031CC1", "_encstr_A3F50CD3C22FB15E61392002C95F" );

    return var_0;
}

onspawnplayer()
{
    self setclientomnvar( "_encstr_AD061ACF50F64D32C19E2CE9FEB94A1CDB18EF03F808AC19E9A5305B", 0 );

    if ( level.aonrules > 0 )
        thread onspawnfinished();

    if ( level.scoreontargetplayer )
    {
        if ( !isdefined( self.targetvictim ) )
        {
            thread gettarget();
            thread newtargetmessage();
        }
    }

    level notify( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );

    if ( level.aonrules > 0 )
    {

    }

    var_6 = 0;

    foreach ( var_8 in level.players )
    {
        if ( isdefined( var_8.score ) && var_8.score > var_6 )
            var_6 = var_8.score;
    }

    if ( !level.didhalfscorevoboost )
    {
        if ( var_1.score >= int( level.scorelimit * level.currentround - level.scorelimit / 2 ) )
            thread dohalftimevo( var_1 );
    }

    if ( var_1.score == level.scorelimit - 2 )
        level.kick_afk_check = 1;

    var_10 = var_1 scripts\mp\utility\stats::getpersstat( "_encstr_AA560B03BB08757F4351126AFB" );

    if ( isdefined( var_10 ) )
        var_1 scripts\mp\utility\stats::setextrascore1( var_10 );
}

onplayerscore( var_0, var_1, var_2, var_3 )
{
    var_1 scripts\mp\utility\stats::incpersstat( "_encstr_9BE80EE01E95B85B35F5E2B7565FD08F", var_2 );
    var_4 = int( var_1 scripts\mp\utility\stats::getpersstat( "_encstr_9BE80EE01E95B85B35F5E2B7565FD08F" ) );
    var_1 scripts\mp\persistence::statsetchild( "_encstr_A2460627DEABDC23", "_encstr_9BE80EE01E95B85B35F5E2B7565FD08F", var_4 );

    if ( var_1.pers["_encstr_81C910A89FDA9F18A0527BA7DF74C830B630"] > var_1 scripts\mp\utility\stats::getpersstat( "_encstr_AA560B03BB08757F4351126AFB" ) )
    {
        var_1.pers["_encstr_AA560B03BB08757F4351126AFB"] = var_1.pers["_encstr_81C910A89FDA9F18A0527BA7DF74C830B630"];
        var_1 scripts\mp\utility\stats::setextrascore1( var_1.pers["_encstr_81C910A89FDA9F18A0527BA7DF74C830B630"] );
    }

    if ( issubstr( var_0, "_encstr_B2F4074B73E3AD88C1" ) )
        return 0;

    if ( issubstr( var_0, "_encstr_9F120877C985F8385FBB" ) )
        return 0;

    if ( issubstr( var_0, "_encstr_97D70583536853" ) )
    {
        if ( level.scoreontargetplayer )
        {
            if ( var_3 != var_1.targetvictim )
                return 0;
            else
            {
                var_1 notify( "_encstr_B17612E453934F0FA54EFA7290717745E0116D7C" );
                var_1.targetvictim = undefined;
                var_1 thread gettarget();
                var_1 thread newtargetmessage();
            }
        }

        var_5 = scripts\mp\rank::getscoreinfovalue( "_encstr_A88210D6A90F3D25F8D0E6E26BA7DD9D3623" );
        return var_5;
    }
    else if ( var_0 == "_encstr_A1A70B5053C67F5383D7F52BB7" )
        var_1 scripts\mp\utility\script::bufferednotify( "_encstr_A3711656C23937CA23D79B8DB72759F5895D66CCACE45691", var_2 );

    return 0;
}

dohalftimevo( var_0 )
{
    var_0 scripts\mp\utility\dialog::leaderdialogonplayer( "_encstr_80430F6DD583DFDA551FA3E1F1405BE393" );
    var_1 = scripts\engine\utility::array_sort_with_func( level.players, ::compare_player_score );

    if ( isdefined( var_1[1] ) )
        var_1[1] scripts\mp\utility\dialog::leaderdialogonplayer( "_encstr_8F9810333316AF36B20B19D79BB2C6ED9B46" );

    if ( isdefined( var_1[2] ) && var_1.size > 2 )
        var_1[2] scripts\mp\utility\dialog::leaderdialogonplayer( "_encstr_8A3F0FD971018F69BF7F91962CD3FB0B80" );

    if ( isdefined( var_1[var_1.size - 1] ) && var_1.size > 3 )
        var_1[var_1.size - 1] scripts\mp\utility\dialog::leaderdialogonplayer( "_encstr_A38D0E64CF42EFC02DC718C99B417BE1" );

    level.didhalfscorevoboost = 1;
}

compare_player_score( var_0, var_1 )
{
    return var_0.score >= var_1.score;
}

onspawnfinished()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self setclientomnvar( "_encstr_BA8510FBC22FF6101C3087E9474630B02FAB", 1 );
    self waittill( "_encstr_B8030CCE4B3B2B627B8523DEBAD1" );
    runaonrules();
}

setspecialloadout()
{
    if ( scripts\mp\utility\game::matchmakinggame() )
    {
        var_0 = scripts\engine\utility::ter_op( randomintrange( 0, 99 ) > 50, "_encstr_AD031470E738DEEB7AF1AFA254D23DED8263C89037E3", "_encstr_8F610A500B9AD828F501AD93" );

        if ( var_0 == "_encstr_8F610A500B9AD828F501AD93" )
            var_1 = 11;
        else
            var_1 = 0;

        if ( getdvarint( "_encstr_AFF9169BB127AF91D6FA9385E6327B6B0AA7726AB2C6AC56", 1 ) == 1 )
        {
            var_2 = randomintrange( 0, 99 );

            if ( var_2 > 75 )
            {
                var_0 = "_encstr_95BD134ABFAAFFF5C56FE24013B54EA75683232878";
                var_1 = 2;
            }
        }
    }
    else
    {
        switch ( level.aonrules )
        {
            case 1:
                var_0 = "_encstr_8F610A500B9AD828F501AD93";
                var_1 = 11;
                break;
            case 2:
                var_0 = "_encstr_AD031470E738DEEB7AF1AFA254D23DED8263C89037E3";
                var_1 = 0;
                break;
            case 3:
                var_0 = "_encstr_95BD134ABFAAFFF5C56FE24013B54EA75683232878";
                var_1 = 2;
                break;
            default:
                var_0 = "_encstr_8F610A500B9AD828F501AD93";
                var_1 = 11;
                break;
        }
    }

    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_87C30FC410893345733089A330AB3E9362"] = var_0;
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_B44319C6DB5832DEAE3A289C965B2CC95E141DA32C36A1D65673A3"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_A9651AE2C897BBF598D1103A83303EBBC3A5DBEB917E43AD20FD4C62"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_B66C1363F658327BD53A419396B558E49786B0B5DB"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_8702161410EA292F7BB321E36172F3866033F7BCB96F09A9"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_B35A181BDE2C91B7BAE814932D6B0B39F2AC2C9C9616CD47A488"] = var_1;
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_A14E11D520C0AC320551FF3F67206AE4782B08"] = "_encstr_AAE20EA5BBE07DE05AAF3BF61B331962";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_9D6F1B6C48D16B2D1B48D18AC817252389AEF1395DDBC7F6C968BA3218"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_BDDB1C6590701C82D5812FCF97F0DA54285B58A66B70A19AA35BFFEBD106"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_A2EA151BD081D44253851297663F0A9C2980C73F48F807"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_82B618ABEA2661705BBB2A415B6D7332AB2AD71F9D3880AE324D"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_80531AE430A913A593D05932408FDDAB012669565F936FEE7D28E018"] = 1;
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_B3A418C6F61691DB5747A2175796C1D6B27347824E96B6854E5E"] = "_encstr_9E2115CAB8BAB4077D8E0D93BDBBA5DCECD7B6CD4B99B2";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_AA781A89AF4749179393F168BBACE1A08F460DEE3DE7904DBFAA4020"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_B6920DDA60DB0FAFA33D538DD74913"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_A31B12E09AEF5518032CF7A1326F20AA4393FB49"] = "_encstr_973508BF93EFFBC363B3";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_BAE713C8CFE03C60079B6BE3E83B5FEC7AAAF917B3"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_A1E71363923EA180A70CDA33FC2BCB59229AD0B0DF"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_B9E71363DEC291F6ABD196961B63DCE8935616B6CC"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_B77517780277DD90BB947337A125880E5BDA11404AFB83B813"] = 1;
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_ABCB0DBA7BBB6FCFC35D303D7628F7"] = [ "_encstr_B43D118F2B59675826E2B148E9B84D67ABF167", "_encstr_950B130F210D8AD1B820BBC07EC8E1535581EF83E3" ];
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_88EA12B1DB0B8CB7EA3A511ED1C95841564EB6CD"] = [ "_encstr_8082197F31EA6760263573F241524B61B4472B9097C27038F40D8B", "_encstr_9D8E15DC38CA8D2D851B1DE5F543D5B9E8D6C2DC3A2B39", "_encstr_AA811767A3C79A4747D4BB1869B82B8AB8B8833BB21F80D97D" ];
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_A4450FEB472A87A2834C172243E0E538F8"] = "_encstr_A83C0BF7F4ABABC79045FE5807";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_A1C815A37F37A928A383E56A0AD83FD5F824DBE8886399"] = "_encstr_A86C12EBDBF8A0B6610B6B6B238B73B0857591A1";
    level.aon_loadouts["_encstr_BC850785638DA59537"]["_encstr_B9C815B17B168C7BAE3A32D256C691AAC176C9581956C8"] = "_encstr_AABA05236DC831";
    level.aon_loadouts["_encstr_BA840579D3F7F6"] = level.aon_loadouts["_encstr_BC850785638DA59537"];
}

runaonrules()
{
    giveextraaonperks();
    var_0 = getcompleteweaponname( "_encstr_A6BB11E88FA23FAA7BCCC6D996433B6249AD7B" );
    self giveweapon( var_0 );
    self assignweaponmeleeslot( var_0 );
}

giveextraaonperks()
{
    var_0 = [ "_encstr_BC8613CD83AC8DA5161B47CBBE4CD84B3732B2CBAC", "_encstr_A169146E1CACB1D2851BA3CBBED907DCD4166B6B2BC9", "_encstr_8B6D15CD8395D85A0B1B3AF2FA662C8DC6460B6B2CD995", "_encstr_804116B6608779CB46E288F8C99A8171A30828A4C7376307", "_encstr_976D1292779B62317163BB9781EBE48A71029F4A" ];

    foreach ( var_2 in var_0 )
        scripts\mp\utility\perk::giveperk( var_2 );
}

onplayerconnect( var_0 )
{
    if ( level.aonrules > 0 )
    {
        if ( level.allowkillstreaks )
        {

        }

        var_0.pers["_encstr_9E95066E81471B5F"] = "_encstr_87AC099DB05B59ADF619AC";
        var_0.pers["_encstr_9F690A0DBF9F69AE0A510886"] = "_encstr_A40101";
        var_0.class = var_0.pers["_encstr_9E95066E81471B5F"];
        var_0.lastclass = var_0.pers["_encstr_9F690A0DBF9F69AE0A510886"];
        var_0.pers["_encstr_A2FB10AFE391259857B908783F59C26F5BEB"] = level.aon_loadouts["_encstr_BC850785638DA59537"];
        var_0 loadweaponsforplayer( [ "_encstr_BDB31120D328E92F8A5FE7EF8B2256D2372D8B", "_encstr_BED80DB4BB83AFD6379633CAEBB6E0" ], 1 );
    }
}

gettarget()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_8B990B3B2B47EB8EC239CE9547" );
    self endon( "_encstr_8B990B3B2B47EB8EC239CE9547" );

    if ( !scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) )
        level waittill( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );

    var_0 = 0;

    if ( !isdefined( self.targetarray ) || !level.targetplayercycle )
    {
        self.targetarray = [];
        self.targetindex = 0;
        var_0 = 1;

        foreach ( var_2 in level.players )
        {
            if ( var_2 == self )
                continue;
            else
                self.targetarray[self.targetarray.size] = var_2;
        }
    }

    if ( self.targetarray.size > 0 )
    {
        if ( !level.targetplayercycle )
            self.targetindex = randomint( self.targetarray.size );
        else
        {
            if ( !var_0 )
                self.targetindex++;

            if ( self.targetindex == self.targetarray.size )
                self.targetindex = 0;
        }
    }

    self.targetvictim = self.targetarray[self.targetindex];

    if ( !isdefined( self.targetvictim ) )
    {
        waitframe();
        thread gettarget();
        thread newtargetmessage();
        return;
    }

    waitframe();

    if ( level.showtargettime != 0 )
    {
        self.curorigin = self.origin;
        self.offset3d = ( 0, 0, 10 );
        scripts\mp\gameobjects::requestid( 1, 1 );
        var_4 = self.objidnum;
        objective_setlabel( var_4, "_encstr_AF671FA905BEA4E48E289AA8EB7A728995CBF48429D72AA04AD12A45AFD00AA035" );
        objective_setzoffset( var_4, 90 );
        objective_icon( var_4, "_encstr_B95C1D34BA19FA966CDEDCD7D1B0E4CE561D9523EB0E362CF2AC93D71B5A93" );
        objective_setplayintro( var_4, 1 );
        scripts\mp\objidpoolmanager::objective_playermask_single( var_4, self );
        objective_setbackground( var_4, 2 );
        objective_position( var_4, self.curorigin );
        objective_state( var_4, "_encstr_A65A0856F3802ACA0D6B" );
        scripts\mp\objidpoolmanager::update_objective_onentity( var_4, self.targetvictim );
        objective_setownerclient( var_4, self.targetvictim );

        if ( level.showtargettime > 1 )
            thread updatetargetlocation();
    }

    thread targetvictimdeathwatcher();
}

targetvictimdeathwatcher()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self waittill( "_encstr_B17612E453934F0FA54EFA7290717745E0116D7C" );
    thread scripts\mp\hud_message::showsplash( "_encstr_B17612E453934F0FA54EFA7290717745E0116D7C", scripts\mp\rank::getscoreinfovalue( "_encstr_97D70583536853" ) );
    objective_state( self.objidnum, "_encstr_936705F0224D13" );
    scripts\mp\gameobjects::releaseid();
}

updatetargetlocation()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.targetvictim endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_B17612E453934F0FA54EFA7290717745E0116D7C" );
    thread updatetargetcurorigin();
    objective_setpings( self.objidnum, 1 );

    if ( !isdefined( level.objpingdelay ) )
        level.objpingdelay = 3.0;

    for (;;)
    {
        if ( isdefined( self.targetvictim ) )
        {
            scripts\mp\objidpoolmanager::update_objective_position( self.objidnum, self.curorigin + self.offset3d );
            objective_ping( self.objidnum );
            wait( level.objpingdelay );
            continue;
        }

        waitframe();
    }
}

updatetargetcurorigin()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.targetvictim endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_B17612E453934F0FA54EFA7290717745E0116D7C" );

    for (;;)
    {
        if ( isdefined( self.targetvictim ) )
            self.curorigin = self.targetvictim.origin + ( 0, 0, 90 );

        waitframe();
    }
}

newtargetmessage()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_80CC10CF58B0D4DA3769DB2FAB6562201063" );
    self endon( "_encstr_80CC10CF58B0D4DA3769DB2FAB6562201063" );

    if ( !scripts\mp\flags::gameflag( "_encstr_989F0E38272BD6161DB143F532BDDC2B" ) )
        level waittill( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );

    wait 2.5;

    if ( isdefined( self.targetvictim ) )
        self iprintlnbold( &"_encstr_954511B867F86325811DCDC72701FEF3647DA1", self.targetvictim.name );
}
