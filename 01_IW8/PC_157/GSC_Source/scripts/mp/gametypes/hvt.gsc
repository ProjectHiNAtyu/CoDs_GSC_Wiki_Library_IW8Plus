// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "_encstr_9E700851BEE33DF1B547" ) == "_encstr_8A510E519897A1332E4A3898E243F5B9" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 0, 0, 9 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 600 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 75 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 1 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    updategametypedvars();
    level.teambased = 1;
    level.onstartgametype = ::onstartgametype;
    level.getspawnpoint = ::getspawnpoint;
    level.onplayerkilled = ::onplayerkilled;
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_8A110DB3B0DACAA32F0756F54723B5";

    if ( getdvarint( "_encstr_B8020A9E9AA69A6292517AA0" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_891904A1D8BE" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_93570B93F4A9629272A825B426" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_889708C9D0E7EBE819D9" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];

    game["_encstr_B8DA073D799798C7C7"]["_encstr_A1B206E238A5E3F5"] = "_encstr_8C660A4DDA8F8B4D1FD0716D";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_9E240C10CE33016D6AEA39B0F244"] = "_encstr_8C660A4DDA8F8B4D1FD0716D";
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B3420C3D576AC3C8736F09906BB2"] = "_encstr_8C660A4DDA8F8B4D1FD0716D";
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "_encstr_9813132BE61B2F54A5E0C9E220D1038FB35C85A406", getmatchrulesdata( "_encstr_A2E208701BAB55787309", "_encstr_A49D0E9BC6631C7BA081C040AABF1993" ) );
    setdynamicdvar( "_encstr_9BB61526566A117003F8586EA7A8688302151D8AAD8701", getmatchrulesdata( "_encstr_A2E208701BAB55787309", "_encstr_8FAA1040AB9C347A0FC3239D8A5B0A88432B" ) );
    setdynamicdvar( "_encstr_B8AF11CFC7C6098FF8A331C4F9A8A6F313431F", 0 );
    scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    setdynamicdvar( "_encstr_A2EB1067B0E3EFC37B8611D2EE3F3A978938", 0 );
}

onstartgametype()
{
    setclientnamemode( "_encstr_95900C2EDBD01F99D6B1DFEB878D" );

    if ( !isdefined( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] ) )
        game["_encstr_A6D60EE09BF413B9945185CB4797C583"] = 0;

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
    {
        var_0 = game["_encstr_941C0A6AF345075ED05BEAD3"];
        var_1 = game["_encstr_95A70AA81FEE295D3A2F56DE"];
        game["_encstr_941C0A6AF345075ED05BEAD3"] = var_1;
        game["_encstr_95A70AA81FEE295D3A2F56DE"] = var_0;
    }

    foreach ( var_3 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_3, &"_encstr_B1660F0D95899DE0E55B9BAF1730E9D111" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"_encstr_B1660F0D95899DE0E55B9BAF1730E9D111" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"_encstr_BA01157920948365435134856386AFD3CA99E191683A4B" );

        scripts\mp\utility\game::setobjectivehinttext( var_3, &"_encstr_BC1A14CFE1BCBDC8A9A39B47B677410107A14B5FF917" );
    }

    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::onplayerspawned );
    scripts\mp\utility\disconnect_event_aggregator::registerondisconnecteventcallback( ::onplayerdisconnect );
    initspawns();
    _encstr_A1E429F852FABB63A30BE831E0264973E59A7820FB57C7D0C312C7BDC457F247CA3358C872EF3D38BF3BDE::inittankspawns();
    level.activehvts = [];
    thread watchhvts();
}

resethvtstatus()
{
    if ( scripts\engine\utility::array_contains( level.activehvts, self ) )
        level.activehvts = scripts\engine\utility::array_remove( level.activehvts, self );
}

laststand_hack()
{
    returnheadicons();
    level.activehvts = scripts\engine\utility::array_remove( level.activehvts, self );
    self setclientomnvar( "_encstr_8F630ED3EA0743C0733787B1315B9096", 0 );
    thread showvalueincreasesplash( "_encstr_94EB114367A3AF39C29B5B7D91B2D6F6A32BC8" );
    scripts\mp\rank::scoreeventpopup( "_encstr_A9DD0C74A3C83722ED83EF9B8B05" );
}

_id_134D4( var_0, var_1 )
{
    if ( var_0.tagscarried == var_1.tagscarried )
    {
        var_2 = scripts\engine\utility::array_contains( level.activehvts, var_0 );
        return var_2;
    }
    else
        return var_0.tagscarried > var_1.tagscarried;
}

_id_13A27()
{
    self setclientomnvar( "_encstr_89960D0807FF9075D359BCCF6D3BAB", self.tagscarried );
    var_0 = 0;
    var_1 = 0;

    foreach ( var_3 in level.players )
    {
        if ( var_3.team == "_encstr_BC850785638DA59537" )
        {
            var_0 = var_0 + var_3.tagscarried;
            continue;
        }

        if ( var_3.team == "_encstr_BA840579D3F7F6" )
            var_1 = var_1 + var_3.tagscarried;
    }

    scripts\mp\gamescore::_setteamscore( "_encstr_BC850785638DA59537", var_0 );
    scripts\mp\gamescore::_setteamscore( "_encstr_BA840579D3F7F6", var_1 );
}

updategametypedvars()
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::updatecommongametypedvars();
    level.hvtcapturevalue = scripts\mp\utility\dvars::dvarintvalue( "_encstr_8FAA1040AB9C347A0FC3239D8A5B0A88432B", 5, 0, 50 );
    level.hvtmaxtargets = scripts\mp\utility\dvars::dvarintvalue( "_encstr_A49D0E9BC6631C7BA081C040AABF1993", 3, 1, 10 );

    if ( getmaxclients() < 21 )
        level.hvtmaxtargets = 1;
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );

    if ( isdefined( level.localeid ) )
        scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_88380746E174F1D36C", "_encstr_A8E80F2F633A9549FE2228CDCB8CA0C052" );
    else
        scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_A8E80F2F633A9549FE2228CDCB8CA0C052" );

    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_A9C01AAD83BE1D91B5FA6E38587737FA8536365A59377DE63A58E4D1" );
    scripts\mp\spawnlogic::addstartspawnpoints( "_encstr_89F7184A933073BFC00FCBB00B684597470A8213DEFE8B361071" );
    scripts\mp\spawnlogic::addspawnpoints( game["_encstr_941C0A6AF345075ED05BEAD3"], "_encstr_A9C01AAD83BE1D91B5FA6E38587737FA8536365A59377DE63A58E4D1" );
    scripts\mp\spawnlogic::addspawnpoints( game["_encstr_95A70AA81FEE295D3A2F56DE"], "_encstr_89F7184A933073BFC00FCBB00B684597470A8213DEFE8B361071" );
    var_0 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_A9C01AAD83BE1D91B5FA6E38587737FA8536365A59377DE63A58E4D1" );
    var_1 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_89F7184A933073BFC00FCBB00B684597470A8213DEFE8B361071" );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_9303101723E2CE585F5E839B464B688D6B97", var_0 );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_BCE3103F7B31CAABEE0D8876AF80C2370B23", var_1 );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_B1090D98F3211171B757B62F41F7F8" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_B1090D98F3211171B757B62F41F7F8" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_80E817B60EBEA3C8DAD737070BDD73FA9B2B1B7BB991C23997", 1, 1 );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_80E817B60EBEA3C8DAD737070BDD73FA9B2B1B7BB991C23997", 1, 1 );
    var_2 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_B1090D98F3211171B757B62F41F7F8" );
    var_3 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_80E817B60EBEA3C8DAD737070BDD73FA9B2B1B7BB991C23997" );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_930E073E8FC00DDF69", var_2 );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_A30C093385361B4CB06C6D", var_3 );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

getspawnpoint()
{
    var_0 = self.pers["_encstr_89EF05D46BA8FD"];

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
        var_0 = scripts\mp\utility\game::getotherteam( var_0 )[0];

    if ( scripts\mp\spawnlogic::shoulduseteamstartspawn() )
    {
        var_1 = scripts\mp\spawnlogic::getspawnpointarray( "_encstr_A9BD0ED638EBA391DAFACDC10BBB9BBE" + var_0 + "_encstr_A4810727CEFBF7F281" );
        var_2 = scripts\mp\spawnlogic::getspawnpoint_startspawn( var_1 );
    }
    else
    {
        scripts\mp\spawnlogic::activatespawnset( "_encstr_930E073E8FC00DDF69" );
        var_2 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, undefined, "_encstr_A30C093385361B4CB06C6D" );
    }

    return var_2;
}

showvalueincreasesplash( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    if ( self.team == "_encstr_A68C0A5803A5D151A2B310A6" )
        return;

    thread scripts\mp\hud_message::showsplash( var_0, var_1 );
}

ishvt()
{
    if ( !isdefined( level.activehvts ) )
        return 0;

    return scripts\engine\utility::array_contains( level.activehvts, self );
}

becomehvt()
{
    if ( !isdefined( self.objidnumfriend ) )
        addhvtheadicons();

    thread showvalueincreasesplash( "_encstr_8B3F0EF0AC1BEF124BF0CA81C081818E", 1 );
    scripts\mp\rank::scoreeventpopup( "_encstr_94120BE81E73E9DB88F67B539F" );
    self setclientomnvar( "_encstr_8F630ED3EA0743C0733787B1315B9096", 1 );
    scripts\mp\utility\outline::_hudoutlineviewmodelenable( "_encstr_872E1B50979C204B0E3A5752638DB806B0ABCF570B0B01A5826AC2346B", 0 );
    level.activehvts[level.activehvts.size] = self;
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( ishvt() )
        var_1 scripts\mp\rank::scoreeventpopup( "_encstr_97D20980DC6B9F040BB00A" );

    var_10 = self getentitynumber();

    if ( isdefined( level.outlinedplayers[var_10] ) )
    {
        scripts\mp\utility\outline::outlinedisable( self.outlineidfriend, self );
        scripts\mp\utility\outline::outlinedisable( self.outlineidenemy, self );
        self.outlineidfriend = undefined;
        self.outlineidenemy = undefined;
        level.outlinedplayers[var_10] = undefined;
    }

    if ( self.team == "_encstr_BC850785638DA59537" || self.team == "_encstr_BA840579D3F7F6" )
        scripts\mp\gamescore::giveteamscoreforobjective( self.team, self.tagscarried * -1 );
}

returnheadicons()
{
    if ( isdefined( self.objidnumfriend ) )
    {
        scripts\mp\objidpoolmanager::returnobjectiveid( self.objidnumfriend );
        scripts\mp\objidpoolmanager::returnobjectiveid( self.objidnumenemy );
        self.objidnumfriend = undefined;
        self.objidnumenemy = undefined;
        scripts\mp\utility\outline::_hudoutlineviewmodeldisable();
    }
}

ontimelimit()
{
    var_0 = scripts\mp\gamescore::gethighestscoringteam();

    if ( game["_encstr_A96D0726D4272B4372"] == "_encstr_AA6D09DBD92B93E8D2D695" )
        var_0 = "_encstr_A1AB087390A396A22BC5";
    else if ( "_encstr_8A190423A45D" )
        var_0 = "_encstr_AA6D09DBD92B93E8D2D695";

    thread scripts\mp\gamelogic::endgame( var_0, game["_encstr_94EA0B2BE623AF39CA589BBDB9"]["_encstr_A40B13A3B4AD56AFD896B5D28EF593AC0BC6A15632"] );
}

onplayerspawned()
{
    self.tagscarried = 0;

    foreach ( var_1 in scripts\mp\utility\teams::getteamdata( self.team, "_encstr_8875080E3685E52B93B9" ) )
    {
        if ( var_1 != self && isdefined( var_1.objidnumfriend ) )
            objective_addclienttomask( var_1.objidnumfriend, self );
    }

    if ( ishvt() )
        laststand_hack();
}

onplayerdisconnect( var_0 )
{
    var_0 resethvtstatus();
    var_0 returnheadicons();
}

watchhvts()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    level.outlinedplayers = [];

    for (;;)
    {
        var_0 = scripts\engine\utility::array_sort_with_func( level.players, ::_id_134D4 );
        var_1 = int( min( var_0.size, level.hvtmaxtargets ) );
        var_2 = 0;

        for ( var_3 = 0; var_3 < var_0.size; var_3++ )
        {
            var_4 = var_0[var_3];

            if ( !var_4 ishvt() && var_4.team != "_encstr_A68C0A5803A5D151A2B310A6" && var_4.tagscarried >= 10 )
            {
                var_4 becomehvt();
                var_4.vehicle_occupancy_mp_showcashbag = 1;
            }

            var_2++;

            if ( var_2 == level.hvtmaxtargets )
                break;
        }

        for ( var_3 = 0; var_3 < var_0.size; var_3++ )
        {
            var_4 = var_0[var_3];

            if ( var_4 ishvt() )
            {
                if ( isdefined( var_4.vehicle_occupancy_mp_showcashbag ) )
                {
                    var_4.vehicle_occupancy_mp_showcashbag = undefined;
                    var_1--;
                    continue;
                }

                if ( var_1 > 0 )
                {
                    var_1--;
                    continue;
                }

                var_4 laststand_hack();
            }
        }

        foreach ( var_6 in level.players )
        {
            var_7 = var_6 getentitynumber();
            var_8 = var_6.pers["_encstr_89EF05D46BA8FD"];

            if ( var_8 == "_encstr_BC850785638DA59537" )
                var_9 = "_encstr_BA840579D3F7F6";
            else
                var_9 = "_encstr_BC850785638DA59537";

            if ( isalive( var_6 ) && istrue( var_6 ishvt() ) )
            {
                if ( !isdefined( level.outlinedplayers[var_7] ) )
                {
                    level.outlinedplayers[var_7] = var_6;
                    var_6.outlineidfriend = scripts\mp\utility\outline::outlineenableforteam( var_6, var_8, "_encstr_9D01163FBBF04DFF68C9999290B50782086997BF0DD0579B", "_encstr_B9760D6356B356D8FAB96CC9A507A3" );
                    var_6.outlineidenemy = scripts\mp\utility\outline::outlineenableforteam( var_6, var_9, "_encstr_BD9614CA9305F31C389B070EB750274BADA841E379D5", "_encstr_B9760D6356B356D8FAB96CC9A507A3" );
                }

                continue;
            }

            if ( isdefined( level.outlinedplayers[var_7] ) )
            {
                scripts\mp\utility\outline::outlinedisable( var_6.outlineidfriend, var_6 );
                scripts\mp\utility\outline::outlinedisable( var_6.outlineidenemy, var_6 );
                var_6.outlineidfriend = undefined;
                var_6.outlineidenemy = undefined;
                level.outlinedplayers[var_7] = undefined;
            }
        }

        waitframe();
    }
}

addhvtheadicons()
{
    self.curorigin = self.origin;
    self.offset3d = ( 0, 0, 24 );
    self.objidnumfriend = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );
    var_0 = self.objidnumfriend;
    objective_setzoffset( var_0, 90 );
    objective_icon( var_0, "_encstr_81B31E220869493FF938E6DF4423DFCDA158BAFA20473A739015FC1CF048F313" );
    objective_setplayintro( var_0, 1 );
    objective_removeallfrommask( var_0 );

    foreach ( var_2 in scripts\mp\utility\teams::getteamdata( self.team, "_encstr_8875080E3685E52B93B9" ) )
    {
        if ( var_2 != self )
            objective_addclienttomask( var_0, var_2 );
    }

    objective_showtoplayersinmask( var_0 );
    objective_setbackground( var_0, 0 );
    objective_position( var_0, self geteye() + self.offset3d );
    objective_state( var_0, "_encstr_A65A0856F3802ACA0D6B" );
    objective_setownerteam( var_0, self.team );
    self.objidnumenemy = scripts\mp\objidpoolmanager::requestobjectiveid( 1 );
    var_0 = self.objidnumenemy;
    objective_setzoffset( var_0, 90 );
    objective_icon( var_0, "_encstr_A42915F8AB9C014B32B7CDA7B37A87E038890373D6D7C0" );
    objective_setplayintro( var_0, 1 );
    scripts\mp\objidpoolmanager::objective_teammask_single( var_0, scripts\mp\utility\game::getotherteam( self.team )[0] );
    objective_setownerteam( var_0, self.team );
    objective_setbackground( var_0, 0 );
    objective_position( var_0, self geteye() + self.offset3d );
    objective_state( var_0, "_encstr_A65A0856F3802ACA0D6B" );
    thread updatetargetlocation();
}

updatetargetlocation()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self notify( "_encstr_9E0E1356B991AA078C853ACA422BA29E893582DB6E" );
    self endon( "_encstr_9E0E1356B991AA078C853ACA422BA29E893582DB6E" );

    if ( !isdefined( level.objpingdelay ) )
        level.objpingdelay = 3.0;

    for (;;)
    {
        if ( !isdefined( self.objidnumfriend ) )
            return;

        if ( self.health > 0 )
        {
            var_0 = self geteye() + self.offset3d;
            scripts\mp\objidpoolmanager::update_objective_position( self.objidnumfriend, var_0 );
            scripts\mp\objidpoolmanager::update_objective_position( self.objidnumenemy, var_0 );
            objective_ping( self.objidnumfriend );
            objective_ping( self.objidnumenemy );
        }
        else
            returnheadicons();

        waitframe();
    }
}

revivetriggerspawned()
{

}
