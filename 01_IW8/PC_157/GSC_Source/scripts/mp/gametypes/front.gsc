// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "_encstr_9E700851BEE33DF1B547" ) == "_encstr_8A510E519897A1332E4A3898E243F5B9" )
        return;

    scripts\mp\globallogic::init();
    scripts\mp\globallogic::setupcallbacks();
    var_0[0] = scripts\mp\utility\game::getgametype();
    scripts\mp\gameobjects::main( var_0 );

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread scripts\mp\utility\game::reinitializematchrulesonmigration();
    }
    else
    {
        scripts\mp\utility\game::registerroundswitchdvar( scripts\mp\utility\game::getgametype(), 0, 0, 9 );
        scripts\mp\utility\game::registertimelimitdvar( scripts\mp\utility\game::getgametype(), 600 );
        scripts\mp\utility\game::registerscorelimitdvar( scripts\mp\utility\game::getgametype(), 100 );
        scripts\mp\utility\game::registerroundlimitdvar( scripts\mp\utility\game::getgametype(), 2 );
        scripts\mp\utility\game::registerwinlimitdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registernumlivesdvar( scripts\mp\utility\game::getgametype(), 0 );
        scripts\mp\utility\game::registerhalftimedvar( scripts\mp\utility\game::getgametype(), 0 );
    }

    updategametypedvars();
    level.teambased = 1;
    level.onstartgametype = ::onstartgametype;
    level.onplayerconnect = ::onplayerconnect;
    level.getspawnpoint = ::getspawnpoint;
    level.onnormaldeath = ::onnormaldeath;
    level.modeonspawnplayer = ::onspawnplayer;
    game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_ADE50ACC9CDE378E1B2DB9AC";

    if ( getdvarint( "_encstr_B8020A9E9AA69A6292517AA0" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_891904A1D8BE" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_93570B93F4A9629272A825B426" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_889708C9D0E7EBE819D9" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_B4050C8B3E9A11DD626FD1CBDB5A" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = "_encstr_B81804D2C101" + game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"];
    else if ( getdvarint( "_encstr_A61805573F9318" + scripts\mp\utility\game::getgametype() + "_encstr_9EB909B928022745805102" ) )
        game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] = game["_encstr_B8DA073D799798C7C7"]["_encstr_B1F9099AC15967EB30E16D"] + "_encstr_934305E6126268";

    game["_encstr_A9B10863D3ADDAF8974B"]["_encstr_B1EE0E6F6BE28E18A99D613EC48180C5"] = &"_encstr_8B180F530AF21929253545FA90313DA711";
    thread spawnzonefx();
}

initializematchrules()
{
    scripts\mp\utility\game::setcommonrulesfrommatchrulesdata();
    setdynamicdvar( "_encstr_951C1E700983B1512B5882EDA9E36533AA5F49F14B27785059AA43DF0B956F60", getmatchrulesdata( "_encstr_BD260A99E4BDB9D144B0D10B", "_encstr_9D58141A38831DA77587434DBA38BBE555C8B392B879" ) );
    setdynamicdvar( "_encstr_B9AF1C7BB64B7F671D880AA3211D5A1F01A8F4ECD315CFEAEB91C22A5063", getmatchrulesdata( "_encstr_BD260A99E4BDB9D144B0D10B", "_encstr_8BCA12AE2D80976BE55073C8D9469FC238EF3235" ) );
    setdynamicdvar( "_encstr_824018F7C338A1DC83A76D33410872FB1B5B13DD8BD66F38122A", getmatchrulesdata( "_encstr_BD260A99E4BDB9D144B0D10B", "_encstr_82F80EC5D950E173B971E9539BB7B3E7" ) );
    setdynamicdvar( "_encstr_8B88193B61366F8F88FF46448768D5CFD15AA082CB05870688ED45", getmatchrulesdata( "_encstr_BD260A99E4BDB9D144B0D10B", "_encstr_B4C50F6F759F738813217B1716FF8A53C5" ) );
    setdynamicdvar( "_encstr_97E812E6B127D733C9DE9B8E7DE04EDBB57B8C56", 0 );
}

onstartgametype()
{
    setclientnamemode( "_encstr_95900C2EDBD01F99D6B1DFEB878D" );

    if ( !isdefined( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] ) )
        game["_encstr_A6D60EE09BF413B9945185CB4797C583"] = 0;

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
    {
        var_0 = game["_encstr_941C0A6AF345075ED05BEAD3"];
        var_1 = game["_encstr_95A70AA81FEE295D3A2F56DE"];
        game["_encstr_941C0A6AF345075ED05BEAD3"] = var_1;
        game["_encstr_95A70AA81FEE295D3A2F56DE"] = var_0;
    }

    foreach ( var_3 in level.teamnamelist )
    {
        scripts\mp\utility\game::setobjectivetext( var_3, &"_encstr_980E1188721B9DBF2BD0F97969ADFD37B7D68D" );

        if ( level.splitscreen )
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"_encstr_980E1188721B9DBF2BD0F97969ADFD37B7D68D" );
        else
            scripts\mp\utility\game::setobjectivescoretext( var_3, &"_encstr_B12E1758E58AA76619539E957F9A7FB3A0DC61C12FF657EAB9" );

        scripts\mp\utility\game::setobjectivehinttext( var_3, &"_encstr_9D8C16D32194156851529515357919499EE4A8D7244A2745" );
    }

    level.iconkill3d = "_encstr_93FD168C3742D340DCCDDC961AC3637BE360632922784518";
    level.iconkill2d = "_encstr_93FD168C3742D340DCCDDC961AC3637BE360632922784518";
    initspawns();
    base_setupvfx();
    thread setupbases();
    thread setupbaseareabrushes();
    level.disablebuddyspawn = 1;
}

updategametypedvars()
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::updatecommongametypedvars();
    level.enemybasekillreveal = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_9D58141A38831DA77587434DBA38BBE555C8B392B879", 5, 0, 60 );
    level.friendlybasescore = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_8BCA12AE2D80976BE55073C8D9469FC238EF3235", 1, 0, 25 );
    level.midfieldscore = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_82F80EC5D950E173B971E9539BB7B3E7", 2, 0, 25 );
    level.enemybasescore = scripts\mp\utility\dvars::dvarfloatvalue( "_encstr_B4C50F6F759F738813217B1716FF8A53C5", 1, 0, 25 );
}

initspawns()
{
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    scripts\mp\spawnlogic::setactivespawnlogic( "_encstr_AA1608C17786F13312D3", "_encstr_939A0D8DC347E521C7B50503CDB5A3" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BC850785638DA59537", "_encstr_829D16F22B88B3B248E53417B7D83EAF48668A6A307B772A" );
    scripts\mp\spawnlogic::addspawnpoints( "_encstr_BA840579D3F7F6", "_encstr_AD3B14F1383781B58DBAC09143624B7B1BEF0FF3893F" );
    level.frontlinespawnsets = [];
    level.frontlinespawnsets["_encstr_BC850785638DA59537"] = "_encstr_BC850785638DA59537";
    level.frontlinespawnsets["_encstr_BA840579D3F7F6"] = "_encstr_BA840579D3F7F6";
    scripts\mp\spawnlogic::registerspawnset( "_encstr_BC850785638DA59537", "_encstr_829D16F22B88B3B248E53417B7D83EAF48668A6A307B772A" );
    scripts\mp\spawnlogic::registerspawnset( "_encstr_BA840579D3F7F6", "_encstr_AD3B14F1383781B58DBAC09143624B7B1BEF0FF3893F" );
    level.mapcenter = scripts\mp\spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
}

onspawnplayer()
{
    if ( isplayer( self ) )
    {
        self.inenemybase = 0;
        self.infriendlybase = 0;
        self.outlinetime = 0;

        if ( isdefined( self.outlineid ) )
            scripts\mp\utility\outline::outlinedisable( self.outlineid, self );

        self.useoutline = 0;
        self.outlineid = undefined;
        thread friendlybasewatcher();
        thread enemybasewatcher();

        foreach ( var_1 in level.zones )
            var_1 showbaseeffecttoplayer( self );
    }
}

getspawnpoint()
{
    var_0 = self.pers["_encstr_89EF05D46BA8FD"];

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
        var_0 = scripts\mp\utility\game::getotherteam( var_0 )[0];

    var_1 = scripts\mp\spawnlogic::getspawnpoint( self, var_0, level.frontlinespawnsets[var_0] );
    return var_1;
}

onnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::oncommonnormaldeath( var_0, var_1, var_2, var_3, var_4, var_5 );
    var_6 = 0;

    if ( var_0.infriendlybase || var_1.inenemybase )
    {
        var_1 thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_95DB10599B596B5EAF982C9B95AFB5A5D8C6", var_4 );
        var_6 = level.enemybasescore;
    }
    else if ( var_1.infriendlybase || var_0.inenemybase )
    {
        var_1 thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_B339130B93B8FD7A6991F0618E0BE38506A0AFAB48", var_4 );
        var_6 = level.friendlybasescore;
    }
    else
    {
        var_1 thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_B7D90E15FB993231F163FB0F20A8FC5A", var_4 );
        var_6 = level.midfieldscore;
    }

    var_7 = game["_encstr_B4040B6BBF898046C247E5C3DF"][var_1.pers["_encstr_89EF05D46BA8FD"]] + var_6;
    var_8 = var_7 >= level.roundscorelimit;

    if ( var_8 && level.roundscorelimit != 0 )
        var_6 = level.roundscorelimit - game["_encstr_B4040B6BBF898046C247E5C3DF"][var_1.pers["_encstr_89EF05D46BA8FD"]];

    if ( var_6 > 0 )
    {
        scripts\mp\gamescore::giveteamscoreforobjective( var_1.pers["_encstr_89EF05D46BA8FD"], var_6, 0 );
        var_1 thread scripts\mp\rank::scoreeventpopup( "_encstr_B6B012E859C2D6B9B1DE27ACFADC7B472D33BC7D" + var_6 );
    }
}

enemybasekillreveal()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A3750609A5E61883" );
    self notify( "_encstr_9D58141838831DA77587434DBA38BBE555C8B392B879" );
    self endon( "_encstr_9D58141838831DA77587434DBA38BBE555C8B392B879" );

    if ( isdefined( self.basekilloutlineid ) )
        scripts\mp\utility\outline::outlinedisable( self.basekilloutlineid, self );

    self.basekilloutlineid = scripts\mp\utility\outline::outlineenableforteam( self, scripts\mp\utility\game::getotherteam( self.team )[0], "_encstr_8CA117D5B5F9D271D008578B40C9355B8143514D9E7B2A8759", "_encstr_B40D05E05627D6" );

    if ( !isbot( self ) )
        scripts\mp\utility\outline::_hudoutlineviewmodelenable( "_encstr_8CA117D5B5F9D271D008578B40C9355B8143514D9E7B2A8759", 0 );

    self sethudtutorialmessage( &"_encstr_A43A129AA09719253D3951F549A2652A14981588" );
    wait( level.enemybasekillreveal );
    scripts\mp\utility\outline::outlinedisable( self.basekilloutlineid, self );
    scripts\mp\utility\outline::_hudoutlineviewmodeldisable();
    self clearhudtutorialmessage( 0 );
}

setupbases()
{
    level.zones = [];

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
    {
        level.allieszone = getentarray( "_encstr_A6AE168C05FF3D0423583A2FF19BE2FE18E9BF10F40C9D0F", "_encstr_B8CE0BE43FC317DF690862BA48" );

        foreach ( var_1 in level.allieszone )
        {
            var_1.team = "_encstr_BA840579D3F7F6";
            var_1 thread friendlybasewatcher();
            var_1 thread enemybasewatcher();
            var_1 thread enemybasekillstreakwatcher();
        }

        thread setupvisuals( level.allieszone[0] );
        level.zones[level.zones.size] = level.allieszone[0];
        level.axiszone = getentarray( "_encstr_A32F14CC4E7B733AC6B4DCCABED3DEB995FAC23CB437", "_encstr_B8CE0BE43FC317DF690862BA48" );

        if ( level.mapname == "_encstr_B2470801C8C7F02B5D7A" )
        {
            var_3 = spawn( "_encstr_9E6B0FE8274B9DD92BC9D7278591B4D5E6", ( -1410, -2080, 240 ), 0, 1000, 600 );
            level.axiszone[level.axiszone.size] = var_3;
        }

        foreach ( var_1 in level.axiszone )
        {
            var_1.team = "_encstr_BC850785638DA59537";
            var_1 thread friendlybasewatcher();
            var_1 thread enemybasewatcher();
            var_1 thread enemybasekillstreakwatcher();
        }

        thread setupvisuals( level.axiszone[0] );
        level.zones[level.zones.size] = level.axiszone[0];
    }
    else
    {
        level.allieszone = getentarray( "_encstr_A6AE168C05FF3D0423583A2FF19BE2FE18E9BF10F40C9D0F", "_encstr_B8CE0BE43FC317DF690862BA48" );

        foreach ( var_1 in level.allieszone )
        {
            var_1.team = "_encstr_BC850785638DA59537";
            var_1 thread friendlybasewatcher();
            var_1 thread enemybasewatcher();
            var_1 thread enemybasekillstreakwatcher();
        }

        thread setupvisuals( level.allieszone[0] );
        level.zones[level.zones.size] = level.allieszone[0];
        level.axiszone = getentarray( "_encstr_A32F14CC4E7B733AC6B4DCCABED3DEB995FAC23CB437", "_encstr_B8CE0BE43FC317DF690862BA48" );

        if ( level.mapname == "_encstr_B2470801C8C7F02B5D7A" )
        {
            var_3 = spawn( "_encstr_9E6B0FE8274B9DD92BC9D7278591B4D5E6", ( -1410, -2080, 240 ), 0, 1000, 600 );
            level.axiszone[level.axiszone.size] = var_3;
        }

        foreach ( var_1 in level.axiszone )
        {
            var_1.team = "_encstr_BA840579D3F7F6";
            var_1 thread friendlybasewatcher();
            var_1 thread enemybasewatcher();
            var_1 thread enemybasekillstreakwatcher();
        }

        thread setupvisuals( level.axiszone[0] );
        level.zones[level.zones.size] = level.axiszone[0];
    }
}

setupvisuals( var_0 )
{
    var_1 = [];
    var_1[0] = var_0;

    if ( isdefined( var_0.target ) )
    {
        var_2 = getentarray( var_0.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

        for ( var_3 = 0; var_3 < var_2.size; var_3++ )
            var_1[var_1.size] = var_2[var_3];
    }

    var_1 = mappatchborders( var_1, var_0.target );
    var_0.visuals = var_1;
}

mappatchborders( var_0, var_1 )
{
    if ( level.mapname == "_encstr_934D0BCDAF279BC1EBF00F6F50" && var_1 == "_encstr_947E0F8532D57DDBA193C0066FE1A95047" )
    {
        var_2 = spawn( "_encstr_A3050EDF6FF5DC081CC1AFA37097B80B", ( -1088, -1504, 136 ) );
        var_2.angles = ( 0, 180, 0 );
        var_2.targetname = var_1;
        var_0[var_0.size] = var_2;
        var_3 = spawn( "_encstr_A3050EDF6FF5DC081CC1AFA37097B80B", ( -1088, -1440, 136 ) );
        var_3.angles = ( 0, 180, 0 );
        var_2.targetname = var_1;
        var_0[var_0.size] = var_3;
    }

    return var_0;
}

friendlybasewatcher()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_0 );

        if ( !isplayer( var_0 ) )
            continue;

        if ( var_0.team != self.team )
            continue;

        if ( var_0.infriendlybase )
            continue;

        var_0 thread friendlybasetriggerwatcher( self );
    }
}

friendlybasetriggerwatcher( var_0 )
{
    self notify( "_encstr_A4F5178F7D12B8857AF8EF9B3A771A0FD36B4747BB2F59A563" );
    self endon( "_encstr_A4F5178F7D12B8857AF8EF9B3A771A0FD36B4747BB2F59A563" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( game["_encstr_A6D60EE09BF413B9945185CB4797C583"] )
    {
        if ( self.team == "_encstr_BC850785638DA59537" )
            var_1 = level.axiszone;
        else
            var_1 = level.allieszone;
    }
    else if ( self.team == "_encstr_BC850785638DA59537" )
        var_1 = level.allieszone;
    else
        var_1 = level.axiszone;

    for (;;)
    {
        self.infriendlybase = 0;

        foreach ( var_0 in var_1 )
        {
            if ( self istouching( var_0 ) )
            {
                self.infriendlybase = 1;
                break;
            }
        }

        if ( !self.infriendlybase || scripts\mp\arbitrary_up::isinarbitraryup() )
        {
            if ( istrue( self.spawnprotection ) )
                _encstr_88EA20CDD8932D38E8B9CB5BC1BCD985D6AC47E58395CD5ED8F6B6B5DBDCE2B3378D::removespawnprotection();

            break;
        }

        waitframe();
    }
}

enemybasewatcher()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        self waittill( "_encstr_8B5C081B58E0B7A213E6", var_0 );

        if ( isdefined( var_0.team ) && var_0.team == self.team )
            continue;

        if ( isalive( var_0 ) && isdefined( var_0.sessionstate ) && var_0.sessionstate != "_encstr_A68C0A5803A5D151A2B310A6" || playercontrolledstreak( var_0 ) )
        {
            var_0.inenemybase = 1;
            var_0 thread enemybasetriggerwatcher( self );
        }
    }
}

enemybasetriggerwatcher( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( istrue( self.useoutline ) )
        return;

    for (;;)
    {
        if ( isdefined( self ) && self istouching( var_0 ) )
        {
            if ( !istrue( self.useoutline ) )
                thread enableenemybaseoutline();
        }
        else
        {
            self.useoutline = 0;
            self.inenemybase = 0;
            thread disableenemybaseoutline();
            break;
        }

        waitframe();
    }
}

enableenemybaseoutline()
{
    self.useoutline = 1;
    self.outlinetime = gettime();
    self.outlineid = scripts\mp\utility\outline::outlineenableforteam( self, scripts\mp\utility\game::getotherteam( self.team )[0], "_encstr_8CA117D5B5F9D271D008578B40C9355B8143514D9E7B2A8759", "_encstr_B40D05E05627D6" );

    if ( !isbot( self ) )
    {
        if ( isplayer( self ) )
            scripts\mp\utility\outline::_hudoutlineviewmodelenable( "_encstr_8CA117D5B5F9D271D008578B40C9355B8143514D9E7B2A8759", 0 );
    }
}

disableenemybaseoutline()
{
    self.useoutline = 0;
    scripts\mp\utility\outline::outlinedisable( self.outlineid, self );
    self.outlineid = undefined;

    if ( !isbot( self ) && isplayer( self ) )
        scripts\mp\utility\outline::_hudoutlineviewmodeldisable();
}

enemybasekillstreakwatcher()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        if ( level.turrets.size > 0 )
        {
            foreach ( var_1 in level.turrets )
                handleoutlinesforstreaks( var_1 );
        }

        wait 0.1;
    }
}

handleoutlinesforstreaks( var_0 )
{
    if ( var_0.owner.team == self.team )
        return;

    if ( var_0 istouching( self ) )
    {
        if ( !isdefined( var_0.outlineid ) )
            var_0.outlineid = scripts\mp\utility\outline::outlineenableforteam( var_0, self.team, "_encstr_8CA117D5B5F9D271D008578B40C9355B8143514D9E7B2A8759", "_encstr_9B4407C817DF0947DB" );
    }
    else if ( isdefined( var_0.outlineid ) )
    {
        scripts\mp\utility\outline::outlinedisable( var_0.outlineid, var_0 );
        var_0.outlineid = undefined;
    }
    else
    {

    }
}

playercontrolledstreak( var_0 )
{
    if ( isdefined( var_0.streakname ) )
    {
        switch ( var_0.streakname )
        {
            default:
                return 0;
        }
    }

    return 0;
}

showbaseeffecttoplayer( var_0 )
{
    var_1 = self.team;
    var_2 = undefined;
    var_3 = var_0.team;

    if ( !isdefined( var_3 ) )
        var_3 = "_encstr_BC850785638DA59537";

    var_4 = var_0 ismlgspectator();

    if ( var_4 )
        var_3 = var_0 getmlgspectatorteam();
    else if ( var_3 == "_encstr_A68C0A5803A5D151A2B310A6" )
        var_3 = "_encstr_BC850785638DA59537";

    var_5 = level.basefxid["_encstr_B9FC095F8BCCFF02D92B43"];
    var_6 = level.basefxid["_encstr_80BF06CA78A2226B"];

    if ( var_3 == var_1 )
    {
        showfxarray( self._baseeffectfriendly, var_0 );
        hidefxarray( self._baseeffectenemy, var_0 );
    }
    else
    {
        showfxarray( self._baseeffectenemy, var_0 );
        hidefxarray( self._baseeffectfriendly, var_0 );
    }
}

showfxarray( var_0, var_1 )
{
    for ( var_2 = 0; var_2 < var_0.size; var_2++ )
        var_0[var_2] showtoplayer( var_1 );
}

hidefxarray( var_0, var_1 )
{
    for ( var_2 = 0; var_2 < var_0.size; var_2++ )
        var_0[var_2] hidefromplayer( var_1 );
}

spawnfxarray()
{
    self._baseeffectfriendly = [];
    self._baseeffectenemy = [];

    for ( var_0 = 1; var_0 < self.visuals.size; var_0++ )
    {
        var_1 = anglestoforward( self.visuals[var_0].angles );
        self._baseeffectfriendly[self._baseeffectfriendly.size] = spawnfx( level.basefxid["_encstr_B9FC095F8BCCFF02D92B43"], self.visuals[var_0].origin, var_1 );
        self._baseeffectfriendly[self._baseeffectfriendly.size - 1] setfxkilldefondelete();
        triggerfx( self._baseeffectfriendly[self._baseeffectfriendly.size - 1] );
    }

    for ( var_0 = 1; var_0 < self.visuals.size; var_0++ )
    {
        var_1 = anglestoforward( self.visuals[var_0].angles );
        self._baseeffectenemy[self._baseeffectenemy.size] = spawnfx( level.basefxid["_encstr_80BF06CA78A2226B"], self.visuals[var_0].origin, var_1 );
        self._baseeffectenemy[self._baseeffectenemy.size - 1] setfxkilldefondelete();
        triggerfx( self._baseeffectenemy[self._baseeffectenemy.size - 1] );
    }
}

base_setupvfx()
{
    level.basefxid["_encstr_B9FC095F8BCCFF02D92B43"] = loadfx( "_encstr_A1362B3E744AFEE6E7A07AD670F1CD77EDE6B5EF94516BA1ADD8C2FAA057560FDB453D4AB89937F655125B7228" );
    level.basefxid["_encstr_80BF06CA78A2226B"] = loadfx( "_encstr_A9C92BBD365032F6FF1B99C8F2DB98182D9A1397CE3F50D0F373D0E84B8FE6C002E4ABA57F2548800F8E8BD173" );
}

spawnzonefx()
{
    waitframe();

    foreach ( var_1 in level.zones )
        var_1 spawnfxarray();
}

onplayerconnect( var_0 )
{
    foreach ( var_2 in level.zones )
        var_2 showbaseeffecttoplayer( var_0 );
}

setupbaseareabrushes()
{
    var_0 = getbasearray( "_encstr_BA692101EB77F06069C26F75C54138CBBF3379C8C1A73998BCB55F1FEBB5200D8FCB53" );
    var_1 = getbasearray( "_encstr_B3A31F6627F6B91DF5A7B7E656F5D996B9AB1663EB163CA56ED71BDECD1D2BDC47" );
    var_2 = getbasearray( "_encstr_AB7F2033937B9BE8EBF4DBB9ACBECED2CDD52C1BD72C1B1BA55637FA99C95A597391" );
    var_3 = getbasearray( "_encstr_987B1E55EA4DE0B5F72390B83A1F6C4BE245E3C95FB618737F694923C2AF2820" );
    var_4 = getbasearray( "_encstr_885C1F86E63063CB6F18325A98170337EBCD0934E81993152BC8FB41B05D3FFF02" );
    var_5 = getbasearray( "_encstr_8A461D6FBB889EAB4815676B0310D3C19B232675B64040B2B64777737B21EB" );
    hidebasebrushes( var_0 );
    hidebasebrushes( var_1 );
    hidebasebrushes( var_2 );
    hidebasebrushes( var_3 );
    hidebasebrushes( var_4 );
    hidebasebrushes( var_5 );
}

hidebasebrushes( var_0 )
{
    if ( isdefined( var_0 ) )
    {
        for ( var_1 = 0; var_1 < var_0.size; var_1++ )
            var_0[var_1] hide();
    }
}

getbasearray( var_0 )
{
    var_1 = getentarray( var_0, "_encstr_B8CE0BE43FC317DF690862BA48" );

    if ( !isdefined( var_1 ) || var_1.size == 0 )
        return undefined;

    return var_1;
}
