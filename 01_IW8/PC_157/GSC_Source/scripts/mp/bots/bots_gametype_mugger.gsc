// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    level.bot_tag_obj_radius = 200;
    setup_callbacks();
}

setup_callbacks()
{
    level.bot_funcs["_encstr_9B610FCEC26B2B3AF20756BE3A435ADC5B"] = ::bot_mugger_think;
    level.bot_funcs["_encstr_ADA818D289113FB37859A59709A0BE6348A35BD990F8F32CB853"] = ::bot_mugger_loadout_modify;
}

bot_mugger_think()
{
    self notify( "_encstr_B81111C06FA426139367041D3A69798811D35B" );
    self endon( "_encstr_B81111C06FA426139367041D3A69798811D35B" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.last_killtag_tactical_goal_pos = ( 0, 0, 0 );
    self.tag_getting = undefined;
    self.heading_for_tag_pile = 0;
    self.hiding_until_bank = 0;
    self.default_meleechargedist = self botgetdifficultysetting( "_encstr_870A10ADFA1B15884EF0536DE72F49EB9F03" );
    childthread tag_watcher();

    if ( self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" ) > 0 )
        childthread tag_pile_watcher();

    if ( self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" ) > 0 )
        childthread enemy_watcher();

    for (;;)
    {
        if ( self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" ) > 1 )
        {
            if ( isdefined( self.tags_carried ) && level.mugger_bank_limit <= self.tags_carried )
            {
                if ( !self.hiding_until_bank )
                {
                    var_0 = getnodesinradius( self.origin, 1000, 0, 500, "_encstr_BA210ACAC01DA7E178932C35" );
                    var_1 = self botnodepick( var_0, 3, "_encstr_BA210ACAC01DA7E178932C35" );

                    if ( isdefined( var_1 ) )
                    {
                        self botsetscriptgoalnode( var_1, "_encstr_94CC09C69C5AE82D368536" );
                        self.hiding_until_bank = 1;
                    }
                }
            }
            else if ( self.hiding_until_bank )
            {
                self botclearscriptgoal();
                self.hiding_until_bank = 0;
            }
        }

        if ( !self.hiding_until_bank )
        {
            if ( !isdefined( self.tag_getting ) && !self.heading_for_tag_pile )
                self [[ self.personality_update_function ]]();
        }

        wait 0.05;
    }
}

enemy_watcher()
{
    for (;;)
    {
        if ( self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" ) < 2 )
            wait 0.5;
        else
            wait 0.2;

        if ( isdefined( self.enemy ) && isplayer( self.enemy ) && isdefined( self.enemy.tags_carried ) && self.enemy.tags_carried >= 3 && self botcanseeentity( self.enemy ) && distance( self.origin, self.enemy.origin ) <= 500 )
        {
            self botsetdifficultysetting( "_encstr_870A10ADFA1B15884EF0536DE72F49EB9F03", 500 );
            self botsetflag( "_encstr_B9230D1CE4ACCC56E4D75BCAD82BB2", 1 );
            self botsetflag( "_encstr_813C12D958B2509C5FAAD820626F40888FA47363", level.mugger_throwing_knife_mug_frac > 0 );
            continue;
        }

        self botsetdifficultysetting( "_encstr_870A10ADFA1B15884EF0536DE72F49EB9F03", self.default_meleechargedist );
        self botsetflag( "_encstr_B9230D1CE4ACCC56E4D75BCAD82BB2", 0 );
        self botsetflag( "_encstr_813C12D958B2509C5FAAD820626F40888FA47363", 0 );
    }
}

tag_pile_watcher()
{
    for (;;)
    {
        level waittill( "_encstr_934E10A16D87F1EBBAD990303299B948C3E5", var_0 );

        if ( self.health <= 0 )
            continue;

        if ( self.hiding_until_bank )
            continue;

        if ( !isdefined( self.last_tag_pile_time ) || gettime() - self.last_tag_pile_time > 7500 )
        {
            self.last_tag_pile_time = undefined;
            self.last_tag_pile_location = undefined;
            self.heading_for_tag_pile = 0;
        }

        if ( !isdefined( self.last_tag_pile_location ) || distancesquared( self.origin, self.last_tag_pile_location ) > distancesquared( self.origin, var_0 ) )
        {
            self.last_tag_pile_time = gettime();
            self.last_tag_pile_location = var_0;
        }
    }
}

bot_find_closest_tag()
{
    var_0 = self getnearestnode();
    var_1 = undefined;

    if ( isdefined( var_0 ) )
    {
        var_2 = 1000000;
        var_3 = scripts\engine\utility::array_combine( level.dogtags, level.mugger_extra_tags );

        foreach ( var_5 in var_3 )
        {
            if ( var_5 scripts\mp\gameobjects::caninteractwith( self.team ) )
            {
                var_6 = distancesquared( self.origin, var_5.curorigin );

                if ( !isdefined( var_1 ) || var_6 < var_2 )
                {
                    if ( self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" ) > 0 && var_6 < 122500 || var_6 < 1000000 && _encstr_BEDD27B91B27B4E03A3779DA0E97C4B78EE69726EDD1E6D7D9B06BCA1DBCE095BEC6B7E699E2D9B98D::bot_is_tag_visible( var_5, var_0, self botgetfovdot() ) )
                    {
                        var_2 = var_6;
                        var_1 = var_5;
                    }
                }
            }
        }
    }

    return var_1;
}

bot_find_visible_tags_mugger( var_0, var_1 )
{
    var_2 = [];

    if ( isdefined( var_0 ) )
    {
        var_3 = scripts\engine\utility::array_combine( level.dogtags, level.mugger_extra_tags );

        foreach ( var_5 in var_3 )
        {
            if ( var_5 scripts\mp\gameobjects::caninteractwith( self.team ) )
            {
                if ( isplayer( self ) || distancesquared( self.origin, var_5.curorigin ) < 1000000 )
                {
                    if ( _encstr_BEDD27B91B27B4E03A3779DA0E97C4B78EE69726EDD1E6D7D9B06BCA1DBCE095BEC6B7E699E2D9B98D::bot_is_tag_visible( var_5, var_0, var_1 ) )
                    {
                        var_6 = spawnstruct();
                        var_6.origin = var_5.curorigin;
                        var_6.tag = var_5;
                        var_2[var_2.size] = var_6;
                    }
                }
            }
        }
    }

    return var_2;
}

tag_watcher()
{
    wait( randomfloatrange( 0, 0.5 ) );

    for (;;)
    {
        if ( self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" ) == 0 )
            wait 3.0;
        else if ( self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" ) == 1 )
            wait 1.5;
        else
            wait 0.5;

        if ( self.health <= 0 )
            continue;

        if ( self.hiding_until_bank )
            continue;

        if ( isdefined( self.enemy ) && isplayer( self.enemy ) && self botcanseeentity( self.enemy ) )
            continue;

        var_0 = bot_find_closest_tag();

        if ( isdefined( var_0 ) )
        {
            mugger_pick_up_tag( var_0 );
            continue;
        }

        if ( !self.heading_for_tag_pile )
        {
            if ( isdefined( self.last_tag_pile_location ) && isdefined( self.last_tag_pile_time ) && gettime() - self.last_tag_pile_time <= 7500 )
                thread mugger_go_to_tag_pile( self.last_tag_pile_location );
        }
    }
}

mugger_go_to_tag_pile( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.heading_for_tag_pile = 1;
    var_1 = spawnstruct();
    var_1.script_goal_type = "_encstr_BC2B0A075628F786B1182B12";
    var_1.objective_radius = level.bot_tag_obj_radius;
    scripts\mp\bots\bots_strategy::bot_new_tactical_goal( "_encstr_BC050E17F030AC31217F0F09DF233A6D", var_0, 25, var_1 );
    var_2 = scripts\engine\utility::_id_143AD( "_encstr_A3750609A5E61883", "_encstr_95390CA38576FACDC1BD47D1B219" );
    self botclearscriptgoal();
    self.heading_for_tag_pile = 0;
    scripts\mp\bots\bots_strategy::bot_abort_tactical_goal( "_encstr_BC050E17F030AC31217F0F09DF233A6D" );
}

mugger_pick_up_tag( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self.tag_getting = var_0;
    self notify( "_encstr_95390CA38576FACDC1BD47D1B219" );
    childthread notify_when_tag_picked_up( var_0, "_encstr_B6AB0ED159EFC9178F1270B94A7F4D68" );
    scripts\mp\bots\bots_strategy::bot_abort_tactical_goal( "_encstr_94D509B52D36B1EB3A2C9D" );
    var_1 = var_0.curorigin;

    if ( scripts\mp\bots\bots_util::bot_vectors_are_equal( self.last_killtag_tactical_goal_pos, var_0.curorigin ) )
    {
        var_2 = var_0.nearest_node;

        if ( isdefined( var_2 ) )
        {
            var_3 = var_2.origin - var_1;
            var_1 = var_1 + vectornormalize( var_3 ) * length( var_3 ) * 0.5;
        }
    }

    self.last_killtag_tactical_goal_pos = var_0.curorigin;
    var_4 = spawnstruct();
    var_4.script_goal_type = "_encstr_BC2B0A075628F786B1182B12";
    var_4.objective_radius = level.bot_tag_obj_radius;
    scripts\mp\bots\bots_strategy::bot_new_tactical_goal( "_encstr_94D509B52D36B1EB3A2C9D", var_1, 25, var_4 );
    thread notify_when_tag_aborted( "_encstr_B7C10C1BC0218FC21D687AF345C9" );
    var_5 = scripts\engine\utility::_id_143AD( "_encstr_A3750609A5E61883", "_encstr_B6AB0ED159EFC9178F1270B94A7F4D68" );
    self notify( "_encstr_B8E60FE81676FABB16D18D86AFCDA3BD38" );
    self.tag_getting = undefined;
    self botclearscriptgoal();
    scripts\mp\bots\bots_strategy::bot_abort_tactical_goal( "_encstr_94D509B52D36B1EB3A2C9D" );
}

notify_when_tag_aborted( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_B8E60FE81676FABB16D18D86AFCDA3BD38" );

    while ( scripts\mp\bots\bots_strategy::bot_has_tactical_goal( "_encstr_94D509B52D36B1EB3A2C9D" ) )
        wait 0.05;

    self notify( var_0 );
}

notify_when_tag_picked_up( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_B8E60FE81676FABB16D18D86AFCDA3BD38" );

    while ( var_0 scripts\mp\gameobjects::caninteractwith( self.team ) )
        wait 0.05;

    self notify( var_1 );
}

bot_mugger_loadout_modify( var_0 )
{
    var_1 = 0;
    var_2 = self botgetdifficulty();

    if ( var_2 == "_encstr_809F08AA0ABB23B33B63" )
        var_1 = 0.1;
    else if ( var_2 == "_encstr_B230080577925D88916A" )
        var_1 = 0.25;
    else if ( var_2 == "_encstr_9BD4090B6B9EE2C5E83997" )
        var_1 = 0.6;
    else if ( var_2 == "_encstr_98AF0873B92D8F8228F5" )
        var_1 = 0.9;

    var_3 = var_0["_encstr_82BC113DBF214C223588A5A7604A835348E395"] == "_encstr_89F511713BBB2818C13559D05DB9E85501B7F1";

    if ( !var_3 )
    {
        if ( var_1 >= randomfloat( 1 ) )
        {
            var_0["_encstr_82BC113DBF214C223588A5A7604A835348E395"] = "_encstr_89F511713BBB2818C13559D05DB9E85501B7F1";
            var_3 = 1;
        }
    }

    if ( var_1 >= randomfloat( 1 ) )
    {
        if ( var_0["_encstr_9DC30F4BDF0AB9AF800C8C5E8D086A4DB2"] != "_encstr_B94516A690081B23D68FC7E78DE84A4208D85EEF4929ADAB" )
            var_0["_encstr_9DC30F4BDF0AB9AF800C8C5E8D086A4DB2"] = "_encstr_B94516A690081B23D68FC7E78DE84A4208D85EEF4929ADAB";
    }

    if ( var_1 >= randomfloat( 1 ) )
    {
        if ( var_0["_encstr_B44319C6DB5832DEAE3A289C965B2CC95E141DA32C36A1D65673A3"] != "_encstr_94C2099887BA24607BE134" && var_0["_encstr_A9651AE2C897BBF598D1103A83303EBBC3A5DBEB917E43AD20FD4C62"] != "_encstr_94C2099887BA24607BE134" )
        {
            var_4 = scripts\mp\bots\bots_loadout::bot_validate_weapon( var_0["_encstr_87C30FC410893345733089A330AB3E9362"], var_0["_encstr_B44319C6DB5832DEAE3A289C965B2CC95E141DA32C36A1D65673A3"], "_encstr_94C2099887BA24607BE134" );

            if ( var_4 )
                var_0["_encstr_A9651AE2C897BBF598D1103A83303EBBC3A5DBEB917E43AD20FD4C62"] = "_encstr_94C2099887BA24607BE134";
            else
            {
                var_4 = scripts\mp\bots\bots_loadout::bot_validate_weapon( var_0["_encstr_87C30FC410893345733089A330AB3E9362"], "_encstr_94C2099887BA24607BE134", var_0["_encstr_A9651AE2C897BBF598D1103A83303EBBC3A5DBEB917E43AD20FD4C62"] );

                if ( var_4 )
                    var_0["_encstr_B44319C6DB5832DEAE3A289C965B2CC95E141DA32C36A1D65673A3"] = "_encstr_94C2099887BA24607BE134";
            }
        }
    }

    if ( var_1 >= randomfloat( 1 ) )
    {
        if ( var_0["_encstr_9D6F1B6C48D16B2D1B48D18AC817252389AEF1395DDBC7F6C968BA3218"] != "_encstr_94C2099887BA24607BE134" && var_0["_encstr_BDDB1C6590701C82D5812FCF97F0DA54285B58A66B70A19AA35BFFEBD106"] != "_encstr_94C2099887BA24607BE134" )
        {
            var_4 = scripts\mp\bots\bots_loadout::bot_validate_weapon( var_0["_encstr_A14E11D520C0AC320551FF3F67206AE4782B08"], var_0["_encstr_9D6F1B6C48D16B2D1B48D18AC817252389AEF1395DDBC7F6C968BA3218"], "_encstr_94C2099887BA24607BE134" );

            if ( var_4 )
                var_0["_encstr_BDDB1C6590701C82D5812FCF97F0DA54285B58A66B70A19AA35BFFEBD106"] = "_encstr_94C2099887BA24607BE134";
            else
            {
                var_4 = scripts\mp\bots\bots_loadout::bot_validate_weapon( var_0["_encstr_A14E11D520C0AC320551FF3F67206AE4782B08"], "_encstr_94C2099887BA24607BE134", var_0["_encstr_BDDB1C6590701C82D5812FCF97F0DA54285B58A66B70A19AA35BFFEBD106"] );

                if ( var_4 )
                    var_0["_encstr_9D6F1B6C48D16B2D1B48D18AC817252389AEF1395DDBC7F6C968BA3218"] = "_encstr_94C2099887BA24607BE134";
            }
        }
    }

    var_5 = [];
    var_6 = [];
    var_7 = [];
    var_8 = [];

    if ( var_3 )
        var_8[var_8.size] = "_encstr_81D117CDC159D84B58B1D1F2AFAC1E3A39B0F5465616C8C6BC";

    var_8[var_8.size] = "_encstr_94C9162F219AE69F03F8E0EA38AA91906BEB586BB0AF930B";
    var_8[var_8.size] = "_encstr_821213B263400BF2EF8183AFFF813A52188BEC3D18";
    var_8[var_8.size] = "_encstr_9F891DC3FB723B306010230B10A6F047D1239BE654E3A0BE9DF798061FE263";
    var_8[var_8.size] = "_encstr_AAC01A87A9F5722930B83378F6887CABD85F1B57572BBB0C6880EE47";

    for ( var_9 = 1; var_9 < 9; var_9++ )
    {
        if ( isdefined( var_0["_encstr_A30E0C36BDB019EDBA8E0A569CD6" + var_9] ) )
        {
            if ( var_0["_encstr_A30E0C36BDB019EDBA8E0A569CD6" + var_9] != "_encstr_AABA05236DC831" )
            {
                var_5[var_5.size] = var_0["_encstr_A30E0C36BDB019EDBA8E0A569CD6" + var_9];
                var_6[var_6.size] = var_9;
                continue;
            }

            var_7[var_7.size] = var_9;
        }
    }

    foreach ( var_11 in var_8 )
    {
        if ( var_1 >= randomfloat( 1 ) )
        {
            if ( !scripts\engine\utility::array_contains( var_5, var_11 ) )
            {
                var_12 = -1;

                if ( var_7.size )
                {
                    var_12 = var_7[0];
                    var_7 = scripts\engine\utility::array_remove( var_7, var_12 );
                }
                else if ( var_6.size )
                {
                    var_12 = scripts\engine\utility::random( var_6 );
                    var_6 = scripts\engine\utility::array_remove( var_6, var_12 );
                }

                if ( var_12 != -1 )
                    var_0["_encstr_A30E0C36BDB019EDBA8E0A569CD6" + var_12] = var_11;
            }
        }
    }

    return var_0;
}
