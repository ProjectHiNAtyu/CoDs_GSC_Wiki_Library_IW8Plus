// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    setup_callbacks();
    setup_bot_sotf();
}

setup_callbacks()
{
    level.bot_funcs["_encstr_974515E14BD75FE0073CEFA7256EA8A8ABF17BE8427B1A"] = ::sotf_bot_think_seek_dropped_weapons;
    level.bot_funcs["_encstr_BA6C16E9EBD21FA8552FD6AB1739E0D89AF75F6B03FA6D90"] = ::sotf_should_stop_seeking_weapon;
    level.bot_funcs["_encstr_A1C9159F4537AB69F7E3B78BA9B07DC97B389FA0806FC3"] = ::sotf_crate_low_ammo_check;
    level.bot_funcs["_encstr_B8A713C627C24759D7DC0DDBEAB123D7C6D82C5AD6"] = ::sotf_crate_should_claim;
    level.bot_funcs["_encstr_AD600F6C4EC2A3597DBBB0A53AAF5DB9B2"] = ::sotf_crate_wait_use;
    level.bot_funcs["_encstr_BD430F6E60DE54058F537D611BF15BBF0A"] = ::sotf_crate_in_range;
    level.bot_funcs["_encstr_94EB0E1B270B3AB2BED80BB97DBA3756"] = ::sotf_crate_can_use;
}

setup_bot_sotf()
{
    level.bots_gametype_handles_class_choice = 1;
}

sotf_should_stop_seeking_weapon( var_0 )
{
    if ( scripts\mp\bots\bots_util::bot_get_total_gun_ammo() > 0 )
    {
        var_1 = scripts\mp\utility\weapon::getweapongroup( self getcurrentweapon() );

        if ( isdefined( var_0.object ) )
        {
            var_2 = var_0.object.classname;

            if ( scripts\engine\utility::string_starts_with( var_2, "_encstr_B80108EE2BB0837B737D" ) )
                var_2 = getsubstr( var_2, 7 );

            var_3 = scripts\mp\utility\weapon::getweapongroup( var_2 );

            if ( !bot_weapon_is_better_class( var_1, var_3 ) )
                return 1;
        }
    }

    if ( !isdefined( var_0.object ) )
        return 1;

    return 0;
}

sotf_bot_think_seek_dropped_weapons()
{
    self notify( "_encstr_BEF81F1DB7CB29F56B5270D8596F25A0A42FA9B52F3298B563292B0182BBE830FA" );
    self endon( "_encstr_BEF81F1DB7CB29F56B5270D8596F25A0A42FA9B52F3298B563292B0182BBE830FA" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        var_0 = 0;

        if ( self [[ level.bot_funcs["_encstr_935216AE70A7B3F93FD9B0707294B36B0FF73D2FC07F180F"] ]]() && !scripts\mp\bots\bots_util::bot_is_remote_or_linked() )
        {
            if ( scripts\mp\bots\bots_util::bot_out_of_ammo() )
            {
                var_1 = getentarray( "_encstr_A3580F88A8B0D79B791DD11355BBE04FB3", "_encstr_B8CE0BE43FC317DF690862BA48" );
                var_2 = scripts\engine\utility::get_array_of_closest( self.origin, var_1 );

                if ( var_2.size > 0 )
                {
                    var_3 = var_2[0];
                    scripts\mp\bots\bots::bot_seek_dropped_weapon( var_3 );
                }
            }
            else
            {
                var_1 = getentarray( "_encstr_A3580F88A8B0D79B791DD11355BBE04FB3", "_encstr_B8CE0BE43FC317DF690862BA48" );
                var_2 = scripts\engine\utility::get_array_of_closest( self.origin, var_1 );

                if ( var_2.size > 0 )
                {
                    var_4 = self getnearestnode();

                    if ( isdefined( var_4 ) )
                    {
                        var_5 = scripts\mp\utility\weapon::getweapongroup( self getcurrentweapon() );

                        foreach ( var_3 in var_2 )
                        {
                            var_7 = var_3.classname;

                            if ( scripts\engine\utility::string_starts_with( var_7, "_encstr_B80108EE2BB0837B737D" ) )
                                var_7 = getsubstr( var_7, 7 );

                            var_8 = scripts\mp\utility\weapon::getweapongroup( var_7 );

                            if ( bot_weapon_is_better_class( var_5, var_8 ) )
                            {
                                if ( !isdefined( var_3.calculated_nearest_node ) || !var_3.calculated_nearest_node )
                                {
                                    var_3.nearest_node = getclosestnodeinsight( var_3.origin );
                                    var_3.calculated_nearest_node = 1;
                                }

                                if ( isdefined( var_3.nearest_node ) && nodesvisible( var_4, var_3.nearest_node, 1 ) )
                                {
                                    scripts\mp\bots\bots::bot_seek_dropped_weapon( var_3 );
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        wait( randomfloatrange( 0.25, 0.75 ) );
    }
}

bot_rank_weapon_class( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_B1EB0D5F27A28FC0AE11205BC48D60":
        case "_encstr_B7BF127F8889D85A6D18A25A780DB2937340ABBF":
        case "_encstr_948911DDCA0BE0BDCDD72BC307B17B9B2D3B2B":
        case "_encstr_93F10F2BF1EFA3BD18CF1FF243E0C63B05":
            break;
        case "_encstr_97C90EBB2B2C1CBDDCAF1C4BE647B7B1":
            var_1 = 1;
            break;
        case "_encstr_A9710B24C527AB77354198A8EB":
        case "_encstr_AABE0E47EF4F93A830EFCFC309E7BF9E":
            var_1 = 2;
            break;
        case "_encstr_8FE60FAF13D0C25FD006C37AE835877B40":
        case "_encstr_AF710B0B50BB6ACFA0C80C35FC":
        case "_encstr_BA250FBBB22C1CF6CDF50B6E372CD5D88E":
        case "_encstr_A6710B7FC30B12AF20F613FAD9":
        case "_encstr_AD6510EEACC283DBB9FA3A85B13A5AB1B063":
            var_1 = 3;
            break;
    }

    return var_1;
}

bot_weapon_is_better_class( var_0, var_1 )
{
    var_2 = bot_rank_weapon_class( var_0 );
    var_3 = bot_rank_weapon_class( var_1 );
    return var_3 > var_2;
}

sotf_crate_low_ammo_check()
{
    var_0 = self getcurrentweapon();
    var_1 = self getweaponammoclip( var_0 );
    var_2 = self getweaponammostock( var_0 );
    var_3 = weaponclipsize( var_0 );
    return var_1 + var_2 < var_3 * 0.25;
}

sotf_crate_should_claim()
{
    return 0;
}

sotf_crate_wait_use()
{
    scripts\mp\bots\bots_util::bot_waittill_out_of_combat_or_time( 5000 );
}

sotf_crate_in_range( var_0 )
{
    return 1;
}

sotf_crate_can_use( var_0 )
{
    if ( scripts\mp\bots\bots::crate_can_use_always( var_0 ) )
    {
        if ( isdefined( var_0 ) && isdefined( var_0.bots_used ) && scripts\engine\utility::array_contains( var_0.bots_used, self ) )
        {
            if ( scripts\mp\bots\bots_util::bot_out_of_ammo() )
                return 1;
            else
                return 0;
        }

        var_1 = scripts\mp\utility\weapon::getweapongroup( self getcurrentweapon() );

        if ( bot_rank_weapon_class( var_1 ) <= 1 )
            return 1;

        if ( sotf_crate_low_ammo_check() )
            return 1;

        return 0;
    }

    return 0;
}
