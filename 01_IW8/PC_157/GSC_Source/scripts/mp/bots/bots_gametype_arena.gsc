// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    level.bot_ignore_precalc_paths = 0;
    setup_callbacks();
    _id_131DC();
}

setup_callbacks()
{
    if ( _encstr_8B431F9BC69CB407D19BCBD638F23B855BB21D2FC1CA9B79854E56DC8571EC9BC6::ispickuploadouts() )
    {
        level.bot_funcs["_encstr_974515E14BD75FE0073CEFA7256EA8A8ABF17BE8427B1A"] = ::calloutmarkerping_playteamsoundfx;
        level.bot_funcs["_encstr_BA6C16E9EBD21FA8552FD6AB1739E0D89AF75F6B03FA6D90"] = ::calloutmarkerping_removevehiclecalloutonspecialconditions;
    }

    level.bot_funcs["_encstr_9B610FCEC26B2B3AF20756BE3A435ADC5B"] = ::currentsolsign;
}

_id_131DC()
{
    if ( !_encstr_8B431F9BC69CB407D19BCBD638F23B855BB21D2FC1CA9B79854E56DC8571EC9BC6::isnormalloadouts() )
        level.bots_gametype_handles_class_choice = 1;

    while ( !isdefined( level.arenaflag ) )
        waitframe();

    damage_multiplier();

    if ( istrue( game["_encstr_87010E111E3823354DC251C560F3ED0A"] ) )
    {
        if ( game["_encstr_BC4013FB8BFDA223785D347BD0485AABD92B9F5759"] == 0 || game["_encstr_BC4013FB8BFDA223785D347BD0485AABD92B9F5759"] == 3 )
            return;
    }

    var_0 = scripts\engine\utility::ter_op( level.objmodifier == 1, 3, 1 );
    _encstr_8BB226B356F6979B308B96E871B66A702B9AC5967FD88B817947B2B15BF018ED401DDDFD22DFD822::setup_bot_dom( var_0, 3 );
}

currentsolsign()
{
    self notify( "_encstr_814C1032F8C3371EA510D23AD9F114A73852" );
    self endon( "_encstr_814C1032F8C3371EA510D23AD9F114A73852" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( !isdefined( self.pers["_encstr_BA5819F680C83792668BCFEF9D87EA7F90A96A3A38B0D15A3399BF"] ) )
        self.pers["_encstr_BA5819F680C83792668BCFEF9D87EA7F90A96A3A38B0D15A3399BF"] = self.personality;

    wait 0.1;

    if ( !_encstr_8B431F9BC69CB407D19BCBD638F23B855BB21D2FC1CA9B79854E56DC8571EC9BC6::isnormalloadouts() )
    {
        if ( self botgetdifficultysetting( "_encstr_9371141FB853C1426F1DAFAA7535EB873808A387906A" ) && self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" ) > 0 )
            _encstr_B2F82683D98E1FA2602FFFB501926EBF3573DE1AA065BF51A073A58511D832DFC869F32220B4E796::data_pickup_logic( self getcurrentweapon().basename, self.pers["_encstr_BA5819F680C83792668BCFEF9D87EA7F90A96A3A38B0D15A3399BF"] );
    }

    self.select_woods_one_spawners = 0;

    for (;;)
    {
        if ( isdefined( level.arenaflag ) && level.arenaflag.visibleteam == "_encstr_BC19047780DA" )
        {
            self notify( "_encstr_8BFE0E75F0F1C72B021B9F83C8741348" );

            if ( !scripts\mp\bots\bots_util::bot_is_capturing() || !self.select_woods_one_spawners )
                scripts\mp\bots\bots_strategy::bot_capture_zone( level.arenaflag.trigger.origin, level.arenaflag.nodes, level.arenaflag.trigger );

            self.select_woods_one_spawners = 1;
        }
        else
        {
            self [[ self.personality_update_function ]]();
            thread bot_dom_think();
        }

        wait 0.05;
    }
}

calloutmarkerping_playteamsoundfx()
{
    self notify( "_encstr_BEF81F1DB7CB29F56B5270D8596F25A0A42FA9B52F3298B563292B0182BBE830FA" );
    self endon( "_encstr_BEF81F1DB7CB29F56B5270D8596F25A0A42FA9B52F3298B563292B0182BBE830FA" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 = "_encstr_89F511713BBB2818C13559D05DB9E85501B7F1";

    for (;;)
    {
        var_1 = 0;

        if ( calloutmarkerping_islootquesttablet() || scripts\mp\bots\bots_util::damagestatedata( 0.33 ) )
        {
            if ( self [[ level.bot_funcs["_encstr_935216AE70A7B3F93FD9B0707294B36B0FF73D2FC07F180F"] ]]() && !scripts\mp\bots\bots_util::bot_is_remote_or_linked() )
            {
                var_2 = getentarray( "_encstr_A3580F88A8B0D79B791DD11355BBE04FB3", "_encstr_B8CE0BE43FC317DF690862BA48" );
                var_3 = scripts\engine\utility::get_array_of_closest( self.origin, var_2 );

                if ( var_3.size > 0 )
                {
                    var_4 = var_3[0];
                    level.moderestrictsarenakillstreaks = var_4;
                    calloutmarkerping_navigationcancelproximity( var_4 );
                }
            }
        }

        if ( !scripts\mp\bots\bots_util::bot_in_combat() && !scripts\mp\bots\bots_util::bot_is_remote_or_linked() && self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" ) > 0 )
        {
            var_5 = self hasweapon( var_0 );
            var_6 = var_5 && self getammocount( var_0 ) == 0;

            if ( var_6 )
            {
                if ( isdefined( self.going_for_knife ) )
                {
                    wait 5.0;
                    continue;
                }

                var_7 = getentarray( "_encstr_AAB40E39965F09B07501F182A8FB5015", "_encstr_B8CE0BE43FC317DF690862BA48" );
                var_8 = scripts\engine\utility::get_array_of_closest( self.origin, var_7 );

                foreach ( var_10 in var_8 )
                {
                    if ( !isdefined( var_10 ) )
                        continue;

                    if ( !isdefined( var_10.calculated_closest_point ) )
                    {
                        var_11 = scripts\mp\bots\bots_util::bot_queued_process( "_encstr_BDD91CEE90D83F2255EFD3E7B7F50B4451399BAC09D8A26A2521D7F7E525", scripts\mp\bots\bots_util::func_bot_get_closest_navigable_point, var_10.origin, 32, self );

                        if ( isdefined( var_10 ) )
                        {
                            var_10.closest_point_on_grid = var_11;
                            var_10.calculated_closest_point = 1;
                        }
                        else
                            continue;
                    }

                    if ( isdefined( var_10.closest_point_on_grid ) )
                    {
                        self.going_for_knife = 1;
                        calloutmarkerping_navigationcancelproximity( var_10 );
                    }
                }
            }
            else if ( var_5 )
                self.going_for_knife = undefined;
        }

        wait( randomfloatrange( 0.25, 0.75 ) );
    }
}

calloutmarkerping_navigationcancelproximity( var_0 )
{
    if ( scripts\mp\bots\bots_strategy::bot_has_tactical_goal( "_encstr_9508140F0B0D0AE790E37D829BA0E481DC93CFFBF720", var_0 ) == 0 )
    {
        if ( istrue( level._id_1343F ) )
        {
            var_1 = self botfirstavailablegrenade( "_encstr_9C1607D0071420D7AA" );
            var_2 = self botfirstavailablegrenade( "_encstr_94C2099887BA24607BE134" );

            if ( isdefined( var_1 ) && var_1.basename == "_encstr_98410C37CDDEEE4C2C1BD8AFB61C" )
            {
                var_3 = scripts\mp\equipment::getcurrentequipment( "_encstr_987F080E394BDAC2E45E" );
                var_4 = scripts\mp\equipment::getequipmentammo( var_3 );

                if ( var_1.basename == "_encstr_98410C37CDDEEE4C2C1BD8AFB61C" && var_4 > 3 )
                    return;
            }

            if ( isdefined( var_2 ) && var_2.basename == "_encstr_B283095A09482CFA98EBEB" )
            {
                var_3 = scripts\mp\equipment::getcurrentequipment( "_encstr_B98F0AC7D5B99F4DDBA8353B" );
                var_4 = scripts\mp\equipment::getequipmentammo( var_3 );

                if ( var_2.basename == "_encstr_B283095A09482CFA98EBEB" )
                    return;
            }
        }

        var_5 = undefined;

        if ( var_0.targetname == "_encstr_A3580F88A8B0D79B791DD11355BBE04FB3" )
        {
            var_6 = 1;
            var_7 = self getweaponslistprimaries();

            foreach ( var_9 in var_7 )
            {
                if ( var_0.model == getweaponmodel( var_9 ) )
                    var_6 = 0;
            }

            if ( var_6 )
                var_5 = ::calloutmarkerping_ismunitionsbox;
        }

        var_11 = spawnstruct();
        var_11.object = var_0;
        var_11.script_goal_radius = 12;
        var_11.should_abort = level.bot_funcs["_encstr_BA6C16E9EBD21FA8552FD6AB1739E0D89AF75F6B03FA6D90"];
        var_11.action_thread = var_5;
        var_12 = undefined;
        var_13 = var_0.origin;

        if ( isdefined( var_0.deafen_ai_near_pa_for_duration ) )
            var_13 = var_0.deafen_ai_near_pa_for_duration;

        scripts\mp\bots\bots_strategy::bot_new_tactical_goal( "_encstr_9508140F0B0D0AE790E37D829BA0E481DC93CFFBF720", var_13, 100, var_11 );
    }
}

calloutmarkerping_ismunitionsbox( var_0 )
{
    self botpressbutton( "_encstr_971904D5B9B2", 0.5 );
    thread _id_13FC6();
}

_id_13FC6()
{
    self notify( "_encstr_829918E318C4612BCF18DF7199D3865BF2CB4B4F703F44E1C0EE" );
    self endon( "_encstr_829918E318C4612BCF18DF7199D3865BF2CB4B4F703F44E1C0EE" );
    wait 2;

    if ( self botgetdifficultysetting( "_encstr_9371141FB853C1426F1DAFAA7535EB873808A387906A" ) && self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" ) > 0 )
        _encstr_B2F82683D98E1FA2602FFFB501926EBF3573DE1AA065BF51A073A58511D832DFC869F32220B4E796::data_pickup_logic( self getcurrentweapon().basename, self.pers["_encstr_BA5819F680C83792668BCFEF9D87EA7F90A96A3A38B0D15A3399BF"] );
}

calloutmarkerping_removevehiclecalloutonspecialconditions( var_0 )
{
    if ( calloutmarkerping_islethalequipment() > 0 )
    {
        var_1 = scripts\mp\utility\weapon::getweapongroup( self getcurrentweapon() );

        if ( isdefined( var_0.object ) )
        {
            var_2 = var_0.object.classname;

            if ( scripts\engine\utility::string_starts_with( var_2, "_encstr_B80108EE2BB0837B737D" ) )
                var_2 = getsubstr( var_2, 7 );

            var_3 = scripts\mp\utility\weapon::getweapongroup( var_2 );

            if ( !bot_weapon_is_better_class( var_1, var_3 ) )
                return 1;
        }
    }

    if ( !isdefined( var_0.object ) )
        return 1;

    if ( var_0.object.targetname == "_encstr_A3580F88A8B0D79B791DD11355BBE04FB3" )
    {
        foreach ( var_5 in self.weaponlist )
        {
            if ( var_5.basename == "_encstr_9B660D018F3841EE3A23DBEE3639F0" )
                return 0;
        }

        if ( calloutmarkerping_islethalequipment() > 0 )
            return 1;
    }
    else if ( var_0.object.targetname == "_encstr_AAB40E39965F09B07501F182A8FB5015" )
    {
        if ( scripts\mp\bots\bots_util::bot_in_combat() )
        {
            self.going_for_knife = undefined;
            return 1;
        }
    }

    return 0;
}

calloutmarkerping_islethalequipment()
{
    var_0 = 0;
    var_1 = undefined;

    if ( isdefined( self.weaponlist ) && self.weaponlist.size > 0 )
        var_1 = self.weaponlist;
    else
        var_1 = self getweaponslistprimaries();

    foreach ( var_3 in var_1 )
    {
        var_0 = var_0 + self getweaponammoclip( var_3 );
        var_0 = var_0 + self getweaponammostock( var_3 );
    }

    if ( var_1.size == 1 && var_1[0].basename == "_encstr_9B660D018F3841EE3A23DBEE3639F0" )
        var_0 = 0;

    return var_0;
}

calloutmarkerping_islootquesttablet()
{
    var_0 = undefined;

    if ( isdefined( self.weaponlist ) && self.weaponlist.size > 0 )
        var_0 = self.weaponlist;
    else
        var_0 = self getweaponslistprimaries();

    if ( var_0.size == 1 && var_0[0].basename == "_encstr_9B660D018F3841EE3A23DBEE3639F0" )
        return 1;

    foreach ( var_2 in var_0 )
    {
        if ( self getweaponammoclip( var_2 ) > 0 )
            return 0;

        if ( self getweaponammostock( var_2 ) > 0 )
            return 0;
    }

    return 1;
}

bot_rank_weapon_class( var_0 )
{
    var_1 = 0;

    switch ( var_0 )
    {
        case "_encstr_B1EB0D5F27A28FC0AE11205BC48D60":
        case "_encstr_B7BF127F8889D85A6D18A25A780DB2937340ABBF":
        case "_encstr_948911DDCA0BE0BDCDD72BC307B17B9B2D3B2B":
        case "_encstr_93F10F2BF1EFA3BD18CF1FF243E0C63B05":
            break;
        case "_encstr_97C90EBB2B2C1CBDDCAF1C4BE647B7B1":
            var_1 = 1;
            break;
        case "_encstr_A9710B24C527AB77354198A8EB":
        case "_encstr_AABE0E47EF4F93A830EFCFC309E7BF9E":
            var_1 = 2;
            break;
        case "_encstr_8FE60FAF13D0C25FD006C37AE835877B40":
        case "_encstr_AF710B0B50BB6ACFA0C80C35FC":
        case "_encstr_BA250FBBB22C1CF6CDF50B6E372CD5D88E":
        case "_encstr_A6710B7FC30B12AF20F613FAD9":
        case "_encstr_AD6510EEACC283DBB9FA3A85B13A5AB1B063":
            var_1 = 3;
            break;
    }

    return var_1;
}

bot_weapon_is_better_class( var_0, var_1 )
{
    var_2 = bot_rank_weapon_class( var_0 );
    var_3 = bot_rank_weapon_class( var_1 );
    return var_3 > var_2;
}

vehicle_compass_br_shouldbevisibletoplayer( var_0 )
{
    var_1 = spawncovernode( var_0, ( 0, randomint( 360 ), 0 ), "_encstr_A6FF0C9F778B38368A3173D90A73" );

    if ( !isdefined( level.arenaflag.nodes ) )
        level.arenaflag.nodes = [];

    level.arenaflag.nodes[level.arenaflag.nodes.size] = var_1;

    if ( !isdefined( level.objectives["_encstr_B80703EB16"].bottargets ) )
        level.objectives["_encstr_B80703EB16"].bottargets = [];

    level.objectives["_encstr_B80703EB16"].bottargets[level.objectives["_encstr_B80703EB16"].bottargets.size] = var_1;
}

damage_multiplier()
{
    if ( level.mapname == "_encstr_87D50A3A6857BD9FD363BEAD" )
    {
        var_0 = ( 22, 12, 0 );
        thread vehicle_compass_br_shouldbevisibletoplayer( var_0 );
        var_0 = ( -4, 1, 0 );
        thread vehicle_compass_br_shouldbevisibletoplayer( var_0 );
        var_0 = ( 0, -33, 0 );
        thread vehicle_compass_br_shouldbevisibletoplayer( var_0 );
        var_0 = ( 35, -23, 0 );
        thread vehicle_compass_br_shouldbevisibletoplayer( var_0 );
    }
}

bot_dom_think()
{
    self notify( "_encstr_8BFE0E75F0F1C72B021B9F83C8741348" );
    self endon( "_encstr_8BFE0E75F0F1C72B021B9F83C8741348" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    while ( !isdefined( level.bot_gametype_precaching_done ) )
        wait 0.05;

    self.force_new_goal = 0;
    self.new_goal_time = 0;
    self.next_strat_level_check = 0;
    self botsetflag( "_encstr_97F30B439D23AFBAE3B882FA70", 0 );
    self botsetflag( "_encstr_958D139D93ACE62C9156EBBD98A995C63AD29DACCD", 1 );
    self botsetflag( "_encstr_8A181327225DDF0FCE4A5129F7035A47A8B84878DA", 1 );

    for (;;)
    {
        scripts\mp\bots\bots_util::bot_update_camp_assassin();
        var_0 = gettime();

        if ( var_0 > self.next_strat_level_check )
        {
            self.next_strat_level_check = gettime() + 10000;
            self.strategy_level = self botgetdifficultysetting( "_encstr_A4EF0E2713E37768B50FF26CB78E2839" );
        }

        if ( var_0 > self.new_goal_time || self.force_new_goal )
        {
            if ( should_delay_flag_decision() )
                self.new_goal_time = var_0 + 5000;
            else
            {
                self.force_new_goal = 0;
                bot_choose_flag();
                self.new_goal_time = var_0 + randomintrange( 30000, 45000 );
            }
        }

        scripts\engine\utility::waittill_notify_or_timeout( "_encstr_A39914D0BFB229B3876BE078C7D6285BFAA9DCE816FA", 1.0 );
    }
}

should_delay_flag_decision()
{
    if ( self.force_new_goal )
        return 0;

    if ( !scripts\mp\bots\bots_util::bot_is_capturing() )
        return 0;

    if ( self.current_flag _encstr_AD711DA7CF63F3C8248AB8C87257B83F4A3F513B1BBA466A4CE5F8A85FD3A0::getflagteam() == self.team )
        return 0;

    var_0 = get_flag_capture_radius();

    if ( isdefined( self.current_flag.trigger ) && distancesquared( self.origin, self.current_flag.trigger.origin ) < var_0 * 2 * ( var_0 * 2 ) )
    {
        var_1 = get_ally_flags( self.team );

        if ( var_1.size == 2 && !scripts\engine\utility::array_contains( var_1, self.current_flag ) && !bot_allowed_to_3_cap() )
            return 0;

        return 1;
    }

    return 0;
}

get_override_flag_targets()
{
    return level.bot_dom_override_flag_targets[self.team];
}

has_override_flag_targets()
{
    var_0 = get_override_flag_targets();
    return var_0.size > 0;
}

flag_has_been_captured_before( var_0 )
{
    return !flag_has_never_been_captured( var_0 );
}

flag_has_never_been_captured( var_0 )
{
    return var_0.firstcapture;
}

bot_choose_flag()
{
    var_0 = undefined;
    var_1 = [];
    var_2 = [];
    var_3 = get_override_flag_targets();

    if ( var_3.size > 0 )
        var_4 = var_3;
    else
        var_4 = level.objectives;

    foreach ( var_0 in var_4 )
    {
        if ( var_0.objectivekey == "_encstr_B80703EB16" )
            continue;

        var_6 = var_0 _encstr_AD711DA7CF63F3C8248AB8C87257B83F4A3F513B1BBA466A4CE5F8A85FD3A0::getflagteam();

        if ( flag_has_been_captured_before( var_0 ) )
            var_7 = 0;

        if ( var_6 != self.team )
        {
            var_1[var_1.size] = var_0;
            continue;
        }

        var_2[var_2.size] = var_0;
    }

    var_9 = undefined;

    if ( var_2.size == 1 )
    {
        if ( !bot_should_defend_flag( var_2[0], 1 ) )
            var_9 = 1;
        else
            var_9 = !bot_should_defend( 0.34 );
    }
    else
        return;

    if ( var_9 )
    {
        var_10 = var_1;

        if ( var_10.size == 1 )
            var_0 = var_10[0];
    }
    else
    {
        var_11 = var_2;

        foreach ( var_13 in var_11 )
        {
            if ( bot_should_defend_flag( var_13, var_2.size ) )
            {
                var_0 = var_13;
                break;
            }
        }
    }

    if ( var_9 )
        capture_flag( var_0 );
    else
        defend_flag( var_0 );
}

bot_allowed_to_3_cap()
{
    return 1;
}

bot_should_defend( var_0 )
{
    if ( randomfloat( 1 ) < var_0 )
        return 1;

    var_1 = level.bot_personality_type[self.personality];

    if ( var_1 == "_encstr_80FA0BBF2C0EF0FBF7A2117BBB" )
        return 1;
    else if ( var_1 == "_encstr_B30B07E216CBFFC4C2" )
        return 0;
}

capture_flag( var_0, var_1, var_2 )
{
    self.current_flag = var_0;

    if ( isdefined( var_0.trigger ) )
    {
        if ( bot_dom_debug_should_protect_all() )
        {
            var_3["_encstr_A90513B73B2BC9392D8C95FACEDB8536FAE85E38CA"] = var_1;
            var_3["_encstr_A93616CA378EE416CD8D567DC1B72DCD3A6EFAD2CD91591E"] = get_flag_label( var_0 );
            scripts\mp\bots\bots_strategy::bot_protect_point( var_0.trigger.origin, get_flag_protect_radius(), var_3 );
        }
        else
        {
            var_3["_encstr_A90513B73B2BC9392D8C95FACEDB8536FAE85E38CA"] = var_1;
            var_3["_encstr_A93616CA378EE416CD8D567DC1B72DCD3A6EFAD2CD91591E"] = get_flag_label( var_0 );
            scripts\mp\bots\bots_strategy::bot_capture_zone( var_0.trigger.origin, var_0.nodes, var_0.trigger, var_3 );
        }

        if ( !isdefined( var_2 ) || !var_2 )
            thread monitor_flag_status( var_0 );
    }
}

defend_flag( var_0 )
{
    self.current_flag = var_0;

    if ( isdefined( var_0.trigger ) )
    {
        if ( bot_dom_debug_should_capture_all() )
        {
            var_1["_encstr_A93616CA378EE416CD8D567DC1B72DCD3A6EFAD2CD91591E"] = get_flag_label( var_0 );
            scripts\mp\bots\bots_strategy::bot_capture_zone( var_0.trigger.origin, var_0.nodes, var_0.trigger, var_1 );
        }
        else
        {
            var_1["_encstr_A93616CA378EE416CD8D567DC1B72DCD3A6EFAD2CD91591E"] = get_flag_label( var_0 );
            var_1["_encstr_B66A17900ADF6E78923CFFE55F3F30A0D3020EB9920BA5A0EA"] = var_0.nearest_node;
            scripts\mp\bots\bots_strategy::bot_protect_point( var_0.trigger.origin, get_flag_protect_radius(), var_1 );
        }

        thread monitor_flag_status( var_0 );
    }
}

get_flag_capture_radius()
{
    if ( !isdefined( level.capture_radius ) )
        level.capture_radius = 158;

    return level.capture_radius;
}

get_flag_protect_radius()
{
    if ( !isdefined( level.protect_radius ) )
    {
        var_0 = self botgetworldsize();
        var_1 = ( var_0[0] + var_0[1] ) / 2;
        level.protect_radius = min( 1000, var_1 / 3.5 );
    }

    return level.protect_radius;
}

bot_dom_leader_dialog( var_0, var_1 )
{
    if ( issubstr( var_0, "_encstr_936707B0220A0B107F" ) && var_0 != "_encstr_8A7C0DC19737D0DDDFF9881BD2B2F3" && var_0 != "_encstr_B9B10C64B06BA7653709AB72B01B" && var_0 != "_encstr_A2C6143B85D659CDE8B0D1567D19BDDA36EDDCA5DCEC" )
    {
        var_2 = getsubstr( var_0, var_0.size - 2 );
        var_3 = get_specific_flag_by_label( var_2 );

        if ( isdefined( var_3 ) && bot_allow_to_capture_flag( var_3 ) )
        {
            self botmemoryevent( "_encstr_B7560C7ACD18F88EFEC980EF9B22", undefined, var_3.trigger.origin );

            if ( !isdefined( self.last_losing_flag_react ) || gettime() - self.last_losing_flag_react > 10000 )
            {
                if ( scripts\mp\bots\bots_util::bot_is_protecting() )
                {
                    var_4 = distancesquared( self.origin, var_3.trigger.origin ) < 490000;
                    var_5 = bot_is_protecting_flag( var_3 );

                    if ( var_4 || var_5 )
                    {
                        capture_flag( var_3 );
                        self.last_losing_flag_react = gettime();
                    }
                }
            }
        }
    }
    else if ( issubstr( var_0, "_encstr_87E708E6B236574E958C" ) )
    {
        var_2 = getsubstr( var_0, var_0.size - 2 );
        var_6 = get_specific_flag_by_label( var_2 );
        var_6.last_time_secured[self.team] = gettime();
    }

    scripts\mp\bots\bots_util::bot_leader_dialog( var_0, var_1 );
}

bot_allow_to_capture_flag( var_0 )
{
    var_1 = get_override_flag_targets();

    if ( var_1.size == 0 )
        return 1;

    if ( scripts\engine\utility::array_contains( var_1, var_0 ) )
        return 1;

    return 0;
}

monitor_flag_status( var_0 )
{
    self notify( "_encstr_AFA91443FD766124B0C649BD32991CA1577323E54B2F" );
    self endon( "_encstr_AFA91443FD766124B0C649BD32991CA1577323E54B2F" );
    self endon( "_encstr_8BFE0E75F0F1C72B021B9F83C8741348" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_1 = get_num_ally_flags( self.team );
    var_2 = get_flag_capture_radius() * get_flag_capture_radius();
    var_3 = get_flag_capture_radius() * 3 * ( get_flag_capture_radius() * 3 );
    var_4 = 1;

    while ( var_4 )
    {
        var_5 = 0;
        var_6 = var_0 _encstr_AD711DA7CF63F3C8248AB8C87257B83F4A3F513B1BBA466A4CE5F8A85FD3A0::getflagteam();
        var_7 = get_num_ally_flags( self.team );
        var_8 = get_enemy_flags( self.team );

        if ( scripts\mp\bots\bots_util::bot_is_capturing() )
        {
            if ( var_6 == self.team && var_0.claimteam == "_encstr_AABA05236DC831" )
            {
                if ( !bot_dom_debug_should_capture_all() )
                    var_5 = 1;
            }

            if ( var_7 == 2 && var_6 != self.team && !bot_allowed_to_3_cap() )
            {
                if ( isdefined( var_0.trigger ) && distancesquared( self.origin, var_0.trigger.origin ) > var_2 )
                    var_5 = 1;
            }

            foreach ( var_10 in var_8 )
            {
                if ( isdefined( var_10.trigger ) && var_10 != var_0 && bot_allow_to_capture_flag( var_10 ) )
                {
                    if ( distancesquared( self.origin, var_10.trigger.origin ) < var_3 )
                        var_5 = 1;
                }
            }

            if ( isdefined( var_0.trigger ) && self istouching( var_0.trigger ) && var_0.userate <= 0 )
            {
                if ( self bothasscriptgoal() )
                {
                    var_12 = self botgetscriptgoal();
                    var_13 = self botgetscriptgoalradius();

                    if ( distancesquared( self.origin, var_12 ) < squared( var_13 ) )
                    {
                        var_14 = self getnearestnode();

                        if ( isdefined( var_14 ) )
                        {
                            var_15 = undefined;

                            foreach ( var_17 in var_0.nodes )
                            {
                                if ( !nodesvisible( var_17, var_14, 1 ) )
                                {
                                    var_15 = var_17.origin;
                                    break;
                                }
                            }

                            if ( isdefined( var_15 ) )
                            {
                                self.defense_investigate_specific_point = var_15;
                                self notify( "_encstr_BCBE20A8DA175B580BFF9418CA4F61677D022038D1AA8331F7E42E0DBC6F8BF3E5BA" );
                            }
                        }
                    }
                }
            }
        }

        if ( scripts\mp\bots\bots_util::bot_is_protecting() )
        {
            if ( var_6 != self.team )
            {
                if ( !bot_dom_debug_should_protect_all() )
                    var_5 = 1;
            }
            else if ( var_7 == 1 && var_1 > 1 )
                var_5 = 1;
        }

        var_1 = var_7;

        if ( var_5 )
        {
            self.force_new_goal = 1;
            var_4 = 0;
            self notify( "_encstr_A39914D0BFB229B3876BE078C7D6285BFAA9DCE816FA" );
            continue;
        }

        var_19 = level scripts\engine\utility::waittill_notify_or_timeout_return( "_encstr_897D177D2039BFB7E60B3326771A0209B2FFA0655BE32311EB", 1 + randomfloatrange( 0, 2 ) );
        var_20 = isdefined( var_19 ) && var_19 == "_encstr_945408D1B4B556B7BA3A";

        if ( !var_20 )
        {
            var_21 = max( ( 3 - self.strategy_level ) * 1.0 + randomfloatrange( -0.5, 0.5 ), 0 );
            wait( var_21 );
        }
    }
}

bot_dom_get_node_chance( var_0 )
{
    if ( var_0 == self.node_closest_to_defend_center )
        return 1.0;

    if ( !isdefined( self.current_flag ) )
        return 1.0;

    var_1 = 0;
    var_2 = get_flag_label( self.current_flag );
    var_3 = get_ally_flags( self.team );

    foreach ( var_5 in var_3 )
    {
        if ( var_5 != self.current_flag )
        {
            var_1 = var_0 scripts\mp\bots\bots_util::node_is_on_path_from_labels( var_2, get_flag_label( var_5 ) );

            if ( var_1 )
            {
                var_6 = get_other_flag( self.current_flag, var_5 );
                var_7 = var_6 _encstr_AD711DA7CF63F3C8248AB8C87257B83F4A3F513B1BBA466A4CE5F8A85FD3A0::getflagteam();

                if ( var_7 != self.team )
                {
                    if ( var_0 scripts\mp\bots\bots_util::node_is_on_path_from_labels( var_2, get_flag_label( var_6 ) ) )
                        var_1 = 0;
                }
            }
        }
    }

    if ( var_1 )
        return 0.2;

    return 1.0;
}

get_flag_label( var_0 )
{
    var_1 = "_encstr_A40101";

    if ( isdefined( var_0.teleport_zone ) )
        var_1 = var_1 + ( var_0.teleport_zone + "_encstr_984C028E" );

    var_1 = var_1 + ( "_encstr_8B7905BF04379F" + var_0.objectivekey );
    return var_1;
}

get_other_flag( var_0, var_1 )
{
    foreach ( var_3 in level.objectives )
    {
        if ( var_3 != var_0 && var_3 != var_1 )
            return var_3;
    }
}

get_specific_flag_by_letter( var_0 )
{
    var_1 = "_encstr_984C028E" + tolower( var_0 );
    return get_specific_flag_by_label( var_1 );
}

get_specific_flag_by_label( var_0 )
{
    foreach ( var_2 in level.objectives )
    {
        if ( var_2.objectivekey == var_0 )
            return var_2;
    }
}

get_closest_flag( var_0 )
{
    var_1 = undefined;
    var_2 = undefined;

    foreach ( var_4 in level.objectives )
    {
        var_5 = distancesquared( var_4.trigger.origin, var_0 );

        if ( !isdefined( var_2 ) || var_5 < var_2 )
        {
            var_1 = var_4;
            var_2 = var_5;
        }
    }

    return var_1;
}

get_num_allies_capturing_flag( var_0, var_1 )
{
    var_2 = 0;
    var_3 = get_flag_capture_radius();

    foreach ( var_5 in level.participants )
    {
        if ( !isdefined( var_5.team ) )
            continue;

        if ( var_5.team == self.team && var_5 != self && scripts\mp\utility\entity::isteamparticipant( var_5 ) )
        {
            if ( isai( var_5 ) )
            {
                if ( var_5 bot_is_capturing_flag( var_0 ) )
                    var_2++;

                continue;
            }

            if ( !isdefined( var_1 ) || !var_1 )
            {
                if ( var_5 istouching( var_0 ) )
                    var_2++;
            }
        }
    }

    return var_2;
}

bot_is_capturing_flag( var_0 )
{
    if ( !scripts\mp\bots\bots_util::bot_is_capturing() )
        return 0;

    return bot_target_is_flag( var_0 );
}

bot_is_protecting_flag( var_0 )
{
    if ( !scripts\mp\bots\bots_util::bot_is_protecting() )
        return 0;

    return bot_target_is_flag( var_0 );
}

bot_target_is_flag( var_0 )
{
    return self.current_flag == var_0;
}

get_num_ally_flags( var_0 )
{
    var_1 = 0;

    foreach ( var_3 in level.objectives )
    {
        var_4 = var_3 _encstr_AD711DA7CF63F3C8248AB8C87257B83F4A3F513B1BBA466A4CE5F8A85FD3A0::getflagteam();

        if ( var_4 == var_0 )
            var_1++;
    }

    return var_1;
}

get_enemy_flags( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level.objectives )
    {
        var_4 = var_3 _encstr_AD711DA7CF63F3C8248AB8C87257B83F4A3F513B1BBA466A4CE5F8A85FD3A0::getflagteam();

        if ( var_4 == scripts\engine\utility::get_enemy_team( var_0 ) )
            var_1 = scripts\engine\utility::array_add( var_1, var_3 );
    }

    return var_1;
}

get_ally_flags( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level.objectives )
    {
        var_4 = var_3 _encstr_AD711DA7CF63F3C8248AB8C87257B83F4A3F513B1BBA466A4CE5F8A85FD3A0::getflagteam();

        if ( var_4 == var_0 )
            var_1 = scripts\engine\utility::array_add( var_1, var_3 );
    }

    return var_1;
}

bot_should_defend_flag( var_0, var_1 )
{
    var_2 = get_max_num_defenders_wanted_per_flag( var_1 );
    var_3 = get_players_defending_flag( var_0 );
    return var_3.size < var_2;
}

get_max_num_defenders_wanted_per_flag( var_0 )
{
    var_1 = scripts\mp\bots\bots_util::bot_get_max_players_on_team( self.team );

    if ( var_0 == 1 )
        return ceil( var_1 / 6 );
    else
        return ceil( var_1 / 3 );
}

get_players_defending_flag( var_0 )
{
    var_1 = get_flag_protect_radius();
    var_2 = [];

    foreach ( var_4 in level.participants )
    {
        if ( !isdefined( var_4.team ) )
            continue;

        if ( var_4.team == self.team && var_4 != self && scripts\mp\utility\entity::isteamparticipant( var_4 ) )
        {
            if ( isai( var_4 ) )
            {
                if ( var_4 bot_is_protecting_flag( var_0 ) )
                    var_2 = scripts\engine\utility::array_add( var_2, var_4 );

                continue;
            }

            var_5 = gettime() - var_0.last_time_secured[self.team];

            if ( var_5 < 10000 )
                continue;

            if ( isdefined( var_0.trigger ) && distancesquared( var_0.trigger.origin, var_4.origin ) < var_1 * var_1 )
                var_2 = scripts\engine\utility::array_add( var_2, var_4 );
        }
    }

    return var_2;
}

bot_dom_debug_should_capture_all()
{
    return 0;
}

bot_dom_debug_should_protect_all()
{
    return 0;
}
