// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

onplayerconnect()
{
    for (;;)
    {
        level waittill( "_encstr_87940A7F075A88E8ABD37951", var_0 );
        var_0.numareas = 0;
    }
}

playerenterarea( var_0 )
{
    self.numareas++;

    if ( self.numareas == 1 )
        radiationeffect();
}

playerleavearea( var_0 )
{
    self.numareas--;

    if ( self.numareas != 0 )
        return;

    self.poison = 0;
    self notify( "_encstr_93130CA1CFF27907FA274048FF12" );

    if ( isdefined( self.radiationoverlay ) )
        self.radiationoverlay fadeoutblackout( 0.1, 0 );
}

soundwatcher( var_0 )
{
    scripts\engine\utility::_id_143A5( "_encstr_A3750609A5E61883", "_encstr_93130CA1CFF27907FA274048FF12" );
    self stoploopsound();
}

radiationeffect()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_93130CA1CFF27907FA274048FF12" );
    self.poison = 0;
    thread soundwatcher( self );

    for (;;)
    {
        self.poison++;

        switch ( self.poison )
        {
            case 1:
                self.radiationsound = "_encstr_A2E919C7B33B9591B785FF52FB62D2EF9BC0617D094A730C776997";
                self playloopsound( self.radiationsound );
                self viewkick( 1, self.origin );
                break;
            case 3:
                self.radiationsound = "_encstr_BCE919BFB8B14DD1E79D6CE7F5B56A07DBF0076B4948BD8BCB21E2";
                self stoploopsound();
                self playloopsound( self.radiationsound );
                self viewkick( 3, self.origin );
                doradiationdamage( 15 );
                break;
            case 4:
                self.radiationsound = "_encstr_BCE919BFB8B14DD1E79D6CE7F5B56A07DBF0076B4948BD8BCB21E2";
                self stoploopsound();
                self playloopsound( self.radiationsound );
                self viewkick( 15, self.origin );
                thread blackout();
                doradiationdamage( 25 );
                break;
            case 6:
                self.radiationsound = "_encstr_A6E919D09CC9B8272CA2F1AADFB34AB8907A5752A1D107DD47DD2A";
                self stoploopsound();
                self playloopsound( self.radiationsound );
                self viewkick( 75, self.origin );
                doradiationdamage( 45 );
                break;
            case 8:
                self.radiationsound = "_encstr_A6E919D09CC9B8272CA2F1AADFB34AB8907A5752A1D107DD47DD2A";
                self stoploopsound();
                self playloopsound( self.radiationsound );
                self viewkick( 127, self.origin );
                doradiationdamage( 175 );
                break;
        }

        wait 1;
    }

    wait 5;
}

blackout()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_93130CA1CFF27907FA274048FF12" );

    if ( !isdefined( self.radiationoverlay ) )
    {
        self.radiationoverlay = newclienthudelem( self );
        self.radiationoverlay.x = 0;
        self.radiationoverlay.y = 0;
        self.radiationoverlay setshader( "_encstr_82AB06A9FD89F05A", 640, 480 );
        self.radiationoverlay.alignx = "_encstr_B1AD05C65666E8";
        self.radiationoverlay.aligny = "_encstr_B91904EC4718";
        self.radiationoverlay.horzalign = "_encstr_BC940BE9D5F91D47B0ABBD851E";
        self.radiationoverlay.vertalign = "_encstr_BC940BE9D5F91D47B0ABBD851E";
        self.radiationoverlay.alpha = 0;
    }

    var_0 = 1;
    var_1 = 2;
    var_2 = 0.25;
    var_3 = 1;
    var_4 = 5;
    var_5 = 100;
    var_6 = 0;

    for (;;)
    {
        while ( self.poison > 1 )
        {
            var_7 = var_5 - var_4;
            var_6 = ( self.poison - var_4 ) / var_7;

            if ( var_6 < 0 )
                var_6 = 0;
            else if ( var_6 > 1 )
                var_6 = 1;

            var_8 = var_1 - var_0;
            var_9 = var_0 + var_8 * ( 1 - var_6 );
            var_10 = var_3 - var_2;
            var_11 = var_2 + var_10 * var_6;
            var_12 = var_6 * 0.5;

            if ( var_6 == 1 )
                break;

            var_13 = var_9 / 2;
            self.radiationoverlay fadeinblackout( var_13, var_11 );
            self.radiationoverlay fadeoutblackout( var_13, var_12 );
            wait( var_6 * 0.5 );
        }

        if ( var_6 == 1 )
            break;

        if ( self.radiationoverlay.alpha != 0 )
            self.radiationoverlay fadeoutblackout( 1, 0 );

        wait 0.05;
    }

    self.radiationoverlay fadeinblackout( 2, 0 );
}

doradiationdamage( var_0 )
{
    self thread [[ level.callbackplayerdamage ]]( self, self, var_0, 0, "_encstr_97590CFD0825D7720BD1A018A1F3", "_encstr_B9C40C1EFA1EBBB22FC305A93AF3", self.origin, ( 0, 0, 0 ) - self.origin, "_encstr_AABA05236DC831", 0 );
}

fadeinblackout( var_0, var_1 )
{
    self fadeovertime( var_0 );
    self.alpha = var_1;
    wait( var_0 );
}

fadeoutblackout( var_0, var_1 )
{
    self fadeovertime( var_0 );
    self.alpha = var_1;
    wait( var_0 );
}
