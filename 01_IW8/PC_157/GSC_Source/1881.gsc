// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    if ( getdvar( "_encstr_8B7A0B3524F7A9F8501F910F6C" ) == "_encstr_AF4C02EA" )
        return;

    level.script_mover_defaults = [];
    level.script_mover_defaults["_encstr_8BA50AD6BDD92BBEE896B5AC"] = 5;
    level.script_mover_defaults["_encstr_8B8B0B1372F7EF449F4B0190AD"] = 0;
    level.script_mover_defaults["_encstr_88210BA3258223F2298B0A559D"] = 0;
    level.script_mover_defaults["_encstr_B3BA0AEE2CA5A3BE1D5A6B56"] = 0;
    level.script_mover_defaults["_encstr_941A0B3AD14907D87179F1CD63"] = 0;
    level.script_mover_defaults["_encstr_BA8607FB63D77E281F"] = 0;
    level.script_mover_defaults["_encstr_AFDB0BA8FCC60816F37313154F"] = "_encstr_B6AD09FB5B2B7814AF63B1";
    script_mover_add_hintstring( "_encstr_B6AD09FB5B2B7814AF63B1", &"_encstr_BDAD12F03327DF57E5E15105C76F27A538D7F732" );
    script_mover_add_parameters( "_encstr_AABA05236DC831", "_encstr_A40101" );
    level.script_mover_named_goals = [];
    waitframe();
    var_0 = [];
    var_1 = script_mover_classnames();

    foreach ( var_3 in var_1 )
        var_0 = scripts\engine\utility::array_combine( var_0, getentarray( var_3, "_encstr_B9110A36362C3737732CDA59" ) );

    scripts\engine\utility::array_thread( var_0, ::script_mover_int );
}

script_mover_classnames()
{
    return [ "_encstr_9F061363396EFF42C0D71D1749A08DDF1950AB8AA3", "_encstr_A8FE18CD6C274B388ED726275DCD1AAD7B4695D8BED6F6D99539" ];
}

script_mover_is_script_mover()
{
    if ( isdefined( self.script_mover ) )
        return self.script_mover;

    var_0 = script_mover_classnames();

    foreach ( var_2 in var_0 )
    {
        if ( self.classname == var_2 )
        {
            self.script_mover = 1;
            return 1;
        }
    }

    return 0;
}

script_mover_add_hintstring( var_0, var_1 )
{
    if ( !isdefined( level.script_mover_hintstrings ) )
        level.script_mover_hintstrings = [];

    level.script_mover_hintstrings[var_0] = var_1;
}

script_mover_add_parameters( var_0, var_1 )
{
    if ( !isdefined( level.script_mover_parameters ) )
        level.script_mover_parameters = [];

    level.script_mover_parameters[var_0] = var_1;
}

script_mover_int()
{
    if ( !isdefined( self.target ) )
        return;

    self.script_mover = 1;
    self.moving = 0;
    self.origin_ent = self;
    self.use_triggers = [];
    self.linked_ents = [];
    var_0 = scripts\engine\utility::getstructarray( self.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

    foreach ( var_2 in var_0 )
    {
        if ( !isdefined( var_2.script_noteworthy ) )
            continue;

        switch ( var_2.script_noteworthy )
        {
            case "_encstr_88FE07B07AAFE1C38D":
                if ( !isdefined( var_2.angles ) )
                    var_2.angles = ( 0, 0, 0 );

                self.origin_ent = spawn( "_encstr_93DC0DCD1B272D3847AF5BED23B2C6", var_2.origin );
                self.origin_ent.angles = var_2.angles;
                self.origin_ent setmodel( "_encstr_8CB40B4BB398B1C0A81FDF6BEA" );
                self.origin_ent linkto( self );
                break;
            default:
                break;
        }
    }

    var_4 = getentarray( self.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

    foreach ( var_2 in var_4 )
    {
        if ( !isdefined( var_2.script_noteworthy ) )
            continue;

        switch ( var_2.script_noteworthy )
        {
            case "_encstr_9D3C1113F69BA12C1328F7EF50CBCF5A7B801C":
                var_2 enablelinkto();
                var_2 linkto( self );
            case "_encstr_A1A60CF053CDA7B3E30FF72FA7C3":
                var_2 script_mover_parse_targets();
                thread script_mover_use_trigger( var_2 );
                self.use_triggers[self.use_triggers.size] = var_2;
                break;
            case "_encstr_AFAD05417C7663":
                var_2 linkto( self );
                self.linked_ents[self.linked_ents.size] = var_2;
                break;
            default:
                break;
        }
    }

    thread script_mover_parse_targets();
    thread script_mover_init_move_parameters();
    thread script_mover_save_default_move_parameters();
    thread script_mover_apply_move_parameters( self );
    thread script_mover_move_to_target();

    foreach ( var_8 in self.use_triggers )
        script_mover_set_usable( var_8, 1 );
}

script_mover_use_trigger( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        var_0 waittill( "_encstr_8B5C081B58E0B7A213E6" );

        if ( var_0.goals.size > 0 )
        {
            self notify( "_encstr_B854093759BBD70EB047D0" );
            thread script_mover_move_to_target( var_0 );
            continue;
        }

        self notify( "_encstr_8B5C081B58E0B7A213E6" );
    }
}

script_mover_move_to_named_goal( var_0 )
{
    if ( isdefined( level.script_mover_named_goals[var_0] ) )
    {
        self notify( "_encstr_B854093759BBD70EB047D0" );
        self.goals = [ level.script_mover_named_goals[var_0] ];
        thread script_mover_move_to_target();
    }
}

anglesclamp180( var_0 )
{
    return ( angleclamp180( var_0[0] ), angleclamp180( var_0[1] ), angleclamp180( var_0[2] ) );
}

script_mover_parse_targets()
{
    if ( isdefined( self.parsed ) && self.parsed )
        return;

    self.parsed = 1;
    self.goals = [];
    self.movers = [];
    self.level_notify = [];
    var_0 = [];
    var_1 = [];

    if ( isdefined( self.target ) )
    {
        var_0 = scripts\engine\utility::getstructarray( self.target, "_encstr_B8CE0BE43FC317DF690862BA48" );
        var_1 = getentarray( self.target, "_encstr_B8CE0BE43FC317DF690862BA48" );
    }

    for ( var_2 = 0; var_2 < var_0.size; var_2++ )
    {
        var_3 = var_0[var_2];

        if ( !isdefined( var_3.script_noteworthy ) )
            var_3.script_noteworthy = "_encstr_AA7205F03A9609";

        switch ( var_3.script_noteworthy )
        {
            case "_encstr_A3C407D2ECCDB79C56":
                if ( isdefined( var_3.target ) )
                {
                    var_4 = scripts\engine\utility::getstructarray( var_3.target, "_encstr_B8CE0BE43FC317DF690862BA48" );

                    foreach ( var_6 in var_4 )
                        var_0[var_0.size] = var_6;
                }

                break;
            case "_encstr_AA7205F03A9609":
                var_3 script_mover_init_move_parameters();
                var_3 script_mover_parse_targets();
                self.goals[self.goals.size] = var_3;

                if ( isdefined( var_3.params["_encstr_81BA051A9AA88B"] ) )
                    level.script_mover_named_goals[var_3.params["_encstr_81BA051A9AA88B"]] = var_3;

                break;
            case "_encstr_A69A0D1B593B59C6AFE6B7A34B99E5":
                if ( isdefined( var_3.script_parameters ) )
                    self.level_notify[self.level_notify.size] = var_3;

                break;
            default:
                break;
        }
    }

    foreach ( var_9 in var_1 )
    {
        if ( var_9 script_mover_is_script_mover() )
        {
            self.movers[self.movers.size] = var_9;
            continue;
        }

        if ( !isdefined( var_9.script_noteworthy ) )
            continue;

        var_10 = strtok( var_9.script_noteworthy, "_encstr_984C028E" );

        if ( var_10.size != 3 || var_10[1] != "_encstr_9707035F3B" )
            continue;

        switch ( var_10[0] )
        {
            case "_encstr_8C5F070FA5C14A5489":
                thread script_mover_call_func_on_notify( var_9, ::delete, var_10[2] );
                break;
            case "_encstr_BECC05FC5321BA":
                thread script_mover_call_func_on_notify( var_9, ::hide, var_10[2] );
                break;
            case "_encstr_B7180526C81F4B":
                var_9 hide();
                thread script_mover_call_func_on_notify( var_9, ::show, var_10[2] );
                break;
            case "_encstr_BD740CB12A0C68FCDF6334186AB7":
            case "_encstr_BD740CB12A0C68FCDF6330186AB7":
                thread script_mover_func_on_notify( var_9, scripts\engine\utility::trigger_off, var_10[2] );
                break;
            case "_encstr_A29D0C23F0B387C7F9761B2880C3":
            case "_encstr_A29D0C23F0B387C7F9763B2880C3":
                var_9 scripts\engine\utility::trigger_off();
                thread script_mover_func_on_notify( var_9, scripts\engine\utility::trigger_on, var_10[2] );
                break;
            default:
                break;
        }
    }
}

script_mover_func_on_notify( var_0, var_1, var_2 )
{
    self endon( "_encstr_A3750609A5E61883" );
    var_0 endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        self waittill( var_2 );
        var_0 [[ var_1 ]]();
    }
}

script_mover_call_func_on_notify( var_0, var_1, var_2 )
{
    self endon( "_encstr_A3750609A5E61883" );
    var_0 endon( "_encstr_A3750609A5E61883" );

    for (;;)
    {
        self waittill( var_2 );
        var_0 call [[ var_1 ]]();
    }
}

script_mover_trigger_on()
{
    scripts\engine\utility::trigger_on();
}

script_mover_move_to_target( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_B854093759BBD70EB047D0" );

    if ( !isdefined( var_0 ) )
        var_0 = self;

    while ( var_0.goals.size != 0 )
    {
        var_1 = scripts\engine\utility::random( var_0.goals );
        var_2 = self;
        var_2 script_mover_apply_move_parameters( var_1 );

        if ( isdefined( var_2.params["_encstr_AF1A0B356DBB21E3C15B6848F2"] ) )
            level waittill( var_2.params["_encstr_AF1A0B356DBB21E3C15B6848F2"] );

        if ( isdefined( var_2.params["_encstr_A95E1346AC8D162FF5A3A5C663FA1D9CA57676ACE4"] ) && var_2.params["_encstr_A95E1346AC8D162FF5A3A5C663FA1D9CA57676ACE4"] )
            self waittill( "_encstr_8B5C081B58E0B7A213E6" );

        if ( var_2.params["_encstr_941A0B3AD14907D87179F1CD63"] > 0 )
            wait( var_2.params["_encstr_941A0B3AD14907D87179F1CD63"] );

        var_3 = var_2.params["_encstr_8BA50AD6BDD92BBEE896B5AC"];
        var_4 = var_2.params["_encstr_8B8B0B1372F7EF449F4B0190AD"];
        var_5 = var_2.params["_encstr_88210BA3258223F2298B0A559D"];
        var_6 = 0;
        var_7 = 0;
        var_8 = transformmove( var_1.origin, var_1.angles, self.origin_ent.origin, self.origin_ent.angles, self.origin, self.angles );

        if ( var_2.origin != var_1.origin )
        {
            if ( isdefined( var_2.params["_encstr_AA4B0B610DB31B26BB0390983B"] ) )
            {
                var_9 = distance( var_2.origin, var_1.origin );
                var_3 = var_9 / var_2.params["_encstr_AA4B0B610DB31B26BB0390983B"];
            }

            if ( isdefined( var_2.params["_encstr_AA180BC93E8BC0D90163E5CB9F"] ) )
                var_4 = var_2.params["_encstr_AA180BC93E8BC0D90163E5CB9F"] * var_3;

            if ( isdefined( var_2.params["_encstr_A88C0B0FB90875CAA8CD33772F"] ) )
                var_5 = var_2.params["_encstr_A88C0B0FB90875CAA8CD33772F"] * var_3;

            var_2 moveto( var_8["_encstr_88FE07B07AAFE1C38D"], var_3, var_4, var_5 );

            foreach ( var_11 in var_1.level_notify )
                thread script_mover_run_notify( var_11.origin, var_11.script_parameters, self.origin, var_1.origin );

            var_6 = 1;
        }

        if ( anglesclamp180( var_8["_encstr_9B6107C2DC3B63B2E6"] ) != anglesclamp180( var_2.angles ) )
        {
            var_2 rotateto( var_8["_encstr_9B6107C2DC3B63B2E6"], var_3, var_4, var_5 );
            var_7 = 1;
        }

        foreach ( var_14 in var_2.movers )
            var_14 notify( "_encstr_8B5C081B58E0B7A213E6" );

        var_0 notify( "_encstr_AB8307322B8358E48E" );
        var_2 script_mover_allow_usable( 0 );
        self.moving = 1;

        if ( isdefined( var_2.params["_encstr_B36C117F17FC929F1898F5FF76E8EE1AD6AB83"] ) && var_2.params["_encstr_B36C117F17FC929F1898F5FF76E8EE1AD6AB83"] + var_3 > 0 )
            wait( var_2.params["_encstr_B36C117F17FC929F1898F5FF76E8EE1AD6AB83"] + var_3 );
        else if ( var_6 )
            self waittill( "_encstr_AD4209812FB3DDC4B7BD8F" );
        else if ( var_7 )
            self waittill( "_encstr_9E640BDA7708F6630531322A79" );
        else
            wait( var_3 );

        self.moving = 0;
        self notify( "_encstr_A824091DA8F025C985EDBB" );
        var_1 notify( "_encstr_A99B0766C0C031253F" );

        if ( isdefined( var_2.params["_encstr_976106CDEDB19623"] ) )
        {
            if ( var_2.params["_encstr_976106CDEDB19623"] )
                var_2 solid();
            else
                var_2 notsolid();
        }

        foreach ( var_14 in var_1.movers )
            var_14 notify( "_encstr_8B5C081B58E0B7A213E6" );

        if ( isdefined( var_2.params["_encstr_B8BA0ABB0B5A47EB8EB4B163"] ) )
            level waittill( var_2.params["_encstr_B8BA0ABB0B5A47EB8EB4B163"] );

        if ( var_2.params["_encstr_B3BA0AEE2CA5A3BE1D5A6B56"] > 0 )
            wait( var_2.params["_encstr_B3BA0AEE2CA5A3BE1D5A6B56"] );

        var_2 script_mover_allow_usable( 1 );
        var_0 = var_1;
    }
}

script_mover_run_notify( var_0, var_1, var_2, var_3 )
{
    self endon( "_encstr_A824091DA8F025C985EDBB" );
    var_4 = self;
    var_5 = vectornormalize( var_3 - var_2 );

    for (;;)
    {
        var_6 = vectornormalize( var_0 - var_4.origin );

        if ( vectordot( var_5, var_6 ) <= 0 )
            break;

        wait 0.05;
    }

    level notify( var_1 );
}

script_mover_init_move_parameters()
{
    self.params = [];

    if ( !isdefined( self.angles ) )
        self.angles = ( 0, 0, 0 );

    self.angles = anglesclamp180( self.angles );
    script_mover_parse_move_parameters( self.script_parameters );
}

script_mover_parse_move_parameters( var_0 )
{
    if ( !isdefined( var_0 ) )
        var_0 = "_encstr_A40101";

    var_1 = strtok( var_0, "_encstr_B14C0267" );

    foreach ( var_3 in var_1 )
    {
        var_4 = strtok( var_3, "_encstr_974C02F6" );

        if ( var_4.size != 2 )
            continue;

        if ( var_4[1] == "_encstr_A2500A039865CFC728B5151C" || var_4[1] == "_encstr_AA1608C07786F13312D3" )
        {
            self.params[var_4[0]] = undefined;
            continue;
        }

        switch ( var_4[0] )
        {
            case "_encstr_B36C117F17FC929F1898F5FF76E8EE1AD6AB83":
            case "_encstr_A88C0B0FB90875CAA8CD33772F":
            case "_encstr_AA180BC93E8BC0D90163E5CB9F":
            case "_encstr_AA4B0B610DB31B26BB0390983B":
            case "_encstr_941A0B3AD14907D87179F1CD63":
            case "_encstr_B3BA0AEE2CA5A3BE1D5A6B56":
            case "_encstr_88210BA3258223F2298B0A559D":
            case "_encstr_8B8B0B1372F7EF449F4B0190AD":
            case "_encstr_8BA50AD6BDD92BBEE896B5AC":
                self.params[var_4[0]] = script_mover_parse_range( var_4[1] );
                break;
            case "_encstr_B8BA0ABB0B5A47EB8EB4B163":
            case "_encstr_AF1A0B356DBB21E3C15B6848F2":
            case "_encstr_AFDB0BA8FCC60816F37313154F":
            case "_encstr_81BA051A9AA88B":
                self.params[var_4[0]] = var_4[1];
                break;
            case "_encstr_A95E1346AC8D162FF5A3A5C663FA1D9CA57676ACE4":
            case "_encstr_BA8607FB63D77E281F":
            case "_encstr_976106CDEDB19623":
                self.params[var_4[0]] = int( var_4[1] );
                break;
            case "_encstr_AAB20EABF1A607BA080FC8A12DD88527":
                var_5 = var_4[1];
                var_6 = level.script_mover_parameters[var_5];

                if ( isdefined( var_6 ) )
                    script_mover_parse_move_parameters( var_6 );

                break;
            default:
                break;
        }
    }
}

script_mover_parse_range( var_0 )
{
    var_1 = 0;
    var_2 = strtok( var_0, "_encstr_B44C02C9" );

    if ( var_2.size == 1 )
        var_1 = float( var_2[0] );
    else if ( var_2.size == 2 )
    {
        var_3 = float( var_2[0] );
        var_4 = float( var_2[1] );

        if ( var_3 >= var_4 )
            var_1 = var_3;
        else
            var_1 = randomfloatrange( var_3, var_4 );
    }

    return var_1;
}

script_mover_apply_move_parameters( var_0 )
{
    foreach ( var_3, var_2 in var_0.params )
        script_mover_set_param( var_3, var_2 );

    script_mover_set_defaults();
}

script_mover_set_param( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( var_0 == "_encstr_BA8607FB63D77E281F" && isdefined( var_1 ) )
        script_mover_set_usable( self, var_1 );

    self.params[var_0] = var_1;
}

script_mover_allow_usable( var_0 )
{
    if ( self.params["_encstr_BA8607FB63D77E281F"] )
        script_mover_set_usable( self, var_0 );

    foreach ( var_2 in self.use_triggers )
        script_mover_set_usable( var_2, var_0 );
}

script_mover_set_usable( var_0, var_1 )
{
    if ( var_1 )
    {
        var_0 makeusable();
        var_0 setcursorhint( "_encstr_939A0CEC70DBF521459F5B47F73D" );
        var_0 sethintstring( level.script_mover_hintstrings[self.params["_encstr_AFDB0BA8FCC60816F37313154F"]] );
    }
    else
        var_0 makeunusable();
}

script_mover_save_default_move_parameters()
{
    self.params_default = [];

    foreach ( var_2, var_1 in self.params )
        self.params_default[var_2] = var_1;
}

script_mover_set_defaults()
{
    foreach ( var_2, var_1 in level.script_mover_defaults )
    {
        if ( !isdefined( self.params[var_2] ) )
            script_mover_set_param( var_2, var_1 );
    }

    if ( isdefined( self.params_default ) )
    {
        foreach ( var_2, var_1 in self.params_default )
        {
            if ( !isdefined( self.params[var_2] ) )
                script_mover_set_param( var_2, var_1 );
        }
    }
}

init()
{
    level thread script_mover_connect_watch();
    level thread script_mover_agent_spawn_watch();
}

script_mover_connect_watch()
{
    for (;;)
    {
        level waittill( "_encstr_87940A7F075A88E8ABD37951", var_0 );
        var_0 thread player_unresolved_collision_watch();
    }
}

script_mover_agent_spawn_watch()
{
    for (;;)
    {
        level waittill( "_encstr_B4F40EAE0A02FFC06D9301F877851821", var_0 );
        var_0 thread player_unresolved_collision_watch();
    }
}

player_update_unresolved_collision( var_0, var_1 )
{
    self.unresolved_collision_count++;
    thread clear_unresolved_collision_count_next_frame();
    var_2 = 3;

    if ( isdefined( var_0 ) && isdefined( var_0.unresolved_collision_notify_min ) )
        var_2 = var_0.unresolved_collision_notify_min;

    if ( self.unresolved_collision_count >= var_2 )
    {
        var_3 = "_encstr_A2D31C7FBB382B6D9810ED7349F8F0F0B7712B2F9FD3A22EC111E268C9AA" + self getentitynumber() + "_encstr_8207039EB7" + self.origin;

        if ( isdefined( var_0 ) )
        {
            var_3 = var_3 + ( "_encstr_88FD061765E20957" + var_0 getentitynumber() + "_encstr_8207039EB7" + var_0.origin );

            if ( isdefined( var_0.unresolved_collision_func ) )
            {
                var_3 = var_3 + "_encstr_8C35069FF647585F";
                var_0 [[ var_0.unresolved_collision_func ]]( self, var_1 );
            }
            else if ( isdefined( var_0.unresolved_collision_kill ) && var_0.unresolved_collision_kill )
            {
                var_3 = var_3 + "_encstr_9C0B0E82520B25727A81B2C8C5DF5FB0";
                var_0 unresolved_collision_owner_damage( self );
            }
            else
            {
                var_4 = isdefined( self.waittill_player_opens_scavenger_cache ) && gettime() - self.waittill_player_opens_scavenger_cache <= 250;

                if ( var_4 || var_0 scripts\cp_mp\vehicles\vehicle::isvehicle() && !scripts\cp_mp\vehicles\vehicle::_id_1418B( var_0, self ) )
                {
                    var_3 = var_3 + "_encstr_8716148073AC0B395637A3FA9BB7192B109958C69BCA";
                    var_0 unresolved_collision_nearest_node( self, 0, var_0 );
                }
                else
                {
                    var_5 = player_should_be_killed_by_mover( var_0 );
                    var_3 = var_3 + ( "_encstr_AF5F0F2A7515B2D2B0FB9351B0080C0A5F" + var_5 );
                    var_0 unresolved_collision_nearest_node( self, var_5, var_0 );
                }
            }
        }
        else
        {
            var_3 = var_3 + "_encstr_AB8C1022C8E2886F5B80A79FFC0B029571FA";
            var_5 = player_should_be_killed_by_mover( var_0 );
            var_3 = var_3 + ( "_encstr_AF5F0F2A7515B2D2B0FB9351B0080C0A5F" + var_5 );
            unresolved_collision_nearest_node( self, var_5 );
        }

        self.unresolved_collision_count = 0;
    }
}

player_should_be_killed_by_mover( var_0 )
{
    if ( isdefined( var_0 ) && istrue( var_0.moverdoesnotkill ) )
        return 0;

    return 1;
}

player_unresolved_collision_watch()
{
    if ( isagent( self ) )
        self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    else
        self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    self.unresolved_collision_count = 0;

    for (;;)
    {
        self waittill( "_encstr_B694154B68FD4FDFE031769DDD0E571519D032A3C8AFC5", var_0, var_1 );

        if ( _id_124B5( var_0 ) )
            continue;

        player_update_unresolved_collision( var_0, var_1 );
    }
}

_id_124B5( var_0 )
{
    var_1 = 0;

    if ( isdefined( var_0.streakinfo ) && var_0.streakinfo.streakname == "_encstr_B87010AA3BE80F83CFA7075A6D614F65EDBB" )
        var_1 = 1;

    if ( istrue( var_0.play_incoming_rpg_vo ) )
        var_1 = 1;

    if ( isdefined( var_0.get_teaminquiry_alias ) )
        var_1 = 1;

    return var_1;
}

clear_unresolved_collision_count_next_frame()
{
    self endon( "_encstr_B694154B68FD4FDFE031769DDD0E571519D032A3C8AFC5" );
    waitframe();

    if ( isdefined( self ) )
        self.unresolved_collision_count = 0;
}

unresolved_collision_owner_damage( var_0 )
{
    var_1 = self;

    if ( !isdefined( var_1.owner ) )
    {
        var_0 mover_suicide();
        return;
    }

    var_2 = 0;

    if ( level.teambased )
    {
        if ( isdefined( var_1.owner.team ) && var_1.owner.team != var_0.team )
            var_2 = 1;
    }
    else if ( var_0 != var_1.owner )
        var_2 = 1;

    if ( !var_2 )
    {
        var_0 mover_suicide();
        return;
    }

    var_3 = 1000;

    if ( isdefined( var_1.unresolved_collision_damage ) )
        var_3 = var_1.unresolved_collision_damage;

    var_0 dodamage( var_3, var_1.origin, var_1.owner, var_1, "_encstr_8A4E0A41A7FB067762A99949" );
}

unresolved_collision_nearest_node( var_0, var_1, var_2 )
{
    if ( isdefined( level.override_unresolved_collision ) )
    {
        self [[ level.override_unresolved_collision ]]( var_0, var_1 );
        return;
    }

    if ( isdefined( level.hostage_callout_saveme_time ) )
    {
        var_3 = self [[ level.hostage_callout_saveme_time ]]( var_0, var_1, var_2 );

        if ( istrue( var_3 ) )
            return;
    }

    if ( isdefined( var_2 ) )
    {
        if ( scripts\cp_mp\utility\game_utility::islargemap() )
        {
            var_1 = 1;

            if ( var_2 scripts\cp_mp\vehicles\vehicle::isvehicle() )
            {
                var_4 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getdriverseat( var_2, 1 );

                if ( isdefined( var_4 ) )
                {
                    var_5 = scripts\cp_mp\vehicles\vehicle_occupancy::vehicle_occupancy_getexitpositionandangles( var_2, var_0, var_4, 1 );

                    if ( isdefined( var_5 ) )
                    {
                        var_0 setorigin( var_5[0] );
                        return;
                    }
                }
            }
            else if ( scripts\mp\weapons::isplantedequipment( var_2 ) )
            {
                var_2 scripts\mp\weapons::deleteexplosive();
                return;
            }
            else if ( isdefined( var_2.cover ) )
            {
                var_2.cover scripts\mp\equipment\tactical_cover::tac_cover_destroy( undefined, 0 );
                return;
            }
            else if ( isdefined( level._id_11C87 ) && [[ level._id_11C87 ]]( var_0, var_2 ) )
                return;
        }
        else
        {
            var_6 = self.unresolved_collision_nodes;
            var_7 = undefined;

            if ( isdefined( var_6 ) )
                var_6 = sortbydistance( var_6, var_0.origin );
            else
                var_6 = getnodesinradiussorted( var_0.origin, 500, 0, 128, "_encstr_8B0D0583925380" );

            var_8 = ( 0, 0, -100 );
            var_0 cancelmantle();
            var_0 dontinterpolate();
            var_9 = get_mover_ents( var_2 );
            var_10 = scripts\engine\utility::array_combine( var_9, level.characters );

            for ( var_11 = 0; var_11 < var_6.size; var_11++ )
            {
                if ( var_11 == 3 )
                    break;

                var_12 = var_6[var_11];
                var_13 = var_12.origin + ( 0, 0, 10 );
                var_14 = scripts\engine\trace::create_contents( 0, 1, 1, 1, 1, 1 );
                var_15 = scripts\engine\trace::ray_trace( var_0 gettagorigin( "_encstr_A93008E0529FF7E1B73D" ), var_13, var_10, var_14 );

                if ( isdefined( var_15["_encstr_871C08D169E3584B33BA"] ) && var_15["_encstr_871C08D169E3584B33BA"] != "_encstr_B94B0D11A9A3180B73FA4E506233CD" )
                    continue;

                if ( !canspawn( var_13 ) )
                    continue;

                if ( positionwouldtelefrag( var_13 ) )
                    continue;

                if ( var_0 getstance() == "_encstr_9F24062875D5FD98" )
                    var_0 setstance( "_encstr_9C3D071B63023B26C3" );

                var_0 setorigin( var_13 );
                return;
            }
        }
    }

    if ( !isdefined( var_1 ) )
        var_1 = 1;

    if ( var_1 )
        var_0 mover_suicide();
}

get_mover_ents( var_0 )
{
    var_1 = [];
    var_1[var_1.size] = var_0;
    var_2 = var_0 getlinkedparent();
    var_3 = var_0 getlinkedchildren( 1 );

    if ( isdefined( var_2 ) )
        var_1[var_1.size] = var_2;

    if ( isdefined( var_3 ) )
    {
        foreach ( var_5 in var_3 )
            var_1[var_1.size] = var_5;
    }

    return var_1;
}

unresolved_collision_void( var_0, var_1 )
{

}

mover_suicide()
{
    scripts\mp\utility\damage::_suicide();
}

player_pushed_kill( var_0 )
{
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_9C0218E3CB37BF796214B39B05CAB107E71318A9B29F7AF0BDFC" );

    for (;;)
    {
        self waittill( "_encstr_B3410EBBA4D980B22B89A063F7E84B38", var_1, var_2 );

        if ( isplayer( var_1 ) || isagent( var_1 ) )
        {
            var_3 = length( var_2 );

            if ( var_3 >= var_0 )
                unresolved_collision_owner_damage( var_1 );
        }
    }
}

stop_player_pushed_kill()
{
    self notify( "_encstr_9C0218E3CB37BF796214B39B05CAB107E71318A9B29F7AF0BDFC" );
}

script_mover_get_top_parent()
{
    var_0 = self getlinkedparent();

    for ( var_1 = var_0; isdefined( var_1 ); var_1 = var_1 getlinkedparent() )
        var_0 = var_1;

    return var_0;
}

script_mover_start_use( var_0 )
{
    var_1 = var_0 script_mover_get_top_parent();

    if ( isdefined( var_1 ) )
        var_1.startuseorigin = var_1.origin;

    self.startusemover = self getmovingplatformparent();

    if ( isdefined( self.startusemover ) )
    {
        var_2 = self.startusemover script_mover_get_top_parent();

        if ( isdefined( var_2 ) )
            self.startusemover = var_2;

        self.startusemover.startuseorigin = self.startusemover.origin;
    }
}

script_mover_has_parent_moved( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    return lengthsquared( var_0.origin - var_0.startuseorigin ) > 0.001;
}

script_mover_use_can_link( var_0 )
{
    if ( !isplayer( self ) )
        return 1;

    if ( !isdefined( var_0 ) )
        return 0;

    var_1 = var_0 script_mover_get_top_parent();
    var_2 = self.startusemover;

    if ( !isdefined( var_1 ) && !isdefined( var_2 ) )
        return 1;

    if ( isdefined( var_1 ) && isdefined( var_2 ) && var_1 == var_2 )
        return 1;

    if ( script_mover_has_parent_moved( var_1 ) )
        return 0;

    if ( script_mover_has_parent_moved( var_2 ) )
        return 0;

    return 1;
}

script_mover_link_to_use_object( var_0 )
{
    if ( isplayer( var_0 ) )
        var_0 script_mover_start_use( self );

    var_0 allowmovement( 0 );
    var_0 allowjump( 0 );
}

script_mover_unlink_from_use_object( var_0 )
{
    var_0 allowmovement( 1 );
    var_0 allowjump( 1 );
}

notify_moving_platform_invalid()
{
    var_0 = self getlinkedchildren( 0 );

    if ( !isdefined( var_0 ) )
        return;

    foreach ( var_2 in var_0 )
    {
        if ( isdefined( var_2.no_moving_platfrom_unlink ) && var_2.no_moving_platfrom_unlink )
            continue;

        var_2 unlink();
        var_2 notify( "_encstr_9F080FC2986CDF4528A12F084318CF1B95", self );
    }
}

process_moving_platform_death( var_0, var_1 )
{
    if ( isdefined( var_1 ) && isdefined( var_1.no_moving_platfrom_death ) && var_1.no_moving_platfrom_death )
        return;

    if ( isdefined( var_0.playdeathfx ) )
        playfx( scripts\engine\utility::getfx( "_encstr_8736160B5AE48CC9DE83BE36270B3ACAFA32569BE827DBF2" ), self.origin );

    if ( isdefined( var_0.deathoverridecallback ) )
    {
        var_0.lasttouchedplatform = var_1;
        self thread [[ var_0.deathoverridecallback ]]( var_0 );
    }
    else
        self delete();
}

handle_moving_platform_touch( var_0 )
{
    self notify( "_encstr_AD831DA8FEC68899E2C71B170B4AD0C85F1290012336184E5ADF510F3F322B" );
    self endon( "_encstr_AD831DA8FEC68899E2C71B170B4AD0C85F1290012336184E5ADF510F3F322B" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_A2AD1FB947DB83BED0B03732635AB9D9F5D67BD95ACDCEAF0E1B853A66DE4E5B6E" );

    if ( isdefined( var_0.endonstring ) )
        self endon( var_0.endonstring );

    for (;;)
    {
        self waittill( "_encstr_ADEC120BD083C04B706DA138630950D0175FFB83", var_1 );

        if ( isdefined( var_0.validateaccuratetouching ) && var_0.validateaccuratetouching )
        {
            if ( !self istouching( var_1 ) )
            {
                waitframe();
                continue;
            }
        }

        if ( isdefined( var_0._id_123B4 ) && var_0._id_123B4 )
        {
            if ( _calloutmarkerping_handleluinotify_enemyrepinged::tugofwar_tank( var_1 ) )
            {
                waitframe();
                continue;
            }
        }

        if ( !istrue( var_0._id_133CA ) )
            thread process_moving_platform_death( var_0, var_1 );

        self._id_13BFF = 1;
        self.wam_number_of_failures = var_1;
        thread _id_123B9();
        break;
    }
}

_id_123B9()
{
    self endon( "_encstr_A3750609A5E61883" );
    self.wam_number_of_failures waittill( "_encstr_A3750609A5E61883" );
    self.wam_number_of_failures = undefined;
}

handle_moving_platform_invalid( var_0 )
{
    self notify( "_encstr_986B1F9A10C50FA3A1A86D97D4C863177F30628220BD858398B0619EEC9113DCA1" );
    self endon( "_encstr_986B1F9A10C50FA3A1A86D97D4C863177F30628220BD858398B0619EEC9113DCA1" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_A2AD1FB947DB83BED0B03732635AB9D9F5D67BD95ACDCEAF0E1B853A66DE4E5B6E" );

    if ( isdefined( var_0.endonstring ) )
        self endon( var_0.endonstring );

    self waittill( "_encstr_9F080FC2986CDF4528A12F084318CF1B95", var_1 );

    if ( isdefined( var_0.invalidparentoverridecallback ) )
        self thread [[ var_0.invalidparentoverridecallback ]]( var_0 );
    else
        thread process_moving_platform_death( var_0, var_1 );
}

handle_moving_platforms( var_0 )
{
    self notify( "_encstr_B75E18A8B21BADF8CFCF535F0E3410E4373BA0314B635040E5DB" );
    self endon( "_encstr_B75E18A8B21BADF8CFCF535F0E3410E4373BA0314B635040E5DB" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_A3750609A5E61883" );
    self endon( "_encstr_A2AD1FB947DB83BED0B03732635AB9D9F5D67BD95ACDCEAF0E1B853A66DE4E5B6E" );

    if ( !isdefined( var_0 ) )
        var_0 = spawnstruct();

    if ( isdefined( var_0.endonstring ) )
        self endon( var_0.endonstring );

    if ( isdefined( var_0.linkparent ) )
    {
        var_1 = self getlinkedparent();

        if ( !isdefined( var_1 ) || var_1 != var_0.linkparent )
        {
            if ( isdefined( var_0.x1givelaststandoverride ) )
                self linkto( var_0.linkparent, "_encstr_A40101", var_0.x1givelaststandoverride, var_0.angleoffset );
            else
                self linkto( var_0.linkparent );
        }
    }

    thread handle_moving_platform_touch( var_0 );
    thread handle_moving_platform_invalid( var_0 );
}

stop_handling_moving_platforms()
{
    self notify( "_encstr_A2AD1FB947DB83BED0B03732635AB9D9F5D67BD95ACDCEAF0E1B853A66DE4E5B6E" );
}

moving_platform_empty_func( var_0 )
{

}
