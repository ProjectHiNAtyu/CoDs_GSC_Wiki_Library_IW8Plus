// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{

}

add_to_lightbar_stack( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !isdefined( var_2 ) )
        var_2 = 0;

    if ( var_4 == 0 )
        var_4 = undefined;

    if ( !isdefined( self.lightbarstructs ) || self.lightbarstructs.size == 0 )
    {
        var_6 = [];
        var_6[0] = spawnstruct();
        self.lightbarstructs = var_6;
    }
    else
    {
        var_7 = scripts\engine\utility::array_removeundefined( self.lightbarstructs );
        self.lightbarstructs = var_7;
        self.lightbarstructs[self.lightbarstructs.size] = spawnstruct();
    }

    self.lightbarstructs[self.lightbarstructs.size - 1].lbcolor = var_0;
    self.lightbarstructs[self.lightbarstructs.size - 1].pulsetime = var_1;
    self.lightbarstructs[self.lightbarstructs.size - 1].priority = var_2;
    self.lightbarstructs[self.lightbarstructs.size - 1].endondeath = var_3;
    self.lightbarstructs[self.lightbarstructs.size - 1].timeplacedinstack = gettime();
    self.lightbarstructs[self.lightbarstructs.size - 1].executing = 0;
    self.lightbarstructs[self.lightbarstructs.size - 1].endonnotification = var_5;

    if ( isdefined( var_4 ) )
        self.lightbarstructs[self.lightbarstructs.size - 1].time = var_4 * 1000;
    else
        self.lightbarstructs[self.lightbarstructs.size - 1].time = undefined;

    if ( isdefined( var_3 ) && var_3 )
        thread endinactiveinstructionondeath( self.lightbarstructs[self.lightbarstructs.size - 1] );

    if ( isdefined( var_5 ) )
        thread endinstructiononnotification( var_5, self.lightbarstructs[self.lightbarstructs.size - 1] );

    thread managelightbarstack();
}

managelightbarstack()
{
    self notify( "_encstr_ABAE1461D83A27D9F7E872C8847330C153730369C86A" );
    self endon( "_encstr_ABAE1461D83A27D9F7E872C8847330C153730369C86A" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    for (;;)
    {
        wait 0.05;

        if ( self.lightbarstructs.size > 1 )
        {
            var_0 = removetimedoutinstructions( self.lightbarstructs );
            var_1 = scripts\engine\utility::array_sort_with_func( var_0, ::is_higher_priority );
        }
        else
            var_1 = self.lightbarstructs;

        if ( var_1.size == 0 )
            return;

        self.lightbarstructs = var_1;
        var_2 = var_1[0];

        if ( var_2.executing )
            continue;

        var_3 = !isdefined( self.lightbarstructs[self.lightbarstructs.size - 1].time );
        var_4 = 0;

        if ( !var_3 )
        {
            var_5 = gettime() - var_2.timeplacedinstack;
            var_4 = var_2.time - var_5;
            var_4 = var_4 / 1000;

            if ( var_4 <= 0 )
            {
                self.lightbarstructs[0] notify( "_encstr_8CBD085AE340F5EB85B1" );
                self.lightbarstructs[0] = undefined;
                cleanlbarray();
                managelightbarstack();
            }
        }

        if ( var_3 )
        {
            if ( var_2.endondeath )
            {
                var_2 notify( "_encstr_B2100A0BB8E7A00D633A6871" );
                var_2.executing = 1;
                thread set_lightbar_perm_endon_death( var_2.lbcolor, var_2.pulsetime );
            }
            else
                thread set_lightbar_perm( var_2.lbcolor, var_2.pulsetime );

            continue;
        }

        if ( var_2.endondeath )
        {
            var_2 notify( "_encstr_B2100A0BB8E7A00D633A6871" );
            var_2.executing = 1;
            thread set_lightbar_for_time_endon_death( var_2.lbcolor, var_2.pulsetime, var_4 );
            continue;
        }

        thread set_lightbar_for_time( var_2.lbcolor, var_2.pulsetime, var_4 );
    }
}

cleanlbarray()
{
    var_0 = scripts\engine\utility::array_removeundefined( self.lightbarstructs );
    self.lightbarstructs = var_0;
}

removetimedoutinstructions( var_0 )
{
    var_1 = [];

    foreach ( var_3 in var_0 )
    {
        if ( !isdefined( var_3.time ) )
        {
            var_1[var_1.size] = var_3;
            continue;
        }

        var_4 = gettime() - var_3.timeplacedinstack;
        var_5 = var_3.time - var_4;
        var_5 = var_5 / 1000;

        if ( var_5 > 0 )
            var_1[var_1.size] = var_3;
    }

    return var_1;
}

is_higher_priority( var_0, var_1 )
{
    return var_0.priority > var_1.priority;
}

set_lightbar( var_0, var_1 )
{
    set_lightbar_pulse_time( var_1 );
    set_lightbar_color( var_0 );
    set_lightbar_on();
}

set_lightbar_for_time( var_0, var_1, var_2 )
{
    self notify( "_encstr_939B168BB23370B88CB71929DAF63038138A23B60B9F9138" );
    self endon( "_encstr_939B168BB23370B88CB71929DAF63038138A23B60B9F9138" );
    set_lightbar_pulse_time( var_1 );
    set_lightbar_color( var_0 );
    set_lightbar_on();
    wait( var_2 );

    if ( !isdefined( self ) )
        return;

    set_lightbar_off();
    self.lightbarstructs = undefined;
    cleanlbarray();
}

set_lightbar_perm( var_0, var_1 )
{
    self notify( "_encstr_9B650DE6CAA3FA36D27686E8310B9C" );
    self endon( "_encstr_9B650DE6CAA3FA36D27686E8310B9C" );
    set_lightbar_pulse_time( var_1 );
    set_lightbar_color( var_0 );
    set_lightbar_on();
}

set_lightbar_endon_death( var_0, var_1 )
{
    set_lightbar_pulse_time( var_1 );
    set_lightbar_color( var_0 );
    set_lightbar_on();
    thread turn_off_light_bar_on_death();
}

set_lightbar_for_time_endon_death( var_0, var_1, var_2 )
{
    self notify( "_encstr_9EA92203DDE3177DB360D20B50FBB25FD9B08AB7EDE807C73758BA0250CD214B112FF408" );
    self endon( "_encstr_9EA92203DDE3177DB360D20B50FBB25FD9B08AB7EDE807C73758BA0250CD214B112FF408" );
    set_lightbar_pulse_time( var_1 );
    set_lightbar_color( var_0 );
    set_lightbar_on();
    thread turn_off_light_bar_on_death();
    wait( var_2 );

    if ( !isdefined( self ) )
        return;

    set_lightbar_off();
    self.lightbarstructs[0] notify( "_encstr_8CBD085AE340F5EB85B1" );
    self.lightbarstructs[0] = undefined;
    cleanlbarray();
}

set_lightbar_perm_endon_death( var_0, var_1 )
{
    self notify( "_encstr_ABF7191F9261A9DCF16941134529EAD86FF33F571E6F74BBF9FD71" );
    self endon( "_encstr_ABF7191F9261A9DCF16941134529EAD86FF33F571E6F74BBF9FD71" );
    set_lightbar_pulse_time( var_1 );
    set_lightbar_color( var_0 );
    set_lightbar_on();
    thread turn_off_light_bar_on_death();
}

endinactiveinstructionondeath( var_0 )
{
    self notify( "_encstr_8C911E70BA47F3A8EF134DCBFE07B4756A834048C21BCBC0FB1758A5C53F5B21" );
    self endon( "_encstr_8C911E70BA47F3A8EF134DCBFE07B4756A834048C21BCBC0FB1758A5C53F5B21" );
    var_0 endon( "_encstr_B2100A0BB8E7A00D633A6871" );
    self waittill( "_encstr_A3750609A5E61883" );

    if ( !isdefined( self ) )
        return;

    if ( self.lightbarstructs.size == 0 )
        return;

    self.lightbarstructs[0] notify( "_encstr_8CBD085AE340F5EB85B1" );
    self.lightbarstructs[0] = undefined;
    cleanlbarray();
}

endinstructiononnotification( var_0, var_1 )
{
    var_1 endon( "_encstr_8CBD085AE340F5EB85B1" );

    if ( isarray( var_0 ) )
        var_2 = scripts\engine\utility::waittill_any_in_array_return( var_0 );
    else
        self waittill( var_0 );

    if ( !isdefined( self ) )
        return;

    for ( var_3 = 0; var_3 < self.lightbarstructs.size; var_3++ )
    {
        if ( var_1 == self.lightbarstructs[var_3] )
        {
            if ( var_1.executing )
                set_lightbar_off();

            self.lightbarstructs[var_3] = undefined;
            cleanlbarray();
            return;
        }
    }
}

turn_off_light_bar_on_death()
{
    self notify( "_encstr_A88A1C0BBB807EF9A0CD638F716BA2A018460ED6339117A28091976F3983" );
    self endon( "_encstr_A88A1C0BBB807EF9A0CD638F716BA2A018460ED6339117A28091976F3983" );
    self waittill( "_encstr_A3750609A5E61883" );

    if ( !isdefined( self ) )
        return;

    if ( self.lightbarstructs.size == 0 )
        return;

    set_lightbar_off();
    self.lightbarstructs[0] notify( "_encstr_8CBD085AE340F5EB85B1" );
    self.lightbarstructs[0] = undefined;
    cleanlbarray();
}

set_lightbar_color( var_0 )
{
    self setclientomnvar( "_encstr_B346093996F9CFE86C4760", var_0 );
}

set_lightbar_on()
{
    self setclientomnvar( "_encstr_8128125C13C789B7F6416F8F50016A375408E761", 1 );
}

set_lightbar_off()
{
    self setclientomnvar( "_encstr_8128125C13C789B7F6416F8F50016A375408E761", 0 );
}

set_lightbar_pulse_time( var_0 )
{
    self setclientomnvar( "_encstr_A9B50E1B26BE83BAD86E95F5D1B4B6CA", var_0 );
}
