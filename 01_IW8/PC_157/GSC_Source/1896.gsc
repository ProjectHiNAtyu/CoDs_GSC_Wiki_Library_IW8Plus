// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    if ( scripts\mp\utility\game::getgametype() == "_encstr_9507034B25" || istrue( game["_encstr_87010E111E3823354DC251C560F3ED0A"] ) )
    {
        level.potgenabled = 0;
        return;
    }

    if ( !isdefined( level.potgenabled ) || level.potgenabled )
        level.potgenabled = level.finalkillcamtype == 1;

    if ( !level.potgenabled )
        return;

    var_0 = spawnstruct();
    level.potgglobals = var_0;
    var_0.curpotgscene = undefined;
    var_0.systemfinalized = 0;
    var_0.entities = [];
    var_0.settings = [];
    var_0.settingtypes = [];
    var_0.nextsceneid = 0;
    var_0.lastarchivetime = -1;
    var_0.pendingarchiverequest = 0;
    loadeventtable();
    setdvarifuninitialized( "_encstr_8F1C19CB708377E1DBAE3B74809DB93CCBE00743E858A6292BB71E", 8000 );
    setdvarifuninitialized( "_encstr_971C19C1B73AD97D58D88E96DB73AF23AB9C85E85AF673D7DAB437", 3000 );
    setdvarifuninitialized( "_encstr_A140159FC77B410F2EEBF0F882425779D762AF1529EFA8", 1000 );
    setdvarifuninitialized( "_encstr_AAEB13C1DB3A767D329598AE9DEB85E48D345A3BCA", 1000 );
    setdvarifuninitialized( "_encstr_9E7E1583F8438479AFEFC0695B27A7F519698A60E89BFF", 420 );
    thread onplayerconnect();
    scripts\mp\utility\disconnect_event_aggregator::registerondisconnecteventcallback( ::onplayerdisconnect );
    scripts\mp\potg_events::init();
}

getminimumscorerequired()
{
    return getdvarint( "_encstr_9E7E1583F8438479AFEFC0695B27A7F519698A60E89BFF" );
}

getactionscenedurationmax()
{
    return getdvarint( "_encstr_8F1C19CB708377E1DBAE3B74809DB93CCBE00743E858A6292BB71E" );
}

getactionscenedurationmin()
{
    return getdvarint( "_encstr_971C19C1B73AD97D58D88E96DB73AF23AB9C85E85AF673D7DAB437" );
}

getscenebufferduration()
{
    return getdvarint( "_encstr_A140159FC77B410F2EEBF0F882425779D762AF1529EFA8" );
}

getwholescenedurationmin()
{
    return getactionscenedurationmin() + getscenebufferduration() * 2;
}

getwholescenedurationmax()
{
    return getactionscenedurationmax() + getscenebufferduration() * 2;
}

getminimumscorerequirednvidiahighlights()
{
    return getdvarint( "_encstr_87E3213BD005DF912083363FB5C1241B23894142F8545B1568F7381C67616A5F58437A" );
}

loadeventtable()
{
    var_0 = level.potgglobals;
    var_1 = 0;

    for (;;)
    {
        var_2 = tablelookupbyrow( "_encstr_8F6118D07BC64F08730FDF93261F48155F5329B92247A8B04AF6", var_1, 0 );

        if ( !isdefined( var_2 ) || var_2 == "_encstr_A40101" )
            break;

        var_0.eventtable[var_2] = [];
        var_3 = tablelookupbyrow( "_encstr_8F6118D07BC64F08730FDF93261F48155F5329B92247A8B04AF6", var_1, 1 );
        var_0.eventtable[var_2]["_encstr_93FB06DC6CBDE4CA"] = float( var_3 );
        var_4 = tablelookupbyrow( "_encstr_8F6118D07BC64F08730FDF93261F48155F5329B92247A8B04AF6", var_1, 2 );
        var_0.eventtable[var_2]["_encstr_AAFD068523233DDC"] = var_4 != "_encstr_A40101";
        var_1++;
    }
}

onplayerconnect()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        level waittill( "_encstr_87940A7F075A88E8ABD37951", var_0 );
        registerpotgentity( var_0 );
        var_0 thread updateplayerrecording();
    }
}

updateplayerrecording()
{
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    for (;;)
    {
        self waittill( "_encstr_9B6F0FDC8316DDE62B8CF507C616CB599C" );
        startrecording();
        self waittill( "_encstr_A3750609A5E61883" );

        if ( !istrue( self.fauxdead ) )
            self waittill( "_encstr_8A83154656853A0DAF32AC63B0F2D766B4E64B3734AC32" );

        stoprecording();
    }
}

onplayerdisconnect( var_0 )
{
    deregisterpotgentity( var_0 );
}

onroundended( var_0 )
{
    if ( !istrue( level.potgenabled ) )
        return;

    scripts\mp\potg_events::onroundended( var_0 );
    waitframe();
    thread waitforrecordingandfinalize();
}

waitforrecordingandfinalize()
{
    wait( getscenebufferduration() / 1000.0 );
    waitframe();

    if ( !shouldskippotg() )
        finalizepotgsystem();
}

shouldskippotg()
{
    var_0 = getcurpotgscene();

    if ( isdefined( var_0 ) && isdefined( var_0.primaryentity ) )
        return var_0.score < getminimumscorerequired();
    else
        return 1;
}

finalizepotgsystem()
{
    level notify( "_encstr_AFCD0E6FE793DF9FDA99AAE6E8CA0233" );
    finalizeallrecordings();
    waittillframeend;
    level.potgglobals.systemfinalized = 1;

    if ( shouldskippotg() )
        return;

    if ( level.potgglobals.pendingarchiverequest )
        archivecurrentgamestate();

    var_0 = getcurpotgscene();

    if ( isdefined( var_0 ) )
        finalizescene( var_0 );
}

issystemfinalized()
{
    return level.potgglobals.systemfinalized;
}

registerpotgentity( var_0 )
{
    if ( !level.potgenabled )
        return;

    var_1 = level.potgglobals;
    var_2 = getentityid( var_0 );
    var_3 = spawnstruct();
    var_3.entity = var_0;
    var_3.events = [];
    var_3.recordingenabledcount = 0;
    var_3.lastrecordingstarttime = -1;
    var_3.nexteventid = 0;
    var_1.entities[var_2] = var_3;
}

deregisterpotgentity( var_0 )
{
    if ( !level.potgenabled )
        return;

    var_1 = level.potgglobals;
    var_2 = getentityid( var_0 );
    var_1.entities[var_2] = undefined;
    var_0 notify( "_encstr_9DE2140FA3FDB09823986FD3E7A537578FF0A37B78E3" );
}

getentitypotgdata( var_0 )
{
    var_1 = getentityid( var_0 );
    return level.potgglobals.entities[var_1];
}

getentityid( var_0 )
{
    if ( isdefined( var_0.potgid ) )
        return var_0.potgid;

    var_0.potgid = var_0 getentitynumber();
    return var_0.potgid;
}

startrecording()
{
    if ( !level.potgenabled )
        return;

    if ( issystemfinalized() )
        return;

    var_0 = getentitypotgdata( self );

    if ( var_0.recordingenabledcount == 0 )
        onrecordingstarted( var_0 );

    var_0.recordingenabledcount++;
}

onrecordingstarted( var_0 )
{
    var_0.lastrecordingstarttime = gettime();
}

stoprecording()
{
    if ( !level.potgenabled )
        return;

    if ( issystemfinalized() )
        return;

    var_0 = getentitypotgdata( self );
    var_0.recordingenabledcount--;

    if ( var_0.recordingenabledcount == 0 )
        onrecordingstopped( var_0 );
}

forcestoprecording( var_0 )
{
    var_0.recordingenabledcount = 0;
    var_0.entity onrecordingstopped( var_0 );
}

onrecordingstopped( var_0 )
{
    var_1 = level.potgglobals;
    scripts\mp\potg_events::onpotgrecordingstopped();
    var_0.entity notify( "_encstr_ABE3140E7BA33BF537A3DB1CF5C9568DB79C8C2DE63B" );
    removeallevents( var_0 );
}

isrecordingenabled( var_0 )
{
    if ( !level.potgenabled )
        return 0;

    if ( issystemfinalized() )
        return 0;

    if ( !isdefined( var_0 ) )
        var_0 = getentitypotgdata( self );

    return var_0.recordingenabledcount > 0;
}

finalizeallrecordings()
{
    var_0 = level.potgglobals;

    foreach ( var_2 in var_0.entities )
        forcestoprecording( var_2 );
}

processevent( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( !level.potgenabled )
        return;

    if ( !isdefined( var_1 ) )
        var_1 = gettime();

    if ( !isdefined( var_2 ) )
        var_2 = var_1;

    var_6 = level.potgglobals;
    var_7 = getentitypotgdata( self );
    removeoldevents( var_7 );

    if ( !isrecordingenabled( var_7 ) )
        return;

    var_8 = int( max( getcurwindowstarttime(), var_7.lastrecordingstarttime ) );

    if ( var_1 <= var_8 || var_2 <= var_8 )
        return;

    var_9 = spawnstruct();
    var_10 = undefined;

    if ( isdefined( var_4 ) )
        var_10 = var_4;
    else
        var_10 = eventtable_getscore( var_0 );

    if ( isdefined( var_5 ) )
        var_10 = var_10 * var_5;

    var_9.eventref = var_0;
    var_9.starttime = var_1;
    var_9.endtime = var_2;
    var_9.score = var_10;
    var_9.psoffsettime = var_3;
    var_11 = var_7.nexteventid;
    var_7.nexteventid++;
    var_7.events[var_11] = var_9;
    datalog_newevent( var_9, var_11, self );

    if ( !eventtable_isaddonevent( var_0 ) )
        thread waitandnominatepotg( var_7 );
}

waitandnominatepotg( var_0 )
{
    var_1 = var_0.entity;
    var_1 endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_1 endon( "_encstr_9DE2140FA3FDB09823986FD3E7A537578FF0A37B78E3" );
    var_1 notify( "_encstr_89D8161F7E32E93543F041E25D09162BDD6BA23F3BD9500A" );
    var_1 endon( "_encstr_89D8161F7E32E93543F041E25D09162BDD6BA23F3BD9500A" );
    waittillframeend;

    if ( !isrecordingenabled( var_0 ) )
        return;

    var_2 = calculatepotgscore( var_0.events );

    if ( var_2 > getminimumscorerequirednvidiahighlights() && var_1 ispcplayer() )
    {

    }

    if ( var_2 > getminimumscorerequired() && var_2 > getbestpotgscore() )
    {
        var_3 = createscenefromnewevent( var_0, var_2 );
        var_1 thread waitformorerecordingtimeforscene( var_3 );
    }
    else
    {

    }
}

removeoldevents( var_0 )
{
    var_1 = getcurwindowstarttime();

    foreach ( var_4, var_3 in var_0.events )
    {
        if ( var_3.starttime < var_1 )
            var_0.events[var_4] = undefined;
    }
}

removeallevents( var_0 )
{
    var_0.events = [];
}

createscenefromnewevent( var_0, var_1 )
{
    var_2 = spawnstruct();
    var_2.primaryentity = var_0.entity;
    var_2.events = var_0.events;
    var_2.score = var_1;
    var_2.sceneid = level.potgglobals.nextsceneid;
    level.potgglobals.nextsceneid++;
    var_2.actionstarttime = undefined;
    var_2.actionendtime = undefined;

    foreach ( var_4 in var_0.events )
    {
        if ( !isdefined( var_2.actionstarttime ) || var_4.starttime < var_2.actionstarttime )
            var_2.actionstarttime = var_4.starttime;

        if ( !isdefined( var_2.actionendtime ) || var_4.endtime > var_2.actionendtime )
            var_2.actionendtime = var_4.endtime;
    }

    var_2.recordingstarttime = var_0.lastrecordingstarttime;
    var_2.endtime = undefined;
    var_2.playbackstarttime = undefined;
    var_2.playbackendtime = undefined;
    return var_2;
}

doesscenehaveenoughtotalrecordingtime( var_0 )
{
    return getmaxsceneduration( var_0 ) >= getwholescenedurationmin();
}

doesscenehaveenoughbufferrecordingtime( var_0 )
{
    return var_0.endtime - var_0.actionendtime >= getscenebufferduration();
}

getmaxsceneduration( var_0 )
{
    var_1 = var_0.recordingstarttime;
    return var_0.endtime - var_0.recordingstarttime;
}

waitformorerecordingtimeforscene( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_9DE2140FA3FDB09823986FD3E7A537578FF0A37B78E3" );
    var_1 = var_0.recordingstarttime + getwholescenedurationmin();
    var_2 = var_0.actionendtime + getscenebufferduration();
    var_3 = var_0.actionstarttime + getwholescenedurationmax();
    var_4 = int( clamp( var_2, var_1, var_3 ) );
    var_5 = "_encstr_9B31082AB0771B47908D";

    if ( var_4 > gettime() )
    {
        thread watchpendingscenetimeout( var_4 );
        var_5 = scripts\engine\utility::_id_143B4( "_encstr_977D1BC17BD19DF51C56E623D29BB37D9BB1B2CD2BD7A3B46B59F6D5A3", "_encstr_ABE3140E7BA33BF537A3DB1CF5C9568DB79C8C2DE63B" );
        self notify( "_encstr_B9741C83F6A376BE9BB1ACB995F533D2732DE643B28CBE0EACB9462DCD9D" );
    }

    if ( gettime() > var_4 )
        var_0.endtime = var_4;
    else
        var_0.endtime = gettime();

    if ( doesscenehaveenoughtotalrecordingtime( var_0 ) )
    {
        if ( doesscenehaveenoughbufferrecordingtime( var_0 ) )
        {
            if ( var_0.score > getminimumscorerequired() && var_0.score >= getbestpotgscore() )
                setcurpotgscene( var_0 );
            else
            {

            }
        }
        else
        {

        }
    }
    else
    {

    }
}

watchpendingscenetimeout( var_0 )
{
    self endon( "_encstr_B9741C83F6A376BE9BB1ACB995F533D2732DE643B28CBE0EACB9462DCD9D" );

    while ( gettime() < var_0 )
        waitframe();

    self notify( "_encstr_977D1BC17BD19DF51C56E623D29BB37D9BB1B2CD2BD7A3B46B59F6D5A3" );
}

calculatepotgscore( var_0 )
{
    var_1 = 0;
    var_2 = 0;

    foreach ( var_4 in var_0 )
    {
        var_2 = var_2 + var_4.score;

        if ( var_4.eventref == "_encstr_97D70583536853" )
            var_1++;
    }

    if ( var_1 > 2 )
    {
        var_6 = eventtable_getscore( "_encstr_9F850CC4BBB228904076D20389AC" );
        var_2 = var_2 + var_6;
    }

    return var_2;
}

setcurpotgscene( var_0 )
{
    calcsceneplaybacktimes( var_0 );
    requestarchive( var_0.playbackstarttime, var_0.playbackendtime );
    screenprint_newpotgchosen( var_0, level.potgglobals.curpotgscene );
    level.potgglobals.curpotgscene = var_0;
}

getcurpotgscene()
{
    if ( !level.potgenabled )
        return undefined;

    return level.potgglobals.curpotgscene;
}

getbestpotgscore()
{
    if ( !level.potgenabled )
        return -1;

    var_0 = level.potgglobals;

    if ( !isdefined( var_0.curpotgscene ) )
        return -1;

    return var_0.curpotgscene.score;
}

getcurwindowstarttime()
{
    return gettime() - getwholescenedurationmax();
}

eventtable_getscore( var_0 )
{
    return level.potgglobals.eventtable[var_0]["_encstr_93FB06DC6CBDE4CA"];
}

eventtable_isaddonevent( var_0 )
{
    return level.potgglobals.eventtable[var_0]["_encstr_AAFD068523233DDC"];
}

eventtable_isevent( var_0 )
{
    return isdefined( level.potgglobals.eventtable[var_0] );
}

finalizescene( var_0 )
{
    var_0.finalized = 1;
    calcscenepsoffset( var_0 );
    _id_12C7C();
    datalog_scenefinalized( var_0 );
}

_id_12C7C()
{
    foreach ( var_1 in level.players )
    {
        var_1 setclientomnvar( "_encstr_A2D01C5DD2FA1CF6E8B3D7CD6CEDE456D72BB3959B477D6CBD731D9CDED8", -1 );
        var_1 setclientomnvar( "_encstr_A24B16A5C1799A9038522A80C81C7ACB6CF96CA9236BCEFA", -1 );
        var_1 setclientomnvar( "_encstr_BC4B16FFFB881343605B57D151408D3AF57F030777459969", -1 );
        var_1 setclientomnvar( "_encstr_A64B16A340B747037F8B655EA373A58A1590F94B4B83EE8D", -1 );
        var_1 setclientomnvar( "_encstr_8A4B16D5B47DE66CBD9CACFACAB3B2DCE8D71BB4B98EEBCC", -1 );
        var_1 setclientomnvar( "_encstr_8C4B16ABD2BE37B1DB3956FA2B6759DC47EB8D2D37A3F543", -1 );
    }
}

calcsceneplaybacktimes( var_0 )
{
    var_1 = gettime() - 13000;
    var_2 = var_0.endtime - getwholescenedurationmax();
    var_3 = int( max( var_2, max( var_0.recordingstarttime, var_1 ) ) );
    var_4 = var_0.actionstarttime - getscenebufferduration();
    var_5 = int( min( var_0.actionstarttime, var_0.endtime - getwholescenedurationmin() ) );
    var_0.playbackstarttime = int( clamp( var_4, var_3, var_5 ) );
    var_0.playbackendtime = var_0.endtime;
    var_6 = var_0.playbackendtime - var_0.playbackstarttime;
}

calcscenepsoffset( var_0 )
{
    var_1 = [];

    foreach ( var_3 in var_0.events )
    {
        if ( isdefined( var_3.psoffsettime ) && !isdefined( var_1[var_3.endtime] ) )
            var_1[var_3.endtime] = var_3.psoffsettime;
    }

    if ( var_1.size <= 0 )
    {
        var_0.psoffsettime = 0;
        return;
    }

    var_5 = 0.0;

    foreach ( var_7 in var_1 )
        var_5 = var_5 + var_7;

    var_9 = var_5 / var_1.size;
    var_0.psoffsettime = int( var_9 );
}

getfinalpotginfo()
{
    var_0 = getcurpotgscene();

    if ( !isdefined( var_0 ) )
        return undefined;

    var_1 = spawnstruct();
    var_1.starttime = var_0.playbackstarttime;
    var_1.endtime = var_0.playbackendtime;
    var_1.spectateentity = var_0.primaryentity;
    var_1.psoffsettime = var_0.psoffsettime;
    return var_1;
}

requestarchive( var_0, var_1 )
{
    level thread archiverequesthelper( var_0, var_1 );
}

archiverequesthelper( var_0, var_1 )
{
    level endon( "_encstr_AFCD0E6FE793DF9FDA99AAE6E8CA0233" );
    level notify( "_encstr_871D1CE16FE3C05877CB89D042130D21FFE963B31B4B019DAB03419B3E06" );
    level endon( "_encstr_871D1CE16FE3C05877CB89D042130D21FFE963B31B4B019DAB03419B3E06" );
    level.potgglobals.pendingarchiverequest = 1;
    var_2 = var_0 + 13000 - 100;
    var_3 = var_2 - gettime();
    scripts\engine\utility::wait_time_in_ms( var_3 );
    level.potgglobals.pendingarchiverequest = 0;
    archivecurrentgamestate();
}

archivecurrentgamestate()
{
    thread debug_watcharchivesize( getpotgduration(), getcurpotgscene() );
    getpotgstarttime();
    var_0 = level.potgglobals.lastarchivetime;
    level.potgglobals.lastarchivetime = gettime();
    var_1 = -1;

    if ( var_0 > 0 )
        var_1 = level.potgglobals.lastarchivetime - var_0;
}

getrapidarchivewarningrate()
{
    return 13000 - getwholescenedurationmax() - 250;
}

doesscenefitincurrentarchive( var_0 )
{
    var_1 = level.potgglobals.lastarchivetime;

    if ( var_1 < 0 )
        return 0;

    var_2 = var_1 - 13000;
    return var_0.playbackstarttime >= var_2 && var_0.playbackendtime <= var_1;
}

screenprint_newpotgchosen( var_0, var_1 )
{
    if ( getdvarint( "_encstr_BACA133088B3A7E1D730034A38D52933AB63A6CC1E" ) == 0 )
        return;

    if ( var_0.score <= 250 )
        return;

    var_2 = undefined;

    if ( isplayer( var_0.primaryentity ) )
        var_2 = var_0.primaryentity.name;
    else
        var_2 = "_encstr_A3AE0D8C303A13A530031B1D7E5BD2";

    if ( isplayer( var_0.primaryentity ) )
        var_0.primaryentity iprintlnbold( "_encstr_B315100A8C8DB74EA85A40922211D7ABCF48" + var_0.score + "_encstr_934C02DC" );

    if ( isdefined( var_1 ) && isplayer( var_1.primaryentity ) && var_1.primaryentity != var_0.primaryentity )
        var_1.primaryentity iprintlnbold( "_encstr_9BF41AB34FF76B693AC099794E8BA303FAEA251ECC5F51B19E8B3212" + var_2 + "_encstr_9E17041202A0" + var_0.score + "_encstr_934C02DC" );

    level.potgglobals.lastchosenscreenprinttime = gettime();
}

screenprint_dosceneprintplayback()
{
    if ( getdvarint( "_encstr_BACA133088B3A7E1D730034A38D52933AB63A6CC1E" ) == 0 )
        return;

    var_0 = getcurpotgscene();
    var_1 = gettime() - int( self.archivetime * 1000 );
    var_2 = 0.15;
    var_3 = [];

    for (;;)
    {
        foreach ( var_6, var_5 in var_0.events )
        {
            if ( var_5.starttime <= var_1 && !isdefined( var_3[var_6] ) )
            {
                iprintlnbold( var_5.eventref );
                iprintln( var_5.eventref );
                var_3[var_6] = 1;
                break;
            }
        }

        wait( var_2 );
        var_1 = var_1 + int( var_2 * 1000 );
    }
}

datalog_getlogversion()
{
    if ( getdvarint( "_encstr_A15E10625792E0F820DF807310CE5B9F0B48", 0 ) != 0 )
        return -1;

    if ( getdvarint( "_encstr_9D0F0D1338C5C9DB98BF7174458333", 0 ) != 0 )
        return 9;

    return -1;
}

datalog_isloggingenabled()
{
    return getdvarint( "_encstr_816B0DB36FEB88B66DF909A9CA6247" ) != 0;
}

datalog_scenefinalized( var_0 )
{
    if ( !datalog_isloggingenabled() )
        return;

    var_1 = datalog_getlogversion();
    getentitylessscriptablearray( "_encstr_875B0E5D1743A7BAF39853F98027F37F", [ "_encstr_93FB06DC6CBDE4CA", var_0.score, "_encstr_9BAC09FDA51BF931841298", var_0.playbackendtime - var_0.playbackstarttime, "_encstr_A8950B23EC20E31B9FBB5495B5", var_0.playbackstarttime, "_encstr_AA6414EFAF5DF20F28BE925B11A05CE9B8CD6B2F1B85", var_0.actionstarttime - var_0.playbackstarttime, "_encstr_BEC3122C363A2DF637BE59E632FADE9966CD563A", var_0.actionendtime - var_0.playbackstarttime, "_encstr_9D660A5AC035B70BD09F4154", getentityid( var_0.primaryentity ), "_encstr_9FE30FDCB14ED21CA3D7B3594EDC4B7B37", var_1 ] );

    foreach ( var_3 in var_0.events )
        getentitylessscriptablearray( "_encstr_974A1BB7806B6B2BC32F03F117E70337B658DF3390209F82054D8D33FE", [ "_encstr_B7FF0AB267AC73D1AFE42B99", var_3.eventref, "_encstr_93FB06DC6CBDE4CA", var_3.score, "_encstr_A8950B23EC20E31B9FBB5495B5", var_3.playbackstarttime, "_encstr_894A09EB739597CBE3CA8B", var_3.playbackendtime, "_encstr_9FE30FDCB14ED21CA3D7B3594EDC4B7B37", var_1 ] );
}

datalog_newevent( var_0, var_1, var_2 )
{
    if ( !datalog_isloggingenabled() )
        return;

    getentitylessscriptablearray( "_encstr_890415ADE0CDC6C95AE01DD7387BE89DFAB267959BD1CD", [ "_encstr_B7FF0AB267AC73D1AFE42B99", var_0.eventref, "_encstr_93FB06DC6CBDE4CA", var_0.score, "_encstr_A8950B23EC20E31B9FBB5495B5", var_0.starttime, "_encstr_894A09EB739597CBE3CA8B", var_0.endtime, "_encstr_AACC09ACEC59CD3A7D5A23", var_1, "_encstr_9D660A5AC035B70BD09F4154", getentityid( var_2 ), "_encstr_9FE30FDCB14ED21CA3D7B3594EDC4B7B37", datalog_getlogversion() ] );
}

datalog_archivesaved( var_0, var_1, var_2, var_3, var_4 )
{
    if ( getdvarint( "_encstr_AAEB13C1DB3A767D329598AE9DEB85E48D345A3BCA", 0 ) == 0 )
        return;

    var_5 = datalog_getlogversion();
    getentitylessscriptablearray( "_encstr_B7F116DAC16E3693D21CE87DE0B71D76FA0B27C6A1B4B356", [ "_encstr_B1810CFA438BD3072E13E13A180D", var_0, "_encstr_BCED11DECB98E8EA4CBB27B39B76036C60B057", var_1, "_encstr_AD9A10939B626310163FE5DBE2E9302B5A03", var_2, "_encstr_B67A16B8DF23B3EEBF7D9FA2F0482791BBC9FA3B6FB8F720", var_3, "_encstr_A8B514C2480B18AB4504A1F37F3D22D5556503C38F7D", var_4, "_encstr_AD0C0C08415997378D79AA0338A9", level.players.size, "_encstr_BC7909A1219E1816BF7381", int( 1.0 / level.framedurationseconds ), "_encstr_B86705235623A5", scripts\engine\utility::ter_op( isdedicatedserver(), 1, 0 ), "_encstr_AF2C08D032FA8F40CF16", 0 ] );
}

debug_watcharchivesize( var_0, var_1 )
{
    var_2 = gettime();
    thread debug_watcharchivefinished( var_2, var_0, var_1 );
    thread debug_watcharchiveinterrupted( var_2, var_1 );
}

debug_watcharchivefinished( var_0, var_1, var_2 )
{
    level notify( "_encstr_952C1EC8F70401B9F2C5E4E05ACAD9C9478F68F07BA17B6B79EAEDFF73421F53" );
    level endon( "_encstr_952C1EC8F70401B9F2C5E4E05ACAD9C9478F68F07BA17B6B79EAEDFF73421F53" );

    if ( getdvarint( "_encstr_AAEB13C1DB3A767D329598AE9DEB85E48D345A3BCA" ) == 0 )
        return;

    for (;;)
    {
        var_3 = getpotgduration();

        if ( var_3 != var_1 )
        {
            level notify( "_encstr_97B71E23986B8F1933CE261CBBF5726F73609FBF50E3D441056B6D549E910A1C" );
            debug_logarchiveresult( 1, var_2, var_0, var_3, completescenetransition() );
            break;
        }

        waitframe();
    }
}

debug_watcharchiveinterrupted( var_0, var_1 )
{
    level endon( "_encstr_97B71E23986B8F1933CE261CBBF5726F73609FBF50E3D441056B6D549E910A1C" );
    level waittill( "_encstr_952C1EC8F70401B9F2C5E4E05ACAD9C9478F68F07BA17B6B79EAEDFF73421F53" );
    debug_logarchiveresult( 0, var_1, var_0 );
}

debug_logarchiveresult( var_0, var_1, var_2, var_3, var_4 )
{
    if ( var_0 )
        thread datalog_archivesaved( var_2, var_3, var_4, var_1.playbackstarttime, var_1.playbackendtime );

    if ( var_0 )
        return;
}
