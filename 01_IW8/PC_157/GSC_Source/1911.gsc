// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init_spawn_factors()
{
    if ( !isdefined( level.spawn_closeenemydistsq ) )
        level.spawn_closeenemydistsq = 250000;

    if ( !isdefined( level.enemyspawninfluencedistsq ) )
        level.enemyspawninfluencedistsq = 810000;

    registerfactor( "_encstr_B990131CC995CC59C9E938D1A5B50BB12A5189D36A", ::preferoptimalttlos, 0, undefined );
    registerfactor( "_encstr_B84A1B9E0BB8A9FA1E61176B71A5121540D7956FE0306563761B2F3B69", ::avoidshorttimetoenemysight, 0, undefined );
    registerfactor( "_encstr_93DC17C19356CCB227A01B8D4BB237845E11B437E8C237C6B2", ::preferalliesbydistance, 0, undefined );
    registerfactor( "_encstr_B269121C9C56335939D036B76ECA2AF6056363BC", ::preferclosetoally, 0, undefined );
    registerfactor( "_encstr_BD8B1B9FFB1770D7DF0510906ED303EFFD7769593D5F4FF6B707289A72", ::avoidrecentlyusedbyenemies, 0, undefined );
    registerfactor( "_encstr_B63A170BB3F6D23215E6CAD62DB29B482F2296DCE885CD3656", ::avoidenemiesbydistance, 0, undefined );
    registerfactor( "_encstr_B28F140B9DDBA58C5137CAAD97529BCCB1AE5673D82B", ::avoidenemyinfluence, 0, undefined );
    registerfactor( "_encstr_AD4B17FB4EED781D1B32739B48974748C49C1F77C19330D0EB", ::avoidlastdeathlocation, 0, undefined );
    registerfactor( "_encstr_98291A6EFB48596A01E3D7C38BC5B389C0A0E73214F01B7275EB9FB3", ::avoidlastattackerlocation, 0, undefined );
    registerfactor( "_encstr_AF4322E15C48A9FD5EBC50CA9B3739A9EF1920CD1DC8D3690DB781C019A8F8E9FA1FBB93", ::avoidshorttimetojumpingenemysight, 0, undefined );
    registerfactor( "_encstr_ADC926F1B4602F9F2D5053FBF989958BBB0D7165456F6F2C43F87BF238FF47437109D9D3EBD1BBEB", ::avoidveryshorttimetojumpingenemysight, 0, undefined );
    registerfactor( "_encstr_81BE0FEAEBE89333BE0922705E22C6736E", ::avoidsamespawn, 0, undefined );
    registerfactor( "_encstr_811D1AE0C0C82B69ABA0336F0851FB0AA153ED0485088970E0C2505D", ::avoidrecentlyusedbyanyone, 0, undefined );
    registerfactor( "_encstr_A35E11FBA20B9DD0FDF37953FFE5E9D6E76B91", ::randomspawnscore, 0, undefined );
    registerfactor( "_encstr_9CDC18E7927729237210D0082B05E343EB1CE5D715C793731B3A", ::prefernearlastteamspawn, 0, undefined );
    registerfactor( "_encstr_93481C8AAE53FAC5EBD9273F5025AA121BC7D2CD1CE90209D0F92F13F09B", ::preferneargroupsofteammates, 0, undefined );
    registerfactor( "_encstr_88111453BAA5B8C113044F59B3DB2873976931D8B733", ::preferoccupiedlanes, 0, undefined );
    registerfactor( "_encstr_B8AD151C279566B293A2ED095836C2B9D8B2980BB959DC", ::prefertobalancelanes, 0, undefined );
    registerfactor( "_encstr_8133127EEB58495AB6C9B7CF3356A39DB811F5C0", ::avoidclosestenemy, 0, undefined );
    registerfactor( "_encstr_9C140F338612285F2B4FA5596FD12D30CC", ::scriptonlytest, 1, [ "_encstr_93EF05487F9B6B" ] );
    registerfactor( "_encstr_8A571CC1739FB8C5C8B3D7F78F131511260FC85A16E1890BE33BC3C5BF1A", ::avoidclosestenemybydistance, 1, [ "_encstr_95421C5AE0D8BF2FE069CDFE53C8F09FF01922A3A920A76771BBF3EC1740" ] );
    registerfactor( "_encstr_BADC16C352B5E065FBDB23333331BB684F2DE95FBD11F8A5", ::prefernearsinglepoint, 1, [ "_encstr_B9010F6E4BCDB336B214EDB49B8E057BE6", "_encstr_974A17B748C84C9AF72D0BFD86EBA237D0403B37D060B4E10B", "_encstr_95F7173D939047FFE6EB298217332B47C87398B73B88136F8F", "_encstr_AA7619E85A12399F5F8E545DACBF67CBBD42207861AD5B50639B67" ] );
    registerfactor( "_encstr_9E9210AA8E570E7313250AF0E11749CDEB80", ::preferdompoints, 1, [ "_encstr_B17C130E9356335693C9599188F66B0ABD9673E837", "_encstr_98381363DB08CDA32D090BA3B5F0E74A10ABE6EC4F" ] );
    registerfactor( "_encstr_807C1DF2D63B929DB399ABAF88AB550BA1753CAABD315A8B3C49237348800D", ::prefershortestdisttokothzone, 1, [ "_encstr_9EE315300A23938BDF1BF075201B9055CF4018A8F2BF1D", "_encstr_B9921A5B85E1A65CD52C399591114BCD3A51EDD34C352B1B47A5EC95" ] );
    registerfactor( "_encstr_82EC152C67F6B446868DDBDC9551F62DE98A0996ED37B2", ::avoidclosetokothzone, 1, [ "_encstr_9EE315300A23938BDF1BF075201B9055CF4018A8F2BF1D", "_encstr_A9F117C20899740388683D14F511A3B8C778AAA8902FABEFA3" ] );
    registerfactor( "_encstr_A4E412839C56332B3986D8DEE6ACA0EDA53747B9", ::preferclosepoints, 1, [ "_encstr_B4F30EA60DE2F7A17BD379884F8E5B2F" ] );
    registerfactor( "_encstr_A8D0137AA3D8D76FE96BEFF26BD937237EF8A2A26B", ::avoidrugbyoffsides, 1, [ "_encstr_A3D80872ADF98F1AD798", "_encstr_B828103957CE9897232DAC3619114BE46422" ] );
    registerfactor( "_encstr_A4390DDEDCB25537954DC116DD3737", ::oneusespawns, 1, undefined );
    registerfactor( "_encstr_8094192104D09F2FB748D22B38A125E349E4ADD695394BFF81485A", ::checkuseconditioninthink, 1, [ "_encstr_873116B13F4CCADBD85037C6329FB383F31816AB63DF205D", "_encstr_B95115D437B02D3D2FE3B30E15B251F7800BE373C8E568", "_encstr_B60A20D8B30D0B51F38DDC456E9BB9C5BFFA406028275329D3BFD04D5C97238152B3" ] );
    registerfactor( "_encstr_94F21E58ECF6B446D0D8DE9B562AB744AC9995E68CB29C191B85B335E016DDDC", ::checkweaponswitch, 1, [ "_encstr_B60A20D8B30D0B51F38DDC456E9BB9C5BFFA406028275329D3BFD04D5C97238152B3" ] );
    initfrontline();
}

registerfactor( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( level.spawnglobals.factors ) )
        level.spawnglobals.factors = [];

    var_4 = spawnstruct();
    level.spawnglobals.factors[var_0] = var_4;
    var_4.function = var_1;
    var_4.paramreflist = var_3;
    var_4.isscriptonly = var_2;
}

isfactorregistered( var_0 )
{
    return isdefined( level.spawnglobals.factors[var_0] );
}

isfactorscriptonly( var_0 )
{
    return level.spawnglobals.factors[var_0].isscriptonly;
}

getfactorfunction( var_0 )
{
    return level.spawnglobals.factors[var_0].function;
}

getfactorparamreflist( var_0 )
{
    return level.spawnglobals.factors[var_0].paramreflist;
}

calculatefactorscore( var_0, var_1, var_2 )
{
    if ( !isfactorregistered( var_1 ) )
        return 0;

    var_3 = getfactorfunction( var_1 );
    var_4 = getfactorparamreflist( var_1 );
    var_5 = level.spawnglobals.activespawncontext;

    if ( isdefined( var_4 ) )
    {
        if ( !isdefined( var_5.factorparams ) )
        {

        }
    }

    var_13 = [[ var_3 ]]( var_0 );
    var_13 = clamp( var_13, 0, 100 );
    var_13 = var_13 * var_2;
    var_0.totalpossiblescore = var_0.totalpossiblescore + 100 * var_2;
    var_0.lastscore[self.team] = var_0.lastscore[self.team] + var_13;
    var_0.totalscore = var_0.totalscore + var_13;
    return var_13;
}

critical_factor( var_0, var_1 )
{
    var_2 = [[ var_0 ]]( var_1 );
    var_2 = clamp( var_2, 0, 100 );
    return var_2;
}

avoidcarepackages( var_0 )
{
    foreach ( var_2 in level.carepackages )
    {
        if ( !isdefined( var_2 ) )
            continue;

        if ( distancesquared( var_0.origin, var_2.origin ) < 22500 )
            return 0;
    }

    return 100;
}

avoidbradleys( var_0 )
{
    if ( isdefined( level.bradley ) )
    {
        foreach ( var_2 in level.bradley.activevehicles["_encstr_BE7D068EF6D10B1B"] )
        {
            if ( distancesquared( var_0.origin, var_2.origin ) < 50625 )
                return 0;
        }

        foreach ( var_2 in level.bradley.inactivevehicles["_encstr_BE7D068EF6D10B1B"] )
        {
            if ( distancesquared( var_0.origin, var_2.origin ) < 50625 )
                return 0;
        }
    }

    return 100;
}

avoidgrenades( var_0 )
{
    foreach ( var_2 in level.grenades )
    {
        if ( !isdefined( var_2 ) || !var_2 isexplosivedangeroustoplayer( self ) || istrue( var_2.shouldnotblockspawns ) )
            continue;

        if ( distancesquared( var_0.origin, var_2.origin ) < 122500 )
            return 0;
    }

    return 100;
}

avoidmines( var_0 )
{
    var_1 = level.mines;

    if ( isdefined( level.traps ) && level.traps.size > 0 )
        var_1 = scripts\engine\utility::array_combine( var_1, level.traps );

    foreach ( var_3 in var_1 )
    {
        if ( !isdefined( var_3 ) || !var_3 isexplosivedangeroustoplayer( self ) || istrue( var_3.shouldnotblockspawns ) )
            continue;

        if ( distancesquared( var_0.origin, var_3.origin ) < 122500 )
            return 0;
    }

    return 100;
}

isexplosivedangeroustoplayer( var_0 )
{
    if ( !level.teambased || level.friendlyfire || !isdefined( var_0.team ) )
        return 1;
    else
    {
        var_1 = undefined;

        if ( isdefined( self.owner ) )
        {
            if ( var_0 == self.owner )
                return 1;

            var_1 = self.owner.team;
        }

        if ( isdefined( var_1 ) )
            return var_1 != var_0.team;
        else
            return 1;
    }
}

avoidcornervisibleenemies( var_0 )
{
    var_1 = "_encstr_A61904730372";

    if ( level.teambased )
        var_1 = scripts\mp\utility\teams::getenemyteams( self.team )[0];

    if ( var_0.cornersights[var_1] > 0 )
        return 0;

    return 100;
}

avoidfullvisibleenemies( var_0 )
{
    var_1 = "_encstr_A61904730372";

    if ( level.teambased )
        var_1 = scripts\mp\utility\teams::getenemyteams( self.team )[0];

    if ( var_0.fullsights[var_1] > 0 )
        return 0;

    return 100;
}

avoidcloseenemies( var_0 )
{
    var_1 = [];
    var_2 = [];

    if ( level.teambased )
        var_1[0] = scripts\mp\utility\teams::getenemyteams( self.team )[0];
    else
        var_1[var_1.size] = "_encstr_A61904730372";

    foreach ( var_4 in var_1 )
    {
        if ( var_0.totalplayers[var_4] == 0 )
            continue;

        var_2[var_2.size] = var_4;
    }

    if ( var_2.size == 0 )
        return 100;

    foreach ( var_4 in var_2 )
    {
        if ( var_0.mindistsquared[var_4] < level.spawn_closeenemydistsq )
            return 0;
    }

    return 100;
}

avoidtelefrag( var_0 )
{
    return 100;
}

avoidsamespawn( var_0 )
{
    if ( isdefined( self.lastspawnpoint ) && self.lastspawnpoint == var_0 )
        return 0;

    return 100;
}

avoidenemyspawn( var_0 )
{
    if ( isdefined( self.team ) && isdefined( var_0.lastspawnteam ) && ( !level.teambased || var_0.lastspawnteam != self.team ) )
    {
        var_1 = var_0.lastspawntime + 500;

        if ( gettime() < var_1 )
            return 0;
    }

    return 100;
}

avoidrecentlyusedbyenemies( var_0 )
{
    var_1 = !level.teambased || isdefined( var_0.lastspawnteam ) && self.team != var_0.lastspawnteam;

    if ( var_1 && isdefined( var_0.lastspawntime ) )
    {
        var_2 = gettime() - var_0.lastspawntime;
        var_0.analytics.spawnusedbyenemies = var_2 / 1000;

        if ( var_2 > 4000 )
            return 100;

        return var_2 / 4000 * 100;
    }

    return 100;
}

avoidrecentlyusedbyanyone( var_0 )
{
    if ( isdefined( var_0.lastspawntime ) )
    {
        var_1 = gettime() - var_0.lastspawntime;
        var_0.analytics.timesincelastspawn = var_1 / 1000;

        if ( var_1 > 4000 )
            return 100;

        return var_1 / 4000 * 100;
    }

    return 100;
}

avoidlastdeathlocation( var_0 )
{
    if ( !isdefined( self.lastdeathpos ) )
        return 100;

    var_1 = distancesquared( var_0.origin, self.lastdeathpos );

    if ( var_1 > 810000 )
        return 100;

    var_2 = var_1 / 810000;
    return var_2 * 100;
}

avoidlastattackerlocation( var_0 )
{
    if ( !isdefined( self.lastattacker ) || !isdefined( self.lastattacker.origin ) )
        return 100;

    if ( !scripts\mp\utility\player::isreallyalive( self.lastattacker ) )
        return 100;

    var_1 = distancesquared( var_0.origin, self.lastattacker.origin );

    if ( var_1 > 810000 )
        return 100;

    var_2 = var_1 / 810000;
    return var_2 * 100;
}

initfrontline()
{
    var_0 = getglobalfrontlineinfo();

    if ( getdvarint( "_encstr_B29F1CAB807D413761B0EF0ADD8EC3D29F4063D2482D87B799A8EB18E073", 0 ) == 1 )
        return;

    var_1 = [];

    if ( istrue( level.testtdmanywhere ) )
    {
        var_2 = getdvarfloat( "_encstr_A98C219BC693F51D326B28DC2F77D0CAE42BF5CCE4F6DCE8D85A9B5684CA5846B4E676", randomfloatrange( 0, 359 ) );
        var_0.usinganchors = 1;
        var_0.anchordir = anglestoforward( ( 0, var_2, 0 ) );
        var_0.anchorrt = anglestoright( ( 0, var_2, 0 ) );

        if ( isdefined( level.mapcenter ) )
            var_0.primaryanchorpos = ( level.mapcenter[0], level.mapcenter[1], 0 );

        level.tdmanywherefrontline = var_0;
    }
    else
    {
        var_1 = getentarray( "_encstr_9D271410A29FF0FE3A6B31394F124DF179BD59488D1A", "_encstr_B9110A36362C3737732CDA59" );

        if ( isdefined( scripts\cp_mp\utility\game_utility::getlocaleid() ) )
        {
            var_3 = [];

            foreach ( var_5 in var_1 )
            {
                if ( isdefined( var_5.script_noteworthy ) && var_5.script_noteworthy == level.localeid )
                {
                    var_3[var_3.size] = var_5;
                    continue;
                }

                var_5 delete();
            }

            var_1 = var_3;
        }
        else if ( var_1.size != 1 )
        {
            var_7 = [];

            foreach ( var_5 in var_1 )
            {
                if ( !isdefined( var_5.script_noteworthy ) || !issubstr( var_5.script_noteworthy, "_encstr_93E0078DDBB1B0C62B" ) )
                {
                    var_7[var_7.size] = var_5;
                    continue;
                }

                var_5 delete();
            }

            var_1 = var_7;
        }

        if ( var_1.size != 0 )
        {
            var_0.usinganchors = 1;
            var_0.anchordir = anglestoforward( var_1[0].angles );
            var_0.primaryanchorpos = ( var_1[0].origin[0], var_1[0].origin[1], 0 );
        }
    }
}

updatefrontline( var_0 )
{
    if ( !updatefrontlineposition() )
        return;

    runfrontlinespawntrapchecks( var_0 );
    updatefrontlinedebug();
}

updatefrontlineposition()
{
    if ( !currentspawnlogicsupportsfrontline() )
        return 0;

    var_0 = getglobalfrontlineinfo();
    var_1 = gettime();

    if ( !isdefined( var_0.lastupdatetime ) )
        var_0.lastupdatetime = var_1;
    else if ( var_0.isactive["_encstr_BC850785638DA59537"] && var_0.isactive["_encstr_BA840579D3F7F6"] )
        var_0.uptime = var_0.uptime + var_0.lastupdatetimedelta;
    else
        var_0.downtime = var_0.downtime + var_0.lastupdatetimedelta;

    var_2 = ( var_1 - var_0.lastupdatetime ) / 1000.0;
    var_0.lastupdatetime = var_1;
    var_0.lastupdatetimedelta = var_2;
    var_3 = getfrontlineteamcenter( "_encstr_BC850785638DA59537" );

    if ( !isdefined( var_3 ) )
        return 0;

    var_3 = ( var_3[0], var_3[1], 0 );
    var_0.alliesaverage = var_3;
    var_4 = getfrontlineteamcenter( "_encstr_BA840579D3F7F6" );

    if ( !isdefined( var_4 ) )
        return 0;

    var_4 = ( var_4[0], var_4[1], 0 );
    var_0.axisaverage = var_4;

    if ( var_0.usinganchors )
    {
        var_5 = var_3 - var_0.primaryanchorpos;
        var_6 = vectordot( var_0.anchordir, var_5 );
        var_7 = var_0.anchordir * var_6 + var_0.primaryanchorpos;
        var_0.projectedalliescenter = var_7;
        var_5 = var_4 - var_0.primaryanchorpos;
        var_8 = vectordot( var_0.anchordir, var_5 );
        var_9 = var_0.anchordir * var_8 + var_0.primaryanchorpos;
        var_0.projectedaxiscenter = var_9;
        var_10 = abs( var_6 - var_8 );

        if ( var_10 < 600 && isdefined( var_0.teamdiffyaw ) )
            var_0.contested = 1;
        else
        {
            var_0.contested = 0;
            var_0.midpoint = var_7 + ( var_9 - var_7 ) * 0.5;
            var_11 = var_9 - var_7;
            var_0.teamdiffyaw = vectortoyaw( var_11 );
        }
    }
    else
    {
        var_12 = var_4 - var_3;
        var_13 = vectortoyaw( var_12 );
        var_0.teamdiffyaw = var_13;
        var_14 = var_3 + var_12 * 0.5;
        var_0.midpoint = var_14;
    }

    var_15 = anglestoforward( ( 0, var_0.teamdiffyaw, 0 ) );
    var_16 = level.spawnpoints;
    var_16 = scripts\mp\spawnscoring::checkdynamicspawns( var_16 );

    foreach ( var_18 in var_16 )
    {
        var_19 = var_0.midpoint - var_18.origin;
        var_20 = vectordot( var_19, var_15 );
        var_18.frontlineteam = scripts\engine\utility::ter_op( var_20 > 0, "_encstr_BC850785638DA59537", "_encstr_BA840579D3F7F6" );
    }

    return 1;
}

updatefrontlinedebug()
{
    var_0 = isdefined( level.matchrecording_logevent ) && isdefined( level.matchrecording_generateid );
    var_1 = scripts\mp\analyticslog::analyticslogenabled();

    if ( !var_0 && !var_1 )
        return;

    var_2 = getglobalfrontlineinfo();

    if ( !isdefined( var_2.logids ) && isdefined( level.matchrecording_generateid ) )
    {
        var_2.logids = [];
        var_2.logids["_encstr_A81C0D2250F0EF554A455DD5A4270D"] = [[ level.matchrecording_generateid ]]();
        var_2.logids["_encstr_BE210BCE40CAA8E6D7B05CA336"] = [[ level.matchrecording_generateid ]]();
    }

    if ( !var_2.isactive["_encstr_BC850785638DA59537"] && !var_2.isactive["_encstr_BA840579D3F7F6"] )
        return;

    var_3 = ( var_2.midpoint[0], var_2.midpoint[1], level.mapcenter[2] );
    var_4 = anglestoright( ( 0, var_2.teamdiffyaw, 0 ) );
    logfrontlinetomatchrecording( var_3, var_4, var_2.isactive["_encstr_BC850785638DA59537"], var_2.isactive["_encstr_BA840579D3F7F6"] );

    if ( isdefined( level.matchrecording_logevent ) )
    {
        var_5 = scripts\engine\utility::ter_op( var_2.isactive["_encstr_BA840579D3F7F6"], var_2.axisaverage, ( 10000, 10000, 10000 ) );
        [[ level.matchrecording_logevent ]]( var_2.logids["_encstr_BE210BCE40CAA8E6D7B05CA336"], "_encstr_BA840579D3F7F6", "_encstr_8C840771AD29240716", var_5[0], var_5[1], gettime() );
        var_6 = scripts\engine\utility::ter_op( var_2.isactive["_encstr_BC850785638DA59537"], var_2.alliesaverage, ( 10000, 10000, 10000 ) );
        [[ level.matchrecording_logevent ]]( var_2.logids["_encstr_A81C0D2250F0EF554A455DD5A4270D"], "_encstr_BC850785638DA59537", "_encstr_8C840771AD29240716", var_6[0], var_6[1], gettime() );
    }
}

logfrontlinetomatchrecording( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( level.matchrecording_logevent ) )
    {
        var_4 = var_0 + var_1 * 5000;
        var_5 = var_0 - var_1 * 5000;

        if ( !isdefined( level.matchrecording_frontlinelogid ) )
            level.matchrecording_frontlinelogid = [[ level.matchrecording_generateid ]]();

        var_6 = undefined;

        if ( var_2 && var_3 )
            var_6 = "_encstr_950A0BDB651858EC4924F40D3D";
        else
            var_6 = scripts\engine\utility::ter_op( var_2, "_encstr_979912C503B868F1074D4CA427DF81B160974B77", "_encstr_93071016F529C50BF0ECF890D5289788E11F" );

        [[ level.matchrecording_logevent ]]( level.matchrecording_frontlinelogid, "_encstr_BC850785638DA59537", var_6, var_4[0], var_4[1], gettime(), undefined, var_5[0], var_5[1] );
    }
}

getfrontlineteamcenter( var_0 )
{
    var_1 = [];

    foreach ( var_3 in level.players )
    {
        if ( !isdefined( var_3 ) )
            continue;

        if ( !scripts\mp\utility\player::isreallyalive( var_3 ) )
            continue;

        if ( !var_3 scripts\mp\utility\player::isplayerallowedforspawnlogic() )
            continue;

        if ( var_3.team == var_0 )
            var_1[var_1.size] = var_3;
    }

    if ( var_1.size == 0 )
        return undefined;

    var_5 = scripts\mp\utility\entity::getaverageorigin( var_1 );
    return var_5;
}

runfrontlinespawntrapchecks( var_0 )
{
    if ( !currentspawnlogicsupportsfrontline() )
        return;

    var_1 = getglobalfrontlineinfo();
    var_1.isactive[var_0] = 1;

    if ( getdvarint( "_encstr_8B5D1A07D0838FB23D687DF3C1D3EA7DCE908BD7E09EEB1A7B76042A" ) == 0 )
        return;

    var_2 = getdvarint( "_encstr_A3D9196BA65B6F97ED781AB388334D5F5619C9FED0039B1EDF6833", 0 );

    if ( var_2 == 0 )
        var_2 = 4;

    var_3 = scripts\mp\utility\game::getotherteam( var_0 )[0];
    var_4 = 0;
    var_5 = level.spawnpoints;
    var_5 = scripts\mp\spawnscoring::checkdynamicspawns( var_5 );

    foreach ( var_7 in var_5 )
    {
        if ( !isdefined( var_7.frontlineteam ) || var_7.frontlineteam != var_0 )
            continue;

        if ( !isdefined( var_7.fullsights ) || !isdefined( var_7.fullsights[var_3] ) || var_7.fullsights[var_3] <= 0 )
            var_4++;
    }

    var_9 = var_4 / var_5.size;

    if ( var_4 < var_2 || var_9 < 0.0 )
    {
        if ( var_4 < var_2 )
            var_1.disabledreason[var_0] = 0;
        else
            var_1.disabledreason[var_0] = 1;

        var_1.isactive[var_0] = 0;
    }
}

currentspawnlogicsupportsfrontline()
{
    return istrue( level.spawnglobals.frontlinelogictypes[level.spawnglobals.activespawnlogic] );
}

getglobalfrontlineinfo()
{
    if ( !isdefined( level.frontlineinfo ) )
    {
        level.frontlineinfo = spawnstruct();
        level.frontlineinfo.isactive = [];
        level.frontlineinfo.isactive["_encstr_BC850785638DA59537"] = 0;
        level.frontlineinfo.isactive["_encstr_BA840579D3F7F6"] = 0;
        level.frontlineinfo.uptime = 0.0;
        level.frontlineinfo.downtime = 0.0;
        level.frontlineinfo.contested = 0;
        level.frontlineinfo.usinganchors = 0;
    }

    return level.frontlineinfo;
}

preferalliesbydistance( var_0 )
{
    if ( var_0.totalplayers[self.team] == 0 )
        return 0;

    var_1 = var_0.distsumsquared[self.team] / var_0.totalplayers[self.team];
    var_1 = min( var_1, 3240000 );
    var_0.analytics.allyaveragedist = var_1;
    var_2 = 1 - var_1 / 3240000;
    return var_2 * 100;
}

preferclosetoally( var_0 )
{
    var_1 = min( var_0.mindistsquared[self.team], 3240000 );
    var_2 = 1 - var_1 / 3240000;
    return var_2 * 100;
}

avoidenemiesbydistance( var_0 )
{
    var_1 = [];
    var_2 = [];

    if ( level.teambased )
        var_1[0] = scripts\mp\utility\teams::getenemyteams( self.team )[0];
    else
        var_1[var_1.size] = "_encstr_A61904730372";

    foreach ( var_4 in var_1 )
    {
        if ( var_0.totalplayers[var_4] == 0 )
            continue;

        var_2[var_2.size] = var_4;
    }

    if ( var_2.size == 0 )
        return 100;

    foreach ( var_4 in var_2 )
    {
        if ( var_0.mindistsquared[var_4] < 250000 )
            return 0;
    }

    var_8 = 0;
    var_9 = 0;

    foreach ( var_4 in var_2 )
    {
        var_8 = var_8 + var_0.distsumsquaredcapped[var_4];
        var_9 = var_9 + var_0.totalplayers[var_4];
    }

    var_12 = var_8 / var_9;
    var_12 = min( var_12, 7290000 );
    var_13 = var_12 / 7290000;
    var_0.analytics.enemyaveragedist = var_12;
    return var_13 * 100;
}

avoidenemyinfluence( var_0 )
{
    var_1 = undefined;

    if ( level.teambased )
        var_1 = scripts\mp\utility\teams::getenemyteams( self.team )[0];
    else
        var_1 = "_encstr_A61904730372";

    if ( var_0.mindistsquared[var_1] < level.enemyspawninfluencedistsq )
        return 0;

    return 100;
}

avoidclosestenemy( var_0 )
{
    var_1 = [];
    var_2 = [];

    if ( level.teambased )
        var_1[0] = scripts\mp\utility\teams::getenemyteams( self.team )[0];
    else
        var_1[var_1.size] = "_encstr_A61904730372";

    foreach ( var_4 in var_1 )
    {
        if ( var_0.totalplayers[var_4] == 0 )
            continue;

        var_2[var_2.size] = var_4;
    }

    if ( var_2.size == 0 )
        return 100;

    var_6 = 0;

    foreach ( var_4 in var_2 )
    {
        if ( var_0.mindistsquared[var_4] < 250000 )
            return 0;

        var_8 = min( var_0.mindistsquared[var_4], 3240000 );
        var_9 = var_8 / 3240000;
        var_6 = var_6 + var_9 * 100;
    }

    return var_6 / var_2.size;
}

avoidclosestenemybydistance( var_0 )
{
    var_1 = level.spawnglobals.activespawncontext.factorparams["_encstr_95421C5AE0D8BF2FE069CDFE53C8F09FF01922A3A920A76771BBF3EC1740"];
    var_2 = "_encstr_A61904730372";

    if ( level.teambased )
        var_2 = scripts\mp\utility\teams::getenemyteams( self.team )[0];

    var_3 = 0;

    foreach ( var_5 in level.teamdata[var_2]["_encstr_8875080E3685E52B93B9"] )
    {
        var_6 = distancesquared( var_0.origin, var_5.origin );

        if ( var_6 < var_3 )
            var_3 = var_6;
    }

    if ( var_3 < 250000 )
        return 0;

    var_8 = min( var_3, var_1 );
    var_9 = var_8 / var_1;
    return var_9 * 100;
}

preferdompoints( var_0 )
{
    var_1 = level.spawnglobals.activespawncontext.factorparams["_encstr_B17C130E9356335693C9599188F66B0ABD9673E837"];
    var_2 = level.spawnglobals.activespawncontext.factorparams["_encstr_98381363DB08CDA32D090BA3B5F0E74A10ABE6EC4F"];
    var_3 = var_0.scriptdata;

    if ( isdefined( var_3.domflagassignments ) )
    {
        if ( var_3.domflagassignments & var_1 )
            return 100;
        else if ( var_3.domflagassignments & var_2 )
            return 50.0;
    }

    return 0;
}

preferclosepoints( var_0 )
{
    var_1 = level.spawnglobals.activespawncontext.factorparams["_encstr_B4F30EA60DE2F7A17BD379884F8E5B2F"];

    foreach ( var_3 in var_1 )
    {
        if ( var_0 == var_3 )
            return 100;
    }

    return 0;
}

preferbyteambase( var_0, var_1 )
{
    if ( isdefined( var_0.teambase ) && var_0.teambase == var_1 )
        return 100;

    return 0;
}

preferoptimalttlos( var_0 )
{
    var_1 = "_encstr_A61904730372";

    if ( level.teambased )
        var_1 = scripts\mp\utility\teams::getenemyteams( self.team )[0];

    var_2 = 1.0 - var_0.maxsightvalue[var_1];
    var_3 = scripts\mp\spawnlogic::getmaxdistancetolos();
    var_4 = var_2 * var_3;

    if ( var_4 > 1200 )
    {
        var_5 = ( var_3 - var_4 ) / ( var_3 - 1200 );
        return 100 * var_5;
    }
    else
    {
        var_5 = var_4 / 1200;
        return 100 * var_5;
    }
}

avoidshorttimetoenemysight( var_0 )
{
    var_1 = "_encstr_A61904730372";

    if ( level.teambased )
        var_1 = scripts\mp\utility\teams::getenemyteams( self.team )[0];

    var_2 = 1.0 - var_0.maxsightvalue[var_1];
    var_0.analytics.maxenemysightfraction = var_2;
    return ( 1.0 - var_2 ) * 0 + var_2 * 100;
}

avoidshorttimetojumpingenemysight( var_0 )
{
    var_1 = "_encstr_A61904730372";

    if ( level.teambased )
        var_1 = scripts\mp\utility\teams::getenemyteams( self.team )[0];

    var_2 = 1.0 - var_0.maxjumpsightvalue[var_1];
    var_0.analytics.maxjumpingenemysightfraction = var_2;
    return ( 1.0 - var_2 ) * 0 + var_2 * 100;
}

avoidveryshorttimetojumpingenemysight( var_0 )
{
    var_1 = "_encstr_A61904730372";

    if ( level.teambased )
        var_1 = scripts\mp\utility\teams::getenemyteams( self.team )[0];

    var_2 = 1.0 - var_0.maxjumpsightvalue[var_1];
    var_3 = var_2 * scripts\mp\spawnlogic::getmaxdistancetolos();

    if ( var_3 < 300 )
        return 0;
    else
        return 100;
}

randomspawnscore( var_0 )
{
    var_0.analytics.randomscore = randomintrange( 0, 99 );
    return var_0.analytics.randomscore;
}

maxplayerspawninfluencedistsquared( var_0 )
{
    return 3240000;
}

prefershortestdisttokothzone( var_0 )
{
    var_1 = level.spawnglobals.activespawncontext;
    var_2 = var_1.factorparams["_encstr_9EE315300A23938BDF1BF075201B9055CF4018A8F2BF1D"];
    var_3 = var_0.scriptdata.distsqtokothzones[var_2];
    var_4 = var_1.factorparams["_encstr_B9921A5B85E1A65CD52C399591114BCD3A51EDD34C352B1B47A5EC95"];
    var_5 = 1.0 - var_3 / var_4;
    return 100 * var_5 + 0;
}

avoidclosetokothzone( var_0 )
{
    var_1 = level.spawnglobals.activespawncontext;
    var_2 = var_1.factorparams["_encstr_9EE315300A23938BDF1BF075201B9055CF4018A8F2BF1D"];
    var_3 = var_0.scriptdata.distsqtokothzones[var_2];
    var_4 = var_1.factorparams["_encstr_A9F117C20899740388683D14F511A3B8C778AAA8902FABEFA3"];
    return scripts\engine\utility::ter_op( var_3 < var_4, 0, 100 );
}

prefernearlastteamspawn( var_0 )
{
    var_1 = level.spawnglobals.lastteamspawnpoints[self.team];

    if ( !isdefined( var_1 ) )
        return 0;

    var_2 = distancesquared( var_1.origin, var_0.origin );
    var_2 = int( min( var_2, 9000000 ) );
    var_3 = 1.0 - var_2 / 9000000;
    return 100 * var_3 + 0;
}

preferneargroupsofteammates( var_0 )
{
    var_1 = level.spawnglobals;
    var_2 = -1;

    foreach ( var_4 in var_1.teamclusters[self.team].clusterlist )
    {
        if ( var_4.players.size <= 1 )
            continue;

        var_5 = distance2dsquared( var_4.center, var_0.origin );

        if ( var_2 < 0 || var_5 < var_2 )
            var_2 = var_5;
    }

    if ( var_2 < 0 )
        return 0;

    if ( var_2 < 10000 )
        return 100;

    var_2 = int( min( var_2, 9000000 ) );
    var_7 = 1.0 - ( var_2 - 10000 ) / 8990000;
    return 100 * var_7 + 0;
}

preferoccupiedlanes( var_0 )
{
    var_1 = level.spawnglobals;
    var_2 = "_encstr_A61904730372";

    if ( level.teambased )
        var_2 = scripts\mp\utility\teams::getenemyteams( self.team )[0];

    if ( !isdefined( var_1.occupiedlanemasks[var_2] ) )
        return 0;

    if ( ( var_0.lanemask & var_1.occupiedlanemasks[var_2] ) != 0 )
        return 100;
    else
        return 0;
}

prefertobalancelanes( var_0 )
{
    var_1 = level.spawnglobals;
    var_2 = scripts\mp\spawnlogic::getspawnteam( self );
    var_3 = "_encstr_A61904730372";

    if ( level.teambased )
        var_3 = scripts\mp\utility\teams::getenemyteams( var_2 )[0];

    if ( !isdefined( var_1.occupiedlanemasks[var_3] ) )
        return 0;

    var_4 = var_0.lanemask & var_1.occupiedlanemasks[var_3];
    var_5 = isdefined( var_1.occupiedlanemasks[var_2] ) && var_0.lanemask & var_1.occupiedlanemasks[var_2];

    if ( var_4 && !var_5 )
        return 100;
    else
        return 0;
}

scriptonlytest( var_0 )
{
    return 0;
}

prefernearsinglepoint( var_0 )
{
    var_1 = level.spawnglobals.activespawncontext;
    var_2 = var_1.factorparams["_encstr_B9010F6E4BCDB336B214EDB49B8E057BE6"];
    var_3 = var_1.factorparams["_encstr_974A17B748C84C9AF72D0BFD86EBA237D0403B37D060B4E10B"];
    var_4 = var_1.factorparams["_encstr_95F7173D939047FFE6EB298217332B47C87398B73B88136F8F"];
    var_5 = var_1.factorparams["_encstr_AA7619E85A12399F5F8E545DACBF67CBBD42207861AD5B50639B67"];
    var_6 = distance2dsquared( var_2, var_0.origin );

    if ( var_6 >= var_4 )
        return 0;

    if ( var_6 <= var_3 )
        return 100;

    var_7 = 1.0 - ( var_6 - var_3 ) / var_5;
    return 100 * var_7;
}

avoidrugbyoffsides( var_0 )
{
    var_1 = level.spawnglobals.activespawncontext;
    var_2 = var_1.factorparams["_encstr_A3D80872ADF98F1AD798"];
    var_3 = var_1.factorparams["_encstr_B828103957CE9897232DAC3619114BE46422"];
    var_4 = ( var_0.origin - var_2 ) * ( 1, 1, 0 );
    var_5 = vectordot( var_4, var_3 );

    if ( var_5 >= 0 )
        return 0;

    return 100;
}

oneusespawns( var_0 )
{
    var_1 = var_0.scriptdata;

    if ( istrue( var_1.used ) )
        return 0;
    else
        return 100;
}

checkuseconditioninthink( var_0, var_1 )
{
    var_2 = undefined;
    var_3 = var_1["_encstr_873116B13F4CCADBD85037C6329FB383F31816AB63DF205D"];
    var_4 = var_1["_encstr_B95115D437B02D3D2FE3B30E15B251F7800BE373C8E568"];
    var_5 = var_1["_encstr_B60A20D8B30D0B51F38DDC456E9BB9C5BFFA406028275329D3BFD04D5C97238152B3"];

    if ( isdefined( var_3 ) )
        var_2 = var_3;
    else if ( isdefined( var_4 ) )
        var_2 = var_4;

    if ( isdefined( var_2 ) )
    {
        var_6 = distancesquared( var_2, var_0.origin );
        return scripts\engine\utility::ter_op( var_6 < var_5, 0, 100 );
    }
    else
        return 100;
}

checkweaponswitch( var_0, var_1 )
{
    var_2 = var_0.scriptdata.lootchopper_createobjective;
    var_3 = var_1["_encstr_B60A20D8B30D0B51F38DDC456E9BB9C5BFFA406028275329D3BFD04D5C97238152B3"];
    return scripts\engine\utility::ter_op( var_2 < var_3, 0, 100 );
}
