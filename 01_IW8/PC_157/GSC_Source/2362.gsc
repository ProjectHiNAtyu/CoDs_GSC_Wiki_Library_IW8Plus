// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

controlproxyagent( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    self.proxydisableweapon = undefined;

    if ( var_3 < 3.0 )
        return 0;

    var_6 = scripts\cp_mp\killstreaks\killstreakdeploy::streakdeploy_doweapontabletdeploy( var_1 );

    if ( !var_6 )
        return 0;

    thread watchplayerkillstreakend( var_2 );
    thread watchgameend();

    if ( !isdefined( var_4 ) || !var_4 )
        thread watchplayerkillstreakearlyexit( var_2 );

    if ( isalive( var_0 ) && !istrue( var_0.dying ) )
        startcontrol( var_0, var_1.streakname, var_2, var_5 );
    else
    {
        self notify( var_2 );
        return 0;
    }

    return 1;
}

watchplayerkillstreakdeath( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( var_0 );

    for (;;)
    {
        self waittill( "_encstr_806F182AB838497A1E9FB7B7D1C9C39C4861E67476A81D7275E9", var_2, var_3, var_4, var_5, var_6, var_7 );

        if ( var_3 != self && isplayer( var_3 ) )
        {
            var_3 scripts\mp\utility\points::giveunifiedpoints( "_encstr_B9B80B6A8196E3AA40B32D34E7" + var_1 );
            thread scripts\mp\hud_util::teamplayercardsplash( "_encstr_9B6B130BD76C8DE7FB24BE657136F4CA8543935739" + var_1, var_3 );
            var_8 = asmdevgetallstates( var_7 );
            thread scripts\cp\vehicles\vehicle_compass_cp::killstreakkilled( var_1, self, self, var_3, var_4, var_6, var_8, "_encstr_B9B80B6A8196E3AA40B32D34E7" + var_1 );
            thread scripts\mp\utility\dialog::leaderdialogonplayer( var_1 + "_encstr_8A5A0B4EE3F57E0335F079E5F9", undefined, undefined, self.origin );
        }

        self notify( var_0, 1 );
    }
}

watchplayerkillstreakdisconnect( var_0 )
{
    self endon( var_0 );
    self waittill( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self notify( var_0, 1 );
}

watchplayerkillstreakswitchteam( var_0 )
{
    self endon( var_0 );
    self waittill( "_encstr_B2170C4AD884CDC823B9DB9D9F42" );
    self notify( var_0, 1 );
}

watchplayerkillstreakearlyexit( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( var_0 );
    var_1 = level.framedurationseconds;

    for (;;)
    {
        var_2 = 0;

        while ( self usebuttonpressed() )
        {
            var_2 = var_2 + var_1;

            if ( var_2 > 0.75 )
            {
                self.playerkillstreakearlyexitlocation = self.origin;
                self notify( var_0 );
                return;
            }

            wait( var_1 );
        }

        waitframe();
    }
}

watchplayerkillstreaktimeout( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( var_0 );
    wait( var_1 );
    self notify( var_0, 1 );
}

watchplayerkillstreakemp( var_0 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( var_0 );

    for (;;)
        self waittill( "_encstr_B3F60B314A5B38B0D6E543B715", var_1, var_2 );
}

watchplayerkillstreakend( var_0 )
{
    scripts\engine\utility::_id_143A5( var_0, "_encstr_A4A01199D56B196169B2C0B88A313B309B7D15" );
    stopcontrol();
}

watchgameend()
{
    level waittill( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    self notify( "_encstr_A4A01199D56B196169B2C0B88A313B309B7D15" );
}

startcontrol( var_0, var_1, var_2, var_3 )
{
    if ( isdefined( self ) && isalive( var_0 ) )
    {
        self controlagent( var_0 );

        if ( isdefined( var_3 ) )
            self visionsetnakedforplayer( var_3, 0 );

        self.playerproxyagent = var_0;
    }
}

stopcontrol()
{
    if ( isdefined( self ) )
    {
        if ( scripts\mp\utility\killstreak::iscontrollingproxyagent() )
        {
            self restorecontrolagent();
            self visionsetnakedforplayer( "_encstr_A40101", 0 );
        }

        self.streakinfo notify( "_encstr_8260276F8848A4FB39EE87BE5A476279D060F7EB70E1DFE37B85CC3935EB3B349858CF0FD83948AA5D" );
        self.playerproxyagent = undefined;
        self.activeplayerstreak = undefined;
    }
}

cleararchetype( var_0 )
{
    scripts\mp\archetypes\archcommon::removearchetype( var_0.loadoutarchetype );
    scripts\mp\class::loadout_clearperks();
}

reapplyarchetype( var_0 )
{
    var_1 = undefined;

    switch ( var_0.loadoutarchetype )
    {
        case "_encstr_A6B3120F05CFBC15435ADB2FF1F723E338B88B13":
            var_1 = scripts\mp\archetypes\archassault::applyarchetype;
            break;
    }

    scripts\mp\class::loadout_updateplayerperks( var_0 );

    if ( isdefined( var_1 ) )
        self [[ var_1 ]]();
}

killproxy( var_0 )
{

}
