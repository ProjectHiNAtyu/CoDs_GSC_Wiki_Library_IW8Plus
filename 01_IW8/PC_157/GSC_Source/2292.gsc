// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

setup_personalities()
{
    level.bot_personality = [];
    level.bot_personality_list = [];
    level.bot_personality["_encstr_B30B07E216CBFFC4C2"][0] = "_encstr_B7560CF6FB10B981D8E909E7ABC0";
    level.bot_personality["_encstr_B30B07E216CBFFC4C2"][1] = "_encstr_B31904476BAA";
    level.bot_personality["_encstr_80FA0BBF2C0EF0FBF7A2117BBB"][0] = "_encstr_BD9207539F80EB7FC5";
    level.bot_personality_type = [];

    foreach ( var_5, var_1 in level.bot_personality )
    {
        foreach ( var_3 in var_1 )
        {
            level.bot_personality_type[var_3] = var_5;
            level.bot_personality_list[level.bot_personality_list.size] = var_3;
        }
    }

    level.bot_personality_types_desired = [];
    level.bot_personality_types_desired["_encstr_B30B07E216CBFFC4C2"] = 4;
    level.bot_personality_types_desired["_encstr_80FA0BBF2C0EF0FBF7A2117BBB"] = 1;
    level.bot_pers_init = [];
    level.bot_pers_init["_encstr_B7560CF6FB10B981D8E909E7ABC0"] = ::init_personality_default;
    level.bot_pers_init["_encstr_BD9207539F80EB7FC5"] = ::init_personality_camper;
    level.bot_pers_update["_encstr_B7560CF6FB10B981D8E909E7ABC0"] = ::update_personality_default;
    level.bot_pers_update["_encstr_BD9207539F80EB7FC5"] = ::update_personality_camper;
}

bot_assign_personality_functions()
{
    self.personality = self botgetpersonality();
    self.pers["_encstr_A2AE0C7AEDC567582380E8B301FB"] = self.personality;
    self.personality_init_function = level.bot_pers_init[self.personality];

    if ( !isdefined( self.personality_init_function ) )
        self.personality_init_function = level.bot_pers_init["_encstr_B7560CF6FB10B981D8E909E7ABC0"];

    self [[ self.personality_init_function ]]();
    self.personality_update_function = level.bot_pers_update[self.personality];

    if ( !isdefined( self.personality_update_function ) )
        self.personality_update_function = level.bot_pers_update["_encstr_B7560CF6FB10B981D8E909E7ABC0"];
}

bot_balance_personality()
{
    if ( isdefined( self.personalitymanuallyset ) && self.personalitymanuallyset )
        return;

    if ( isdefined( self.pers["_encstr_A2AE0C7AEDC567582380E8B301FB"] ) )
    {
        self botsetpersonality( self.pers["_encstr_A2AE0C7AEDC567582380E8B301FB"] );
        return;
    }

    var_0 = self.team;

    if ( !isdefined( var_0 ) && !isdefined( self.bot_team ) )
        var_0 = self.pers["_encstr_89EF05D46BA8FD"];

    var_1 = getarraykeys( level.bot_personality_types_desired );
    var_2 = [];
    var_3 = [];

    foreach ( var_9, var_5 in level.bot_personality )
    {
        var_3[var_9] = 0;

        foreach ( var_7 in var_5 )
            var_2[var_7] = 0;
    }

    foreach ( var_11 in level.participants )
    {
        if ( var_11 == self )
            continue;

        if ( !scripts\mp\utility\entity::isteamparticipant( var_11 ) || !isdefined( var_11.has_balanced_personality ) )
            continue;

        if ( isdefined( var_11.team ) && var_11.team == var_0 || !level.teambased )
        {
            var_7 = var_11 botgetpersonality();
            var_9 = level.bot_personality_type[var_7];
            var_2[var_7] = var_2[var_7] + 1;
            var_3[var_9] = var_3[var_9] + 1;
        }
    }

    var_13 = [];

    foreach ( var_15 in var_1 )
        var_13[var_15] = int( var_3[var_15] / level.bot_personality_types_desired[var_15] );

    var_17 = undefined;

    for ( var_18 = 0; var_18 < var_1.size && !isdefined( var_17 ); var_18++ )
    {
        var_19 = var_1[var_18];
        var_20 = 1;

        for ( var_21 = 0; var_21 < var_1.size; var_21++ )
        {
            var_22 = var_1[var_21];

            if ( var_19 != var_22 )
            {
                if ( var_13[var_19] >= var_13[var_22] )
                    var_20 = 0;
            }
        }

        if ( var_20 )
            var_17 = var_19;
    }

    if ( !isdefined( var_17 ) )
    {
        var_23 = [];

        foreach ( var_15 in var_1 )
            var_23[var_15] = level.bot_personality_types_desired[var_15] - var_3[var_15] % level.bot_personality_types_desired[var_15];

        var_26 = 0;

        foreach ( var_15 in var_1 )
            var_26 = var_26 + var_23[var_15];

        var_29 = randomfloat( var_26 );

        foreach ( var_15 in var_1 )
        {
            if ( var_29 < var_23[var_15] )
            {
                var_17 = var_15;
                break;
            }

            var_29 = var_29 - var_23[var_15];
        }
    }

    var_32 = undefined;
    var_33 = undefined;
    var_34 = 9999;
    var_35 = undefined;
    var_36 = -9999;
    var_37 = scripts\engine\utility::array_randomize( level.bot_personality[var_17] );

    foreach ( var_7 in var_37 )
    {
        if ( var_2[var_7] < var_34 )
        {
            var_33 = var_7;
            var_34 = var_2[var_7];
        }

        if ( var_2[var_7] > var_36 )
        {
            var_35 = var_7;
            var_36 = var_2[var_7];
        }
    }

    if ( var_36 - var_34 >= 2 )
        var_32 = var_33;
    else
        var_32 = scripts\engine\utility::random( level.bot_personality[var_17] );

    if ( self botgetpersonality() != var_32 )
        self botsetpersonality( var_32 );

    self.has_balanced_personality = 1;
}

init_personality_camper()
{
    clear_camper_data();
}

init_personality_default()
{
    clear_camper_data();
}

update_personality_camper()
{
    if ( should_select_new_ambush_point() && !scripts\mp\bots\bots_util::bot_is_defending() && !scripts\mp\bots\bots_util::bot_is_remote_or_linked() )
    {
        var_0 = self botgetscriptgoaltype();
        var_1 = 0;

        if ( !isdefined( self.camper_time_started_hunting ) )
            self.camper_time_started_hunting = 0;

        var_2 = var_0 == "_encstr_BCCC058033936B";
        var_3 = gettime() > self.camper_time_started_hunting + 10000;

        if ( ( !var_2 || var_3 ) && !scripts\mp\bots\bots_util::bot_out_of_ammo() )
        {
            if ( !self bothasscriptgoal() )
                bot_random_path();

            if ( isdefined( level.override_find_camp_node ) )
                var_1 = [[ level.override_find_camp_node ]]();

            if ( !var_1 )
            {
                var_1 = find_camp_node();

                if ( !var_1 )
                    self.camper_time_started_hunting = gettime();
            }
        }

        if ( isdefined( var_1 ) && var_1 )
        {
            self.ambush_entrances = scripts\mp\bots\bots_util::bot_queued_process( "_encstr_81E01A3A6FC3FFE330602C9F7167C1FD06413F8F854BD6136A97B166", ::bot_find_ambush_entrances, self.node_ambushing_from, 1 );
            var_4 = scripts\mp\bots\bots_strategy::bot_get_ambush_trap_item( "_encstr_A3E7119310D7E037BDE280A08FBBE0F8632FD9", "_encstr_B6EF0559C2F628", "_encstr_AA0703D868" );

            if ( isdefined( var_4 ) )
            {
                var_5 = gettime();
                scripts\mp\bots\bots_strategy::bot_set_ambush_trap( var_4, self.ambush_entrances, self.node_ambushing_from, self.ambush_yaw );
                var_5 = gettime() - var_5;

                if ( var_5 > 0 && isdefined( self.ambush_end ) && isdefined( self.node_ambushing_from ) )
                {
                    self.ambush_end = self.ambush_end + var_5;
                    self.node_ambushing_from.bot_ambush_end = self.ambush_end + 10000;
                }
            }

            if ( !scripts\mp\bots\bots_strategy::bot_has_tactical_goal() && !scripts\mp\bots\bots_util::bot_is_defending() && isdefined( self.node_ambushing_from ) )
            {
                var_6 = self botsetscriptgoalnode( self.node_ambushing_from, "_encstr_8B900559228717", self.ambush_yaw );

                if ( var_6 )
                {
                    thread clear_script_goal_on( "_encstr_ABE5097DD9AF49972FE390", "_encstr_AFBE120520148741235B144058C1DB4096534DCB", "_encstr_8AFB0CA5C56971E741691F17C058" );
                    thread watch_out_of_ammo();
                    thread bot_add_ambush_time_delayed( "_encstr_9D85123EFC07B97D4992A0D8BB9F35367B993DA7", "_encstr_AA7205F03A9609" );
                    thread bot_watch_entrances_delayed( "_encstr_9D85123EFC07B97D4992A0D8BB9F35367B993DA7", "_encstr_A6CB1CA6F74B7663BFEA49B01256338B535F35AB5DD7BEA12752A0088AEF", self.ambush_entrances, self.ambush_yaw );
                    childthread bot_try_trap_follower( "_encstr_9D85123EFC07B97D4992A0D8BB9F35367B993DA7", "_encstr_AA7205F03A9609" );
                    return;
                }

                clear_camper_data();
                return;
                return;
            }
        }
        else
        {
            if ( var_0 == "_encstr_8B900559228717" )
                self botclearscriptgoal();

            update_personality_default();
        }
    }
}

update_personality_default()
{
    var_0 = undefined;
    var_1 = self bothasscriptgoal();

    if ( var_1 )
        var_0 = self botgetscriptgoal();

    if ( gettime() - self.lastspawntime > 5000 )
        bot_try_trap_follower();

    if ( !scripts\mp\bots\bots_strategy::bot_has_tactical_goal() && !scripts\mp\bots\bots_util::bot_is_remote_or_linked() )
    {
        var_2 = undefined;
        var_3 = undefined;

        if ( var_1 )
        {
            var_2 = distancesquared( self.origin, var_0 );
            var_3 = self botgetscriptgoalradius();
            var_4 = var_3 * 2;

            if ( isdefined( self.bot_memory_goal ) && var_2 < var_4 * var_4 )
            {
                var_5 = botmemoryflags( "_encstr_B49E0D6055263F9073E91A873D035F" );
                botflagmemoryevents( 0, gettime() - self.bot_memory_goal_time, 1, self.bot_memory_goal, var_4, "_encstr_97D70583536853", var_5, self );
                botflagmemoryevents( 0, gettime() - self.bot_memory_goal_time, 1, self.bot_memory_goal, var_4, "_encstr_A3750609A5E61883", var_5, self );
                self.bot_memory_goal = undefined;
                self.bot_memory_goal_time = undefined;
            }
        }

        if ( !var_1 || var_2 < var_3 * var_3 )
        {
            var_6 = bot_random_path();
            var_7 = undefined;
            var_8 = undefined;

            if ( var_6 )
            {
                var_7 = self botgetscriptgoal();
                var_8 = self botgetscriptgoaltype();
            }

            var_9 = 25;

            if ( istrue( self.encourage_explosive_use ) )
                var_9 = 50;

            if ( var_6 && randomfloat( 100 ) < var_9 )
            {
                var_10 = scripts\mp\bots\bots_strategy::bot_get_ambush_trap_item( "_encstr_A3E7119310D7E037BDE280A08FBBE0F8632FD9", "_encstr_B6EF0559C2F628" );

                if ( isdefined( var_10 ) )
                {
                    var_11 = self botgetscriptgoal();

                    if ( isdefined( var_11 ) )
                    {
                        var_12 = getclosestnodeinsight( var_11 );

                        if ( isdefined( var_12 ) && getlinkednodes( var_12 ).size > 0 )
                        {
                            var_13 = bot_find_ambush_entrances( var_12, 0 );
                            var_14 = scripts\mp\bots\bots_strategy::bot_set_ambush_trap( var_10, var_13, var_12 );

                            if ( !isdefined( var_14 ) || var_14 )
                            {
                                self botclearscriptgoal();
                                var_6 = bot_random_path();

                                if ( var_6 )
                                {
                                    var_7 = self botgetscriptgoal();
                                    var_8 = self botgetscriptgoaltype();
                                }
                            }
                        }
                    }
                }
            }

            if ( var_6 && self bothasscriptgoal() )
            {
                var_15 = self botgetscriptgoal();
                var_16 = self botgetscriptgoaltype();
                var_17 = scripts\mp\bots\bots_util::bot_vectors_are_equal( var_7, var_15 );
                var_18 = var_8 == var_16;

                if ( var_17 && var_18 )
                    thread clear_script_goal_on( "_encstr_80BF06CA78A2226B", "_encstr_ABE5097DD9AF49972FE390", "_encstr_AA7205F03A9609", "_encstr_AFBE120520148741235B144058C1DB4096534DCB", "_encstr_B7870BB7B3C75313288E07CDC1" );
            }
        }
    }
}

bot_try_trap_follower( var_0, var_1 )
{

}

clear_script_goal_on( var_0, var_1, var_2, var_3, var_4 )
{
    self notify( "_encstr_A3A115B3C1A042B3A143FFABD74243E929484E11DF6712" );
    self endon( "_encstr_A3A115B3C1A042B3A143FFABD74243E929484E11DF6712" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_A17A1463DBE793439981111B69C04E279956BA2AC1C9" );
    var_5 = self botgetscriptgoal();
    var_6 = 1;

    while ( var_6 )
    {
        var_7 = scripts\engine\utility::_id_143B1( var_0, var_1, var_2, var_3, var_4, "_encstr_B3F914F3AA53231093D74FA7117DA1FEE322E8F95263" );
        var_6 = 0;
        var_8 = 1;

        if ( var_7 == "_encstr_AFBE120520148741235B144058C1DB4096534DCB" || var_7 == "_encstr_AA7205F03A9609" || var_7 == "_encstr_B3F914F3AA53231093D74FA7117DA1FEE322E8F95263" )
        {
            if ( !self bothasscriptgoal() )
                var_8 = 0;
            else
            {
                var_9 = self botgetscriptgoal();
                var_8 = scripts\mp\bots\bots_util::bot_vectors_are_equal( var_5, var_9 );
            }
        }

        if ( var_7 == "_encstr_80BF06CA78A2226B" && isdefined( self.enemy ) )
        {
            var_8 = 0;
            var_6 = 1;
        }

        if ( var_8 )
            self botclearscriptgoal();
    }
}

watch_out_of_ammo()
{
    self notify( "_encstr_A9781213E168AB421067677B1F20EADF78C80D9D" );
    self endon( "_encstr_A9781213E168AB421067677B1F20EADF78C80D9D" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    while ( !scripts\mp\bots\bots_util::bot_out_of_ammo() )
        wait 0.5;

    self notify( "_encstr_8AFB0CA5C56971E741691F17C058" );
}

bot_add_ambush_time_delayed( var_0, var_1 )
{
    self notify( "_encstr_A6CB1CA6F74B7663BFEA49B01256338B535F35AB5DD7BEA12752A0088AEF" );
    self endon( "_encstr_A6CB1CA6F74B7663BFEA49B01256338B535F35AB5DD7BEA12752A0088AEF" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    if ( isdefined( var_0 ) )
        self endon( var_0 );

    self endon( "_encstr_AFBE120520148741235B144058C1DB4096534DCB" );
    self endon( "_encstr_ABE5097DD9AF49972FE390" );
    var_2 = gettime();

    if ( isdefined( var_1 ) )
        self waittill( var_1 );

    if ( isdefined( self.ambush_end ) && isdefined( self.node_ambushing_from ) )
    {
        self.ambush_end = self.ambush_end + ( gettime() - var_2 );
        self.node_ambushing_from.bot_ambush_end = self.ambush_end + 10000;
    }

    self notify( "_encstr_A6CB1CA6F74B7663BFEA49B01256338B535F35AB5DD7BEA12752A0088AEF" );
}

bot_watch_entrances_delayed( var_0, var_1, var_2, var_3 )
{
    self notify( "_encstr_80A01CBAAAAC86332B63FF30973AF0D31253CDCFDF27AE374838161A5741" );

    if ( var_2.size > 0 )
    {
        self endon( "_encstr_80A01CBAAAAC86332B63FF30973AF0D31253CDCFDF27AE374838161A5741" );
        self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
        self endon( var_0 );
        self endon( "_encstr_AFBE120520148741235B144058C1DB4096534DCB" );
        self endon( "_encstr_ABE5097DD9AF49972FE390" );

        if ( isdefined( var_1 ) )
            self waittill( var_1 );

        self endon( "_encstr_8B600BAA07513A9F69B8476F28" );
        childthread scripts\mp\bots\bots_util::bot_watch_nodes( var_2, var_3, 0, self.ambush_end );
        childthread bot_monitor_watch_entrances_camp();
    }
}

bot_monitor_watch_entrances_camp()
{
    self notify( "_encstr_9E2B219EF05C310F57AB28B3986217D49A78E94057B5E8308BE3A60701CB37D07BBD3F" );
    self endon( "_encstr_9E2B219EF05C310F57AB28B3986217D49A78E94057B5E8308BE3A60701CB37D07BBD3F" );
    self notify( "_encstr_BE8C1C13B7D1F5B67B374BA3DE93D7DDC2D1B134EBB273E89CB037C6566E" );
    self endon( "_encstr_BE8C1C13B7D1F5B67B374BA3DE93D7DDC2D1B134EBB273E89CB037C6566E" );
    self endon( "_encstr_9EF215E66864296BC0A9DFAA21E26F2255884FD3538253" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    while ( !isdefined( self.watch_nodes ) )
        wait 0.05;

    while ( isdefined( self.watch_nodes ) )
    {
        foreach ( var_1 in self.watch_nodes )
            var_1.watch_node_chance[self.entity_number] = var_1.watch_node_base_chance[self.entity_number];

        scripts\mp\bots\bots_strategy::prioritize_watch_nodes_toward_enemies( 0.5 );
        wait( randomfloatrange( 0.5, 0.75 ) );
    }
}

bot_find_ambush_entrances( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_2 = [];
    var_3 = findentrances( var_0.origin );

    if ( isdefined( var_3 ) && var_3.size > 0 )
    {
        wait 0.05;
        var_4 = var_0.type != "_encstr_A6FF0C9F778B38368A3173D90A73" && var_0.type != "_encstr_89D80ECFFD42C7B17FB032211B011621";

        if ( var_4 && var_1 )
            var_3 = self botnodescoremultiple( var_3, "_encstr_8B0412DCBD1959BE95C383DECDAE9C59FAB3D2CD", var_0.origin, "_encstr_9C3D071B63023B26C3" );

        foreach ( var_6 in var_3 )
        {
            if ( distancesquared( self.origin, var_6.origin ) < 90000 )
                continue;

            if ( var_4 && var_1 )
            {
                wait 0.05;

                if ( !scripts\mp\bots\bots_util::entrance_visible_from( var_6.origin, var_0.origin, "_encstr_9C3D071B63023B26C3" ) )
                    continue;
            }

            var_2[var_2.size] = var_6;
        }
    }

    return var_2;
}

bot_filter_ambush_inuse( var_0 )
{
    var_1 = [];
    var_2 = gettime();
    var_3 = var_0.size;

    for ( var_4 = 0; var_4 < var_3; var_4++ )
    {
        var_5 = var_0[var_4];

        if ( !isdefined( var_5.bot_ambush_end ) || var_2 > var_5.bot_ambush_end )
            var_1[var_1.size] = var_5;
    }

    return var_1;
}

bot_filter_ambush_vicinity( var_0, var_1, var_2 )
{
    var_3 = [];
    var_4 = [];
    var_5 = var_2 * var_2;

    if ( level.teambased )
    {
        foreach ( var_7 in level.participants )
        {
            if ( !var_7 scripts\cp_mp\utility\player_utility::_isalive() )
                continue;

            if ( !isdefined( var_7.team ) )
                continue;

            if ( var_7.team == var_1.team && var_7 != var_1 && isdefined( var_7.node_ambushing_from ) )
                var_4[var_4.size] = var_7.node_ambushing_from.origin;
        }
    }

    var_9 = var_4.size;
    var_10 = var_0.size;

    for ( var_11 = 0; var_11 < var_10; var_11++ )
    {
        var_12 = 0;
        var_13 = var_0[var_11];

        for ( var_14 = 0; !var_12 && var_14 < var_9; var_14++ )
        {
            var_15 = distancesquared( var_4[var_14], var_13.origin );
            var_12 = var_15 < var_5;
        }

        if ( !var_12 )
            var_3[var_3.size] = var_13;
    }

    return var_3;
}

clear_camper_data()
{
    self notify( "_encstr_9D85123EFC07B97D4992A0D8BB9F35367B993DA7" );

    if ( isdefined( self.node_ambushing_from ) && isdefined( self.node_ambushing_from.bot_ambush_end ) )
        self.node_ambushing_from.bot_ambush_end = undefined;

    self.node_ambushing_from = undefined;
    self.point_to_ambush = undefined;
    self.ambush_yaw = undefined;
    self.ambush_entrances = undefined;
    self.ambush_duration = randomintrange( 20000, 30000 );
    self.ambush_end = -1;
}

should_select_new_ambush_point()
{
    if ( scripts\mp\bots\bots_strategy::bot_has_tactical_goal() )
        return 0;

    if ( gettime() > self.ambush_end )
        return 1;

    if ( !self bothasscriptgoal() )
        return 1;

    return 0;
}

find_camp_node()
{
    self notify( "_encstr_97F00F569BE0BBF1E710C20BF925357379" );
    self endon( "_encstr_97F00F569BE0BBF1E710C20BF925357379" );
    return scripts\mp\bots\bots_util::bot_queued_process( "_encstr_AF1A163461B381AFCE0A48A8C1A597D9F72FC438D21F693D", ::find_camp_node_worker );
}

find_camp_node_worker()
{
    self notify( "_encstr_AF1A163461B381AFCE0A48A8C1A597D9F72FC438D21F693D" );
    self endon( "_encstr_AF1A163461B381AFCE0A48A8C1A597D9F72FC438D21F693D" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    clear_camper_data();

    if ( level.zonecount <= 0 )
        return 0;

    var_0 = getzonenearest( self.origin );
    var_1 = undefined;
    var_2 = undefined;
    var_3 = self getplayerangles();

    if ( isdefined( var_0 ) )
    {
        var_4 = botzonenearestcount( var_0, self.team, -1, "_encstr_B8620EF373D58D4BC1ABF22BC9D0F7E5", "_encstr_824C0272", 0, "_encstr_A3830558B13697", "_encstr_944C02BC", 1 );

        if ( !isdefined( var_4 ) )
            var_4 = botzonenearestcount( var_0, self.team, -1, "_encstr_B8620EF373D58D4BC1ABF22BC9D0F7E5", "_encstr_824C0272", 0 );

        if ( isdefined( var_4 ) )
        {
            var_5 = getzonenodeforindex( var_4 );
            var_6 = getlinkednodes( var_5 );

            if ( var_6.size == 0 )
                var_4 = undefined;
        }

        if ( !isdefined( var_4 ) )
        {
            var_7 = -1;
            var_8 = -1;

            for ( var_9 = 0; var_9 < level.zonecount; var_9++ )
            {
                var_5 = getzonenodeforindex( var_9 );
                var_6 = getlinkednodes( var_5 );

                if ( var_6.size > 0 )
                {
                    var_10 = scripts\engine\utility::random( getzonenodes( var_9 ) );
                    var_11 = isdefined( var_10.targetname ) && var_10.targetname == "_encstr_BEAB13186029A1B28B19DAE9254CC7D977283705E0";

                    if ( !var_11 )
                    {
                        var_12 = distance2dsquared( getzoneorigin( var_9 ), self.origin );

                        if ( var_12 > var_7 )
                        {
                            var_7 = var_12;
                            var_8 = var_9;
                        }
                    }
                }
            }

            var_4 = var_8;
        }

        var_13 = getzonepath( var_0, var_4 );

        if ( !isdefined( var_13 ) || var_13.size == 0 )
            return 0;

        for ( var_14 = 0; var_14 <= int( var_13.size / 2 ); var_14++ )
        {
            var_1 = var_13[var_14];
            var_2 = var_13[int( min( var_14 + 1, var_13.size - 1 ) )];

            if ( botzonegetcount( var_2, self.team, "_encstr_B8620EF373D58D4BC1ABF22BC9D0F7E5" ) != 0 )
                break;
        }

        if ( isdefined( var_1 ) && isdefined( var_2 ) && var_1 != var_2 )
        {
            var_3 = getzoneorigin( var_2 ) - getzoneorigin( var_1 );
            var_3 = vectortoangles( var_3 );
        }
    }

    var_15 = undefined;

    if ( isdefined( var_1 ) )
    {
        var_16 = 1;
        var_17 = 1;
        var_18 = 0;

        while ( var_16 )
        {
            var_19 = getzonenodesbydist( var_1, 800 * var_17, 1 );

            if ( var_19.size > 1024 )
                var_19 = getzonenodes( var_1, 0 );

            wait 0.05;
            var_20 = randomint( 100 );

            if ( var_20 < 66 && var_20 >= 33 )
                var_3 = ( var_3[0], var_3[1] + 45, 0 );
            else if ( var_20 < 33 )
                var_3 = ( var_3[0], var_3[1] - 45, 0 );

            if ( var_19.size > 0 )
            {
                while ( var_19.size > 1024 )
                    var_19[var_19.size - 1] = undefined;

                var_21 = int( clamp( var_19.size * 0.15, 1, 10 ) );

                if ( var_18 )
                    var_19 = self botnodepickmultiple( var_19, var_21, var_21, "_encstr_B3D40ABE78415F1107B062AB", anglestoforward( var_3 ), "_encstr_80060832D82DB47F28E5" );
                else
                    var_19 = self botnodepickmultiple( var_19, var_21, var_21, "_encstr_B3D40ABE78415F1107B062AB", anglestoforward( var_3 ) );

                var_19 = bot_filter_ambush_inuse( var_19 );

                if ( !isdefined( self.can_camp_near_others ) || !self.can_camp_near_others )
                {
                    var_22 = 800;
                    var_19 = bot_filter_ambush_vicinity( var_19, self, var_22 );
                }

                if ( var_19.size > 0 )
                    var_15 = scripts\engine\utility::random_weight_sorted( var_19 );
            }

            if ( isdefined( var_15 ) )
                var_16 = 0;
            else if ( isdefined( self.camping_needs_fallback_camp_location ) )
            {
                if ( var_17 == 1 && !var_18 )
                    var_17 = 3;
                else if ( var_17 == 3 && !var_18 )
                    var_18 = 1;
                else if ( var_17 == 3 && var_18 )
                    var_16 = 0;
            }
            else
                var_16 = 0;

            if ( var_16 )
                wait 0.05;
        }
    }

    if ( !isdefined( var_15 ) || !self botnodeavailable( var_15 ) )
        return 0;

    self.node_ambushing_from = var_15;
    self.ambush_end = gettime() + self.ambush_duration;
    self.node_ambushing_from.bot_ambush_end = self.ambush_end;
    self.ambush_yaw = var_3[1];
    return 1;
}

find_ambush_node( var_0, var_1 )
{
    clear_camper_data();

    if ( isdefined( var_0 ) )
        self.point_to_ambush = var_0;
    else
    {
        var_2 = undefined;
        var_3 = getnodesinradius( self.origin, 5000, 0, 2000 );

        if ( var_3.size > 0 )
            var_2 = self botnodepick( var_3, var_3.size * 0.25, "_encstr_BE280D8DEF12E5A114FA41B9E7E188" );

        if ( isdefined( var_2 ) )
            self.point_to_ambush = var_2.origin;
        else
            return 0;
    }

    var_4 = 2000;

    if ( isdefined( var_1 ) )
        var_4 = var_1;

    var_5 = getnodesinradius( self.point_to_ambush, var_4, 0, 1000 );
    var_6 = undefined;

    if ( var_5.size > 0 )
    {
        var_7 = int( max( 1, int( var_5.size * 0.15 ) ) );
        var_5 = self botnodepickmultiple( var_5, var_7, var_7, "_encstr_A4D90CF8C2A39DD17E4DDDFB7BE4", self.point_to_ambush );
    }

    var_5 = bot_filter_ambush_inuse( var_5 );

    if ( var_5.size > 0 )
        var_6 = scripts\engine\utility::random_weight_sorted( var_5 );

    if ( !isdefined( var_6 ) || !self botnodeavailable( var_6 ) )
        return 0;

    self.node_ambushing_from = var_6;
    self.ambush_end = gettime() + self.ambush_duration;
    self.node_ambushing_from.bot_ambush_end = self.ambush_end;
    var_8 = vectornormalize( self.point_to_ambush - self.node_ambushing_from.origin );
    var_9 = vectortoangles( var_8 );
    self.ambush_yaw = var_9[1];
    return 1;
}

bot_random_path()
{
    if ( scripts\mp\bots\bots_util::bot_is_remote_or_linked() )
        return 0;

    return self [[ level.bot_random_path_function ]]();
}

bot_random_path_default()
{
    var_0 = 0;
    var_1 = 50;

    if ( self.personality == "_encstr_BD9207539F80EB7FC5" )
        var_1 = 0;

    var_2 = undefined;

    if ( randomint( 100 ) < var_1 )
        var_2 = scripts\mp\bots\bots_util::bot_recent_point_of_interest();

    if ( !isdefined( var_2 ) )
        var_2 = self botfindrandomgoal();

    if ( isdefined( var_2 ) )
        var_0 = self botsetscriptgoal( var_2, 128, "_encstr_BCCC058033936B" );

    return var_0;
}

bot_setup_callback_class()
{
    if ( scripts\mp\bots\bots_loadout::bot_setup_loadout_callback() )
        return "_encstr_9BAA097EB163581D86D2B0";
    else
        return "_encstr_9780077798D1733369";
}
