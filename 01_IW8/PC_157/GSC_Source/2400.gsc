// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

getinfilpath( var_0 )
{
    var_1 = scripts\engine\utility::getstructarray( var_0, "_encstr_B8CE0BE43FC317DF690862BA48" );

    if ( !isdefined( var_1 ) )
        return;

    foreach ( var_3 in var_1 )
    {
        if ( istrue( level.interactiveinfil ) )
        {
            if ( isdefined( var_3.script_noteworthy ) && var_3.script_noteworthy == "_encstr_87010C1190BB2B3253C269807EF2" )
                return var_3;
        }
        else if ( !isdefined( var_3.script_noteworthy ) || var_3.script_noteworthy != "_encstr_87010C1190BB2B3253C269807EF2" )
            return var_3;
    }
}

player_unlink( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    if ( var_1 islinked() )
        var_1 unlink();
}

player_free_look( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    if ( var_1 islinked() )
        var_1 lerpviewangleclamp( 0, 0, 0, 45, 45, 45, 45 );
}

player_fov_80_instant( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 lerpfovbypreset( "_encstr_93300BD0FF0E47453F70DA2218" );
}

_id_12497( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 lerpfovbypreset( "_encstr_BA420DDD4757180B9B4F6A19C2BFCD" );
}

player_fov_default_2( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 lerpfovbypreset( "_encstr_98791151FD0F98353BC396335BF7E630A554C7" );
}

player_lock_look_1_second( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    if ( var_1 islinked() )
        var_1 lerpviewangleclamp( 1, 0.25, 0.25, 0, 0, 0, 0 );
}

player_lock_look_2_second( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    if ( var_1 islinked() )
        var_1 lerpviewangleclamp( 2, 0.5, 0.5, 0, 0, 0, 0 );
}

player_lock_look_instant( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    if ( var_1 islinked() )
        var_1 lerpviewangleclamp( 0, 0, 0, 0, 0, 0, 0 );
}

rumble_low( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread updateshakeonplayer( undefined, undefined, undefined, undefined, undefined, "_encstr_8C7F0B5DE308E1F385E86A92F1", 0.05, 0.1 );
}

cam_shake_low( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread updateshakeonplayer( 0.06, 0.075, 2, var_1.origin, 8000, "_encstr_8C7F0B5DE308E1F385E86A92F1", 0.05, 0.1 );
}

cam_shake_running( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread updateshakeonplayer( 0.09, 0.115, 2, var_1.origin, 8000, undefined, 0.15, 0.5 );
}

cam_shake_parked( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread updateshakeonplayer( 0.065, 0.09, 0.5, var_1.origin, 8000, undefined, 0.15, 0.5 );
}

cam_shake_off( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 notify( "_encstr_98690F2BB8C70A6F61B76DA756E85F140B" );
}

updateshakeonplayer( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( istrue( level.interactiveinfil ) && istrue( self.interactivecombat ) )
        return;

    self notify( "_encstr_98690F2BB8C70A6F61B76DA756E85F140B" );
    self endon( "_encstr_98690F2BB8C70A6F61B76DA756E85F140B" );
    level endon( "_encstr_8BF80EDBDA10705A600880871A60DF03" );
    level endon( "_encstr_AF860BCA5D4E98B9E1EC25F031" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    while ( isdefined( self ) )
    {
        if ( isdefined( var_0 ) && isdefined( var_1 ) )
            self earthquakeforplayer( randomfloatrange( var_0, var_1 ), var_2, var_3, var_4 );

        if ( isdefined( var_5 ) )
            self playrumbleonpositionforclient( var_5, self.origin );

        wait( randomfloatrange( var_6, var_7 ) );
    }
}

hideactors()
{
    if ( !isdefined( self.actors ) )
        return;

    foreach ( var_1 in self.actors )
        var_1 hide();
}

showactors()
{
    if ( !isdefined( self.actors ) )
        return;

    foreach ( var_1 in self.actors )
        var_1 show();
}

setcinematicmotion_heli( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 setcinematicmotionoverride( "_encstr_AFFA11833616BC9527FA4395C6B4FA934B322B" );
}

setcinematicmotion_playermotion( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 setcinematicmotionoverride( "_encstr_B46114E1674A5953A1B133FAFB0977CBA82F6E4FFBB0" );
}

setcinematicmotion_disabled( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 setcinematicmotionoverride( "_encstr_9F1D0909124FCF686D15A1" );
}

set_cinematicmotionomnvaroverrides( var_0 )
{
    self setclientomnvar( "_encstr_95642B5B476DD0B4E5E0658F2F5690AF229A20EE1F932833A2E54037B1D8F3AFFE1887427687D8B7F2F3B1D96B", var_0 );
    self setclientomnvar( "_encstr_A4152B88DA5519D84F8CD5409B87A0D3BA22B9C0926B4B1317A7E858668FE98FA94AC0F809C5ADC943C263CD4D", var_0 );
    self setclientomnvar( "_encstr_8B852E8A2138830C30F94C6FFF4815CF5E5971D3EB07730290CB54518F1851170813AAE990E81371B01D7D328DD8A77F", var_0 );
    self setclientomnvar( "_encstr_ABD22ED0820D519037C49D18A34F782B72EAF1B80B668D0BCBF19D0BB74BE6C51C323859123DC1C6EF0E2DFE82BFC9BB", var_0 );
}

set_cinematicmotionomnvarovertime( var_0, var_1, var_2 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    var_3 = gettime();
    var_2 = var_2 * 1000;
    var_4 = int( var_3 + var_2 );
    var_5 = abs( var_0 - var_1 );

    for (;;)
    {
        var_3 = gettime();
        var_6 = clamp( 1.0 - ( var_4 - var_3 ) / var_2, 0.0, 1.0 );
        var_7 = scripts\engine\utility::ter_op( var_0 < var_1, var_5 * var_6 + var_0, var_0 - var_5 * var_6 );
        set_cinematicmotionomnvaroverrides( var_7 );

        if ( var_6 == 1.0 )
            break;

        waitframe();
    }
}

setcinematicmotion_omnvaroverride_max_instant( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 set_cinematicmotionomnvaroverrides( 1.0 );
}

setcinematicmotion_omnvaroverride_max_1( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread set_cinematicmotionomnvarovertime( 0.0, 1.0, 1.0 );
}

setcinematicmotion_omnvaroverride_max_2( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread set_cinematicmotionomnvarovertime( 0.0, 1.0, 2.0 );
}

setcinematicmotion_omnvaroverride_max_3( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread set_cinematicmotionomnvarovertime( 0.0, 1.0, 3.0 );
}

setcinematicmotion_omnvaroverride_max_4( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread set_cinematicmotionomnvarovertime( 0.0, 1.0, 4.0 );
}

setcinematicmotion_omnvaroverride_max_5( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread set_cinematicmotionomnvarovertime( 0.0, 1.0, 5.0 );
}

setcinematicmotion_omnvaroverride_min_instant( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 set_cinematicmotionomnvaroverrides( 0.0 );
}

setcinematicmotion_omnvaroverride_min_1( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread set_cinematicmotionomnvarovertime( 1.0, 0.0, 1.0 );
}

setcinematicmotion_omnvaroverride_min_2( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread set_cinematicmotionomnvarovertime( 1.0, 0.0, 2.0 );
}

setcinematicmotion_omnvaroverride_min_3( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread set_cinematicmotionomnvarovertime( 1.0, 0.0, 3.0 );
}

setcinematicmotion_omnvaroverride_min_4( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread set_cinematicmotionomnvarovertime( 1.0, 0.0, 4.0 );
}

setcinematicmotion_omnvaroverride_min_5( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 thread set_cinematicmotionomnvarovertime( 1.0, 0.0, 5.0 );
}

player_equip_nvg( var_0 )
{
    if ( !scripts\cp_mp\utility\game_utility::isnightmap() )
        return;

    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_1 nightvisionviewon();
}

getgroundcompensationheight( var_0 )
{
    if ( !isdefined( var_0 ) )
        return;

    if ( isdefined( var_0.player ) )
        var_1 = var_0.player;
    else
        var_1 = var_0;

    var_2 = var_1.origin[2];
    var_3 = scripts\engine\trace::create_solid_ai_contents( 1 );
    var_4 = var_1.origin + ( 0, 0, 12 );
    var_5 = var_1.origin - ( 0, 0, 24 );
    var_6 = scripts\engine\trace::player_trace( var_4, var_5, var_1.angles, [ var_1, var_1.infil.linktoent ], var_3 )["_encstr_B7260923C89E8F3378E72E"];
    var_7 = var_6[2];
    var_1.infilheightcompensation = var_7 - var_2;
}

compensatetoground()
{
    level endon( "_encstr_8BF80EDBDA10705A600880871A60DF03" );
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    var_0 = 0.0;
    self.personalscenenode unlink();

    while ( isdefined( self.personalscenenode ) )
    {
        getgroundcompensationheight( self.player_rig );
        var_1 = ( self.personalscenenode.origin[0], self.personalscenenode.origin[1], self.personalscenenode.origin[2] + self.infilheightcompensation );

        if ( abs( var_0 - self.infilheightcompensation ) > 0.01 )
        {
            var_0 = self.infilheightcompensation;
            self.personalscenenode moveto( var_1, 0.25, 0.05, 0.2 );
        }

        waitframe();
    }
}

#using_animtree("_encstr_93DC0DCD1B272D3847AF5BED23B2C6");

infil_player_rig_updated( var_0, var_1, var_2 )
{
    self.animname = var_0;

    if ( !isdefined( var_1 ) )
        var_1 = ( 0, 0, 0 );

    if ( !isdefined( var_2 ) )
        var_2 = ( 0, 0, 0 );

    self predictstreampos( var_1 );
    var_3 = spawn( "_encstr_BEFE0C06A30BE829D321D0703A2A", var_1, 0, 0, self );
    var_3.angles = var_2;
    var_3.player = self;
    self.player_rig = var_3;
    self.player_rig hide( 1 );
    self.player_rig.animname = var_0;
    self.player_rig useanimtree( #animtree );
    self.player_rig.updatedversion = 1;
    self.player_rig.weapon_state_func = ::handleweaponstatenotetrack;
    self.player_rig.cinematic_motion_override = ::handlecinematicmotionnotetrack;
    self.player_rig.dof_func = ::handledofnotetrack;
    self playerlinktodelta( self.player_rig, "_encstr_BA010BA012DFB703A379A39542", 1.0, 0, 0, 0, 0, 1 );
    self notify( "_encstr_9D920C22836881D766C97A33D1B5" );
    scripts\engine\utility::_id_143A5( "_encstr_BE840B5637BAB7AB0527C04BDF", "_encstr_AD571162494313EDC369036B80199FFB3950EB" );

    if ( istrue( level.gameended ) )
        return;

    if ( isdefined( self ) )
    {
        self unlink();
        thread takegunless();
    }

    if ( isdefined( var_3 ) )
        var_3 delete();
}

handledofnotetrack( var_0 )
{
    if ( !isdefined( self ) || !isdefined( self.player ) )
        return;

    switch ( var_0 )
    {
        case "_encstr_95910FEEF8381D7AC8B3E3838306A24788":
            self.player enablephysicaldepthoffieldscripting();

            switch ( self.animname )
            {
                case "_encstr_8CFF07A369FF9B9189":
                    self.player setphysicaldepthoffield( 1.8, 40, 20, 20 );
                    break;
                case "_encstr_9EFF079B2BF71B2F9F":
                    self.player setphysicaldepthoffield( 1.8, 60, 20, 20 );
                    break;
                case "_encstr_98FF073B92EF75B1CA":
                    self.player setphysicaldepthoffield( 1.9, 50, 20, 20 );
                    break;
            }

            break;
        case "_encstr_9CD80BEE8C47482B39A238484B":
            self.player enablephysicaldepthoffieldscripting();
            self.player setphysicaldepthoffield( 2.8, 500, 4, 4 );
            break;
        case "_encstr_9D040F258B188CCFF0488A33D1BE374538":
            self.player enablephysicaldepthoffieldscripting();

            switch ( self.animname )
            {
                case "_encstr_8CFF07A369FF9B9189":
                    self.player setphysicaldepthoffield( 2.4, 50, 20, 20 );
                    break;
                case "_encstr_9EFF079B2BF71B2F9F":
                    self.player setphysicaldepthoffield( 2.4, 50, 20, 20 );
                    break;
                case "_encstr_98FF073B92EF75B1CA":
                    self.player setphysicaldepthoffield( 2.4, 50, 20, 20 );
                    break;
                case "_encstr_9CFF07E349E88BE706":
                    self.player setphysicaldepthoffield( 2.4, 50, 20, 20 );
                    break;
                case "_encstr_A8FF07CD8DF6A3AF86":
                    self.player setphysicaldepthoffield( 2.4, 50, 20, 20 );
                    break;
                case "_encstr_B8FF07507BA74B7FEF":
                    self.player setphysicaldepthoffield( 2.4, 50, 20, 20 );
                    break;
            }

            break;
        case "_encstr_98D40B3D78BCEACB5635D3A4AB":
            self.player enablephysicaldepthoffieldscripting();
            self.player setphysicaldepthoffield( 2.8, 500, 4, 4 );
            break;
        case "_encstr_88B80DFB3860D9893B835042240A46":
            self.player enablephysicaldepthoffieldscripting();

            switch ( self.animname )
            {
                case "_encstr_8CFF07A369FF9B9189":
                    self.player setphysicaldepthoffield( 2.1, 40, 20, 20 );
                    break;
                case "_encstr_9EFF079B2BF71B2F9F":
                    self.player setphysicaldepthoffield( 2.1, 40, 20, 20 );
                    break;
                case "_encstr_98FF073B92EF75B1CA":
                    self.player setphysicaldepthoffield( 2.1, 40, 20, 20 );
                    break;
                case "_encstr_9CFF07E349E88BE706":
                    self.player setphysicaldepthoffield( 2.1, 40, 20, 20 );
                    break;
                case "_encstr_A8FF07CD8DF6A3AF86":
                    self.player setphysicaldepthoffield( 2.3, 60, 20, 20 );
                    break;
                case "_encstr_B8FF07507BA74B7FEF":
                    self.player setphysicaldepthoffield( 2.3, 60, 20, 20 );
                    break;
            }

            break;
        case "_encstr_ABED0954368AD7C918FFF0":
            self.player enablephysicaldepthoffieldscripting();
            self.player setphysicaldepthoffield( 2.8, 500, 4, 4 );
            break;
    }
}

handlecinematicmotionnotetrack( var_0 )
{
    if ( !isdefined( self ) || !isdefined( self.player ) )
        return;

    var_1 = getsubstr( var_0, 0, 4 );

    if ( var_1 == "_encstr_BA180587837DB1" )
    {
        var_2 = getsubstr( var_0, 4 );
        self.player setcinematicmotionoverride( var_2 );
        return;
    }

    switch ( var_0 )
    {
        case "_encstr_BE880CD936EBD7480E97F040FB4C":
            setcinematicmotion_omnvaroverride_max_instant( self );
            break;
        case "_encstr_BEA406E51770AED2":
            setcinematicmotion_omnvaroverride_max_1( self );
            break;
        case "_encstr_B7A4061F1B80D8D7":
            setcinematicmotion_omnvaroverride_max_2( self );
            break;
        case "_encstr_93A4066BC21E7D66":
            setcinematicmotion_omnvaroverride_max_3( self );
            break;
        case "_encstr_B9A40687383A677F":
            setcinematicmotion_omnvaroverride_max_4( self );
            break;
        case "_encstr_A1A406301143A79B":
            setcinematicmotion_omnvaroverride_max_5( self );
            break;
        case "_encstr_97B20C7F80CD8F420566FBB6C0E9":
            setcinematicmotion_omnvaroverride_min_instant( self );
            break;
        case "_encstr_BE6206D62D9BF526":
            setcinematicmotion_omnvaroverride_min_1( self );
            break;
        case "_encstr_BA6206D64BDC7D91":
            setcinematicmotion_omnvaroverride_min_2( self );
            break;
        case "_encstr_BD62065B5ADC7D99":
            setcinematicmotion_omnvaroverride_min_3( self );
            break;
        case "_encstr_B96206B596DCAFA1":
            setcinematicmotion_omnvaroverride_min_4( self );
            break;
        case "_encstr_A16206DA96DCBE53":
            setcinematicmotion_omnvaroverride_min_5( self );
            break;
    }
}

handleweaponstatenotetrack( var_0 )
{
    if ( !isdefined( self ) || !isdefined( self.player ) )
        return;

    switch ( var_0 )
    {
        case "_encstr_816605F2558730":
            self.player setdemeanorviewmodel( "_encstr_930E073E8FC00DDF69" );
            self.player scripts\engine\utility::ent_flag_init( "_encstr_BCB9142B8773029D12C739474383B9CE20E7B2DA4502" );
            self.player scripts\engine\utility::ent_flag_init( "_encstr_9D3914138F687A5BD8593A7223ADDFB29015BC812530" );
            self.player scripts\engine\utility::ent_flag_init( "_encstr_9F26152B7F567AD13F7BF95F285B2991882D98BA905327" );
            self.player scripts\engine\utility::ent_flag_set( "_encstr_BCB9142B8773029D12C739474383B9CE20E7B2DA4502" );
            self.player thread has_relic_amped_victim_survived_time();

            if ( !isai( self.player ) )
                self.player givegunless();

            if ( istrue( self.updatedversion ) )
                self showonlytoplayer( self.player );

            self.player scripts\common\utility::allow_reload( 0 );
            break;
        case "_encstr_AF1106F6965A2F69":
            if ( isdefined( self.player.infilweapon ) && self.player hasweapon( self.player.infilweapon ) )
                self.player scripts\cp_mp\utility\inventory_utility::_takeweapon( self.player.infilweapon );

            self.player.stopchallengetimers = 1;

            if ( self.player scripts\engine\utility::ent_flag_exist( "_encstr_BCB9142B8773029D12C739474383B9CE20E7B2DA4502" ) && self.player scripts\engine\utility::ent_flag( "_encstr_BCB9142B8773029D12C739474383B9CE20E7B2DA4502" ) )
                self.player scripts\engine\utility::ent_flag_clear( "_encstr_BCB9142B8773029D12C739474383B9CE20E7B2DA4502" );

            self.player setdemeanorviewmodel( "_encstr_930E073E8FC00DDF69" );

            if ( !istrue( self.updatedversion ) )
                self.player stopviewmodelanim();

            if ( scripts\cp_mp\utility\script_utility::issharedfuncdefined( "_encstr_AAB0079B102F47FF38", "_encstr_BC351881370E70F89F03D6F9BA9BA768A48A2B7FA5F61830CB6B" ) )
                self.player [[ scripts\cp_mp\utility\script_utility::getsharedfunc( "_encstr_AAB0079B102F47FF38", "_encstr_BC351881370E70F89F03D6F9BA9BA768A48A2B7FA5F61830CB6B" ) ]]();

            if ( !isai( self.player ) )
                self.player takegunless();

            if ( istrue( self.updatedversion ) && self.player islinked() )
                self.player playerlinkedsetforceparentvisible( 0 );

            if ( !self.player scripts\common\utility::is_reload_allowed() )
                self.player scripts\common\utility::allow_reload( 1 );

            break;
        case "_encstr_A418051B62EBDD":
            self.player setdemeanorviewmodel( "_encstr_A418051B62EBDD", "_encstr_9D751661E7CAD98FA573D16A9989DF0E10AFF2CF47B85F4F" );
            break;
        case "_encstr_930E073E8FC00DDF69":
            self.player setdemeanorviewmodel( "_encstr_930E073E8FC00DDF69" );
            break;
        case "_encstr_B77805CC2759AC":
            self.player scripts\common\utility::allow_fire( 1 );
            self.player scripts\common\utility::allow_ads( 1 );

            if ( !self.player scripts\common\utility::is_reload_allowed() )
                self.player scripts\common\utility::allow_reload( 1 );

            break;
        case "_encstr_95CC05C015BCF0":
            self.player scripts\common\utility::allow_fire( 0 );
            self.player scripts\common\utility::allow_ads( 0 );

            if ( !self.player scripts\common\utility::is_reload_allowed() )
                self.player scripts\common\utility::allow_reload( 0 );

            break;
    }
}

has_relic_amped_victim_survived_time()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    scripts\engine\utility::waittill_any_ents( self, "_encstr_A3750609A5E61883", level, "_encstr_8BF80EDBDA10705A600880871A60DF03" );
    scripts\engine\utility::ent_flag_clear( "_encstr_BCB9142B8773029D12C739474383B9CE20E7B2DA4502", 1 );
    scripts\engine\utility::ent_flag_clear( "_encstr_9D3914138F687A5BD8593A7223ADDFB29015BC812530", 1 );
    scripts\engine\utility::ent_flag_clear( "_encstr_9F26152B7F567AD13F7BF95F285B2991882D98BA905327", 1 );
}

takegunless()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    if ( !isdefined( self.gunnlessweapon ) || !self hasweapon( self.gunnlessweapon ) )
        return;

    if ( scripts\engine\utility::ent_flag_exist( "_encstr_9D3914138F687A5BD8593A7223ADDFB29015BC812530" ) && scripts\engine\utility::ent_flag( "_encstr_9D3914138F687A5BD8593A7223ADDFB29015BC812530" ) )
        scripts\engine\utility::ent_flag_wait( "_encstr_9F26152B7F567AD13F7BF95F285B2991882D98BA905327" );

    if ( !scripts\common\utility::is_script_weapon_switch_allowed() )
        scripts\common\utility::allow_script_weapon_switch( 1 );

    while ( self hasweapon( self.gunnlessweapon ) )
    {
        if ( !scripts\cp_mp\utility\inventory_utility::iscurrentweapon( self.gunnlessweapon ) )
            scripts\cp_mp\utility\inventory_utility::abortmonitoredweaponswitch( self.gunnlessweapon );
        else
        {
            scripts\cp_mp\utility\inventory_utility::_takeweapon( self.gunnlessweapon );
            scripts\cp_mp\utility\inventory_utility::forcevalidweapon();
        }

        waitframe();
    }

    self.gunnlessweapon = undefined;
    scripts\common\utility::allow_script_weapon_switch( 0 );
}

givegunless()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    if ( isdefined( self.gunnlessweapon ) )
        return;

    var_0 = getcompleteweaponname( "_encstr_B42A12B25FEB60776776B1F0928F571340CC2F63" );
    scripts\cp_mp\utility\inventory_utility::_giveweapon( var_0, undefined, undefined, 1 );

    if ( !scripts\common\utility::is_script_weapon_switch_allowed() )
        scripts\common\utility::allow_script_weapon_switch( 1 );

    var_1 = scripts\cp_mp\utility\inventory_utility::domonitoredweaponswitch( var_0, 0 );

    if ( var_1 )
        self.gunnlessweapon = var_0;
    else
    {
        scripts\cp_mp\utility\inventory_utility::_takeweapon( var_0 );
        scripts\cp_mp\utility\inventory_utility::forcevalidweapon();
    }

    scripts\common\utility::allow_script_weapon_switch( 0 );
    return var_1;
}
