// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

removeincoming()
{
    var_0 = 3;

    if ( scripts\mp\utility\game::getgametype() == "_encstr_9507034B25" )
        var_0 = 1;

    return var_0;
}

initkillstreakdata()
{
    var_0 = spawnstruct();
    level.killstreakglobals = var_0;
    var_0.costomnvars = [];
    var_0.costomnvars[1] = "_encstr_9C5A15F31B0F83DB50505FAF406B82AACBA2F1EEF0BF2B";
    var_0.costomnvars[2] = "_encstr_955819AE5AFA9B8DBDC92BD7DCA3E456C2B57DE8DDDEFAB1DECDE8";
    var_0.costomnvars[3] = "_encstr_97C51BAEB4FA37B17B4E59BE6ED14E9585ADEBE8D09356CA7D8DBDCD8E";
    var_0.slotomnvars = [];
    var_0.slotomnvars[0] = "_encstr_AF9E186D8C2137A1A70B904967D4DB436AB4F0FBA56AD30AAF1A";
    var_0.slotomnvars[1] = "_encstr_8B9E1805DB86A7BEBFC802B9D8D1B2B739B2A781E049278037FA";
    var_0.slotomnvars[2] = "_encstr_A19E188BC791DE701FEAD16E52EC301DAA67673B434AADF017D2";
    var_0.slotomnvars[3] = "_encstr_B99E1833C4FF38165A7B737F0793E6C099DCFE08AD2C70537156";
    var_0.availableomnvars = [];
    var_0.availableomnvars[0] = "_encstr_B6B21CEA5ABE37B1B7E456EB9BE893562C5BAF856785A58D0BC46395AF81";
    var_0.availableomnvars[1] = "_encstr_A3B21CDBD2D92FA3324327AF7A5B0847471230095DB0D8FD13029B01778E";
    var_0.availableomnvars[2] = "_encstr_81B21CF3E81F421778B6EDDFCEE3AB0F8B60D90AB83BBC639196FC1DF003";
    var_0.availableomnvars[3] = "_encstr_89B21C5DB4AF9B1BEDC9B2AF6EA3E4AC16B5BE8567C25A6358891BB2F5CC";
    parsestreaktable();
    scripts\mp\utility\join_team_aggregator::registeronplayerjointeamcallback( ::killstreakonteamchange );
}

parsestreaktable()
{
    var_0 = level.killstreakglobals;

    if ( isdefined( game["_encstr_BE9E10EBCBF0CBAA99F8324A08E166BBA8A5"] ) )
    {
        var_0.streaktable = game["_encstr_BE9E10EBCBF0CBAA99F8324A08E166BBA8A5"];
        return;
    }

    var_1 = spawnstruct();
    game["_encstr_BE9E10EBCBF0CBAA99F8324A08E166BBA8A5"] = var_1;
    var_0.streaktable = var_1;
    var_1.tabledatabyref = [];
    var_2 = 1;

    for (;;)
    {
        var_3 = tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 1 );

        if ( var_3 == "_encstr_A40101" )
            break;

        var_1.tabledatabyref[var_3] = [];
        var_1.tabledatabyref[var_3]["_encstr_A48F06A5B991CA0F"] = int( tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 0 ) );
        var_1.tabledatabyref[var_3]["_encstr_935208266A3FD0E97FAB"] = int( tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 27 ) );
        var_1.tabledatabyref[var_3]["_encstr_BE6C08435D1925C6DE9B"] = tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 12 );
        var_1.tabledatabyref[var_3]["_encstr_8BAE0D72137DFBFBB8AABBC957B7AA"] = tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 13 );
        var_1.tabledatabyref[var_3]["_encstr_93A50F2BDC59B52F556ECA88A50BC6B7EC"] = int( tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 10 ) );
        var_1.tabledatabyref[var_3]["_encstr_BA8D06E75935489E"] = int( tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 4 ) );
        var_1.tabledatabyref[var_3]["_encstr_9DBD0CA0EF483BEF0B3BBEA0D243"] = int( tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 5 ) );
        var_1.tabledatabyref[var_3]["_encstr_93F50A6B31E8AB3F71AF0BF4"] = int( tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 6 ) );
        var_1.tabledatabyref[var_3]["_encstr_81BA051A9AA88B"] = tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 2 );
        var_1.tabledatabyref[var_3]["_encstr_A80B0C22CAC748BB8C78F70DAAF5"] = tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 16 );

        if ( var_3 != "_encstr_AABA05236DC831" )
        {
            var_4 = tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 7 );
            game["_encstr_B8DA073D799798C7C7"][var_3] = var_4;
            var_5 = tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 8 );
            game["_encstr_B8DA073D799798C7C7"]["_encstr_82E7112C6336D2ACDCFACC4E2DB29B461BE57D" + var_3 + "_encstr_ABFF097D96CD26EDEA9B32"] = var_5 + "_encstr_876C0E7FA622F0050BEA28B2615FC658";
            game["_encstr_B8DA073D799798C7C7"]["_encstr_89060E68A27DBBC1BF27CDB0F52F8A0F" + var_3 + "_encstr_ABFF097D96CD26EDEA9B32"] = var_5 + "_encstr_A2CC0BD7CA7359D6F2AF5DCDAC";
            var_6 = tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 9 );
            game["_encstr_B8DA073D799798C7C7"]["_encstr_B2530FD141F86AC78C8B5A8210D543A0F1" + var_3 + "_encstr_ABFF097D96CD26EDEA9B32"] = var_6 + "_encstr_876C0E7FA622F0050BEA28B2615FC658";
            game["_encstr_B8DA073D799798C7C7"]["_encstr_A3AC0C161E96E6D72B37AC5B5EFA" + var_3 + "_encstr_ABFF097D96CD26EDEA9B32"] = var_6 + "_encstr_A2CC0BD7CA7359D6F2AF5DCDAC";
            game["_encstr_B8DA073D799798C7C7"]["_encstr_9BE405709A9D69" + var_3] = var_5 + "_encstr_974305863BA7D5";
            game["_encstr_B8DA073D799798C7C7"]["_encstr_B9B80B6A8196E3AA40B32D34E7" + var_3] = var_5 + "_encstr_8A5A0B4EE3F57E0335F079E5F9";
            game["_encstr_B8DA073D799798C7C7"]["_encstr_AFC809A3D25B567BD5A3BE" + var_3] = var_5 + "_encstr_AFBD09674319A7CF807B0C";
            var_7 = int( tablelookupbyrow( "_encstr_977A17B583BCAD961BC637A3E459B0ADA2B0318D2B8B1BB9B3", var_2, 11 ) );
            scripts\mp\rank::registerscoreinfo( "_encstr_A1190C34C08884D3E53D474F1718" + var_3, "_encstr_989406CC014C5F05", var_7 );
        }

        var_2++;
    }
}

onplayerconnect()
{
    for (;;)
    {
        level waittill( "_encstr_87940A7F075A88E8ABD37951", var_0 );

        if ( !isdefined( var_0.pers["_encstr_B98C11C75DF9EBCBDF804B372AD25FC1CF02D3"] ) )
            var_0.pers["_encstr_B98C11C75DF9EBCBDF804B372AD25FC1CF02D3"] = 0;

        if ( !isdefined( var_0.pers["_encstr_9C9F0B9B8E4EB2585B2216D1B0"] ) )
            var_0.pers["_encstr_9C9F0B9B8E4EB2585B2216D1B0"] = createplayerstreakdatastruct();

        var_0.streakdata = var_0.pers["_encstr_9C9F0B9B8E4EB2585B2216D1B0"];
        var_0 scripts\mp\utility\stats::initpersstat( "_encstr_B29A0DAB799A055BEF21477B208493" );
        var_0.streakpoints = var_0 scripts\mp\utility\stats::getpersstat( "_encstr_B29A0DAB799A055BEF21477B208493" );
        var_0.previousstreakpoints = var_0.streakpoints;
        var_0.nukepoints = var_0 scripts\mp\utility\stats::getpersstat( "_encstr_81C910A89FDA9F18A0527BA7DF74C830B630" );
        var_0 visionsetmissilecamforplayer( game["_encstr_BA4A0F471A5693D616D8F53B2DCD967BB9"] );

        if ( !level.roundretainstreaks )
            var_0 resetstreakavailability( 1 );
    }
}

onplayerspawned()
{
    if ( isdefined( level.deathretainstreaks ) && !level.deathretainstreaks )
        resetstreakavailability( 1 );

    selectfirstavailablekillstreak();

    if ( !isdefined( self.earnedstreaklevel ) )
        self.earnedstreaklevel = 0;

    self.triggeringstreak = undefined;
    setstreakcounttonext();
    updatekillstreakselectedui();
    updatekillstreakuislots();
    updatestreakmeterui();
    updatestreakcosts();
    _id_13DB8();
}

createplayerstreakdatastruct()
{
    var_0 = spawnstruct();
    var_0.streaks = [];
    return var_0;
}

getplayerstreakdata()
{
    return self.streakdata;
}

resetforloadoutswitch()
{
    updatespecialistui();
    updatestreakcosts();

    if ( isdefined( self.oldperks ) && isdefined( self.perks ) && self.oldperks.size > 0 )
    {
        if ( scripts\engine\utility::array_contains_key( self.perks, "_encstr_8C9E1ED237DB22713140FBD7C12B255B89C01A8B086F5A8C7890F3F37841E393" ) && scripts\engine\utility::array_contains_key( self.oldperks, "_encstr_8C9E1ED237DB22713140FBD7C12B255B89C01A8B086F5A8C7890F3F37841E393" ) )
            return;
        else if ( !scripts\engine\utility::array_contains_key( self.oldperks, "_encstr_8C9E1ED237DB22713140FBD7C12B255B89C01A8B086F5A8C7890F3F37841E393" ) )
            return;
        else
        {
            resetstreakpoints();
            resetstreakavailability();
            updatekillstreakuislots();
            updatekillstreakselectedui();
        }
    }
}

setupinputnotifications()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( isbot( self ) )
        return;

    scripts\mp\flags::gameflagwait( "_encstr_989F0E38272BD6161DB143F532BDDC2B" );
    self notifyonplayercommand( "_encstr_8ADC0D5BB97DDC2B1B2BB1E8BE571C", "_encstr_A65C0E44DB08AB0A0F28F7811F9B8A3B" );
    self notifyonplayercommand( "_encstr_9BFE0F741E97E751C92B7743C1EA1F3BA0", "_encstr_BC5C0E0AC12F2B7B755220A03ACBA1AB" );
    self notifyonplayercommand( "_encstr_9C5E0C74160FA2DB3388776B2143", "_encstr_AA5C0E13FB2023E7F080639A8855FACB" );
    self notifyonplayercommand( "_encstr_985E0CF0C3DF21514C6B97E8C7DC", "_encstr_AB5C0E86296FC9F83062830A50E34635" );
    self notifyonplayercommand( "_encstr_8A5E0CC8BFCF77C639F36FEE8F8A", "_encstr_A25C0E0EB07FAB174090D3F4380BFAA2" );
    self notifyonplayercommand( "_encstr_8C5E0CCCAEA70A43AB608F83B9CB", "_encstr_825C0E23CB1013B7A0D013EAD805CA5B" );
    self setactionslot( 4, "_encstr_A40101" );
}

updatestreakcount()
{
    if ( self.streakpoints == self.previousstreakpoints )
        return;

    var_0 = self.streakpoints;
    self setkillstreakpoints( int( min( self.streakpoints, 16384 ) ) );

    if ( !isdefined( self.nextstreakcost ) || self.streakpoints >= self.nextstreakcost )
        setstreakcounttonext();
}

resetstreakcount()
{
    self setkillstreakpoints( 0 );
    self setclientomnvar( "_encstr_9C5A15F31B0F83DB50505FAF406B82AACBA2F1EEF0BF2B", 0 );
    var_0 = scripts\mp\utility\game::getgametype() == "_encstr_9507034B25";

    if ( !var_0 )
    {
        self setclientomnvar( "_encstr_955819AE5AFA9B8DBDC92BD7DCA3E456C2B57DE8DDDEFAB1DECDE8", 0 );
        self setclientomnvar( "_encstr_97C51BAEB4FA37B17B4E59BE6ED14E9585ADEBE8D09356CA7D8DBDCD8E", 0 );
    }

    setstreakcounttonext();
    self setclientkillstreakavailability();
}

setstreakcounttonext()
{
    if ( !isdefined( self.streaktype ) )
    {
        self.nextstreakcost = 0;
        self setnextkillstreakcost( 0 );
        return;
    }

    if ( findmaxstreakcost() == 0 )
    {
        self.nextstreakcost = 0;
        self setnextkillstreakcost( 0 );
        return;
    }

    var_0 = self.nextstreakcost;
    var_1 = getnextstreakname();

    if ( !isdefined( var_1 ) )
        return;

    var_2 = calcstreakcost( var_1 );
    self.nextstreakcost = var_2;

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_8C9E1ED237DB22713140FBD7C12B255B89C01A8B086F5A8C7890F3F37841E393" ) && isdefined( getkillstreakinslot( 1 ) ) && !istrue( self.earnedmaxkillstreak ) )
    {
        var_3 = 0;

        foreach ( var_5 in self.streakdata.streaks )
        {
            if ( istrue( var_5.earned ) )
            {
                var_3 = 1;
                continue;
            }

            var_3 = 0;
        }

        if ( var_3 && !isdefined( self.earnedmaxkillstreak ) )
        {
            self.earnedmaxkillstreak = 1;
            self.nextstreakcost = 0;
            self setnextkillstreakcost( 0 );
            self setkillstreakpoints( 0 );
            self setclientomnvar( "_encstr_9C5A15F31B0F83DB50505FAF406B82AACBA2F1EEF0BF2B", 0 );
            var_7 = scripts\mp\utility\game::getgametype() == "_encstr_9507034B25";

            if ( !var_7 )
            {
                self setclientomnvar( "_encstr_955819AE5AFA9B8DBDC92BD7DCA3E456C2B57DE8DDDEFAB1DECDE8", 0 );
                self setclientomnvar( "_encstr_97C51BAEB4FA37B17B4E59BE6ED14E9585ADEBE8D09356CA7D8DBDCD8E", 0 );
            }

            return;
        }
    }

    self setnextkillstreakcost( var_2 );
}

getnextstreakname()
{
    if ( self.streakpoints == findmaxstreakcost() && self.streaktype != "_encstr_98AE0B231BA5974428F1594BA9" )
        var_0 = 0;
    else
        var_0 = self.streakpoints;

    for ( var_1 = 1; var_1 <= 4; var_1++ )
    {
        var_2 = getkillstreakinslot( var_1 );

        if ( var_2.currentcost > var_0 )
            return var_2.streakname;
    }

    return undefined;
}

updatestreakmeterui()
{
    self setclientomnvar( "_encstr_B21810AED2FADCC6F64E59EB6EE893AC2C5B", self.streakpoints );
}

updatestreakcosts()
{
    updatestreakcost( 1 );
    updatestreakcost( 2 );
    updatestreakcost( 3 );
    updatestreakcost( 4 );
}

updatestreakcost( var_0 )
{
    var_1 = level.killstreakglobals;
    var_2 = getkillstreakinslot( var_0 );

    if ( isdefined( var_2 ) )
    {
        var_3 = calcstreakcost( var_2.streakname );
        var_2.currentcost = var_3;

        if ( var_0 <= removeincoming() )
        {
            var_4 = var_1.costomnvars[var_0];
            self setclientomnvar( var_4, var_3 );
        }
    }
}

findmaxstreakcost()
{
    for ( var_0 = 4; var_0 >= 1; var_0-- )
    {
        var_1 = getkillstreakinslot( var_0 );

        if ( !isdefined( var_1 ) )
            continue;

        return var_1.currentcost;
    }

    return 0;
}

updatekillstreakuislots()
{
    if ( !scripts\mp\utility\player::isreallyalive( self ) )
        return;

    var_0 = level.killstreakglobals;

    for ( var_1 = 0; var_1 <= removeincoming(); var_1++ )
        updatekillstreakuislot( var_1 );
}

updatekillstreakuislot( var_0 )
{
    if ( var_0 > removeincoming() )
        return;

    if ( isdefined( level._id_11C8C ) && ![[ level._id_11C8C ]]( var_0 ) )
        return;

    var_1 = level.killstreakglobals;
    var_2 = getkillstreakinslot( var_0 );

    if ( isdefined( var_2 ) && isdefined( var_2.streakname ) )
    {
        var_3 = undefined;

        if ( istrue( self.loadoutusingspecialist ) && var_0 != 0 )
        {
            var_4 = scripts\mp\perks\perks::getspecialistperkforstreak( var_2.streakname );
            var_3 = scripts\mp\perks\perks::getperkid( var_4 );
        }
        else
            var_3 = scripts\mp\utility\killstreak::getkillstreakindex( var_2.streakname );

        self setclientomnvar( var_1.slotomnvars[var_0], var_3 );
        self setclientomnvar( var_1.availableomnvars[var_0], var_2.available );
        ammobox_getbufferedattachment( var_0, var_3 );
        ammobox_clearbufferedattachmentweapon( var_0, var_2.available );
    }
    else
    {
        self setclientomnvar( var_1.slotomnvars[var_0], 0 );
        self setclientomnvar( var_1.availableomnvars[var_0], 0 );
        ammobox_getbufferedattachment( var_0, 0 );
        ammobox_clearbufferedattachmentweapon( var_0, 0 );
    }
}

updatekillstreakselectedui()
{
    var_0 = getselectedkillstreakindex();

    if ( isdefined( var_0 ) )
        self setclientomnvar( "_encstr_9EB41EE8E02F1F4B80930299CFA30BF5419FA94782FC1D0B3BA23CF7E7FD2F65", var_0 );
    else
        self setclientomnvar( "_encstr_9EB41EE8E02F1F4B80930299CFA30BF5419FA94782FC1D0B3BA23CF7E7FD2F65", -1 );
}

updatespecialistui()
{
    if ( isdefined( self.loadoutusingspecialist ) )
        self setclientomnvar( "_encstr_AB161E7384BF78561A3B33BFC753262B599CBE48AAD79B97925723CB93AAEED0", self.loadoutusingspecialist );
}

killstreakonteamchange( var_0 )
{
    if ( istrue( var_0.changedteams ) )
        var_0 clearkillstreaks();
}

listenkillstreakaction( var_0, var_1 )
{
    if ( isdefined( var_0 ) && var_0 == "_encstr_A31C0E032BA3D5688407B7832C6F3025" )
        dokillstreakaction( undefined, var_1 );
}

dokillstreakaction( var_0, var_1 )
{
    if ( isdefined( self.triggeringstreak ) )
        return;

    if ( isdefined( var_0 ) && issubstr( var_0, "_encstr_821904A32F31" ) )
        var_1 = gettriggeredslotfromnotify( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = getkillstreakinslot( var_1 );

    if ( !isdefined( var_2 ) || var_2.available == 0 || var_2.available == -1 )
        return;

    setselectedkillstreak( var_1 );
    thread triggerkillstreak( var_2, var_1 );
}

trytriggerkillstreakfromsuper( var_0 )
{
    var_1 = createstreakitemstruct( var_0 );
    var_1.available = 1;
    return triggerkillstreak( var_1 );
}

gettriggeredslotfromnotify( var_0 )
{
    var_1 = undefined;

    if ( !isai( self ) )
    {
        if ( !self usinggamepad() )
        {
            if ( var_0 == "_encstr_8A5E0CC8BFCF77C639F36FEE8F8A" || var_0 == "_encstr_8C5E0CCCAEA70A43AB608F83B9CB" || var_0 == "_encstr_9C5E0C74160FA2DB3388776B2143" || var_0 == "_encstr_985E0CF0C3DF21514C6B97E8C7DC" )
                var_1 = getselectedkillstreakindex();
        }
    }
    else if ( scripts\mp\utility\game::getgametype() == "_encstr_BC7205C8ABFDE7" && !scripts\engine\utility::is_player_gamepad_enabled() )
    {
        switch ( var_0 )
        {
            case "_encstr_8A5E0CC8BFCF77C639F36FEE8F8A":
                var_1 = 0;
                break;
            case "_encstr_8C5E0CCCAEA70A43AB608F83B9CB":
                var_1 = 0;
                break;
            case "_encstr_9C5E0C74160FA2DB3388776B2143":
                var_1 = 0;
                break;
            case "_encstr_985E0CF0C3DF21514C6B97E8C7DC":
                var_1 = 0;
                break;
        }
    }
    else
    {
        switch ( var_0 )
        {
            case "_encstr_8A5E0CC8BFCF77C639F36FEE8F8A":
                var_1 = 1;
                break;
            case "_encstr_8C5E0CCCAEA70A43AB608F83B9CB":
                var_1 = 2;
                break;
            case "_encstr_9C5E0C74160FA2DB3388776B2143":
                var_1 = 3;
                break;
            case "_encstr_985E0CF0C3DF21514C6B97E8C7DC":
                var_1 = 0;
                break;
        }
    }

    return var_1;
}

iskillstreakvisibleforcodcaster( var_0 )
{
    if ( !isdefined( var_0 ) )
        return 0;

    switch ( var_0 )
    {
        case "_encstr_A29D0C52188BC58BF976173587E3":
        case "_encstr_ABF20A23E47B73B29193DE1C":
        case "_encstr_8BFA1059C1A8717A6058B8E5FAB037E3D628":
        case "_encstr_B61904AEB067":
            return 0;
        default:
            return 1;
    }
}

triggerkillstreak( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_2 = var_0.streaksetupinfo;

    if ( !scripts\common\utility::is_killstreaks_allowed() )
    {
        scripts\mp\hud_message::showerrormessage( "_encstr_A3481BB4A42613A94525A88269A697A128E49CD315AF242AFA55D4A244" );
        return 0;
    }

    if ( isdefined( level._id_11C6C ) && !self [[ level._id_11C6C ]]( var_0, var_1 ) )
    {
        scripts\mp\hud_message::showerrormessage( "_encstr_A3481BB4A42613A94525A88269A697A128E49CD315AF242AFA55D4A244" );
        return 0;
    }

    if ( var_0.isspecialist || isdefined( self.triggeringstreak ) && self.triggeringstreak == var_0 )
        return 0;

    self.triggeringstreak = var_0;
    scripts\cp_mp\killstreaks\killstreakdeploy::streakdeploy_cancelalldeployments();
    var_3 = scripts\cp_mp\utility\killstreak_utility::createstreakinfo( var_0.streakname, self );
    var_3.mpstreaksysteminfo = var_0;
    var_4 = scripts\mp\utility\game::getgametype() == "_encstr_9507034B25";

    if ( var_4 )
        var_0.uniqueid = var_3.id;

    scripts\mp\gamelogic::sethasdonecombat( self, 1 );
    var_5 = self [[ var_2.triggeredfunc ]]( var_3 );
    self.triggeringstreak = undefined;

    if ( !istrue( var_5 ) )
        return 0;

    if ( isdefined( var_1 ) )
        onsuccessfulstreakactivation( var_0, var_1 );

    return 1;
}

onkillstreaktriggered( var_0 )
{
    return 1;
}

onkillstreakbeginuse( var_0 )
{
    var_1 = var_0.owner;

    if ( !isdefined( var_1 ) )
        return 0;

    if ( !var_1 scripts\mp\utility\killstreak::validateusestreak( var_0.streakname ) )
        return 0;

    return 1;
}

onkillstreakfinishuse( var_0, var_1 )
{

}

forceactivatekillstreak( var_0, var_1 )
{
    var_2 = createstreakitemstruct( var_0 );
    triggerkillstreak( var_2 );
}

forceactivategimmekillstreak()
{
    var_0 = getkillstreakinslot( 0 );
    triggerkillstreak( var_0 );
}

onsuccessfulstreakactivation( var_0, var_1 )
{
    var_2 = var_0.streakname;

    if ( istrue( level._id_145EC ) && self.streaktype != "_encstr_98AE0B231BA5974428F1594BA9" )
        var_0.available = -1;
    else
        var_0.available = -1;

    ammobox_clearbufferedattachmentweapon( var_1, var_0.available );
    var_3 = scripts\mp\utility\game::getgametype() == "_encstr_9507034B25";

    if ( isdefined( var_1 ) )
    {
        if ( var_3 || ( var_1 == 0 || var_1 >= 5 ) )
            removekillstreak( var_1 );

        selectnextavailablekillstreak();
        updatekillstreakuislot( var_1 );
    }
    else
    {

    }

    thread scripts\cp\vehicles\vehicle_compass_cp::usedkillstreak( var_2 );
    scripts\mp\utility\print::printgameaction( "_encstr_BD2A16B65A3636B9E8E459C26D80E61D0B93D1591980A540" + var_2, self );
    scripts\mp\utility\dialog::playkillstreakusedialog( var_2 );
    var_6 = scripts\mp\matchdata::gettimefrommatchstart( gettime() );
    var_0.attackerisinflictor = var_6;
    scripts\mp\analyticslog::logevent_killstreakactivated( self, var_0._id_13913, var_0.streakname, var_0.isgimme, var_6, self.origin );

    switch ( var_2 )
    {
        case "_encstr_98E50D36B03956BE1C851BDAC2D9CA":
            scripts\mp\utility\stats::incpersstat( "_encstr_ABE81A6FD1ADD0167B8331B93A8FC7F8075083F74B56C055878B0901", 1 );
            break;
        case "_encstr_AFC512BBC7224E40E51DE1BA49C9F8868A133719":
            scripts\mp\utility\stats::incpersstat( "_encstr_B4E31F7A3984145B8323DA617AC9BD7DD31CD96A9E41A519E3AD4BE8289DB371AC", 1 );
            break;
    }

    combatrecordkillstreakuse( var_2 );

    if ( isdefined( self.petwatch ) )
    {
        scripts\cp_mp\pet_watch::addkillstreakcharge();

        if ( var_0.currentcost > 7 )
            scripts\cp_mp\pet_watch::addtopkillstreakcharge();

        if ( var_2 == "_encstr_BDBA05D35D0C2D" )
            scripts\cp_mp\pet_watch::addnukecharge();
        else if ( var_2 == "_encstr_AAFC0BA9AB3B9DCAC9DC2C571D" )
            scripts\cp_mp\pet_watch::battle_tracks_standingonsamevehiclewithsametracksowner();
    }
}

createstreakitemstruct( var_0 )
{
    var_1 = spawnstruct();
    var_1.available = 0;
    var_1.streakname = var_0;
    var_1.isgimme = 0;
    var_1.streaksetupinfo = getkillstreaksetupinfo( var_0 );
    var_1.madeavailabletime = -1;
    var_1.currentcost = calcstreakcost( var_0 );
    var_1.isspecialist = scripts\mp\perks\perks::usescriptablemeleeblood( var_0 );
    var_1._id_136D2 = scripts\mp\perks\perks::getspecialistperkforstreak( var_0 );
    return var_1;
}

awardkillstreak( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = createstreakitemstruct( var_0 );
    awardkillstreakfromstruct( var_6, var_1, var_2, var_3, var_4, var_5 );
}

awardkillstreakfromstruct( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_0.isgimme = 1;
    var_6 = 0;

    if ( isdefined( var_5 ) )
        var_6 = var_5;

    if ( isdefined( var_0 ) )
    {
        if ( !isdefined( var_2 ) )
            var_2 = var_0.streaklifeid;

        if ( !isdefined( var_3 ) )
            var_3 = var_0._id_13913;
    }

    slotkillstreak( var_0, var_6 );
    setselectedkillstreak( var_6 );
    makekillstreakavailable( var_6, var_1, var_2, var_3, var_4 );
}

equipkillstreak( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isdefined( var_1 ) )
        return;

    var_2 = createstreakitemstruct( var_0 );
    slotkillstreak( var_2, var_1 );
}

equipslotonekillstreak( var_0 )
{
    equipkillstreak( var_0, 1 );
}

equipslottwokillstreak( var_0 )
{
    equipkillstreak( var_0, 2 );
}

equipslotthreekillstreak( var_0 )
{
    equipkillstreak( var_0, 3 );
}

pushgimmeslotstreakontostack()
{
    var_0 = getplayerstreakdata();

    if ( isdefined( var_0.streaks[36] ) )
        return 0;

    var_1 = var_0.streaks[0];

    if ( !isdefined( var_1 ) )
        return 1;

    for ( var_2 = 5; var_2 < 37; var_2++ )
    {
        if ( !isdefined( var_0.streaks[var_2] ) )
        {
            var_0.streaks[var_2] = var_1;
            var_0.streaks[0] = undefined;
            break;
        }
    }

    return 1;
}

popstackedstreakintogimmeslot()
{
    var_0 = getplayerstreakdata();
    var_1 = var_0.streaks[0];
    var_2 = undefined;
    var_3 = undefined;

    for ( var_4 = 5; var_4 < 37; var_4++ )
    {
        var_5 = var_0.streaks[var_4];

        if ( isdefined( var_5 ) )
        {
            var_2 = var_5;
            var_3 = var_4;
            continue;
        }

        break;
    }

    var_0.streaks[0] = var_2;

    if ( isdefined( var_3 ) )
        var_0.streaks[var_3] = undefined;
}

deletestackedstreak( var_0 )
{
    var_1 = getplayerstreakdata();

    if ( var_0 == 36 )
    {
        var_1.streaks[var_0] = undefined;
        return;
    }

    for ( var_2 = var_0; var_2 < 36; var_2++ )
    {
        var_3 = var_1.streaks[var_2 + 1];

        if ( !isdefined( var_3 ) )
            break;

        var_1.streaks[var_0] = var_3;
    }
}

removekillstreak( var_0 )
{
    self.streakdata.streaks[var_0] = undefined;

    if ( var_0 == 0 )
        popstackedstreakintogimmeslot();
    else if ( var_0 >= 5 )
        deletestackedstreak( var_0 );
}

clearkillstreaks()
{
    self.streakdata.streaks = [];
    resetstreakpoints();
    resetstreakavailability();
    clearkillstreakselection();
    updatekillstreakuislots();
    updatekillstreakselectedui();
}

slotkillstreak( var_0, var_1 )
{
    if ( var_1 == 0 )
    {
        if ( !pushgimmeslotstreakontostack() )
            return;
    }
    else
    {

    }

    self.streakdata.streaks[var_1] = var_0;
    updatekillstreakuislot( var_1 );

    if ( var_1 != 0 )
        updatestreakcost( var_1 );
}

earnkillstreak( var_0, var_1 )
{
    var_2 = getkillstreakinslot( var_0 );
    var_3 = var_2.streakname;
    scripts\mp\utility\script::bufferednotify( "_encstr_9BC21BB2169C375923F55BB4D8B1DC474EB2C2AD7D31D599CC9593AC46", var_3 );
    self.earnedstreaklevel = var_1;

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_8C9E1ED237DB22713140FBD7C12B255B89C01A8B086F5A8C7890F3F37841E393" ) )
        self.streakdata.streaks[var_0].earned = 1;

    self.streakdata.streaks[var_0].lifeid = scripts\cp_mp\utility\killstreak_utility::getcurrentplayerlifeidforkillstreak();

    if ( !level.gameended )
    {
        thread scripts\mp\hud_message::showkillstreaksplash( var_3, var_1 );
        combatrecordincrementkillstreakawardedstat( var_3 );
    }

    setstreakcounttonext();
    makekillstreakavailable( var_0, "_encstr_BEBD072BC2939BAC32" );
}

makekillstreakavailable( var_0, var_1, var_2, var_3, var_4 )
{
    var_5 = getkillstreakinslot( var_0 );

    if ( !isdefined( var_5 ) )
        return;

    var_6 = var_5.streakname;

    if ( isdefined( var_5._id_136D2 ) )
        var_6 = var_5._id_136D2;

    loadassociatedkillstreakweapons( var_6 );
    var_7 = var_5.streaksetupinfo;

    if ( self.team == "_encstr_A68C0A5803A5D151A2B310A6" )
        return;

    var_5.available = 1;
    ammobox_clearbufferedattachmentweapon( var_0, var_5.available );
    setselectedkillstreak( var_0 );
    updatekillstreakuislot( var_0 );

    if ( isdefined( var_7.availablefunc ) )
        self [[ var_7.availablefunc ]]( var_5 );

    if ( var_5.isgimme )
        self notify( "_encstr_8A171B4E2F42BB401EF778A9DF217BF54A17505A840A61CBE4B348409F" );

    var_5.madeavailabletime = scripts\mp\matchdata::gettimefrommatchstart( gettime() );
    var_5.streaklifeid = self.lifeid;
    var_5._id_13913 = self.matchdatalifeindex;
    var_5.owner = self;
    var_5._id_121B0 = self getxuid();

    if ( isdefined( var_2 ) )
        var_5.streaklifeid = var_2;

    if ( isdefined( var_3 ) )
        var_5._id_13913 = var_3;

    if ( isdefined( var_4 ) )
    {
        var_5.owner = var_4;
        var_5._id_121B0 = var_4 getxuid();
    }

    scripts\cp\vehicles\vehicle_compass_cp::_id_12047( var_5.streakname, var_1 );
    scripts\mp\analyticslog::logevent_killstreakavailable( self, var_5._id_13913, var_6, var_5.isgimme, var_5.madeavailabletime, self.origin );

    if ( isdefined( self.petwatch ) && var_0 == removeincoming() )
    {
        var_8 = 0;
        var_9 = 0;
        var_10 = getallavailablekillstreakstructs();

        foreach ( var_12 in var_10 )
        {
            var_13 = getvisiblekillstreakavailable( var_12.streakname );

            switch ( var_13 )
            {
                case 1:
                    var_8 = var_12.streaklifeid == self.lifeid;
                    break;
                case 2:
                    var_9 = var_12.streaklifeid == self.lifeid;
                    break;
                default:
                    break;
            }
        }

        if ( var_8 && var_9 )
            scripts\cp_mp\pet_watch::battle_tracks_getplayerdataenum();
        else
            scripts\cp_mp\pet_watch::battle_tracks_getnewtogglestate();
    }
}

ammobox_getbufferedattachment( var_0, var_1 )
{
    if ( var_0 > removeincoming() )
        return;

    self resetclientkillstreakindexes( var_0, var_1 );
}

ammobox_clearbufferedattachmentweapon( var_0, var_1 )
{
    if ( var_0 > removeincoming() )
        return;

    self resetclientkillstreakavailability( var_0, var_1 );
}

givekillstreak( var_0, var_1, var_2 )
{
    awardkillstreak( var_0, "_encstr_93610627DB28CDDB" );
}

calcstreakcost( var_0 )
{
    var_1 = int( scripts\mp\utility\killstreak::getkillstreakkills( var_0 ) );

    if ( isdefined( self ) && isplayer( self ) )
        var_1 = var_1 + getperkadjustedkillstreakcost( var_0, var_1 );

    var_1 = int( clamp( var_1, 0, 7000 ) );
    return var_1;
}

getperkadjustedkillstreakcost( var_0, var_1 )
{
    var_2 = 0;

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_8C9E1ED237DB22713140FBD7C12B255B89C01A8B086F5A8C7890F3F37841E393" ) )
    {
        var_3 = scripts\mp\utility\killstreak::getkillstreakindex( var_0 );
        var_2 = 175 * var_3;
    }

    if ( scripts\mp\utility\perk::_hasperk( "_encstr_950B130F210D8AD1B820BBC07EC8E1535581EF83E3" ) && var_1 > 0 && var_0 != "_encstr_BDBA05D35D0C2D" )
    {
        if ( scripts\mp\utility\perk::_hasperk( "_encstr_B4F424AE0A42D72069B35838978BF8117A72A5B6277A8FAE44A7F9705FD7D34B535B1EB5BE72" ) )
            var_2 = var_2 - 125;
        else
            var_2--;
    }

    return var_2;
}

killstreakselectionwatcher()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_A1D70BDE071B53794F208AE3F8" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    for (;;)
    {
        var_0 = scripts\engine\utility::_id_143AD( "_encstr_8ADC0D5BB97DDC2B1B2BB1E8BE571C", "_encstr_9BFE0F741E97E751C92B7743C1EA1F3BA0" );

        if ( !scripts\engine\utility::is_player_gamepad_enabled() )
            continue;

        if ( !istrue( self.iscarrying ) )
        {
            var_1 = getselectedkillstreakindex();

            if ( !isdefined( var_1 ) )
                continue;

            var_2 = var_1;

            if ( var_0 == "_encstr_8ADC0D5BB97DDC2B1B2BB1E8BE571C" )
                var_2 = getnextselectablekillstreakslot( var_1 );
            else if ( var_0 == "_encstr_9BFE0F741E97E751C92B7743C1EA1F3BA0" )
                var_2 = getpreviousselectablekillstreakslot( var_1 );
            else
            {

            }

            setselectedkillstreak( var_2 );
        }
    }
}

selectfirstavailablekillstreak()
{
    var_0 = getplayerstreakdata();

    if ( isdefined( var_0.streaks[0] ) )
    {
        if ( var_0.streaks[0].available == 1 )
        {
            setselectedkillstreak( 0 );
            return;
        }
    }
    else
    {
        for ( var_1 = removeincoming(); var_1 >= 0; var_1-- )
        {
            var_2 = var_0.streaks[var_1];

            if ( isdefined( var_2 ) && var_2.available == 1 )
            {
                setselectedkillstreak( var_1 );
                return;
            }
        }
    }

    clearkillstreakselection();
}

getnextselectablekillstreakslot( var_0 )
{
    var_1 = var_0;
    var_2 = scripts\engine\utility::ter_op( var_0 >= removeincoming(), 0, var_0 + 1 );
    var_3 = var_0;
    var_4 = var_2;

    while ( var_4 != var_3 )
    {
        var_5 = self.streakdata.streaks[var_4];

        if ( isdefined( var_5 ) && var_5.available == 1 )
        {
            var_1 = var_4;
            break;
        }

        var_4++;

        if ( var_4 > removeincoming() )
            var_4 = 0;
    }

    return var_1;
}

getpreviousselectablekillstreakslot( var_0 )
{
    var_1 = var_0;
    var_2 = scripts\engine\utility::ter_op( var_0 <= 0, removeincoming(), var_0 - 1 );
    var_3 = var_0;
    var_4 = var_2;

    while ( var_4 != var_3 )
    {
        var_5 = self.streakdata.streaks[var_4];

        if ( isdefined( var_5 ) && var_5.available == 1 )
        {
            var_1 = var_4;
            break;
        }

        var_4--;

        if ( var_4 < 0 )
            var_4 = removeincoming();
    }

    return var_1;
}

selectmostexpensivekillstreak()
{
    var_0 = undefined;
    var_1 = -1;

    for ( var_2 = removeincoming(); var_2 >= 0; var_2-- )
    {
        var_3 = self.streakdata.streaks[var_2];

        if ( isdefined( var_3 ) && var_3.available == 1 )
        {
            if ( var_3.currentcost > var_1 )
            {
                var_0 = var_2;
                var_1 = var_3.currentcost;
            }
        }
    }

    if ( !isdefined( var_0 ) )
    {
        clearkillstreakselection();
        return;
    }

    setselectedkillstreak( var_0 );
}

selectnextavailablekillstreak()
{
    var_0 = undefined;
    var_1 = -1;

    for ( var_2 = 0; var_2 <= removeincoming(); var_2++ )
    {
        var_3 = self.streakdata.streaks[var_2];

        if ( isdefined( var_3 ) && var_3.available == 1 )
        {
            if ( istrue( var_3.isgimme ) )
            {
                var_0 = var_2;
                break;
            }
            else if ( var_3.currentcost > var_1 )
            {
                var_0 = var_2;
                var_1 = var_3.currentcost;
            }
        }
    }

    if ( !isdefined( var_0 ) )
    {
        clearkillstreakselection();
        return;
    }

    setselectedkillstreak( var_0 );
}

setselectedkillstreak( var_0 )
{
    if ( var_0 != 0 && istrue( self.loadoutusingspecialist ) )
        return;

    var_1 = getkillstreakinslot( var_0 );
    self.currentselectedkillstreakslot = var_0;
    updatekillstreakselectedui();

    if ( scripts\mp\utility\game::unset_relic_grounded() )
    {
        var_2 = game["_encstr_BE9E10EBCBF0CBAA99F8324A08E166BBA8A5"].tabledatabyref[var_1.streakname]["_encstr_935208266A3FD0E97FAB"];
        _encstr_9E81231898C28383CB8760E558BF27EB18E74BB010797A7D4A032187800594B088064FFB1B::updatebrscoreboardstat( "_encstr_9DB315B9AC63591BD12B23A52D1B8D37A3E459C2B62591", var_2 );
    }
}

clearkillstreakselection()
{
    self.currentselectedkillstreakslot = undefined;
    updatekillstreakselectedui();

    if ( scripts\mp\utility\game::unset_relic_grounded() )
        _encstr_9E81231898C28383CB8760E558BF27EB18E74BB010797A7D4A032187800594B088064FFB1B::updatebrscoreboardstat( "_encstr_9DB315B9AC63591BD12B23A52D1B8D37A3E459C2B62591", 0 );
}

getselectedkillstreak()
{
    var_0 = getselectedkillstreakindex();

    if ( !isdefined( var_0 ) )
        return undefined;

    return self.streakdata.streaks[var_0];
}

getselectedkillstreakindex()
{
    return self.currentselectedkillstreakslot;
}

getkillstreakinslot( var_0 )
{
    return self.streakdata.streaks[var_0];
}

getequippedkillstreakbyname( var_0 )
{
    for ( var_1 = 1; var_1 <= 3; var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( isdefined( var_2 ) && var_2.streakname == var_0 )
            return var_2;
    }

    return undefined;
}

getequippedkillstreakslotbyname( var_0 )
{
    for ( var_1 = 1; var_1 <= 3; var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( isdefined( var_2 ) && var_2.streakname == var_0 )
            return var_1;
    }

    return undefined;
}

getvisiblekillstreakavailable( var_0 )
{
    for ( var_1 = 0; var_1 <= removeincoming(); var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( isdefined( var_2 ) && var_2.streakname == var_0 && var_2.available == 1 )
            return var_1;
    }

    return undefined;
}

getkillstreakvisibleslotbyname( var_0 )
{
    for ( var_1 = 0; var_1 <= removeincoming(); var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( isdefined( var_2 ) && var_2.streakname == var_0 )
            return var_1;
    }

    return undefined;
}

getgimmeslotkillstreakstructs()
{
    var_0 = [];
    var_1 = getkillstreakinslot( 0 );

    if ( isdefined( var_1 ) )
    {
        var_0[0] = var_1;

        for ( var_2 = 5; var_2 < 37; var_2++ )
        {
            var_3 = self.streakdata.streaks[var_2];

            if ( isdefined( var_3 ) )
            {
                var_0[var_0.size] = var_3;
                continue;
            }

            break;
        }
    }

    return var_0;
}

getavailableequippedkillstreakstructs()
{
    var_0 = [];

    if ( self.streakdata.streaks.size > 0 )
    {
        for ( var_1 = 1; var_1 < 4; var_1++ )
        {
            var_2 = self.streakdata.streaks[var_1];

            if ( isdefined( var_2 ) && isdefined( var_2.streakname ) && var_2.available == 1 )
                var_0[var_0.size] = var_2;
        }
    }

    return var_0;
}

getallavailablekillstreakstructs()
{
    var_0 = [];

    if ( self.streakdata.streaks.size > 0 )
    {
        for ( var_1 = 0; var_1 < removeincoming(); var_1++ )
        {
            var_2 = self.streakdata.streaks[var_1];

            if ( isdefined( var_2 ) && isdefined( var_2.streakname ) && var_2.available == 1 )
                var_0[var_0.size] = var_2;
        }
    }

    return var_0;
}

registerkillstreak( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( level.killstreaksetups ) )
        level.killstreaksetups = [];

    var_4 = spawnstruct();
    level.killstreaksetups[var_0] = var_4;
    var_4.triggeredfunc = var_1;
    var_4.availablefunc = var_2;
    var_4.linkedtotag = var_3;
}

getkillstreaksetupinfo( var_0 )
{
    var_1 = level.killstreaksetups[var_0];
    return var_1;
}

checkstreakreward( var_0, var_1 )
{
    for ( var_2 = 1; var_2 <= 4; var_2++ )
    {
        var_3 = getkillstreakinslot( var_2 );

        if ( !isdefined( var_3 ) )
            continue;

        var_4 = var_3.currentcost;

        if ( self.previousstreakpoints >= var_4 || var_0 < var_4 )
            continue;

        if ( scripts\mp\utility\perk::_hasperk( "_encstr_8C9E1ED237DB22713140FBD7C12B255B89C01A8B086F5A8C7890F3F37841E393" ) && istrue( var_3.earned ) )
            continue;

        if ( istrue( level.casualscorestreaks ) && istrue( var_1 ) )
            continue;

        if ( isdefined( var_3.lifeid ) && var_3.lifeid == self.lifeid && ( !istrue( level._id_145EC ) || istrue( level._id_145EC ) && self.streaktype == "_encstr_98AE0B231BA5974428F1594BA9" ) || istrue( level._id_145EC ) && istrue( level.casualscorestreaks ) && self.streaktype != "_encstr_98AE0B231BA5974428F1594BA9" && var_3.available == -1 )
            continue;

        earnkillstreak( var_2, var_4 );
    }
}

arekillstreaksequipped( var_0 )
{
    var_1 = getplayerstreakdata();

    if ( !isdefined( var_1 ) || !isdefined( var_1.streaks ) )
        return 0;

    foreach ( var_3 in var_0 )
    {
        var_4 = 0;

        for ( var_5 = 1; var_5 <= 4; var_5++ )
        {
            var_6 = var_1.streaks[var_5];

            if ( isdefined( var_6 ) )
            {
                if ( isdefined( var_6.streakname ) && var_6.streakname == var_3 )
                {
                    if ( var_6.isspecialist )
                    {
                        var_7 = scripts\mp\perks\perks::getspecialistperkforstreak( var_3 );

                        if ( var_6._id_136D2 == var_7 )
                        {
                            var_4 = 1;
                            break;
                        }
                    }
                    else
                    {
                        var_4 = 1;
                        break;
                    }
                }

                continue;
            }

            if ( var_3 == "_encstr_AABA05236DC831" )
            {
                var_4 = 1;
                break;
            }
        }

        if ( !var_4 )
            return 0;
    }

    return 1;
}

findkillstreakslotnumber( var_0 )
{
    for ( var_1 = 0; var_1 <= 37; var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( !isdefined( var_2 ) )
        {
            if ( var_1 >= 5 )
                break;
        }
        else if ( var_0 == var_2 )
            return var_1;
    }

    return undefined;
}

streakglobals_onkillstreaktriggered( var_0 )
{
    if ( isdefined( var_0.mpstreaksysteminfo ) )
    {
        var_1 = onkillstreaktriggered( var_0 );

        if ( !var_1 )
            return 0;
    }

    return 1;
}

streakglobals_onkillstreakbeginuse( var_0 )
{
    var_1 = var_0.owner;

    if ( isdefined( var_0.mpstreaksysteminfo ) )
    {
        var_2 = onkillstreakbeginuse( var_0 );

        if ( !var_2 )
            return 0;
    }

    if ( isdefined( var_1 ) )
    {
        if ( level.codcasterenabled )
        {
            if ( iskillstreakvisibleforcodcaster( var_0.streakname ) )
                var_1 setnoteworthykillstreakactive( 1 );
        }

        if ( scripts\mp\utility\game::ismlgmatch() )
        {
            var_3 = int( tablelookup( "_encstr_977A17B583BCAD961BC637A3E459B0ADA3B0318D2B8B1BB9B3", 1, var_0.streakname, 4 ) );

            if ( var_3 >= 1000 )
            {
                var_4 = tablelookup( "_encstr_977A17B583BCAD961BC637A3E459B0ADA3B0318D2B8B1BB9B3", 1, var_0.streakname, 0 );

                if ( var_4 != "_encstr_A40101" )
                    var_5 = int( var_4 );
            }
        }
    }

    return 1;
}

streakglobals_onkillstreakfinishuse( var_0 )
{
    var_1 = var_0.owner;
    var_2 = 0;

    if ( isdefined( var_1 ) )
        var_2 = var_1 scripts\mp\utility\killstreak::hasplayerdiedwhileusingkillstreak( var_0 );

    if ( isdefined( var_0.mpstreaksysteminfo ) )
        onkillstreakfinishuse( var_0, var_2 );

    if ( isdefined( var_1 ) )
    {
        if ( !var_2 )
            var_1 notify( "_encstr_B9CB18AD4BC68D9B8E392BC2B6F5D59B95F5995A9B96CDA1CA91" );

        if ( level.codcasterenabled )
            var_1 setnoteworthykillstreakactive( 0 );
    }
}

givestreakpoints( var_0, var_1, var_2 )
{
    if ( istrue( game["_encstr_87010E111E3823354DC251C560F3ED0A"] ) )
        return;

    var_3 = scripts\engine\utility::ter_op( scripts\mp\utility\perk::_hasperk( "_encstr_B4F424AE0A42D72069B35838978BF8117A72A5B6277A8FAE44A7F9705FD7D34B535B1EB5BE72" ), var_2, var_1 );

    if ( !isdefined( var_3 ) )
        var_3 = scripts\mp\rank::getscoreinfovalue( var_0 );

    if ( var_3 == 0 )
        return;

    self.pers["_encstr_B1E418B62D8DB19BA327CA2CAD2ABDD4C6DB39ACE6E8932B2CDA"] = undefined;
    self.pers["_encstr_97321FBAD093E103C07315F26A64A20E1722436FE7A32ECA29FAAF60F8A0A20FF9"] = undefined;
    var_4 = self.streakpoints + var_3;
    var_5 = findmaxstreakcost();

    if ( var_4 > var_5 )
        var_4 = var_5;

    var_6 = var_0 == "_encstr_97D70583536853";

    if ( var_6 && !istrue( level.loadout_updateclassdefault_weapons ) && ( istrue( level.allowkillstreaks ) || isdefined( level._id_12305 ) ) )
    {
        var_7 = self.nukepoints + var_1;
        var_8 = calcstreakcost( "_encstr_BDBA05D35D0C2D" );

        if ( isdefined( level._id_12305 ) )
            var_8 = level._id_12305;

        if ( var_7 >= var_8 )
        {
            self.nukepoints = var_8;

            if ( !istrue( self.molotov_delete_scriptable ) )
            {
                thread scripts\mp\hud_message::showkillstreaksplash( "_encstr_BDBA05D35D0C2D", var_8 );
                awardkillstreak( "_encstr_BDBA05D35D0C2D", "_encstr_BEBD072BC2939BAC32" );
                self.molotov_delete_scriptable = 1;
            }
        }
        else
        {
            self.nukepoints = var_7;

            if ( isdefined( self.petwatch ) )
                scripts\cp_mp\pet_watch::_id_13FFD( self.nukepoints / var_8 );
        }
    }

    setstreakpoints( var_4 );
    checkstreakreward( var_4 );
    updatestreakmeterui();

    if ( istrue( level._id_145EC && self.streaktype != "_encstr_98AE0B231BA5974428F1594BA9" ) )
    {
        if ( var_4 >= var_5 )
        {
            var_4 = var_4 - var_5;
            setstreakpoints( var_4 );
            self setkillstreakpoints( var_4 );
            setstreakcounttonext();
            resetstreakavailability();
        }
    }

    scripts\mp\analyticslog::logevent_reportstreakscore( var_3, gettime(), scripts\mp\rank::getscoreinfocategory( var_0, "_encstr_875B08551481933BB339" ) );
}

isbountyevent( var_0 )
{
    return var_0 == "_encstr_954C07E80AA3DD8BEF";
}

iskillstreakkillevent( var_0 )
{
    return issubstr( var_0, "_encstr_AD12084622092FD89C5B" ) || var_0 == "_encstr_B218166DD2631BE6474E592C6DBE33AE8D63AF6EB17BC92B";
}

resetstreakpoints()
{
    self.earnedstreaklevel = 0;
    self.nukepoints = 0;
    setstreakpoints( 0 );
    resetstreakcount();
    updatestreakmeterui();
}

resetstreakavailability( var_0 )
{
    if ( !isdefined( self ) )
        return;

    for ( var_1 = 0; var_1 <= 4; var_1++ )
    {
        var_2 = self.streakdata.streaks[var_1];

        if ( isdefined( var_2 ) && isdefined( var_2.streakname ) )
        {
            if ( istrue( var_0 ) )
                var_2.available = 0;
            else if ( istrue( var_2.isspecialist ) )
                var_2.available = 0;
            else if ( var_2.available == -1 )
                var_2.available = 0;

            ammobox_clearbufferedattachmentweapon( var_1, var_2.available );
        }
    }
}

_id_13DB8()
{
    for ( var_0 = 1; var_0 <= 4; var_0++ )
    {
        var_1 = self.streakdata.streaks[var_0];

        if ( isdefined( var_1 ) && istrue( var_1.available ) )
        {
            var_2 = var_1.streaksetupinfo;

            if ( isdefined( var_2.availablefunc ) )
                self [[ var_2.availablefunc ]]( var_1 );
        }
    }
}

setstreakpoints( var_0 )
{
    if ( var_0 < 0 )
        var_0 = 0;

    if ( isdefined( self.streakpoints ) )
        self.previousstreakpoints = self.streakpoints;
    else
        self.previousstreakpoints = 0;

    self.streakpoints = var_0;
    updatestreakcount();
}

storescorestreakpointsongameend()
{
    level waittill( "_encstr_AD1D0BEF9161A06F1F684ADA39" );

    if ( level.roundretainstreakprog )
    {
        foreach ( var_1 in level.players )
        {
            if ( !isdefined( var_1 ) )
                continue;

            var_2 = 0;

            if ( isdefined( var_1.streakpoints ) )
            {
                if ( var_1 scripts\mp\utility\perk::_hasperk( "_encstr_B4F424AE0A42D72069B35838978BF8117A72A5B6277A8FAE44A7F9705FD7D34B535B1EB5BE72" ) )
                    var_2 = scripts\mp\perks\perkfunctions::vote_player_set( var_1.streakpoints );
                else
                    var_2 = var_1.streakpoints;
            }

            var_1.pers["_encstr_B29A0DAB799A055BEF21477B208493"] = var_2;
        }
    }
}

findunobstructedfiringpointaroundz( var_0, var_1, var_2, var_3 )
{
    var_4 = rotatevector( ( 0, 0, 1 ), ( -1 * var_3, 0, 0 ) );
    var_5 = vectortoangles( var_1 - var_0.origin );

    for ( var_6 = 0; var_6 < 360; var_6 = var_6 + 30 )
    {
        var_7 = var_2 * rotatevector( var_4, ( 0, var_6 + var_5[1], 0 ) );
        var_8 = var_1 + var_7;

        if ( _findunobstructedfiringpointhelper( var_0, var_8, var_1 ) )
            return var_8;
    }

    return undefined;
}

findunobstructedfiringpointaroundy( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = vectortoangles( var_0.origin - var_1 );

    for ( var_7 = var_3; var_7 <= var_4; var_7 = var_7 + var_5 )
    {
        var_8 = rotatevector( ( 1, 0, 0 ), ( var_7 - 90, 0, 0 ) );
        var_9 = var_2 * rotatevector( var_8, ( 0, var_6[1], 0 ) );
        var_10 = var_1 + var_9;

        if ( _findunobstructedfiringpointhelper( var_0, var_10, var_1 ) )
            return var_10;
    }

    return undefined;
}

_findunobstructedfiringpointhelper( var_0, var_1, var_2 )
{
    var_3 = scripts\engine\trace::_bullet_trace( var_1, var_2, 0 );

    if ( var_3["_encstr_B130095358E1B3930B687D"] > 0.99 )
        return 1;

    return 0;
}

findunobstructedfiringpoint( var_0, var_1, var_2 )
{
    var_3 = findunobstructedfiringpointaroundz( var_0, var_1, var_2, 30 );

    if ( !isdefined( var_3 ) )
        var_3 = findunobstructedfiringpointaroundy( var_0, var_1, var_2, 15, 75, 15 );

    return var_3;
}

killstreakhit( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_1 ) && isplayer( var_0 ) && isdefined( var_2.owner ) && isdefined( var_2.owner.team ) )
    {
        if ( scripts\cp_mp\utility\player_utility::playersareenemies( var_0, var_2.owner ) )
        {
            var_2 _id_14018( var_0, var_4 );

            if ( scripts\mp\utility\weapon::iskillstreakweapon( var_1.basename ) )
                return;

            var_5 = createheadicon( var_1 );

            if ( !isdefined( var_0.lasthittime[var_5] ) )
                var_0.lasthittime[var_5] = 0;

            if ( var_0.lasthittime[var_5] == gettime() )
                return;

            var_0.lasthittime[var_5] = gettime();
            var_0 thread scripts\mp\gamelogic::threadedsetweaponstatbyname( var_5, 1, "_encstr_80CC058CB830E3" );

            if ( scripts\mp\utility\game::onlinestatsenabled() )
            {
                var_6 = var_0 scripts\mp\playerstats_interface::getplayerstat( "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_882C0B7B2D8CF0C931ABCFF1EF" );
                var_7 = var_0 scripts\mp\playerstats_interface::getplayerstat( "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_80CC058CB830E3" ) + 1;

                if ( var_7 <= var_6 )
                {
                    var_0 scripts\mp\playerstats_interface::setplayerstatbuffered( var_7, "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_80CC058CB830E3" );
                    var_0 scripts\mp\playerstats_interface::setplayerstatbuffered( int( var_6 - var_7 ), "_encstr_ADBC0C49D2972E100B43E1C38C32", "_encstr_BADA076094A34865EB" );
                }
            }

            if ( isdefined( var_3 ) && scripts\engine\utility::isbulletdamage( var_3 ) || scripts\mp\utility\damage::isprojectiledamage( var_3 ) )
            {
                var_0.lastdamagetime = gettime();
                var_8 = scripts\mp\utility\weapon::getweapongroup( var_1.basename );

                if ( var_8 == "_encstr_AF710B0B50BB6ACFA0C80C35FC" )
                {
                    if ( !isdefined( var_0.shotslandedlmg ) )
                        var_0.shotslandedlmg = 1;
                    else
                        var_0.shotslandedlmg++;
                }
            }
        }
    }
}

_id_14019( var_0 )
{
    _id_14018( var_0, 150 );
}

_id_14018( var_0, var_1 )
{
    if ( !isdefined( var_0 ) || !isdefined( self ) )
        return;

    if ( !isdefined( self._id_12F3C ) )
        self._id_12F3C = [];

    var_2 = var_0 getxuid();
    var_0.shoulddeleteimmediately = 1;

    if ( !isdefined( self._id_12F3C[var_2] ) )
    {
        var_3 = spawnstruct();
        var_3.damage = 0;
        var_3.player = var_0;
        self._id_12F3C[var_2] = var_3;
    }

    self._id_12F3C[var_2].damage = self._id_12F3C[var_2].damage + var_1;
}

rocket_internal( var_0 )
{
    if ( !isdefined( self._id_12F3C ) )
        return [];

    var_1 = [];

    foreach ( var_3 in self._id_12F3C )
    {
        var_4 = var_3.damage;
        var_5 = var_3.player;

        if ( var_4 < 150 )
            continue;

        var_6 = !scripts\mp\utility\player::isfriendly( self.team, var_5 );
        var_7 = istrue( scripts\cp_mp\utility\player_utility::playersareenemies( var_5, self.owner ) );

        if ( !var_6 && !var_7 )
            continue;

        if ( isdefined( var_0 ) && var_5 == var_0 )
            continue;

        var_1[var_1.size] = var_5;
    }

    return var_1;
}

givescoreforequipment( var_0, var_1 )
{
    if ( isdefined( var_1 ) && weaponclass( var_1 ) != "_encstr_98080F93DBB1B556D11B85ABB936D059E4" && var_1.basename != "_encstr_A3521050A3B879B19AEF4F6F17728C31B5FA" )
        var_1 = undefined;

    thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_B6BB140AE56FC14D7781B0FDAF0869F3E818D827BDEB", var_1 );
    scripts\cp_mp\gestures::processcalloutdeath( var_0, self );
}

givescorefordestroyedtacinsert()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_B87C15C7F22643B62F31F5B1C93D3E4E675CCAC25DB5CB" );
}

givescorefortrophyblocks()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_88D60FDDD2C2776AF29174FD3FFF807E4D" );
}

givescoreforblackhat()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_98BF0EFB10591BCA51379341AB6B82AB" );
}

givescoreforhack()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_9ECC05F027F93F" );
}

givescoreforempedvehicle()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_80280E9545EB81F9E15B6808C286B1D9" );
}

givescoreforempedkillstreak()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_AFAB11537D686D34A84A2AA932DB95C80F2737" );
}

givescoreforempedplayer()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_81BE0DAA5A0B8B33B82B32504B6702" );
}

givescoreformarktarget( var_0 )
{
    if ( var_0 )
        thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_98191323C8AB83192B4762DCBDD1D14411D8C7FFD8" );
    else
        thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_98191323C8AB83192B4762DCBDD1D14411D8C7FFD8", undefined, 0 );
}

givescorefordestorymarkedtarget()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_A49E1697D57BD807A7925070FB3D03519B471D873AC7C169" );
}

givescoreforassistdestroymarkedtarget()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_A49E1697D57BD807A7925070FB3D03519B471D873AC7C169" );
}

givescorefortriggeredalarmeddoor()
{
    thread scripts\mp\utility\points::giveunifiedpoints( "_encstr_8CB310FC6DC0570F25D3F2EA5E0F7B8E702B" );
}

streaktyperesetsondeath( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_973508BF93EFFBC363B3":
        case "_encstr_98AE0B231BA5974428F1594BA9":
            return 1;
        case "_encstr_BC04097390D3AF932D7E8F":
        case "_encstr_B89108CDD50E0EF69C8E":
            return 0;
        default:
            return 1;
    }
}

initridekillstreak( var_0 )
{
    scripts\common\utility::allow_usability( 0 );
    var_1 = initridekillstreak_internal( var_0 );

    if ( isdefined( self ) )
        scripts\common\utility::allow_usability( 1 );

    return var_1;
}

initridekillstreak_internal( var_0 )
{
    if ( isdefined( var_0 ) && islaptoptimeoutkillstreak( var_0 ) )
        var_1 = "_encstr_945408D1B4B556B7BA3A";
    else
        var_1 = scripts\engine\utility::_id_143BB( 1.0, "_encstr_A3750609A5E61883", "_encstr_8A820B4696CDB1ED3737AC1B3A", "_encstr_B3C216770F8AA7D8C679DB539CA4C0D301CFF9E3FB03E548" );

    scripts\mp\hostmigration::waittillhostmigrationdone();

    if ( var_1 == "_encstr_B3C216770F8AA7D8C679DB539CA4C0D301CFF9E3FB03E548" )
        return "_encstr_B77905CC165A8D";

    if ( !isalive( self ) )
        return "_encstr_B77905CC165A8D";

    if ( var_1 == "_encstr_8A820B4696CDB1ED3737AC1B3A" || var_1 == "_encstr_A3750609A5E61883" )
    {
        if ( var_1 == "_encstr_8A820B4696CDB1ED3737AC1B3A" )
            return "_encstr_8A820B4696CDB1ED3737AC1B3A";

        if ( self.team == "_encstr_A68C0A5803A5D151A2B310A6" )
            return "_encstr_B77905CC165A8D";

        return "_encstr_80E3087F5B1E9ACD38F3";
    }

    if ( scripts\mp\utility\game::iskillstreakdenied() )
        return "_encstr_B77905CC165A8D";

    if ( !isdefined( var_0 ) || !issubstr( var_0, "_encstr_81FE0C5308B4F08B379FA28DD833" ) )
    {
        if ( var_0 == "_encstr_87FC0B9193DEDC59BE864B9D2B" )
        {
            self visionsetfadetoblackforplayer( "_encstr_898C091336851BADBE98DD", 0 );
            thread scripts\mp\utility\player::set_visionset_for_watching_players( "_encstr_898C091336851BADBE98DD", 0, 1.0, undefined, 1 );
            var_2 = scripts\engine\utility::_id_143B9( 0, "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
        }
        else
        {
            self visionsetfadetoblackforplayer( "_encstr_898C091336851BADBE98DD", 0.75 );
            thread scripts\mp\utility\player::set_visionset_for_watching_players( "_encstr_898C091336851BADBE98DD", 0.75, 1.0, undefined, 1 );
            var_2 = scripts\engine\utility::_id_143B9( 0.8, "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
        }
    }
    else
        var_2 = scripts\engine\utility::_id_143B9( 1.0, "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );

    self notify( "_encstr_B2B50F26368536DAF57BD51DBE19B7B995" );
    scripts\mp\hostmigration::waittillhostmigrationdone();

    if ( var_2 != "_encstr_8A820B4696CDB1ED3737AC1B3A" )
    {
        if ( !isdefined( var_0 ) || !issubstr( var_0, "_encstr_81FE0C5308B4F08B379FA28DD833" ) )
            thread clearrideintro( 1.0 );
        else
            self notify( "_encstr_BEFD0E0BAE138B1719E2B8C8FA6ACB81" );

        if ( self.team == "_encstr_A68C0A5803A5D151A2B310A6" )
            return "_encstr_B77905CC165A8D";
    }

    if ( self isonladder() )
        return "_encstr_B77905CC165A8D";

    if ( !isalive( self ) )
        return "_encstr_B77905CC165A8D";

    if ( scripts\mp\utility\game::iskillstreakdenied() )
        return "_encstr_B77905CC165A8D";

    if ( var_2 == "_encstr_8A820B4696CDB1ED3737AC1B3A" )
        return "_encstr_8A820B4696CDB1ED3737AC1B3A";
    else
        return "_encstr_80E3087F5B1E9ACD38F3";
}

islaptoptimeoutkillstreak( var_0 )
{
    switch ( var_0 )
    {
        case "_encstr_AFAC0C7D7F756724B550FBB312D8":
        case "_encstr_B14E0B86E52B5FE151C1538AED":
        case "_encstr_BABA0E553671B3FDB2593767C808B5FB":
        case "_encstr_81FE0C5308B4F08B379FA28DD833":
        case "_encstr_87FC0B9193DEDC59BE864B9D2B":
        case "_encstr_AD100B10C5F8D7B989289AA2E8":
        case "_encstr_ABFD089D57CD370DD21C":
        case "_encstr_B7F514E0C9AC364BE65ADEB9BEB05A279BA327D2ADB2":
            return 1;
    }

    return 0;
}

clearrideintro( var_0, var_1 )
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );

    if ( isdefined( var_0 ) )
        wait( var_0 );

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    self visionsetfadetoblackforplayer( "_encstr_A40101", var_1 );
    scripts\mp\utility\player::set_visionset_for_watching_players( "_encstr_A40101", var_1 );
    self notify( "_encstr_BEFD0E0BAE138B1719E2B8C8FA6ACB81" );
}

allowridekillstreakplayerexit( var_0, var_1 )
{
    if ( isdefined( var_0 ) )
        self endon( var_0 );

    if ( !isdefined( self.owner ) )
        return;

    var_2 = self.owner;
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_2 endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    var_2 endon( "_encstr_9F0E0B56DC8C7D93ACADF6472B" );
    self endon( "_encstr_A3750609A5E61883" );
    var_3 = 0.75;

    if ( isdefined( var_1 ) )
        var_3 = var_1;

    var_4 = level.framedurationseconds;
    var_5 = 1;

    for (;;)
    {
        var_6 = 0;

        if ( var_5 == 1 )
        {
            var_2 setclientomnvar( "_encstr_A65311AB4BD7ACF04BE8EB0E4EDEB339956E37", 0 );
            var_5 = 0;
        }

        while ( var_2 usebuttonpressed() )
        {
            var_6 = var_6 + var_4;
            var_5 = 1;
            var_2 setclientomnvar( "_encstr_A65311AB4BD7ACF04BE8EB0E4EDEB339956E37", var_6 / var_3 );

            if ( var_6 > var_3 )
            {
                self notify( "_encstr_8CDA0F40BF7498F74B9A4D4734B029E0B4" );
                return;
            }

            wait( var_4 );
        }

        wait( var_4 );
    }
}

combatrecordkillstreakuse( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = scripts\mp\utility\stats::getstreakrecordtype( var_0 );

    if ( !isdefined( var_1 ) )
    {
        if ( var_0 != "_encstr_BDBA05D35D0C2D" && var_0 != "_encstr_8B770E56E10E63EDE696B3ACEBC4DBEE" )
        {

        }

        return;
    }

    var_2 = self getplayerdata( "_encstr_A20703C962", "_encstr_9BA20C8A189F5A9F3EBF93A7CBB8", var_1, var_0, "_encstr_B1E405576EACCD" );
    self setplayerdata( "_encstr_A20703C962", "_encstr_9BA20C8A189F5A9F3EBF93A7CBB8", var_1, var_0, "_encstr_B1E405576EACCD", var_2 + 1 );
}

checkcasualstreaksreset()
{
    if ( !isdefined( self ) )
        return;

    if ( isdefined( self.streaktype ) && self.streaktype == "_encstr_98AE0B231BA5974428F1594BA9" || isdefined( self.loadoutstreaktype ) && self.loadoutstreaktype == "_encstr_98AE0B231BA5974428F1594BA9" || !istrue( level._id_145EC ) )
    {
        var_0 = self.streakdata.streaks[self.streakdata.streaks.size];

        if ( var_0.available == 1 || var_0.available == -1 )
            return 1;
    }

    return 0;
}

loadassociatedkillstreakweapons( var_0 )
{
    var_1 = [];
    var_2 = scripts\cp_mp\utility\killstreak_utility::getkillstreakdeployweapon( var_0 );
    var_1[var_1.size] = var_2;
    var_3 = scripts\cp_mp\utility\killstreak_utility::getkillstreakgameweapons( var_0 );
    var_1 = scripts\engine\utility::array_combine( var_1, var_3 );
    self loadweaponsforplayer( var_1, 1 );
}

combatrecordincrementkillstreakawardedstat( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = scripts\mp\utility\stats::getstreakrecordtype( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = self getplayerdata( "_encstr_A20703C962", "_encstr_9BA20C8A189F5A9F3EBF93A7CBB8", var_1, var_0, "_encstr_A8400D7FEFABBDC3284176805778B3" );
    self setplayerdata( "_encstr_A20703C962", "_encstr_9BA20C8A189F5A9F3EBF93A7CBB8", var_1, var_0, "_encstr_A8400D7FEFABBDC3284176805778B3", var_2 + 1 );
}

hide_player_clip( var_0 )
{
    if ( !scripts\mp\utility\stats::canrecordcombatrecordstats() )
        return;

    var_1 = scripts\mp\utility\stats::getstreakrecordtype( var_0 );

    if ( !isdefined( var_1 ) )
        return;

    var_2 = self getplayerdata( "_encstr_A20703C962", "_encstr_9BA20C8A189F5A9F3EBF93A7CBB8", var_1, var_0, "_encstr_94D60BB20F3AC92CA98E851D26" );
    self setplayerdata( "_encstr_A20703C962", "_encstr_9BA20C8A189F5A9F3EBF93A7CBB8", var_1, var_0, "_encstr_94D60BB20F3AC92CA98E851D26", var_2 + 1 );
}
