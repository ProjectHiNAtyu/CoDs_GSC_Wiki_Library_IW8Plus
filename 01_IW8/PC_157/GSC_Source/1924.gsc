// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    scripts\mp\utility\spawn_event_aggregator::registeronplayerspawncallback( ::onplayerspawned );
    setsaveddvar( "_encstr_A21710DFA91ACEB7604F730E27F3808A578B", 0 );
}

onplayerspawned()
{
    self._whizbyfxent = [];
    thread whizbythink();
}

whizbythink()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    level endon( "_encstr_AD1D0BEF9161A06F1F684ADA39" );
    var_0 = gettime();

    for (;;)
    {
        self waittill( "_encstr_B1490D4CEAD8D8CAD1EEA14BD313CB", var_1, var_2 );
        var_0 = dowhizby( var_1, var_0 );
    }
}

dowhizby( var_0, var_1 )
{
    if ( gettime() - var_1 > 190 && !scripts\mp\utility\player::isusingremote() && getdvar( "_encstr_A6870FD6B64BD78B08FF8058A767C0ED72" ) == "_encstr_A40101" )
    {
        thread whizbyblurshoweffect( var_0 );
        var_1 = gettime();
    }

    var_2 = var_0 getcurrentweapon();

    if ( weaponclass( var_2 ) == "_encstr_B6070748328C39712B" )
        scripts\mp\battlechatter_mp::trysaylocalsound( self, "_encstr_8BF0103B01B3EBF8D65727E53588B85308E3", undefined, 0.2 );

    thread scripts\mp\battlechatter_mp::addrecentattacker( var_0 );
    return var_1;
}

dowhizbycleanup()
{
    foreach ( var_1 in self._whizbyfxent )
    {
        if ( isalive( var_1 ) )
            var_1 delete();
    }

    if ( isdefined( self ) )
        self setclientomnvar( "_encstr_948010A329D93B58C21298036F61B5D133CD", 0 );
}

whizbyblurshoweffect( var_0 )
{
    if ( getdvarint( "_encstr_A21710DFA91ACEB7604F730E27F3808A578B", 1 ) == 1 )
    {
        var_1 = var_0 getcurrentweapon();
        var_2 = weaponclass( var_1 );

        if ( var_1 hasattachment( "_encstr_882E0C78AC96D04F2383F5DB8F7A", 1 ) && !scripts\mp\utility\weapon::iskillstreakweapon( var_1 ) && !scripts\mp\utility\perk::_hasperk( "_encstr_A2CF16DCE02BD896C2361DE5EB4CD816DCA39BA15A56B18C" ) )
        {
            if ( !isdefined( self.suppressionmagnitude ) )
                self.suppressionmagnitude = 0;

            self notify( "_encstr_8BDC11BB0DA5F4C42F12B1EAE4D72795CDCAA3" );
            var_3 = self.suppressionmagnitude;
            self.suppressionmagnitude = clamp( self.suppressionmagnitude + getsuppressionstrength( var_2, self, var_0 ), 0, 100 );
            scripts\mp\gamescore::trackdebuffassist( var_0, self, var_1.basename );
            thread whizbyblurrampup( var_3, self.suppressionmagnitude );
        }
    }
}

whizbyblurrampup( var_0, var_1 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_8BDC11BB0DA5F4C42F12B1EAE4D72795CDCAA3" );
    var_2 = 0.3;

    while ( var_0 < var_1 )
    {
        var_0 = var_0 + 20;
        self earthquakeforplayer( var_2, 1.1, self.origin, 100 );
        var_2 = var_2 + 0.1;
        wait 0.05;
    }
}

whizbyblurrampdown( var_0, var_1 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    self endon( "_encstr_8BDC11BB0DA5F4C42F12B1EAE4D72795CDCAA3" );

    while ( self.suppressionmagnitude > 0 )
    {
        self.suppressionmagnitude = self.suppressionmagnitude - 2.5;

        if ( self.suppressionmagnitude < 0 )
            self.suppressionmagnitude = 0;

        var_2 = clamp( self.suppressionmagnitude, 0, 100 );
        wait 0.2;
    }

    self.suppressionmagnitude = 0;
    scripts\mp\gamescore::untrackdebuffassist( var_0, self, var_1 );
}

getsuppressionstrength( var_0, var_1, var_2 )
{
    var_3 = distance2d( var_1.origin, var_2.origin );

    if ( var_3 < 1024 )
        var_3 = var_3 * 0.25;

    switch ( var_0 )
    {
        case "_encstr_BE0703815F":
            return 10.0 * ( var_3 / 1024 );
        case "_encstr_B6070748328C39712B":
            return 5.0 * ( var_3 / 1024 );
        default:
            return 0;
    }
}
