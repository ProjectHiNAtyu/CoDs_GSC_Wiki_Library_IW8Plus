// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

getstancecenter()
{
    if ( self getstance() == "_encstr_9C3D071B63023B26C3" )
        var_0 = self.origin + ( 0, 0, 24 );
    else if ( self getstance() == "_encstr_9F24062875D5FD98" )
        var_0 = self.origin + ( 0, 0, 10 );
    else
        var_0 = self.origin + ( 0, 0, 32 );

    return var_0;
}

round_smoke_logic( var_0 )
{
    var_1 = self getstance();

    if ( isdefined( var_0 ) )
        var_1 = var_0;

    if ( var_1 == "_encstr_9C3D071B63023B26C3" )
        var_2 = self.origin + ( 0, 0, 48 );
    else if ( var_1 == "_encstr_9F24062875D5FD98" )
        var_2 = self.origin + ( 0, 0, 20 );
    else
        var_2 = self.origin + ( 0, 0, 64 );

    return var_2;
}

isreallyalive( var_0 )
{
    return isalive( var_0 ) && !isdefined( var_0.fauxdead ) && !istrue( var_0.delayedspawnedplayernotify );
}

unset_relic_trex( var_0 )
{
    return isdefined( var_0 ) && istrue( var_0.inlaststand );
}

isarchetype( var_0 )
{
    return isdefined( self.loadoutarchetype ) && var_0 == self.loadoutarchetype;
}

isplayerads()
{
    return self playerads() > 0.5;
}

setthirdpersondof( var_0 )
{
    if ( var_0 )
        setdof_thirdperson();
    else
        setdof_default();
}

updatesessionstate( var_0, var_1 )
{
    switch ( var_0 )
    {
        case "_encstr_AFBC0D0BCD04870AC0430B90B8DFED":
        case "_encstr_8F7508BB18675378EBC7":
            var_1 = "_encstr_A40101";
            break;
        case "_encstr_A68C0A5803A5D151A2B310A6":
        case "_encstr_816705F27BBF90":
            if ( istrue( level.doingbroshot ) )
                var_1 = "_encstr_A40101";
            else if ( istrue( level.numlifelimited ) )
            {
                if ( istrue( self.tagavailable ) )
                    var_1 = "_encstr_B269121A5D46FADC3A583ABA6EBE32F69DA30BB3";
                else if ( istrue( self.revivetriggeravailable ) )
                {
                    if ( isdefined( self.statusicon ) && self.statusicon == "_encstr_9CA8150B35D3AEAF5342F8C85BA1652143C18C758757B3" )
                        var_1 = "_encstr_9CA8150B35D3AEAF5342F8C85BA1652143C18C758757B3";
                    else
                        var_1 = "_encstr_A8A81568AD45DF2335D1A3D830E05B82BCAFE339810B88";
                }
                else
                    var_1 = "_encstr_8A281064C54971FB03984B77305EA49A1BD5";
            }
            else
                var_1 = "_encstr_8A281064C54971FB03984B77305EA49A1BD5";

            break;
    }

    if ( !isdefined( var_1 ) )
        var_1 = "_encstr_A40101";

    self.sessionstate = var_0;
    self.statusicon = var_1;
    self setclientomnvar( "_encstr_AACB1107983EAB8A075EB42DC8B723540198DF", var_0 );
    _id_12898( "_encstr_B2FE1E581A86134923CAEA45788331C16F7178F843DC47608FAC5F3D459A7031" + var_0 );
}

getteamarray( var_0, var_1 )
{
    var_2 = [];

    if ( !isdefined( var_1 ) || var_1 )
    {
        foreach ( var_4 in level.characters )
        {
            if ( isdefined( var_4.team ) && var_4.team == var_0 )
                var_2[var_2.size] = var_4;
        }
    }
    else
    {
        foreach ( var_4 in level.players )
        {
            if ( isdefined( var_4.team ) && var_4.team == var_0 )
                var_2[var_2.size] = var_4;
        }
    }

    return var_2;
}

get_players_watching( var_0, var_1 )
{
    if ( !isdefined( var_0 ) )
        var_0 = 0;

    if ( !isdefined( var_1 ) )
        var_1 = 0;

    var_2 = self getentitynumber();
    var_3 = [];

    foreach ( var_5 in level.players )
    {
        if ( var_5 == self )
            continue;

        var_6 = 0;

        if ( !var_1 )
        {
            if ( isdefined( var_5.team ) && ( var_5.team == "_encstr_A68C0A5803A5D151A2B310A6" || var_5.team == "_encstr_B33E0979A77828123F58A2" || var_5.sessionstate == "_encstr_A68C0A5803A5D151A2B310A6" ) )
            {
                var_7 = var_5 getspectatingplayer();

                if ( isdefined( var_7 ) && var_7 == self )
                    var_6 = 1;
            }

            if ( var_5.forcespectatorclient == var_2 )
                var_6 = 1;
        }

        if ( !var_0 )
        {
            if ( var_5.killcamentity == var_2 )
                var_6 = 1;
        }

        if ( var_6 )
            var_3[var_3.size] = var_5;
    }

    return var_3;
}

set_visionset_for_watching_players( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = get_players_watching( var_4, var_5 );

    foreach ( var_8 in var_6 )
    {
        var_8 notify( "_encstr_A8D61C8723D1E5374C7EDF79A7B98550686F0D9C779318A35B801BEFF930" );

        if ( isdefined( var_3 ) && var_3 )
            var_8 visionsetmissilecamforplayer( var_0, var_1 );
        else
            var_8 visionsetnakedforplayer( var_0, var_1 );

        if ( var_0 != "_encstr_A40101" && isdefined( var_2 ) )
        {
            var_8 thread reset_visionset_on_team_change( self, var_1 + var_2 );
            var_8 thread reset_visionset_on_disconnect( self );

            if ( var_8 isinkillcam() )
                var_8 thread reset_visionset_on_spawn();
        }
    }
}

reset_visionset_on_spawn()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self waittill( "_encstr_983508635BE787C548A1" );
    self visionsetnakedforplayer( "_encstr_A40101", 0.0 );
}

reset_visionset_on_team_change( var_0, var_1 )
{
    self endon( "_encstr_A8D61C8723D1E5374C7EDF79A7B98550686F0D9C779318A35B801BEFF930" );
    var_2 = gettime();
    var_3 = self.team;

    while ( gettime() - var_2 < var_1 * 1000 )
    {
        if ( self.team != var_3 || !scripts\engine\utility::array_contains( var_0 get_players_watching(), self ) )
        {
            self visionsetnakedforplayer( "_encstr_A40101", 0.0 );
            self notify( "_encstr_B323131BA158379D5ACDB3D7ECA5DC2DDB9B9B95D1" );
            break;
        }

        waitframe();
    }
}

reset_visionset_on_disconnect( var_0 )
{
    self endon( "_encstr_A8D61C8723D1E5374C7EDF79A7B98550686F0D9C779318A35B801BEFF930" );
    var_0 waittill( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self visionsetnakedforplayer( "_encstr_A40101", 0.0 );
}

_id_12CC4( var_0, var_1 )
{
    if ( !istrue( var_1 ) )
    {
        if ( istrue( level.wpinprogress ) )
            return;
    }

    if ( isdefined( level._id_142D1 ) )
        self visionsetnakedforplayer( level._id_142D1, var_0 );
    else
        self visionsetnakedforplayer( "_encstr_A40101", var_0 );
}

_id_12CC5( var_0 )
{
    _id_12CC4( var_0, 1 );
}

restorebasevisionset( var_0 )
{
    _id_12CC4( var_0, undefined );
}

init_visionsetnight()
{
    visionsetnight( "_encstr_9CA70C4D500FF8AAFFA7DD0669EF" );
}

overridevisionsetnightforlevel( var_0 )
{
    visionsetnight( var_0 );
}

isenemy( var_0 )
{
    if ( level.teambased )
        return var_0.team != self.team;
    else if ( isdefined( var_0.owner ) )
        return var_0.owner != self;
    else
        return var_0 != self;
}

getuniqueid()
{
    if ( isdefined( self.pers["_encstr_A17205D7CBA385"] ) )
        return self.pers["_encstr_A17205D7CBA385"];

    var_0 = self getguid();

    if ( var_0 == "_encstr_B2FB11B7B3AF7AB242A9E0E8816AFAC2171B2F" )
    {
        if ( isdefined( level.guidgen ) )
            level.guidgen++;
        else
            level.guidgen = 1;

        var_0 = "_encstr_B929076E8D93B4C147" + level.guidgen;
    }

    self.pers["_encstr_A17205D7CBA385"] = var_0;
    return self.pers["_encstr_A17205D7CBA385"];
}

getplayersinradius( var_0, var_1, var_2, var_3 )
{
    var_4 = [ "_encstr_9F57173778F77BCBC6133048DA5B9B90BB0B28AFC43FE22B6A" ];
    return scripts\mp\utility\entity::getentitiesinradius( var_0, var_1, var_2, var_3, physics_createcontents( var_4 ) );
}

getplayersinradiusview( var_0, var_1, var_2, var_3 )
{
    var_4 = [ "_encstr_9F57173778F77BCBC6133048DA5B9B90BB0B28AFC43FE22B6A" ];
    var_5 = [];
    var_6 = scripts\mp\utility\entity::getentitiesinradius( var_0, var_1, var_2, var_3, physics_createcontents( var_4 ) );

    foreach ( var_8 in var_6 )
    {
        var_9 = undefined;
        var_10 = [ var_8 gettagorigin( "_encstr_87DA078B11C012A35F" ), var_8 gettagorigin( "_encstr_8BE10B4DF5DA2C5A9B39B7EDE8" ), var_8 gettagorigin( "_encstr_8CB40B4BB398B1C0A81FDF6BEA" ) ];

        for ( var_11 = 0; var_11 < var_10.size; var_11++ )
        {
            if ( !scripts\engine\trace::ray_trace_passed( var_0, var_10[var_11], level.characters, scripts\engine\trace::create_contents( 0, 1, 1, 1, 1, 1 ) ) )
                continue;

            if ( !isdefined( var_9 ) )
            {
                var_5[var_5.size] = spawnstruct();
                var_5[var_5.size - 1].player = var_8;
                var_5[var_5.size - 1].visiblelocations = [];
                var_9 = 1;
            }

            var_5[var_5.size - 1].visiblelocations[var_5[var_5.size - 1].visiblelocations.size] = var_10[var_11];
        }
    }

    return var_5;
}

isfriendly( var_0, var_1 )
{
    if ( !level.teambased )
        return 0;

    if ( !isplayer( var_1 ) && !isdefined( var_1.team ) )
        return 0;

    if ( var_0 != var_1.team )
        return 0;

    return 1;
}

_enablecollisionnotifies( var_0 )
{
    if ( !isdefined( self.enabledcollisionnotifies ) )
        self.enabledcollisionnotifies = 0;

    if ( var_0 )
    {
        if ( self.enabledcollisionnotifies == 0 )
            self enablecollisionnotifies( 1 );

        self.enabledcollisionnotifies++;
    }
    else
    {
        if ( self.enabledcollisionnotifies == 1 )
            self enablecollisionnotifies( 0 );

        self.enabledcollisionnotifies--;
    }
}

allow_dodge( var_0 )
{
    if ( self.loadoutarchetype != "_encstr_B45C10890DF0F467CDD2035AFEA6A7EDE8B9" )
        return;

    if ( var_0 )
    {
        if ( !isdefined( self.disableddodge ) )
            self.disableddodge = 0;

        self.disableddodge--;

        if ( !self.disableddodge )
            self allowdodge( 1 );
    }
    else
    {
        if ( !isdefined( self.disableddodge ) )
            self.disableddodge = 0;

        self.disableddodge++;
        self allowdodge( 0 );
    }
}

allow_gesture( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_8B0508CE95DC1DEAC92B", var_0, var_1 );

    if ( !isdefined( var_2 ) )
        return;

    if ( var_0 )
    {
        if ( scripts\engine\utility::is_player_gamepad_enabled() )
            self setactionslot( 1, "_encstr_A32906470BEAB91D" );
        else
            self setactionslot( 7, "_encstr_A32906470BEAB91D" );
    }
    else if ( scripts\engine\utility::is_player_gamepad_enabled() )
        self setactionslot( 1, "_encstr_A40101" );
    else
        self setactionslot( 7, "_encstr_A40101" );
}

isplayerproxyagent( var_0, var_1 )
{
    var_2 = 0;

    if ( isagent( var_0 ) && isdefined( var_0.agent_type ) && var_0.agent_type == "_encstr_B21D0C0ED80B5ECA270A9CED0FF2" )
    {
        if ( var_0.owner == var_1 )
            var_2 = 1;
    }

    return var_2;
}

enableragdollzerog( var_0, var_1 )
{
    if ( var_0 )
    {
        physics_setgravityragdollscalar( var_1 );
        level.ragdollzerog = 1;
    }
    else
    {
        physics_setgravityragdollscalar( 1.0 );
        level.ragdollzerog = undefined;
    }
}

isragdollzerog()
{
    return istrue( level.ragdollzerog );
}

_visionsetnaked( var_0, var_1 )
{
    foreach ( var_3 in level.players )
    {
        if ( !isdefined( var_3 ) )
            continue;

        if ( isai( var_3 ) )
            continue;

        var_3 visionsetnakedforplayer( var_0, var_1 );
    }

    return;
}

hidehudenable()
{
    if ( !isdefined( self.ui_hudhidden ) )
        self.hidehudenabled = 0;

    if ( self.hidehudenabled == 0 )
        self setclientomnvar( "_encstr_875B0C459BC68B7CE930E18AA831", 1 );

    self.hidehudenabled++;
}

hidehuddisable()
{
    if ( self.hidehudenabled == 1 )
        self setclientomnvar( "_encstr_875B0C459BC68B7CE930E18AA831", 0 );

    self.hidehudenabled--;
}

spawn_carriables_from_scriptables_total_percentage()
{
    self.hidehudenabled = undefined;
    self setclientomnvar( "_encstr_875B0C459BC68B7CE930E18AA831", 0 );
}

hideminimap( var_0 )
{
    if ( alwaysshowminimap() && !istrue( var_0 ) )
        return;

    if ( !isdefined( self.minimapstatetracker ) )
        self.minimapstatetracker = 0;

    var_1 = self.minimapstatetracker;
    self.minimapstatetracker--;

    if ( self.minimapstatetracker < 0 )
        self.minimapstatetracker = 0;

    if ( istrue( var_0 ) || self.minimapstatetracker == 0 && var_1 > self.minimapstatetracker )
    {
        self setclientomnvar( "_encstr_894910CB3808F968F94AFF6861DB90387081", 1 );

        if ( istrue( var_0 ) )
            self.minimapstatetracker = 0;
    }
}

showminimap()
{
    if ( !isdefined( self.minimapstatetracker ) )
        self.minimapstatetracker = 0;

    var_0 = self.minimapstatetracker;
    self.minimapstatetracker++;

    if ( self.minimapstatetracker == 1 && var_0 < self.minimapstatetracker )
        self setclientomnvar( "_encstr_894910CB3808F968F94AFF6861DB90387081", 0 );
}

alwaysshowminimap()
{
    if ( level.gametype == "_encstr_9819046B7048" )
        return 1;

    var_0 = scripts\cp_mp\utility\game_utility::isrealismenabled();

    if ( level.gametype == "_encstr_9507034B25" && !var_0 )
        return 1;

    return istrue( level.minimaponbydefault );
}

isfemale()
{
    return isdefined( self.operatorcustomization ) && isdefined( self.operatorcustomization.gender ) && self.operatorcustomization.gender == "_encstr_BD290799CAB585B156";
}

getlowestclientnum( var_0, var_1 )
{
    var_2 = undefined;

    foreach ( var_4 in var_0 )
    {
        if ( var_4.team != "_encstr_A68C0A5803A5D151A2B310A6" && var_4.team != "_encstr_B33E0979A77828123F58A2" && ( !var_1 || var_4 scripts\cp_mp\utility\player_utility::_isalive() ) )
        {
            if ( !isdefined( var_2 ) || var_4 getentitynumber() < var_2 )
                var_2 = var_4 getentitynumber();
        }
    }

    return var_2;
}

setusingremote( var_0 )
{
    if ( isdefined( self.carryicon ) )
        self.carryicon.alpha = 0;

    self.usingremote = var_0;

    if ( scripts\cp_mp\utility\game_utility::isnightmap() )
        scripts\common\utility::brjugg_oncrateuse( 0 );

    scripts\common\utility::allow_vehicle_use( 0 );
    scripts\common\utility::allow_crate_use( 0 );
    scripts\common\utility::allow_offhand_weapons( 0 );
    scripts\common\utility::allow_ads( 0 );
    scripts\common\utility::brjugg_droponplayerdeath( 0 );
    scripts\cp_mp\killstreaks\white_phosphorus::enableloopingcoughaudiosupression();
    self setclientomnvar( "_encstr_B6DD1BEAB4BEAE9BA5B9CEAFB5B4B136B91DC9B22C5BAF4E59ADDBD1CA", 1 );
    self notify( "_encstr_AB070D9FAFF3A227C17B777DF0B06D" );
    self.pers["_encstr_8A0C1332B4E6E8A24E1636B696739D0558CD6EAC23"] = 1;
}

getremotename()
{
    return self.usingremote;
}

clearusingremote( var_0 )
{
    if ( scripts\cp_mp\utility\game_utility::isnightmap() )
        scripts\common\utility::brjugg_oncrateuse( 1 );

    scripts\common\utility::allow_vehicle_use( 1 );
    scripts\common\utility::allow_crate_use( 1 );
    scripts\common\utility::allow_ads( 1 );
    scripts\common\utility::brjugg_droponplayerdeath( 1 );
    scripts\cp_mp\killstreaks\white_phosphorus::disableloopingcoughaudiosupression();

    if ( isdefined( self.carryicon ) )
        self.carryicon.alpha = 1;

    self.usingremote = undefined;

    if ( !isdefined( var_0 ) )
    {
        scripts\common\utility::allow_offhand_weapons( 1 );
        _freezecontrols( 0, undefined, "_encstr_A1700CABDCB4CDB392ACAD7B1DAC" );
    }

    self setclientomnvar( "_encstr_B6DD1BEAB4BEAE9BA5B9CEAFB5B4B136B91DC9B22C5BAF4E59ADDBD1CA", 0 );
    self notify( "_encstr_B1D215D3FB078F30F7CC1F73E3DC08DC1F73E998D2C34D" );
}

isusingremote()
{
    return isdefined( self.usingremote );
}

_freezecontrols( var_0, var_1, var_2 )
{
    if ( !isdefined( self.pers ) )
        return;

    if ( !isdefined( self.pers["_encstr_BCC016E6587323CB20905B9BD2ADA20DA14018A24BA60712"] ) )
    {
        self.pers["_encstr_BCC016E6587323CB20905B9BD2ADA20DA14018A24BA60712"] = 0;
        self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"] = [];
    }

    if ( var_0 )
        self.pers["_encstr_BCC016E6587323CB20905B9BD2ADA20DA14018A24BA60712"]++;
    else if ( istrue( var_1 ) )
        self.pers["_encstr_BCC016E6587323CB20905B9BD2ADA20DA14018A24BA60712"] = 0;
    else
        self.pers["_encstr_BCC016E6587323CB20905B9BD2ADA20DA14018A24BA60712"]--;

    if ( isdefined( var_2 ) )
    {
        if ( var_0 )
        {
            if ( !isdefined( self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"][var_2] ) )
                self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"][var_2] = 0;

            self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"][var_2]++;
        }
        else if ( istrue( var_1 ) )
            self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"] = [];
        else if ( !isdefined( self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"][var_2] ) || self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"][var_2] == 0 )
        {

        }
        else
        {
            self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"][var_2]--;

            if ( self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"][var_2] == 0 )
                self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"][var_2] = undefined;
        }
    }

    if ( self.pers["_encstr_BCC016E6587323CB20905B9BD2ADA20DA14018A24BA60712"] <= 0 )
    {
        self.pers["_encstr_BCC016E6587323CB20905B9BD2ADA20DA14018A24BA60712"] = 0;
        self freezecontrols( 0 );
        self.controlsfrozen = 0;
    }
    else
    {
        self freezecontrols( 1 );
        self.controlsfrozen = 1;
    }
}

ai_offhandfiremanager()
{
    var_0 = 0;

    if ( isdefined( self.pers["_encstr_BCC016E6587323CB20905B9BD2ADA20DA14018A24BA60712"] ) )
        var_0 = self.pers["_encstr_BCC016E6587323CB20905B9BD2ADA20DA14018A24BA60712"];

    if ( var_0 <= 0 )
        return;

    var_1 = "_encstr_A40101";

    if ( isdefined( self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"] ) )
    {
        foreach ( var_4, var_3 in self.pers["_encstr_816316BA60B8430AE079C4D55DF1524F55BA525089069F87"] )
            var_1 = var_1 + ( var_4 + "_encstr_974C02F6" + var_3 + "_encstr_B217042040D6" );
    }

    var_5 = "_encstr_A1892761B7EAEBFFCB9BA6DFA37BBB37BB0918C54D8DAB7791F842E36EB760D92124B6FB73D395C282" + var_0 + "_encstr_BE8E0E01108036B7733A2BC3E89B8E08" + var_1;
    logstring( var_5 );
}

_freezelookcontrols( var_0, var_1 )
{
    if ( !isdefined( self.pers ) )
        return;

    if ( !isdefined( self.pers["_encstr_AD531A376780F3C2D02885CFC3E1179AEADD8BA7EB32AABB70917E54"] ) )
        self.pers["_encstr_AD531A376780F3C2D02885CFC3E1179AEADD8BA7EB32AABB70917E54"] = 0;

    if ( var_0 )
        self.pers["_encstr_AD531A376780F3C2D02885CFC3E1179AEADD8BA7EB32AABB70917E54"]++;
    else if ( istrue( var_1 ) )
        self.pers["_encstr_AD531A376780F3C2D02885CFC3E1179AEADD8BA7EB32AABB70917E54"] = 0;
    else
        self.pers["_encstr_AD531A376780F3C2D02885CFC3E1179AEADD8BA7EB32AABB70917E54"]--;

    if ( self.pers["_encstr_AD531A376780F3C2D02885CFC3E1179AEADD8BA7EB32AABB70917E54"] <= 0 )
    {
        self.pers["_encstr_AD531A376780F3C2D02885CFC3E1179AEADD8BA7EB32AABB70917E54"] = 0;
        self freezelookcontrols( 0 );
        self.lookcontrolsfrozen = 0;
    }
    else
    {
        self freezelookcontrols( 1 );
        self.lookcontrolsfrozen = 1;
    }
}

getplayerforguid( var_0 )
{
    foreach ( var_2 in level.players )
    {
        if ( var_2.guid == var_0 )
            return var_2;
    }

    return undefined;
}

set_temp_energy_restore_rate( var_0, var_1, var_2, var_3 )
{
    var_4 = self energy_getrestorerate( var_0 );
    self.temprateset = 1;
    self energy_setrestorerate( var_0, var_1 );

    if ( !isdefined( var_3 ) || !var_3 )
        wait( var_2 );
    else
    {
        var_5 = self energy_getmax( var_0 );

        for (;;)
        {
            if ( self energy_getenergy( var_0 ) >= var_5 )
                break;

            waitframe();
        }
    }

    self energy_setrestorerate( var_0, var_4 );
    self.temprateset = 0;
}

set_temp_energy_rest_time( var_0, var_1, var_2, var_3 )
{
    var_4 = self energy_getresttimems( var_0 );
    self.tempresttime = 1;
    self energy_setresttimems( var_0, var_1 );

    if ( !isdefined( var_3 ) || !var_3 )
        wait( var_2 );
    else
    {
        var_5 = self energy_getmax( var_0 );

        for (;;)
        {
            if ( self energy_getenergy( var_0 ) >= var_5 )
                break;

            waitframe();
        }
    }

    self energy_setresttimems( var_0, var_4 );
    self.tempresttime = 0;
}

_enableignoreme()
{
    if ( !isdefined( self.enabledignoreme ) )
        self.enabledignoreme = 0;

    if ( self.enabledignoreme == 0 )
        self.ignoreme = 1;

    self.enabledignoreme++;
}

_disableignoreme()
{
    if ( self.enabledignoreme == 1 )
        self.ignoreme = 0;

    self.enabledignoreme--;
}

_resetenableignoreme()
{
    self.enabledignoreme = undefined;
    self.ignoreme = 0;
}

watchbuttonpressed( var_0, var_1, var_2, var_3 )
{
    if ( !isdefined( self.buttonspressed ) )
        self.buttonspressed = [];

    if ( !isdefined( self.buttonspressed[var_0] ) )
    {
        var_4 = spawnstruct();
        var_4.player = self;
        var_4.key = var_0;
        var_4.commanddown = var_1;
        var_4.commandup = var_2;
        var_4.notifydown = var_0 + "_encstr_9F930C6E9AAB21D44D3537486F7A";
        var_4.notifyup = var_0 + "_encstr_BD860A373360A3D075B5179B";
        var_4.pressed = istrue( var_3 );
        self.buttonspressed[var_0] = var_4;
        var_4 thread watchbuttonpressedinternal();
    }
}

getbuttonpressed( var_0 )
{
    if ( !isdefined( self.buttonspressed ) )
        return 0;

    if ( !isdefined( self.buttonspressed[var_0] ) )
        return 0;

    return self.buttonspressed[var_0].pressed;
}

watchbuttonpressedend( var_0 )
{
    if ( !isdefined( self ) || !isdefined( self.buttonspressed ) || self.buttonspressed[var_0] )
        return;

    self.buttonspressed[var_0] notify( "_encstr_8CEE165FD1B3B093ABCB1B0372C347F00F3BDFE37C5780ED" );
    self.buttonspressed[var_0] = undefined;
}

watchbuttonpressedinternal()
{
    self.player endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_8CEE165FD1B3B093ABCB1B0372C347F00F3BDFE37C5780ED" );

    for (;;)
    {
        self.down = 0;
        self.up = 0;
        childthread watchbuttondown();
        childthread watchbuttonup();
        self waittill( "_encstr_97830B3758D17243B7364EC695" );
        waittillframeend;
        self notify( "_encstr_A95C0956CD8CF54E161B95" );

        if ( self.down && self.up )
            continue;

        if ( self.down )
        {
            self.pressed = 1;
            continue;
        }

        self.pressed = 0;
    }
}

watchbuttondown()
{
    self endon( "_encstr_A95C0956CD8CF54E161B95" );
    self.player notifyonplayercommand( self.notifydown, self.commanddown );
    self.player waittill( self.notifydown );
    self.down = 1;
    self notify( "_encstr_97830B3758D17243B7364EC695" );
}

watchbuttonup()
{
    self endon( "_encstr_A95C0956CD8CF54E161B95" );
    self.player notifyonplayercommand( self.notifyup, self.commandup );
    self.player waittill( self.notifyup );
    self.up = 1;
    self notify( "_encstr_97830B3758D17243B7364EC695" );
}

watchbuttonpressendondisconnect()
{
    self endon( "_encstr_8CEE165FD1B3B093ABCB1B0372C347F00F3BDFE37C5780ED" );
    self.player waittill( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self notify( "_encstr_8CEE165FD1B3B093ABCB1B0372C347F00F3BDFE37C5780ED" );
}

_setdof_internal( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( 1 )
        return;

    if ( !isdefined( self ) )
        return;

    var_0 = max( var_0, 0.0 );
    var_1 = clamp( var_1, 1.0, 9994.0 );
    var_2 = clamp( var_2, 2.0, 9998.0 );
    var_3 = clamp( var_3, 3.0, 9999 );

    if ( var_2 > 9994.0 )
        var_5 = 0.0;
}

setdof_dynamic()
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    setdof_default();

    if ( isai( self ) )
        return;

    var_0 = [ "_encstr_98C1190E865EE6D26CDC36DE73A32B73E8E6EB6C1B5A0EB91AED1D", "_encstr_BD431CE7B0D853097F67676D6BE477B61B072950F79BD30A5247185850D0", "_encstr_9E9C1638865EB95A6CE68DDEE64795B98E6EAF9BF6B1968C", "_encstr_B7D018B89C4B13AC473342305523920D607E50E3571038A69138", "_encstr_9F57173778F77BCBC6133048DA5B9B90BB0B28AFC43FE22B6A", "_encstr_B874166814E073EA0FAE63B79B8107BB5BD25F7F1821CF8A", "_encstr_941116D7F47B0FC88317C8B07BCC017DD35AD8D44D52D773", "_encstr_A8011987A827AB1B16E3C0980AEBCBC0CB5B98F32CFFD057BD2A50" ];
    var_1 = physics_createcontents( var_0 );
    var_2 = [ "_encstr_9F57173778F77BCBC6133048DA5B9B90BB0B28AFC43FE22B6A" ];
    var_3 = physics_createcontents( var_2 );
    var_4 = 1;
    var_5 = 1;
    var_6 = cos( 27 );
    var_7 = 1;
    var_8 = 0;
    var_9 = [];
    var_9["_encstr_8018049D59DE"] = spawnstruct();
    var_9["_encstr_8018049D59DE"].nearstartfactor = getdvarfloat( "_encstr_B6AB12F157AFC918BF32537F4B87CE4809B70B6F", 0.01 );
    var_9["_encstr_8018049D59DE"].nearendfactor = getdvarfloat( "_encstr_95EF1091DE33D7732BC24E2AB98CF57695DB", 0.95 );
    var_9["_encstr_8018049D59DE"].farstartfactor = getdvarfloat( "_encstr_B29711BC4F9F1855C7657B415882E3D101AD58", 1.5 );
    var_9["_encstr_8018049D59DE"].farendfactor = getdvarfloat( "_encstr_87450F49325B1088EEC2237DFC59B8C5D7", 2.5 );
    var_9["_encstr_8018049D59DE"].nearblur = getdvarfloat( "_encstr_81F911A5388A3F68E368789B429B22BF309832", 3.9 );
    var_9["_encstr_8018049D59DE"].farblur = getdvarfloat( "_encstr_8873108CB7997D330B3924C6ABC9BEB3597B", 2.25 );
    var_9["_encstr_9FF109217DFB50CBB8E273"] = spawnstruct();
    var_9["_encstr_9FF109217DFB50CBB8E273"].nearstartfactor = getdvarfloat( "_encstr_987A0E51F70F69B81F92331F2BE76EE8", 0.01 );
    var_9["_encstr_9FF109217DFB50CBB8E273"].nearendfactor = getdvarfloat( "_encstr_A2D40C83CF3CF96628D16ABF28F8", 0.95 );
    var_9["_encstr_9FF109217DFB50CBB8E273"].farstartfactor = getdvarfloat( "_encstr_B9E90D23DECC7D660BC9A64758931D", 1.5 );
    var_9["_encstr_9FF109217DFB50CBB8E273"].farendfactor = getdvarfloat( "_encstr_8CE60B23DE99BE33B04E15738C", 2.5 );
    var_9["_encstr_9FF109217DFB50CBB8E273"].nearblur = getdvarfloat( "_encstr_A8790D74A0153FD05FE986D0B9239A", 7.0 );
    var_9["_encstr_9FF109217DFB50CBB8E273"].farblur = getdvarfloat( "_encstr_88590C29A0B4E1B7517B252C75A5", 3.5 );

    for (;;)
    {
        waitframe();
        var_10 = "_encstr_8018049D59DE";

        if ( istrue( self.usingcustomdof ) )
            continue;

        var_11 = self playerads() > 0.9;

        if ( var_7 && !var_11 )
        {
            if ( var_8 )
            {
                var_8 = 0;
                _setdof_internal( 0, 0, 512, 512, 4, 0 );
            }

            continue;
        }

        var_12 = self geteye();
        var_13 = self getplayerangles();
        var_14 = anglestoforward( var_13 );
        var_15 = -1;
        var_16 = undefined;
        var_17 = undefined;
        var_18 = undefined;
        var_19 = undefined;

        if ( var_4 )
        {
            var_20 = 0;

            foreach ( var_22 in level.players )
            {
                if ( !scripts\cp_mp\utility\player_utility::playersareenemies( self, var_22 ) )
                    continue;

                if ( !var_22 scripts\cp_mp\utility\player_utility::_isalive() )
                    continue;

                var_23 = var_22 geteye();
                var_24 = vectordot( var_14, vectornormalize( var_23 - var_12 ) );

                if ( var_24 < var_6 )
                    continue;

                var_25 = distance( var_12, var_23 );

                if ( !isdefined( var_16 ) || var_25 < var_16 )
                {
                    if ( var_22 sightconetrace( var_12, self ) > 0 )
                        var_16 = var_25;
                }

                if ( !isdefined( var_17 ) || var_25 > var_17 )
                {
                    if ( var_22 sightconetrace( var_12, self ) > 0 )
                        var_17 = var_25;
                }
            }
        }

        var_27 = var_12 + var_14 * 10000;
        var_28 = scripts\engine\trace::sphere_trace( var_12, var_27, 0.1, self, var_1, 0 );
        var_19 = distance( var_12, var_28["_encstr_B7260923C89E8F3378E72E"] );
        var_29 = scripts\engine\trace::sphere_trace( var_12, var_27, 20.0, self, var_3, 0 );
        var_30 = var_29["_encstr_B60E07C9FD1C2055E3"];
        var_31 = isdefined( var_30 ) && isplayer( var_30 ) && scripts\cp_mp\utility\player_utility::playersareenemies( self, var_30 );
        var_32 = var_31 && var_30 sightconetrace( var_12, self ) > 0;

        if ( !isdefined( var_16 ) || var_19 < var_16 )
            var_16 = var_19;

        if ( !isdefined( var_17 ) || var_19 > var_17 )
            var_17 = var_19;

        var_8 = 1;
        var_33 = max( abs( var_16 - var_17 ) * 0.5, 300.0 );
        var_34 = 0.0;
        var_35 = max( var_16 - 50.0, 1.0 );
        var_36 = var_17 + 50.0;
        var_37 = var_36 + var_33;
        var_38 = scripts\engine\utility::ter_op( var_32, 6.0, 4.0 );
        var_39 = scripts\engine\utility::ter_op( var_32, 2.5, 1.25 );
        _setdof_internal( var_34, var_35, var_36, var_37, var_38, var_39 );
    }
}

setdof_killer()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self.usingcustomdof = 1;
    setdof_killer_update();
    setdof_default();
}

setdof_killer_update()
{
    self endon( "_encstr_8A820B4696CDB1ED3737AC1B3A" );
    self endon( "_encstr_8A83154656853A0DAF32AC63B0F2D766B4E64B3734AC32" );
    var_0 = [ "_encstr_98C1190E865EE6D26CDC36DE73A32B73E8E6EB6C1B5A0EB91AED1D", "_encstr_BD431CE7B0D853097F67676D6BE477B61B072950F79BD30A5247185850D0", "_encstr_9E9C1638865EB95A6CE68DDEE64795B98E6EAF9BF6B1968C", "_encstr_B7D018B89C4B13AC473342305523920D607E50E3571038A69138", "_encstr_9F57173778F77BCBC6133048DA5B9B90BB0B28AFC43FE22B6A", "_encstr_B874166814E073EA0FAE63B79B8107BB5BD25F7F1821CF8A", "_encstr_941116D7F47B0FC88317C8B07BCC017DD35AD8D44D52D773", "_encstr_A8011987A827AB1B16E3C0980AEBCBC0CB5B98F32CFFD057BD2A50" ];
    var_1 = physics_createcontents( var_0 );
    var_2 = vectornormalize( self.origin - self.lastkilledby.origin );
    var_3 = self.origin + ( 0, 0, 42 );
    var_4 = var_3 + var_2 * 120.0;
    var_5 = scripts\engine\trace::sphere_trace( var_3, var_4, 2.0, self, var_1, 0 );
    var_6 = var_5["_encstr_B7260923C89E8F3378E72E"];

    while ( istrue( self.usingcustomdof ) )
    {
        if ( !isdefined( self.lastkilledby ) )
            break;

        var_7 = distance( var_6, self.lastkilledby.origin );
        var_8 = 0.0;
        var_9 = max( var_7 - 12.0, 1.0 );
        var_10 = var_7 + 12.0;
        var_11 = var_10 + 50.0;
        var_12 = 8.0;
        var_13 = 4.5;
        _setdof_internal( var_8, var_9, var_10, var_11, var_12, var_13 );
        waitframe();
    }
}

setdof_default()
{
    self.usingcustomdof = 0;
    _setdof_internal( 0, 0, 512, 512, 4, 0 );
}

setdof_spectator()
{
    self.usingcustomdof = 1;
    _setdof_internal( 0, 0, 512, 512, 4, 0 );
}

setdof_infil()
{
    self.usingcustomdof = 1;
    _setdof_internal( 0, 128, 512, 4000, 6, 1.8 );
}

setdof_apache()
{
    self.usingcustomdof = 1;
    _setdof_internal( 10, 80, 1000, 6500, 7, 3.5 );
}

setdof_cruisethird()
{
    self.usingcustomdof = 1;
    _setdof_internal( 10, 80, 1000, 6500, 7, 3.5 );
}

setdof_cruisefirst()
{
    self.usingcustomdof = 1;
    _setdof_internal( 10, 80, 1000, 1000, 7, 0 );
}

setdof_tank()
{
    self.usingcustomdof = 1;
    _setdof_internal( 10, 120, 1000, 6500, 7, 3.5 );
}

setdof_thirdperson()
{
    self.usingcustomdof = 1;
    _setdof_internal( 0, 110, 512, 4096, 6, 1.8 );
}

setdof_gunship()
{
    self.usingcustomdof = 1;
    _setdof_internal( 10, 80, 1000, 1000, 7, 0 );
}

setdof_gunship_zoom()
{
    self.usingcustomdof = 1;
    _setdof_internal( 10, 80, 1000, 6500, 10, 5 );
}

setdof_scrambler_strength_1()
{
    self.usingcustomdof = 1;
    _setdof_internal( 10, 80, 1000, 5000, 4, 3.5 );
}

setdof_scrambler_strength_2()
{
    self.usingcustomdof = 1;
    _setdof_internal( 10, 80, 800, 4000, 4.5, 3.5 );
}

setdof_scrambler_strength_3()
{
    self.usingcustomdof = 1;
    _setdof_internal( 10, 80, 600, 3000, 5, 3.5 );
}

setdof_scrambler_strength_4()
{
    self.usingcustomdof = 1;
    _setdof_internal( 10, 80, 500, 2000, 5.5, 3.5 );
}

setdof_scrambler_strength_5()
{
    self.usingcustomdof = 1;
    _setdof_internal( 10, 80, 400, 1000, 6, 3.5 );
}

enableplayerforspawnlogic( var_0, var_1 )
{
    var_2 = scripts\common\input_allow::allow_input_internal( "_encstr_87780D6E0E58BBE67D96ECDCBDC9AC", var_0, var_1 );

    if ( isdefined( var_2 ) )
        self ignorecharacterduringspawnselection( !var_2 );
}

isplayerallowedforspawnlogic()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_87780D6E0E58BBE67D96ECDCBDC9AC" );
}

clearkillcamstate()
{
    self.forcespectatorclient = -1;
    self.killcamentity = -1;
    self.archivetime = 0;
    self.archiveusepotg = 0;
    self.psoffsettime = 0;
    self.spectatekillcam = 0;
}

isinkillcam()
{
    if ( isai( self ) )
        return 0;

    if ( self.spectatekillcam )
    {
        if ( self.forcespectatorclient == -1 && self.killcamentity == -1 )
            return 0;
    }

    return self.spectatekillcam;
}

waittillrecoveredhealth( var_0, var_1 )
{
    self endon( "_encstr_87DC14B3C0C903B191786B89AC8373FA90A51D5742F3" );
    var_2 = 0;

    if ( !isdefined( var_1 ) )
        var_1 = 0.05;

    if ( !isdefined( var_0 ) )
        var_0 = 0;

    for (;;)
    {
        if ( self.health != self.maxhealth )
            var_2 = 0;
        else
            var_2 = var_2 + var_1;

        wait( var_1 );

        if ( self.health == self.maxhealth && var_2 >= var_0 )
            break;
    }

    return;
}

allow_health_regen( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_9D350DD38D6F6019EC0990206247F5", var_0, var_1 );
}

is_health_regen_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_9D350DD38D6F6019EC0990206247F5" );
}

allow_one_hit_melee_victim( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_A993155F3D6D29B0984311E519C8C5C22895CFD7A183F2", var_0, var_1 );
}

is_one_hit_melee_victim_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_A993155F3D6D29B0984311E519C8C5C22895CFD7A183F2" );
}

allow_flashed( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_BA4008CC8DC2B9345991", var_0, var_1 );
}

is_allowed_to_be_flashed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_BA4008CC8DC2B9345991" );
}

allow_stunned( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_BAD908A3D3A5A0E08A73", var_0, var_1 );
}

is_allowed_to_be_stunned()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_BAD908A3D3A5A0E08A73" );
}

allow_stick_kill( var_0, var_1 )
{
    scripts\common\input_allow::allow_input_internal( "_encstr_82290B6EE8B48D5BAFD65A1B36", var_0, var_1 );
}

is_stick_kill_allowed()
{
    return scripts\common\input_allow::is_input_allowed_internal( "_encstr_82290B6EE8B48D5BAFD65A1B36" );
}

_setsuit( var_0 )
{
    if ( isdefined( self.suit ) && self.suit == var_0 )
        return;

    self setsuit( var_0 );
    self.suit = var_0;
}

_id_1328C( var_0, var_1 )
{
    if ( !self isscriptable() || !self getscriptablehaspart( "_encstr_B7F6052B10854F" ) || !isreallyalive( self ) )
        return;

    self.manualoverridewindmaterial = var_1;
    self setscriptablepartstate( "_encstr_B7F6052B10854F", var_0, 0 );
}

_id_12898( var_0 )
{
    if ( getdvarint( "_encstr_B2A216687F820621B2466D7C118B5189EF3381E89321F8C9", 0 ) == 1 )
    {
        if ( isdefined( self.spawncameraent ) )
            return;
    }
}
