// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = spawnstruct();
    var_0.weight = getdvarfloat( "scr_br_pe_auavscan_weight", 0 );
    var_0._id_140CF = ::_id_140CF;
    var_0.attackerswaittime = ::attackerswaittime;
    var_0._id_14382 = ::_id_14382;
    var_0._id_11B78 = getdvarint( "scr_br_pe_auavscan_max_times", 1 );
    var_0.guard_door_clip = scripts\mp\gametypes\br_publicevents.gsc::relic_squadlink_init_vfx( "auavscan", "20   20  15  15          10  10  10  10" );
    scripts\mp\gametypes\br_publicevents.gsc::_id_12B35( 10, var_0 );
    game["dialog"]["pe_auavscan_announcement"] = "public_events_ocscn_name";
    game["dialog"]["pe_auavscan_enemy_exposed"] = "public_events_ocscn_active";
    game["dialog"]["pe_auavscan_prone"] = "public_events_ocscn_prone";
    game["dialog"]["pe_auavscan_spotted"] = "public_events_ocscn_spotted";
}

_id_140CF()
{
    return 1;
}

_id_14382()
{
    level endon( "game_ended" );
    level endon( "cancel_public_event" );
    var_0 = forest_combat();
    wait( var_0 );
}

forest_combat()
{
    var_0 = getdvarfloat( "scr_br_pe_auavscan_starttime_min", 155.0 );
    var_1 = getdvarfloat( "scr_br_pe_auavscan_starttime_max", 565.0 );

    if ( var_1 > var_0 )
        return randomfloatrange( var_0, var_1 );
    else
        return var_0;
}

attackerswaittime()
{
    level endon( "game_ended" );
    level.pe_auavscan_spotted_players = [];
    scripts\mp\gametypes\br_publicevents.gsc::_id_13371( "br_pe_auavscan_incoming" );
    scripts\mp\gametypes\br_public.gsc::brleaderdialog( "pe_auavscan_announcement" );
    wait 3.5;
    thread scananticipation();
}

scananticipation()
{
    level endon( "game_ended" );
    var_0 = getdvarfloat( "scr_br_pe_auavscan_anticipation_duration", 9.5 );
    var_1 = getdvarfloat( "scr_br_pe_auavscan_radar_duration", 17.5 );
    var_2 = getdvarfloat( "scr_br_pe_auavscan_prone_duration", 7.5 );
    var_3 = gettime() + var_0 * 1000;
    thread setupclocktick( var_0 );
    thread scripts\mp\gametypes\br_public.gsc::brleaderdialog( "pe_auavscan_prone" );
    setomnvar( "ui_publicevent_timer_type", 6 );
    setomnvar( "ui_publicevent_timer", var_3 );
    setomnvar( "ui_publicevent_minimap_pulse", 1 );
    thread warnstandingplayers( var_0 );

    if ( isdefined( var_0 ) )
        wait( var_0 );

    var_4 = gettime() + var_2 * 1000;
    setomnvar( "ui_publicevent_timer_type", 10 );
    setomnvar( "ui_publicevent_timer", var_4 );
    level.pe_auavscan_active = 1;

    foreach ( var_6 in level.players )
    {
        if ( !isdefined( var_6 ) || !isalive( var_6 ) || var_6 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
            continue;

        var_6 thread radaractive();

        if ( var_6 getstance() == "prone" )
        {
            var_6 thread scanactive( var_4 );
            continue;
        }

        var_6 thread spottedbyauavscan();
    }

    managescanend( var_2, var_1 );
}

scanactive( var_0 )
{
    level endon( "game_ended" );
    thread playscanbink( "pe_auavscan_timer", 0 );
    thread watchplayerdetection( var_0 );
    self setclientomnvar( "ui_publicevent_auavscan_spotted", 0 );
}

radaractive()
{
    level endon( "game_ended" );
    self playsoundtoplayer( "ui_operation_scan_active_lr", self );
    var_0 = level._id_13ED9;
    var_1 = "constant_radar";
    var_2 = 1;
    var_3 = 1;
    attackerregenammo( var_1, var_0, var_2, var_3 );
}

managescanend( var_0, var_1 )
{
    wait( var_0 );
    level notify( "public_event_auavscan_prone_phase_ended" );
    setomnvar( "ui_publicevent_minimap_pulse", 0 );
    setomnvar( "ui_publicevent_timer_type", 0 );

    if ( level.pe_auavscan_spotted_players.size == 0 )
        radarend();
    else
    {
        wait( var_1 );
        radarend();
    }
}

radarend()
{
    level.pe_auavscan_active = undefined;

    foreach ( var_1 in level.players )
    {
        if ( !isdefined( var_1 ) )
            continue;

        var_1 playerradarend();
    }
}

playerradarend()
{
    self notify( "pe_auavscan_end" );
    self sethidenameplate( 0 );
    var_0 = 1;
    var_1 = "normal_radar";
    var_2 = 0;
    var_3 = undefined;
    attackerregenammo( var_1, var_0, var_2, var_3 );
    self.hasradar = 0;
}

watchplayerdetection( var_0 )
{
    level endon( "game_ended" );
    level endon( "public_event_auavscan_prone_phase_ended" );
    self endon( "death_or_disconnect" );
    self sethidenameplate( 1 );

    while ( var_0 > gettime() )
    {
        if ( self getstance() != "prone" )
        {
            thread spottedbyauavscan();
            break;
        }

        waitframe();
    }
}

_id_12072()
{
    if ( istrue( level.pe_auavscan_active ) )
        self sethidenameplate( 1 );
}

warnstandingplayers( var_0 )
{
    level endon( "game_ended" );
    var_1 = getdvarfloat( "scr_br_pe_auavscan_warning_time", 2 );

    if ( isdefined( var_0 ) && var_0 >= var_1 )
    {
        var_2 = var_0 - var_1;
        wait( var_2 );

        foreach ( var_4 in level.players )
        {
            if ( !isdefined( var_4 ) || !isalive( var_4 ) || var_4 getstance() == "prone" )
                continue;

            level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "pe_auavscan_spotted", var_4, 1, 0 );
        }
    }
}

spottedbyauavscan()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    self notify( "pe_auavscan_player_spotted" );
    level.pe_auavscan_spotted_players[level.pe_auavscan_spotted_players.size] = self;
    self setclientomnvar( "ui_publicevent_auavscan_spotted", 1 );
    scripts\mp\hud_message::showsplash( "br_pe_auavscan_spotted" );
    self sethidenameplate( 0 );
    thread spottedmarkflash();
    wait 0.25;
    thread playscanbink( "pe_auavscan_spotted", 1 );
}

spottedmarkflash()
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );

    if ( !istrue( self.iszombie ) )
    {
        self visionsetnakedforplayer( "pe_auavscan_flash", 0.075 );
        wait 0.1;
        scripts\mp\utility\player::restorebasevisionset( 3.5 );
    }
}

playscanbink( var_0, var_1 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self setclientomnvar( "ui_br_bink_overlay_state", 14 );

    if ( istrue( var_1 ) )
        self preloadcinematicforplayer( var_0 );
    else
        self playcinematicforplayerlooping( var_0 );

    scripts\engine\utility::_id_143A5( "pe_auavscan_end", "pe_auavscan_player_spotted" );
    self skydive_cutparachuteon();
    self setclientomnvar( "ui_br_bink_overlay_state", 0 );
}

attackerregenammo( var_0, var_1, var_2, var_3 )
{
    var_4 = var_1;
    level.radarmode[self.guid] = var_0;
    self.radarstrength = var_4;
    level.activeuavs[self.guid + "_radarStrength"] = var_4;
    level.activeadvanceduavs[self.guid] = var_2;
    self._id_133E9 = var_3;
    level.audio_heli_end_fade_out = level.teamnamelist.size;
    scripts\cp_mp\killstreaks\uav::updateplayersuavstatus();
}

setupclocktick( var_0 )
{
    level endon( "game_ended" );
    var_1 = spawn( "script_origin", ( 0, 0, 0 ) );
    var_1 hide();

    if ( var_0 >= 5 )
    {
        wait( var_0 - 5 );

        for ( var_2 = 0; var_2 < 5; var_2++ )
        {
            var_1 playsound( "sfx_occupation_pre_scan_timer" );
            wait 1.0;
        }
    }

    var_1 delete();
}
