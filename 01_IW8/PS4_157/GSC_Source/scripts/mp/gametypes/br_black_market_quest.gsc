// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

init()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::registerquestcategory( "black_market", 1 );

    if ( !var_0 )
        return;

    level.black_market_quest = spawnstruct();
    level.black_market_quest.wait_for_computer_power = [];
    init_dvars();
    scripts\mp\gametypes\br_quest_util.gsc::registerremovequestinstance( "black_market", ::on_remove_quest_instance );
    scripts\mp\gametypes\br_quest_util.gsc::registeronplayerkilled( "black_market", ::_id_11FF1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12B2E( "black_market", ::on_player_disconnect );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12B2D( "black_market", ::on_enter_gulag );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12B30( "black_market", ::on_respawn );
    scripts\mp\gametypes\br_quest_util.gsc::registerquestcircletick( "black_market", ::on_circle_tick );
    scripts\mp\gametypes\br_quest_util.gsc::_id_1297C( "black_market", 1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_12B31( "black_market", ::on_timer_expired );
    game["dialog"]["mission_blm_accept"] = "mission_mission_gen_accept";
    game["dialog"]["mission_blm_dropnotify"] = "mission_mission_scav_accept";
    game["dialog"]["mission_blm_success"] = "contract_misc_success";
    game["dialog"]["mission_blm_fail"] = "mission_mission_gen_fail";
    scripts\engine\scriptable::_id_12F5B( "br_black_market_kiosk", ::kiosk_on_use );
}

init_dvars()
{
    level.black_market_quest.i_quest_time = getdvarint( "scr_br_black_market_quest_time", 180 );
    level.black_market_quest.i_max_drop_search_distance = getdvarint( "scr_br_black_market_max_drop_search_distance", 10000 );
    level.black_market_quest.f_drop_delay = getdvarfloat( "scr_br_black_market_drop_delay", 1.5 );
    level.black_market_quest.f_quest_circle_delay = getdvarfloat( "scr_br_black_market_quest_circle_delay", 3.0 );
    level.black_market_quest.i_drop_height = getdvarint( "scr_br_black_market_drop_height", 4000 );
    level.black_market_quest.i_drop_notify_radius = getdvarint( "scr_br_black_market_drop_notify_radius", 10000 );
    level.black_market_quest.i_kiosk_destroy_timeout = getdvarint( "scr_br_black_market_kiosk_destroy_timeout", 120 );
    level.black_market_quest.i_quest_circle_radius = getdvarint( "scr_br_black_market_quest_circle_radius", 5000 );
    level.black_market_quest.i_quest_circle_steps = getdvarint( "scr_br_black_market_quest_circle_steps", 3 );
    level.black_market_quest.f_audio_ping_min_interval = getdvarfloat( "scr_br_black_market_audio_ping_min_interval", 0.5 );
    level.black_market_quest.f_audio_ping_max_interval = getdvarfloat( "scr_br_black_market_audio_ping_max_interval", 5.0 );
    level.black_market_quest.f_audio_ping_min_range = getdvarfloat( "scr_br_black_market_audio_ping_min_range", 100 );
    level.black_market_quest.f_audio_ping_max_range = getdvarfloat( "scr_br_black_market_audio_ping_max_range", 5500 );
    level.black_market_quest.b_audio_ping_enabled = getdvarint( "scr_br_black_market_audio_ping_enabled", 1 );
    level.black_market_quest.b_circle_shrinking_enabled = getdvarint( "scr_br_black_market_circle_shrinking_enabled", 1 );
}

_quest_state()
{

}

takequestitem( var_0 )
{
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::createquestinstance( "black_market", self.team, var_0.index, var_0 );
    var_1 scripts\mp\gametypes\br_quest_util.gsc::registerteamonquest( self.team, self );
    scripts\mp\gametypes\br_quest_util.gsc::searchfunc( self.team, "br_mission_pickup_tablet" );
    var_1.semtex_stuckplayer = self;
    var_1.team = self.team;
    var_1.playerlist = scripts\mp\utility\teams::getteamdata( self.team, "players" );
    var_1 hud_setup_visibility();
    var_1 scripts\mp\gametypes\br_quest_util.gsc::_id_1297D( level.black_market_quest.i_quest_time, 4 );
    scripts\mp\gametypes\br_quest_util.gsc::addquestinstance( "black_market", var_1 );
    scripts\mp\gametypes\br_quest_util.gsc::_id_13879( "black_market", self, self.team );
    var_2 = spawnstruct();
    var_2.excludedplayers = [];
    var_2.excludedplayers[0] = var_1.semtex_stuckplayer;
    var_2.ogangles = [];
    var_2.ogangles[0] = var_1.team;
    var_2._id_127D5 = scripts\mp\gametypes\br_quest_util.gsc::rewardmodifier( "black_market", scripts\mp\gametypes\br_quest_util.gsc::ringing( self.team ) );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( var_1.team, "br_supply_quest_start_team", var_2 );
    scripts\mp\gametypes\br_quest_util.gsc::displayplayersplash( var_1.semtex_stuckplayer, "br_supply_quest_start_tablet_finder", var_2 );
    level thread scripts\mp\gametypes\br_public.gsc::dmztutdropcash( "mission_blm_accept", var_1.team, var_1.semtex_stuckplayer, 1, 0.5 );
    level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "mission_blm_accept", var_1.semtex_stuckplayer, 1, 0.5 );
    var_3 = find_drop_location( var_1.semtex_stuckplayer );
    var_1 thread drop_kiosk( var_3 );
}

fail_quest( var_0 )
{
    switch ( var_0 )
    {
        case 2:
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_supply_quest_circle_failure" );
            break;
        default:
            scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_supply_quest_failure" );
            break;
    }

    level thread scripts\mp\gametypes\br_public.gsc::dmztut_luicallback( "mission_blm_fail", self.team, 1, 1 );

    if ( isdefined( self.kiosk ) )
        self.kiosk kiosk_destroy();

    self.result = "fail";
    scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

complete_quest()
{
    var_0 = spawnstruct();
    var_1 = scripts\mp\gametypes\br_quest_util.gsc::ringing( self.team );
    var_2 = scripts\mp\gametypes\br_quest_util.gsc::getquestindex( "black_market" );
    var_3 = scripts\mp\gametypes\br_quest_util.gsc::rewardtovalue( scripts\mp\gametypes\br_quest_util.gsc::rewardtotype( "black_market" ) );
    var_4 = scripts\mp\gametypes\br_alt_mode_bblitz.gsc::clear_all_remaining( self.semtex_stuckplayer );
    var_0._id_121B5 = scripts\mp\gametypes\br_quest_util.gsc::_id_121B9( var_2, var_1, var_3, undefined, var_4 );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_supply_quest_complete", var_0 );
    level thread scripts\mp\gametypes\br_public.gsc::dmztutdropcash( "mission_blm_success", self.team, self.semtex_stuckplayer, 1, 0, 0.5 );
    level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "mission_blm_success", self.semtex_stuckplayer, 1, 0, 0.5 );
    self._id_12D2D = undefined;
    self._id_12D2E = self.semtex_stuckplayer.origin;
    self._id_12D2B = self.semtex_stuckplayer.angles;
    self.result = "success";
    thread scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
}

_hud()
{

}

hud_setup_visibility()
{
    var_0 = scripts\mp\gametypes\br_quest_util.gsc::sortvalidplayersinarray( scripts\mp\utility\teams::getteamdata( self.team, "players" ) );

    foreach ( var_2 in var_0["valid"] )
        var_2 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "black_market" );

    foreach ( var_2 in var_0["invalid"] )
        var_2 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

hud_show_to_player( var_0 )
{
    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectiveshow( "black_market" );
}

hud_hide_from_player( var_0 )
{
    var_0 scripts\mp\gametypes\br_quest_util.gsc::uiobjectivehide();
}

hud_delete()
{
    foreach ( var_1 in scripts\mp\utility\teams::getteamdata( self.team, "players" ) )
        hud_hide_from_player( var_1 );
}

_event_handlers()
{

}

on_remove_quest_instance()
{
    hud_delete();
    scripts\mp\gametypes\br_quest_util.gsc::lastdirtyscore();
    scripts\mp\gametypes\br_quest_util.gsc::releaseteamonquest( self.team );
}

_id_11FF1( var_0, var_1 )
{
    on_player_removed( var_1, var_0 );
}

on_player_disconnect( var_0 )
{
    if ( var_0.team == self.team )
    {
        var_1 = scripts\mp\utility\teams::getteamdata( self.team, "players" );
        scripts\mp\gametypes\br_quest_util.gsc::getquestinstancedata( "black_market", self.team ).playerlist = var_1;

        if ( isdefined( self.crate ) && var_1.size )
            self.crate setotherent( var_1[0] );

        if ( !scripts\mp\gametypes\br_quest_util.gsc::isteamvalid( var_0.team ) )
        {
            self.result = "fail";
            scripts\mp\gametypes\br_quest_util.gsc::removequestinstance();
        }
    }

    on_player_removed( var_0 );
}

on_enter_gulag( var_0 )
{
    hud_hide_from_player( var_0 );
    scripts\mp\gametypes\br_quest_util.gsc::spawn_dogtags( var_0 );
}

on_respawn( var_0 )
{
    if ( var_0.team == self.team )
    {
        hud_show_to_player( var_0 );
        scripts\mp\gametypes\br_quest_util.gsc::_id_1336A( var_0 );
        start_player_threads( var_0 );
    }
}

on_player_removed( var_0, var_1 )
{

}

on_timer_expired()
{
    level thread scripts\mp\gametypes\br_public.gsc::dmztut_luicallback( "mission_blm_fail", self.team, 1, 1 );
    scripts\mp\gametypes\br_quest_util.gsc::displayteamsplash( self.team, "br_supply_quest_timer_expired" );
    fail_quest( 1 );
}

on_circle_tick( var_0, var_1 )
{
    if ( scripts\mp\gametypes\br_circle.gsc::getsafecircleradius() > 0 )
    {
        var_2 = squared( scripts\mp\gametypes\br_circle.gsc::getdangercircleradius() );

        if ( !isdefined( self.lastcircletick ) )
            self.lastcircletick = -1;

        var_3 = gettime();

        if ( self.lastcircletick == var_3 )
            return;

        self.lastcircletick = var_3;

        if ( isdefined( self.crate ) )
        {
            var_4 = distance2dsquared( self.crate.origin, var_0 );

            if ( var_4 > var_2 )
                fail_quest( 2 );
        }
    }
}

_drop_logic()
{

}

find_drop_location_internal( var_0 )
{
    var_1 = scripts\mp\gametypes\br_circle.gsc::getsafecircleorigin();
    var_2 = scripts\mp\gametypes\br_circle.gsc::getsafecircleradius();
    var_3 = scripts\mp\gametypes\br_circle.gsc::risk_flagspawnshiftingpercent( var_1, var_2, 0.2, 0.8, 1, 1 );
    var_4 = scripts\mp\utility\teams::getenemyplayers( var_0.team, 1 );
    var_5 = sortbydistance( var_4, var_0.origin );
    var_6 = squared( level.black_market_quest.i_max_drop_search_distance );

    if ( var_5.size > 0 && scripts\mp\gametypes\br_circle.gsc::getsafecircleradius() > 0 )
    {
        foreach ( var_8 in var_5 )
        {
            var_9 = var_8 scripts\mp\gametypes\br_public.gsc::isplayeringulag();
            var_10 = distance2dsquared( var_0.origin, var_8.origin );

            if ( isdefined( var_8 ) && !var_9 && var_10 < var_6 )
            {
                if ( distance2d( var_8.origin, var_1 ) < var_2 && scripts\mp\gametypes\br_circle.gsc::getsafecircleradius() > 0 )
                {
                    var_3 = scripts\mp\gametypes\br_circle.gsc::risk_flagspawnshiftingpercent( var_8.origin, clamp( var_2 - distance2d( var_8.origin, var_1 ), 100, level.black_market_quest.i_max_drop_search_distance ), 0.1, 0.9, 1, 1 );
                    return var_3;
                }
                else
                {
                    if ( scripts\mp\gametypes\br_circle.gsc::getsafecircleradius() > 0 )
                        continue;

                    var_3 = scripts\mp\gametypes\br_circle.gsc::risk_flagspawnshiftingpercent( var_8.origin, 4000, 0.1, 0.9, 1, 1 );
                    return var_3;
                }
            }
        }

        if ( level.black_market_quest.i_max_drop_search_distance < var_2 && distance2d( var_0.origin, var_1 ) > var_2 )
        {
            var_12 = vectortoangles( ( var_0.origin[0], var_0.origin[1], 0 ) - ( var_1[0], var_1[1], 0 ) );
            var_13 = var_2 - level.black_market_quest.i_max_drop_search_distance;
            var_14 = scripts\engine\math::vector_project_endpoint( var_1, var_12, var_13 );
            var_3 = scripts\mp\gametypes\br_circle.gsc::risk_flagspawnshiftingpercent( var_14, level.black_market_quest.i_max_drop_search_distance, 0.1, 0.7, 1, 1 );
        }
        else
        {
            var_12 = vectortoangles( ( var_0.origin[0], var_0.origin[1], 0 ) - ( var_1[0], var_1[1], 0 ) );
            var_13 = distance2d( var_1, var_0.origin );
            var_14 = scripts\engine\math::vector_project_endpoint( var_1, var_12, var_13 / 2 );
            var_3 = scripts\mp\gametypes\br_circle.gsc::risk_flagspawnshiftingpercent( var_14, clamp( var_13 / 2, 100, level.black_market_quest.i_max_drop_search_distance ), 0.1, 0.8, 1, 1 );
        }
    }
    else if ( scripts\mp\gametypes\br_circle.gsc::getsafecircleradius() > 0 )
        var_3 = scripts\mp\gametypes\br_circle.gsc::risk_flagspawnshiftingpercent( var_1, clamp( var_2, 100, level.black_market_quest.i_max_drop_search_distance ), 0.1, 0.9, 1, 1 );
    else
        var_3 = scripts\mp\gametypes\br_circle.gsc::risk_flagspawnshiftingpercent( var_0.origin, level.black_market_quest.i_max_drop_search_distance, 0.1, 0.9, 1, 1 );

    return var_3;
}

find_drop_location( var_0 )
{
    var_1 = find_drop_location_internal( var_0 );

    if ( isdefined( var_1 ) && istrue( level._id_14089 ) && isscriptabledefined() )
        var_1 = getclosestpointonnavmesh( var_1 );

    return var_1;
}

_kiosk_logic()
{

}

drop_kiosk( var_0 )
{
    wait( level.black_market_quest.f_drop_delay );
    var_1 = spawn( "script_model", ( var_0[0], var_0[1], level.black_market_quest.i_drop_height ) );
    var_1 setmodel( "lm_black_market_buy_station" );
    var_1 physicslaunchserver();
    var_1 setscriptablepartstate( "br_black_market_kiosk", "visible", 0 );
    scripts\mp\gametypes\br_pickups.gsc::_id_12B3A( var_1 );
    var_1.visible = 1;
    level.black_market_quest.wait_for_computer_power[level.black_market_quest.wait_for_computer_power.size] = var_1;
    var_1.quest = self;
    self.kiosk = var_1;
    var_1 thread kiosk_monitor_impact();
    var_2 = spawnstruct();
    var_2.excludedplayers = [];
    var_2.excludedplayers[0] = self.semtex_stuckplayer;
    var_2.ogangles = [];
    var_2.ogangles[0] = self.team;
    scripts\mp\gametypes\br_quest_util.gsc::look_at_heli( "br_supply_quest_crate_drop", var_0, level.black_market_quest.i_drop_notify_radius, level.questinfo.defaultfilter, var_2 );
    var_3 = scripts\mp\utility\player::getplayersinradius( var_0, level.black_market_quest.i_drop_notify_radius );

    foreach ( var_5 in var_3 )
    {
        if ( var_5 scripts\mp\gametypes\br_public.gsc::isplayeringulag() )
            continue;

        if ( var_5.team == self.team )
            continue;

        level thread scripts\mp\gametypes\br_public.gsc::dmztut_endgamewithreward( "mission_blm_dropnotify", var_5, 1, 0, 0.5 );
    }

    level thread scripts\mp\gametypes\br_public.gsc::dmztut_luicallback( "mission_blm_dropnotify", self.team, 1, 1 );
    wait( level.black_market_quest.f_quest_circle_delay );
    quest_circle_setup( var_0 );
    var_7 = scripts\mp\utility\teams::getteamdata( self.team, "players" );

    foreach ( var_5 in var_7 )
    {
        scripts\mp\gametypes\br_quest_util.gsc::_id_1336A( var_5 );
        start_player_threads( var_5 );
    }
}

kiosk_on_use( var_0, var_1, var_2, var_3, var_4 )
{
    if ( !isdefined( var_0.entity ) )
        return;

    if ( isdefined( var_0.entity.quest ) )
    {
        if ( var_3.team == var_0.entity.quest.team )
        {
            iprintlnbold( "Contract complete!" );
            var_0.entity.quest complete_quest();
            var_0.entity.quest = undefined;
            var_0.entity thread kiosk_destroy_after_delay();
        }
        else
            iprintlnbold( "Unauthorized!" );
    }
    else
        var_3 thread run_black_market_purchase_menu( var_0 );
}

kiosk_destroy_after_delay()
{
    level endon( "game_ended" );
    self endon( "death" );
    wait( level.black_market_quest.i_kiosk_destroy_timeout );
    kiosk_destroy();
}

kiosk_destroy()
{
    self setscriptablepartstate( "br_black_market_kiosk", "disabled" );
    self.visible = undefined;
    self.disabled = 1;
    self notify( "portableKiosk_disabled" );
    playfx( scripts\engine\utility::getfx( "vfx_br3_pbs_dmg" ), self.origin );
    playsoundatpos( self.origin, "mp_equip_destroyed" );
    scripts\mp\gametypes\br_pickups.gsc::lastunrulyscore( self );
    level.black_market_quest.wait_for_computer_power = scripts\engine\utility::array_remove( level.black_market_quest.wait_for_computer_power, self );
    self delete();
}

run_black_market_purchase_menu( var_0 )
{
    var_1 = self;
    level endon( "game_ended" );
    var_1 endon( "disconnect" );
    var_1 endon( "death" );
    var_1.delay_kick_inactive_player = var_0;
    var_1 setclientomnvar( "ui_br_purchase_file_override", 8 );
    var_1 setclientomnvar( "ui_br_purchase_killstreak_response", 0 );
    var_1 setclientomnvar( "ui_br_open_purchase_killstreak", 1 );
    var_1.armorykioskpurchaseallowed = 1;
    scripts\mp\gametypes\br_analytics.gsc::destructable_car( var_1, "menu_open" );
    var_1 thread scripts\mp\gametypes\br_armory_kiosk.gsc::apc_target_enemies( var_0 );
    var_1 setsoundsubmix( "iw8_br_plunder_kiosk_menu" );
}

kiosk_play_impact_fx( var_0, var_1, var_2, var_3 )
{
    playfx( scripts\engine\utility::getfx( "airdrop_crate_impact" ), var_0, var_1 );

    if ( var_2 < 150 )
        self playsurfacesound( "mp_care_package_low_impact", var_3 );
    else if ( var_2 < 300 )
        self playsurfacesound( "mp_care_package_med_impact", var_3 );
    else
        self playsurfacesound( "mp_care_package_high_impact", var_3 );

    self stoploopsound( "mp_care_package_drop_lp" );
}

kiosk_monitor_impact( var_0 )
{
    kiosk_monitor_impact_end();
    self endon( "monitorImpactEnd" );
    self._id_11D0E = 1;
    self playloopsound( "mp_care_package_drop_lp" );
    self physics_registerforcollisioncallback();
    kiosk_monitor_impact_internal( var_0 );

    if ( isdefined( self ) )
        thread kiosk_monitor_impact_end();
}

kiosk_monitor_impact_internal( var_0 )
{
    self endon( "death" );

    if ( isdefined( var_0 ) )
        wait( var_0 );

    var_1 = 0;

    for (;;)
    {
        self waittill( "collision", var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 );

        if ( isdefined( var_9 ) && scripts\cp_mp\killstreaks\airdrop::start_chants_on_movement( var_9 ) )
        {
            if ( var_9 scripts\cp_mp\killstreaks\helper_drone::unset_relic_noks() )
                var_9 thread scripts\cp_mp\killstreaks\helper_drone::helperdronedestroyed();
        }

        if ( gettime() - var_1 >= 200 )
        {
            var_1 = gettime();
            var_10 = physics_getsurfacetypefromflags( var_5 );
            var_11 = getsubstr( var_10["name"], 9 );

            if ( var_11 == "user_terrain1" )
                var_11 = "user_terrain_1";

            if ( var_11 == "user_terrain5" )
                var_11 = "user_terrain_5";

            kiosk_play_impact_fx( var_6, var_7, var_8, var_11 );
        }
    }
}

kiosk_monitor_impact_end()
{
    if ( !istrue( self._id_11D0E ) )
        return;

    self notify( "monitorImpactEnd" );
    self._id_11D0E = undefined;
    self stoploopsound( "mp_care_package_drop_lp" );
    self physics_unregisterforcollisioncallback();
}

_player_logic()
{

}

start_player_threads( var_0 )
{
    if ( level.black_market_quest.b_audio_ping_enabled )
        var_0 thread player_start_audio_ping( self );

    if ( level.black_market_quest.b_circle_shrinking_enabled )
        var_0 thread player_quest_circle_watcher( self );
}

player_start_audio_ping( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    var_0 endon( "marked_to_remove" );
    var_1 = squared( level.black_market_quest.f_audio_ping_min_range );
    var_2 = squared( level.black_market_quest.f_audio_ping_max_range );

    for (;;)
    {
        var_3 = distancesquared( self.origin, var_0.kiosk.origin );

        if ( var_3 <= var_2 )
        {
            self playlocalsound( "sentry_gun_beep" );
            var_4 = scripts\engine\math::remap( var_3, var_1, var_2, level.black_market_quest.f_audio_ping_min_interval, level.black_market_quest.f_audio_ping_max_interval );
            wait( clamp( var_4, level.black_market_quest.f_audio_ping_min_interval, level.black_market_quest.f_audio_ping_max_interval ) );
            continue;
        }

        wait 1.0;
    }
}

player_quest_circle_watcher( var_0 )
{
    level endon( "game_ended" );
    self endon( "death_or_disconnect" );
    var_0 endon( "marked_to_remove" );
    var_0 endon( "kiosk_found" );

    for (;;)
    {
        if ( distance2dsquared( self.origin, var_0.v_next_circle ) < var_0.i_next_circle_distance )
            var_0 quest_circle_tick();

        wait 1.0;
    }
}

_quest_circle_logic()
{

}

quest_circle_setup( var_0 )
{
    var_1 = var_0 + scripts\engine\math::random_vector_2d() * randomfloatrange( 0, level.black_market_quest.i_quest_circle_radius * 0.9 );
    var_2 = ( var_1[0], var_1[1], level.black_market_quest.i_quest_circle_radius );
    scripts\mp\gametypes\br_quest_util.gsc::init_tactical_boxes( 4, 0, 0, var_2 );
    self.a_circles = [];
    self.a_circles[0] = self.guard_spawners;
    var_3 = self.kiosk.origin - self.guard_spawners;
    var_4 = 1 / level.black_market_quest.i_quest_circle_steps;

    for ( var_5 = 1; var_5 <= level.black_market_quest.i_quest_circle_steps; var_5++ )
    {
        var_6 = self.guard_spawners + var_3 * var_4 * var_5;
        self.a_circles[var_5] = ( var_6[0], var_6[1], self.guard_spawners[2] - self.guard_spawners[2] * var_4 * var_5 );
    }

    self.i_circle_step = 0;
    self.v_next_circle = self.a_circles[1];
    self.i_next_circle_distance = squared( self.v_next_circle[2] );
}

quest_circle_tick()
{
    if ( self.i_circle_step < level.black_market_quest.i_quest_circle_steps - 1 )
    {
        self.i_circle_step++;
        self.v_next_circle = self.a_circles[self.i_circle_step + 1];
        self.i_next_circle_distance = squared( self.v_next_circle[2] );
    }
    else
        self notify( "kiosk_found" );

    scripts\mp\gametypes\br_quest_util.gsc::_id_11DAE( self.a_circles[self.i_circle_step] );
}

_____kiosk()
{

}

redacted_weapon_purchase( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    if ( istrue( var_5 ) )
    {
        var_0 scripts\mp\gametypes\br_pickups.gsc::minsteps( var_1, var_3, var_4, var_5 );
        return 1;
    }

    var_6 = var_0.currentweapon.basename;
    var_7 = spawnstruct();
    var_7.scriptablename = var_1;
    var_7.origin = var_0.origin;
    var_7.count = 0;
    var_7.maxcount = level.br_pickups.maxcounts[var_7.scriptablename];
    var_7.stackable = level.br_pickups.stackable[var_7.scriptablename];
    var_7.impulsefx = 0;

    if ( isdefined( var_3 ) )
        var_7.count = var_3;

    if ( !var_7.count && isdefined( level.br_pickups.counts[var_7.scriptablename] ) )
        var_7.count = level.br_pickups.counts[var_7.scriptablename];

    var_8 = var_0 scripts\mp\gametypes\br_pickups.gsc::cantakepickup( var_7 );

    if ( var_8 == 1 )
    {
        var_0 scripts\mp\gametypes\br_pickups.gsc::onusecompleted( var_7, var_2, undefined, var_4 );

        while ( var_0.currentweapon.basename == var_6 || var_0.currentweapon.basename == "none" )
            waitframe();

        switch ( var_0.currentweapon.basename )
        {
            case "iw8_ar_t9fastfire_mpa":
                var_0 setweaponammostock( var_0.currentweapon, 210 + weaponclipsize( var_0.currentweapon ) );
                break;
            case "iw8_sm_t9nailgun_mp":
                var_0 setweaponammostock( var_0.currentweapon, 130 + weaponclipsize( var_0.currentweapon ) );
                break;
            case "iw8_sh_t9fullauto_mp":
                var_0 setweaponammostock( var_0.currentweapon, 40 + weaponclipsize( var_0.currentweapon ) );
                break;
            case "iw8_lm_mkilo3_mp":
                var_0 setweaponammostock( var_0.currentweapon, 210 + weaponclipsize( var_0.currentweapon ) );
                break;
        }

        return 1;
    }

    return 0;
}
