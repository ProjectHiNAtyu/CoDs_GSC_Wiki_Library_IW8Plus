// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

dispenser_init()
{
    level.plunder_dispensers_data = spawnstruct();
    level.plunder_dispensers_data.iconname = "ui_mp_br_mapmenu_legend_poi_broken_atm";
    level.plunder_dispensers_data.plunderinstances = [];
    level.plunder_dispensers_data.availableyawoffsets = [];
    level.plunder_dispensers_data.next_available_id = 0;
    level.plunder_dispensers_data.conf_fx["smoke"] = loadfx( "vfx/iw8_br/island/veh/vfx_br3_aa_dmg_01.vfx" );
    level.plunder_dispensers_data.conf_fx["sparks"] = loadfx( "vfx/iw8_br/gameplay/vfx_sparks_atm.vfx" );
    level.plunder_dispensers_data.sparks_tags = [];
    level.plunder_dispensers_data.maxnumplunderobjectstodropperinterval = 50;
    scripts\engine\scriptable::scriptable_addusedcallback( ::scriptable_used );
    scripts\engine\scriptable::_id_12F57( ::scriptable_used );
    scripts\mp\gametypes\br_pickups.gsc::registerpickupremovedforspacecallback( ::removed_for_space );
}

dispenser_create( var_0, var_1, var_2, var_3 )
{
    var_4 = spawn( "script_model", var_0 );
    var_4 setmodel( "capture_point_atm" );
    var_4.angles = var_1;
    var_4.dispenserid = level.plunder_dispensers_data.next_available_id;
    level.plunder_dispensers_data.next_available_id++;
    level.plunder_dispensers_data.plunderinstances[var_4.dispenserid] = [];
    level.plunder_dispensers_data.sparks_tags[var_4.dispenserid] = [];
    var_4.objidnum = scripts\mp\objidpoolmanager::requestobjectiveid();

    if ( var_4.objidnum != -1 )
    {
        scripts\mp\objidpoolmanager::objective_add_objective( var_4.objidnum, "active", var_0, level.plunder_dispensers_data.iconname );
        scripts\mp\objidpoolmanager::update_objective_setbackground( var_4.objidnum, 1 );
        var_5 = spawnstruct();
        var_5 scripts\mp\gametypes\br_quest_util.gsc::init_tactical_boxes( 5, 0, 0, var_4.origin );
        var_5 scripts\mp\gametypes\br_quest_util.gsc::_id_1316F( 3000 );
    }

    var_4 thread dispenser_spawn_plunder( var_2, var_3 );
    var_4 thread dispenser_vfx_trigger();
    return var_4;
}

dispenser_vfx_trigger()
{
    level endon( "game_ended" );
    level endon( "force_end" );
    wait 1;

    if ( getdvarint( "scr_plunder_dispenser_smoke_enabled", 1 ) == 1 )
        playfxontag( level.plunder_dispensers_data.conf_fx["smoke"], self, "tag_origin" );

    if ( getdvarint( "scr_plunder_dispenser_sparks_enabled", 1 ) == 1 )
    {
        var_0 = spawn( "script_model", self.origin + ( 0, 25, 20 ) );
        var_0 setmodel( "tag_origin" );
        level.plunder_dispensers_data.sparks_tags[self.dispenserid] = scripts\engine\utility::array_add( level.plunder_dispensers_data.sparks_tags[self.dispenserid], var_0 );
        var_1 = spawn( "script_model", self.origin + ( 37, 0, 58 ) );
        var_1 setmodel( "tag_origin" );
        level.plunder_dispensers_data.sparks_tags[self.dispenserid] = scripts\engine\utility::array_add( level.plunder_dispensers_data.sparks_tags[self.dispenserid], var_1 );
        var_2 = spawn( "script_model", self.origin + ( 0, -30, 40 ) );
        var_2 setmodel( "tag_origin" );
        level.plunder_dispensers_data.sparks_tags[self.dispenserid] = scripts\engine\utility::array_add( level.plunder_dispensers_data.sparks_tags[self.dispenserid], var_2 );
        var_3 = 1;

        for (;;)
        {
            wait( var_3 );
            var_4 = randomintrange( 0, level.plunder_dispensers_data.sparks_tags[self.dispenserid].size );
            playfxontag( level.plunder_dispensers_data.conf_fx["sparks"], level.plunder_dispensers_data.sparks_tags[self.dispenserid][var_4], "tag_origin" );
            var_3 = randomintrange( 1, getdvarint( "scr_plunder_dispenser_max_vfx_wait", 7 ) );
        }
    }
}

dispenser_spawn_plunder( var_0, var_1 )
{
    level endon( "game_ended" );
    level endon( "force_end" );
    var_3 = isdefined( level.br_plunder ) && isdefined( level.br_plunder._id_12954 );
    var_4 = scripts\engine\utility::ter_op( var_3, level.br_plunder._id_12954[level.br_plunder._id_12954.size - 1], 100 );
    var_5 = getdvarint( "scr_plunder_dispenser_value_per_interval", var_4 );
    var_6 = 1;

    if ( var_3 )
    {
        var_7 = var_5;
        var_8 = [];
        var_6 = 0;

        for ( var_9 = level.br_plunder._id_12954.size - 1; var_9 >= 0; var_9-- )
        {
            var_8[var_9] = int( var_7 / level.br_plunder._id_12954[var_9] );
            var_8[var_9] = int( clamp( var_8[var_9], 0, level.plunder_dispensers_data.maxnumplunderobjectstodropperinterval - var_6 ) );
            var_6 = var_6 + var_8[var_9];

            if ( var_7 <= 0 || var_6 >= level.plunder_dispensers_data.maxnumplunderobjectstodropperinterval )
                break;
            else
                var_7 = var_7 - var_8[var_9] * level.br_plunder._id_12954[var_9];
        }
    }

    var_6 = clamp( var_6, 1, level.plunder_dispensers_data.maxnumplunderobjectstodropperinterval );
    var_10 = self.angles[1];
    level.plunder_dispensers_data.availableyawoffsets[self.dispenserid] = [ var_10 ];

    if ( var_1 > 1 )
    {
        var_11 = var_1 / var_6;
        var_12 = 360 / var_11;

        for ( var_9 = 1; var_9 < var_1; var_9++ )
        {
            var_13 = var_10 + var_12;
            var_10 = scripts\engine\utility::ter_op( var_13 > 360, var_13 - 360, var_13 );
            level.plunder_dispensers_data.availableyawoffsets[self.dispenserid] = scripts\engine\utility::array_add( level.plunder_dispensers_data.availableyawoffsets[self.dispenserid], var_10 );
        }
    }

    for (;;)
    {
        wait( var_0 );
        var_14 = level.plunder_dispensers_data.plunderinstances[self.dispenserid].size;

        if ( var_14 < var_1 )
        {
            var_15 = level.plunder_dispensers_data.availableyawoffsets[self.dispenserid][level.plunder_dispensers_data.availableyawoffsets[self.dispenserid].size - 1];
            level.plunder_dispensers_data.availableyawoffsets[self.dispenserid] = scripts\engine\utility::array_remove_index( level.plunder_dispensers_data.availableyawoffsets[self.dispenserid], level.plunder_dispensers_data.availableyawoffsets[self.dispenserid].size - 1 );
            var_16 = scripts\mp\gametypes\br_pickups.gsc::test_ai_anim();
            var_17 = scripts\mp\gametypes\br_plunder.gsc::dropplunderbyrarity( var_5, var_16, var_6, var_15 );

            foreach ( var_19 in var_17 )
            {
                var_19.dispenserid = self.dispenserid;
                var_19.yawused = var_15;
                level.plunder_dispensers_data.plunderinstances[self.dispenserid] = scripts\engine\utility::array_add( level.plunder_dispensers_data.plunderinstances[self.dispenserid], var_19 );
            }
        }
    }
}

scriptable_used( var_0, var_1, var_2, var_3, var_4 )
{
    if ( isdefined( var_0.dispenserid ) )
        var_0 removeinstacefromplunderdata();
}

removed_for_space()
{
    if ( isdefined( self.dispenserid ) )
        removeinstacefromplunderdata();
}

removeinstacefromplunderdata()
{
    if ( isdefined( self.dispenserid ) )
    {
        if ( isdefined( self.yawused ) )
        {
            if ( !scripts\engine\utility::array_contains( level.plunder_dispensers_data.availableyawoffsets[self.dispenserid], self.yawused ) )
                level.plunder_dispensers_data.availableyawoffsets[self.dispenserid] = scripts\engine\utility::array_add_safe( level.plunder_dispensers_data.availableyawoffsets[self.dispenserid], self.yawused );
        }
        else
        {

        }

        level.plunder_dispensers_data.plunderinstances[self.dispenserid] = scripts\engine\utility::array_remove( level.plunder_dispensers_data.plunderinstances[self.dispenserid], self );
    }
    else
    {

    }
}
