// IW8 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    scripts\mp\maps\mp_frontendc3s3\mp_frontendc3s3_precache.gsc::main();
    scripts\mp\maps\mp_frontendc3s3\gen\mp_frontendc3s3_art.gsc::main();
    level.frontendc3s3lobby = 1;
    game["attackers"] = "allies";
    game["defenders"] = "axis";
    scripts\cp_mp\frontendutils::_id_131E2();
    scripts\cp_mp\frontendutils::create_camera_position_list();
    scripts\cp_mp\frontendutils::setup_initial_entities();
    level.transition_interrupted = 0;
    var_0 = 0.1;
    scripts\engine\utility::delaythread( var_0, scripts\cp_mp\frontendutils::playersetiszombie );
    level thread init_fx();
    level.callbackplayerconnect = ::callback_frontendplayerconnect;
    level thread _id_11DB7();
}

init_fx()
{
    level._effect["ch3_s3_wave_splashes_rnr_2"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_frontend_wave_splash_rnr_2.vfx" );
    level._effect["ch3_s3_wave_splashes_rnr_3"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_frontend_wave_splash_rnr_3.vfx" );
    level._effect["ch3_s3_wave_splashes_rnr_4"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_frontend_wave_splash_rnr_4.vfx" );
    level._effect["ch3_s3_fire_spot_sm"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_spot_fire_sm.vfx" );
    level._effect["ch3_s3_fire_spot_md"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_spot_fire_md.vfx" );
    level._effect["ch3_s3_fire_spot_lrg_debris_1"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_spot_fire_lrg_debris_1.vfx" );
    level._effect["ch3_s3_fire_xlrg_damage_1"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_spot_fire_xlrg_damage_1.vfx" );
    level._effect["ch3_s3_fire_xlrg_damage_4"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_spot_fire_xlrg_damage_4.vfx" );
    level._effect["ch3_s3_fire_xlrg_damage_4a"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_spot_fire_xlrg_damage_4a.vfx" );
    level._effect["ch3_s3_fire_xlrg_damage_5"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_spot_fire_xlrg_damage_5.vfx" );
    level._effect["ch3_s3_birds_flock"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_frontend_birds_flock_1_rnr.vfx" );
    level._effect["ch3_s3_lobby_vfx"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_frontend_amb_mplobby_ch3_s3.vfx" );
    level._effect["ch3_s3b_lobby_vfx"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_frontend_amb_mplobby_ch3_s3b.vfx" );
    level._effect["ch3_s3_audio_fs_gbay_vfx"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_frontend_audio_fs_gbay.vfx" );
    level._effect["ch3_s3_audio_fs_ken_vfx"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_frontend_audio_fs_ken.vfx" );
    level._effect["ch3_s3_audio_inhale_gbay_vfx"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_frontend_audio_inhale_gbay.vfx" );
    level._effect["ch3_s3_audio_roar_gbay_vfx"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_frontend_audio_roar_gbay.vfx" );
    level._effect["ch3_s3_audio_roar_ken_vfx"] = loadfx( "vfx/iw8/level/frontend/ch3_s3/vfx_ch3s3_frontend_audio_roar_ken.vfx" );
}

callback_frontendplayerconnect()
{
    thread onplayerconnectrunonce();
    thread scripts\cp_mp\frontendutils::frontend_camera_watcher( ::gas_trap_cloud_structs );
    thread scripts\cp_mp\frontendutils::epictauntlistener();
    thread scripts\cp_mp\frontendutils::luinotifylistener();
    thread sfx_watcher();
}

onplayerconnectrunonce()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    level.playerviewowner = self;

    if ( isdefined( level.playerconnectedevents ) )
        return;

    level.playerconnectedevents = 1;
    scripts\engine\utility::init_struct_class();
    scripts\cp_mp\frontendutils::playersetisbecomingzombie();
    scripts\cp_mp\frontendutils::playersetispropgameextrainfo();
    thread scripts\cp_mp\frontendutils::_id_13205();
    scripts\cp_mp\frontendutils::initialize_transition_array();
    self enablephysicaldepthoffieldscripting();
    wait 0.5;
    scripts\mp\maps\mp_frontendc3s3\mp_frontendc3s3_fx.gsc::main();
    scripts\mp\maps\mp_frontendc3s3\mp_frontendc3s3_lighting.gsc::main();
}

sfx_watcher()
{
    level endon( "game_ended" );

    if ( !istrue( level._id_13370 ) )
        return;

    for (;;)
    {
        if ( isdefined( level.currentsectionname ) && level.currentsectionname == "squad_lobby" )
            break;

        wait 0.1;
    }

    for (;;)
    {
        wait( randomintrange( 12, 17 ) );
        var_0 = randomint( 7 );

        switch ( var_0 )
        {
            case 0:
                playfx( level._effect["ch3_s3_audio_fs_gbay_vfx"], ( -8, -197, 40 ) );
                wait( randomfloatrange( 2.0, 4.0 ) );
                playfx( level._effect["ch3_s3_audio_fs_gbay_vfx"], ( -8, -197, 40 ) );
                wait( randomfloatrange( 2.0, 3.0 ) );
                playfx( level._effect["ch3_s3_audio_fs_gbay_vfx"], ( -8, -197, 40 ) );
                wait( randomfloatrange( 1.0, 2.0 ) );
                playfx( level._effect["ch3_s3_audio_roar_gbay_vfx"], ( -8, -197, 40 ) );
                break;
            case 1:
                playfx( level._effect["ch3_s3_audio_fs_gbay_vfx"], ( -8, -197, 40 ) );
                wait( randomfloatrange( 2.0, 3.0 ) );
                playfx( level._effect["ch3_s3_audio_fs_gbay_vfx"], ( -8, -197, 40 ) );
                wait( randomfloatrange( 1.0, 2.0 ) );
                playfx( level._effect["ch3_s3_audio_roar_gbay_vfx"], ( -8, -197, 40 ) );
                break;
            case 2:
                playfx( level._effect["ch3_s3_audio_fs_ken_vfx"], ( -8, -197, 40 ) );
                wait( randomfloatrange( 1.0, 1.5 ) );
                playfx( level._effect["ch3_s3_audio_fs_ken_vfx"], ( -8, -197, 40 ) );
                wait( randomfloatrange( 1.0, 1.5 ) );
                playfx( level._effect["ch3_s3_audio_fs_ken_vfx"], ( -8, -197, 40 ) );
                wait( randomfloatrange( 1.0, 1.5 ) );
                playfx( level._effect["ch3_s3_audio_roar_ken_vfx"], ( -8, -197, 40 ) );
                break;
            case 3:
                playfx( level._effect["ch3_s3_audio_fs_ken_vfx"], ( -8, -197, 40 ) );
                wait( randomfloatrange( 1.0, 1.5 ) );
                playfx( level._effect["ch3_s3_audio_fs_ken_vfx"], ( -8, -197, 40 ) );
                wait( randomfloatrange( 1.0, 1.5 ) );
                playfx( level._effect["ch3_s3_audio_roar_ken_vfx"], ( -8, -197, 40 ) );
                break;
            case 4:
                playfx( level._effect["ch3_s3_audio_inhale_gbay_vfx"], ( -8, -197, 40 ) );
                break;
            case 5:
                playfx( level._effect["ch3_s3_audio_roar_gbay_vfx"], ( -8, -197, 40 ) );
                break;
            case 6:
                playfx( level._effect["ch3_s3_audio_roar_ken_vfx"], ( -8, -197, 40 ) );
                break;
        }

        waitframe();
    }
}

target_check_grenade()
{
    if ( isdefined( level._id_13970 ) )
        return;

    level._id_13970 = 1;
    var_0 = getentarray( "sun_frontend_seasonal_target", "targetname" );

    if ( isdefined( var_0 ) && var_0.size > 0 )
        level._id_1396F = var_0[0];
}

gas_trap_cloud_structs( var_0 )
{
    target_check_grenade();
    scripts\cp_mp\frontendutils::camera_section_change( var_0 );
    var_1 = istrue( level._id_13370 );
    var_2 = var_1 && getdvarint( "frontend_seasonal_sun", 0 ) != 0 && isdefined( level._id_1396F );

    if ( var_2 )
    {
        var_3 = "seasonal_nonwalking";

        if ( isdefined( var_0 ) && isdefined( var_0.name ) )
        {
            switch ( var_0.name )
            {
                case "squad_lobby_detail":
                case "squad_lobby":
                    var_3 = "seasonal_walking";
            }
        }

        level._id_1396F setscriptablepartstate( "sun", var_3 );
    }
}

_id_11DB7()
{
    var_0 = getent( "mp_lobby_floor_01", "targetname" );
    var_1 = getent( "mp_lobby_floor_02", "targetname" );
    var_2 = getent( "frontend_rfl_probe_01", "targetname" );
    var_3 = getent( "frontend_rfl_probe_02", "targetname" );
    var_2 linkto( var_0 );
    var_3 linkto( var_1 );
}
